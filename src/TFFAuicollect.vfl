/*  
 /  Title:      SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       October 2020, Last revised May 2022
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /  Weblink:    https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Name:       Viewport VARS Display   "CVEX"
 /
 /  Comment:    display FLAME infos as a viewport's TAG.
 /
*/


#pragma opname  "TFFAuicollect"
#pragma oplabel "TFFAuicollect"
#pragma opmininputs 1
#pragma opmaxinputs 1


void
_TFFAuicollect(string _bound_VARTYPE[]){

    string T[];
    string Ts[] = {  "linear", 
                        "sinusoidal",
                        "spherical",
                        "swirl",
                        "horseshoe",
                        "polar",
                        "handkerchief",
                        "heart",
                        "disc",
                        "spiral",
                        "hiperbolic",
                        "diamond",
                        "ex",
                        "julia",
                        "bent",
                        "waves",
                        "fisheye",
                        "popcorn",
                        "exponential",
                        "power",
                        "cosine",
                        "rings",
                        "fan",
                        "bubble",
                        "cylinder",
                        "eyefish",
                        "blur",
                        "curl",
                        "ngon",
                        "pdj",
                        "blob",
                        "juliaN",
                        "juliaScope",
                        "gaussian",
                        "fan2",
                        "rings2",
                        "rectangles",
                        "radialblur",
                        "pie",
                        "arch",
                        "tangent",
                        "square",
                        "rays",
                        "blade",
                        "secant2",
                        "twintrian",
                        "cross",
                        "disc2",
                        "supershape",
                        "flower",
                        "conic",
                        "parabola",
                        "bent2",
                        "bipolar",
                        "boarders",
                        "butterfly",
                        "cell",
                        "cpow",
                        "edisc",
                        "elliptic",
                        "noise",
                        "escher",
                        "foci",
                        "lazysusan",
                        "loonie",
                        "pre blur",
                        "modulus",
                        "oscope",
                        "polar2",
                        "popcorn2",
                        "scry",
                        "separation",
                        "split",
                        "splits",
                        "stripes",
                        "wedge",
                        "wedge julia",
                        "wedge sph",
                        "whorl",
                        "waves2",
                        "exp",
                        "log",
                        "sin",
                        "cos",
                        "tan",
                        "sec",
                        "csc",
                        "cot",
                        "sinh",
                        "cosh",
                        "tanh",
                        "sech",
                        "csch",
                        "coth",
                        "auger",
                        "flux",
                        "mobius",
                        "curve",
                        "perspective",
                        "bwraps",
                        "hemisphere",
                        "polynomial" };


    // SYS
    int FF, TM, SM, inum, iter, smmod, domb;
    FF     = chi("../dofinalflame");
    TM     = chi("../dotmglobal");
    SM     = chi("../symmetry");
    inum   = chi("../flamefunc");
    iter   = chi("../iter");
    smmod  = chi("../rotational");
    domb   = chi("../domb");

    // UI collect
    float ppw, pbw, w1, w2, w3, w4, pw1, fw1, fw2, fw3, pfw1;
    append(T, concat("[", itoa(iter), "]"));
    int xaos_chk = detail(1, "XS");
    if(xaos_chk) append(T, concat("[", "X", "]"));
    if(domb) append(T, "MB");
    if(SM){ if(!smmod) append(T, "SM3"); else append(T, "SM5"); }
    if(TM) append(T, "TM");

    for(int i=0; i<inum; ++i){

        string _IDX = itoa(i+1);
        string VAR, W, PP, PB, V1, V2, V3, V4, P1;
        if(!chi(concat("../vactive_", _IDX))) VAR = " :::::::::: ";
        else{
            w1 = chf(concat("../v1weight_", _IDX));
            if(w1!=0) V1 = Ts[atoi(chs(concat("../v1type_", _IDX)))]+":";
            else V1 = ":";
            w2 = chf(concat("../v2weight_", _IDX));
            if(w2!=0) V2 = Ts[atoi(chs(concat("../v2type_", _IDX)))]+":";
            else V2 = ":";
            w3 = chf(concat("../v3weight_", _IDX));
            if(w3!=0) V3 = Ts[atoi(chs(concat("../v3type_", _IDX)))]+":";
            else V3 = ":";
            w4 = chf(concat("../v4weight_", _IDX));
            if(w4!=0) V4 = Ts[atoi(chs(concat("../v4type_", _IDX)))]+":";
            else V4 = ":";
            float w_total = w1+w2+w3+w4;
            
            // Pre blur
            pbw = chf(concat("../preblurweight_" , _IDX));
            if(pbw>0){ if(w_total != 0) PB="*"; }
            // Pre var 
            ppw = chf(concat("../pre1weight_" , _IDX));
            if(ppw>0){ if(w_total != 0) PP = concat( "[", Ts[atoi(chs(concat("../pre1type_", _IDX)))], "] "); }
            // Post var
            pw1 = chf(concat("../p1weight_", _IDX));
            if(pw1!=0) { if(w_total != 0) P1 = concat( " [", Ts[atoi(chs(concat("../p1type_", _IDX)))], "] "); }
            // Iterator weight
            if(w_total != 0) W = sprintf( "%g", chf(concat("../iw_", _IDX))); else W = "";
            
            // Reformat iterator weight string floats
            string out[] = {};
            string SPLIT[] = split(W, ".");
            if(len(SPLIT)>1){
                int count = 1;
                foreach(string s; SPLIT){ append(out, s[:(6/count)]); count++; }
            }
            else out = SPLIT;
            W = join(out, ".");
            VAR = concat(PB, PP, V1, V2, V3, V4, P1, W);
        }
        append(T, VAR);
    }

    if(FF){

        string VAR, FV1, FV2, FV3, FP1;
        fw1 = chf("../ffv1weight");
        if(fw1!=0) FV1 = Ts[atoi(chs("../ffv1type"))]+":";
        else FV1 = ":";
        fw2 = chf("../ffv2weight");
        if(fw2!=0) FV2 = Ts[atoi(chs("../ffv2type"))]+":";
        else FV2 = ":";
        fw3 = chf("../ffv3weight");
        if(fw3!=0) FV3 = Ts[atoi(chs("../ffv3type"))];
        else FV3 = ":";
        float fw_total = fw1+fw2+fw3;
        // Post final var
        pfw1 = chf("../ffp1weight");
        if(pfw1!=0) { if(fw_total != 0) FP1 = concat("[", Ts[atoi(chs("../ffp1type"))], "]"); }
        VAR = concat(FV1, FV2, FV3, FP1);
        append(T, toupper(VAR));
        }
        
    _bound_VARTYPE = T;
}

cvex
TFFAuicollect( export string VARTYPE[] = {} )
{
    _TFFAuicollect(VARTYPE);
}
