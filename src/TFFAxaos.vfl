/*  
 /  Title:      SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       October 2020, Last revised May 2022
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       XAOS "CVEX"
 /
 /  Comment:    XOAS and Active vars.
*/


#pragma opname  "TFFAxaos"
#pragma oplabel "TFFAxaos"
#pragma opmininputs 1
#pragma opmaxinputs 1


#include <functions.h>


void
_TFFAxaos(string _bound_sIDX[]; int _bound_XS; float _bound_IW[], _bound_XST[])
{
    int inum = chi("../flamefunc");
    int va[];
    string sIDX[];
    float IW[];
    
    // ACTIVE VARS
    for(int i=0; i<inum; ++i){
        
        string iIDX = itoa(i+1);
        append(va, chi(concat("../vactive_", iIDX)));
        float IWcheck = chf(concat("../iw_", iIDX));
        if(IWcheck==0) va[i]=0;
        if(!va[i]) continue;
        append(IW, chf(concat("../iw_", iIDX)));
        append(sIDX, iIDX);
    }

    // XAOS
    int x_chk = 0;
    int res = len(sIDX);
    float XAOS_TO[];
    string xaos_tos[], xaos_tos_t[]; // For "xaos from" string

    for(int i=0; i<res; ++i){

        string varnote = chs(concat("../varnote_", sIDX[i]));
        string varxaos[] = split(varnote, ":");
        float xaos[];
        if(toupper(varxaos[0])=="XAOS"){
            pop(varxaos, 0);
            foreach(string n; varxaos){ append(xaos, max(atof(n), 0)); }
            resize(xaos, inum, 1);
            resize(varxaos, inum, "1"); // For "xaos from" string
        }
        else{ resize(xaos, inum, 1);
              resize(varxaos, inum, "1"); // For "xaos from" string
            }
        for(int j=0; j<inum; ++j){
            if(!va[j]){ pop(xaos, j); pop(varxaos, j); }
        }
        float IW_xaos[];
        for(int k=0; k<res; ++k) append(IW_xaos, IW[i]*IW[k]*xaos[k]);
        if(min(xaos)==max(xaos)){
                append(XAOS_TO, (float[])create_cdf(IW));
                append(xaos_tos, varxaos); // For "xaos from" string
            }
        else{   append(XAOS_TO, create_cdf((float[])IW_xaos)); x_chk=1;
                append(xaos_tos, varxaos); // For "xaos from" string
            }
    }

    // XAOS FROM if selected and XAOS is active
    //
    // The following code becasue I need to start from a string
    // and reformat/reconvert due to an array slice bug in houdini.
    int xm = chi("../xm");
    if(xm && x_chk){
        XAOS_transpose_s(xaos_tos, xaos_tos_t, res);
        resize(XAOS_TO, 0);
        for(int i=0; i<res; ++i){
            int sl=i*res; string xw[] = xaos_tos_t[sl:sl+res];
            float xaos_froms[];
            foreach(string n; xw){ append(xaos_froms, max(atof(n), 0)); }
            float IW_xaos[];
            for(int k=0; k<res; ++k) append(IW_xaos, IW[i]*IW[k]*xaos_froms[k]);
            append(XAOS_TO, create_cdf((float[])IW_xaos));
        }
    }

    // OUT
    _bound_sIDX = sIDX;
    _bound_IW = create_cdf(IW);
    if(x_chk){
        _bound_XS = 1;
        _bound_XST = (float[])XAOS_TO;
    }
}

cvex
TFFAxaos( export string sIDX[] = {};
          export int    XS     = 0;
          export float  IW[]   = {};
          export float  XST[]  = {}; )
{
    _TFFAxaos(sIDX, XS, IW, XST);
}
