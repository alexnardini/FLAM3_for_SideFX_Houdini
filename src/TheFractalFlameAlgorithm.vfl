/*  
 /  Title:      SideFX Houdini FRACTAL FLAME generator: 2D
 /  Author:     Alessandro Nardini
 /  date:       October 2020, Last revised May 2021
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /  Weblink:    https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Name:       TheFractalFlameAlgorithm    "VEX"
 /
 /  Comment:    The chaos game
*/

#ifndef VOP_OP
#define VOP_OP
#endif
#ifndef VOP_CVEX
#define VOP_CVEX
#endif

#pragma opname  "FLAME"
#pragma oplabel "FLAME"
#pragma opmininputs 1
#pragma opmaxinputs 1

#include <flame.h>

void _TheFractalFlameAlgorithm(int _bound_ptnum; const int _bound_VACTIVE[]; const float _bound_CDF[]; float _bound_pscale, _bound_COORD; vector _bound_P)
{

    int idx;
    float CLR, PREV_CLR; PREV_CLR = 0;
    // Build genomes
    genomeSYS SYS; SYS->genomeSYSBuild();
    genome GEM; GEM->genomeBuild(_bound_VACTIVE, SYS);
    genomeParametrics v1GMP, v2GMP, v3GMP, v4GMP, p1GMP;
    v1GMP->genomeParametricsBuild("L", GEM.sIDX, GEM.v1type);
    v2GMP->genomeParametricsBuild("L", GEM.sIDX, GEM.v2type);
    v3GMP->genomeParametricsBuild("L", GEM.sIDX, GEM.v3type);
    v4GMP->genomeParametricsBuild("L", GEM.sIDX, GEM.v4type);
    // POST VAR genome parametric
    p1GMP->genomeParametricsBuild("L", GEM.sIDX, GEM.p1type);
    // CHAOS game
    float CDF[] = _bound_CDF;
    vector __mem = biunit();
    for(int i=0; i<SYS.iter; i++){
        vector __tmp = 0;
        idx = sample_cdf(CDF, nrandom('twister'));
        if(GEM.PBW[idx]>0) VAR_PREBLUR(__mem, GEM.PBW[idx]);
        if(GEM.v1w[idx]!=0) __tmp += FLAME(v1GMP, "L", __mem, idx, GEM.v1type[idx], GEM.x[idx], GEM.y[idx], GEM.o[idx], GEM.v1w[idx]);
        if(GEM.v2w[idx]!=0) __tmp += FLAME(v2GMP, "L", __mem, idx, GEM.v2type[idx], GEM.x[idx], GEM.y[idx], GEM.o[idx], GEM.v2w[idx]);
        if(GEM.v3w[idx]!=0) __tmp += FLAME(v3GMP, "L", __mem, idx, GEM.v3type[idx], GEM.x[idx], GEM.y[idx], GEM.o[idx], GEM.v3w[idx]);
        if(GEM.v4w[idx]!=0) __tmp += FLAME(v4GMP, "L", __mem, idx, GEM.v4type[idx], GEM.x[idx], GEM.y[idx], GEM.o[idx], GEM.v4w[idx]);
        if(GEM.POSTL[idx]) affinePOST(__tmp, GEM.px[idx], GEM.py[idx], GEM.po[idx]);
        if(GEM.p1w[idx]!=0){ __mem = FLAME(p1GMP, "L", __tmp, idx, GEM.p1type[idx], GEM.x[idx], GEM.y[idx], GEM.o[idx], GEM.p1w[idx]); }
        else __mem = __tmp;
        if(SYS.TMG) __mem *= maketransform(0, 0, (vector)GEM.gtr, set(0, 0, GEM.grt), (vector)GEM.gsc, 0);
        PREV_CLR = CLR = GEM.CLR[idx] + GEM.ONEMINUS[idx] * PREV_CLR;
        
    }
    if(SYS.FF){
        vector __tmp = 0;
        if(GEM.ffv1w!=0) __tmp += FLAME(v1GMP, "F", __mem, 0, GEM.ffv1type, GEM.fx, GEM.fy, GEM.fo, GEM.ffv1w);
        if(GEM.ffv2w!=0) __tmp += FLAME(v1GMP, "F", __mem, 0, GEM.ffv2type, GEM.fx, GEM.fy, GEM.fo, GEM.ffv2w);
        if(GEM.ffv3w!=0) __tmp += FLAME(v1GMP, "F", __mem, 0, GEM.ffv3type, GEM.fx, GEM.fy, GEM.fo, GEM.ffv3w);
        if(SYS.POSTF) affinePOST(__tmp, GEM.pfx, GEM.pfy, GEM.pfo);
        if(GEM.ffp1w!=0){ __mem = FLAME(v1GMP, "F", __tmp, 0, GEM.ffp1type, GEM.fx, GEM.fy, GEM.fo, GEM.ffp1w); }
        else __mem = __tmp;
    }
    if(checkNAN_vector(SYS.DELPT, __mem)) removepoint(0, _bound_ptnum);
    else{
        if(SYS.sym) VAR_SYMMETRY(__mem, chv("../symgpivot"), SYS.sym_mode);
        float pscl = 1.0;
        if(SYS.domb) pscl *= SYS.mb_modulate;
        _bound_P = __mem;
        _bound_COORD = CLR;
        _bound_pscale = pscl;
        // Probably better to bind it into this function
        if(SYS.domb) setpointattrib(0, "mb_modulate", _bound_ptnum, SYS.mb_modulate, "set");
    }
}

cvex
TheFractalFlameAlgorithm( export int    ptnum     = 0;
                          const  int    VACTIVE[] = {};
                          const  float  CDF[] = {};
	                      export float  pscale    = 0;
	                      export float  COORD     = 0;
	                      export vector P         = 0)
{
    _TheFractalFlameAlgorithm(ptnum, VACTIVE, CDF, pscale, COORD, P);
}
