/*  
 /  Tested on:  Houdini 19.x
 /              Houdini 19.5
 /              Houdini 20.x
 /              Houdini 20.5
 /
 /  Title:      SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       Jan 2022, Last revised December 2023
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       XAOS "CVEX"
 /
 /  Comment:    XOAS, SYS and Active vars.
*/


#pragma opname  "TFFAxaos"
#pragma oplabel "TFFAxaos"
#pragma opmininputs 1
#pragma opmaxinputs 1


#include <functions.h>


void
_TFFAxaos(string _bound_sIDX[]; int _bound_SYS[], _bound_XS; float _bound_IW[], _bound_XST[])
{
    
    // SYS
    int FF, RIP, iter, MB, F3C;
    FF   = chi("../doff");
    RIP  = chi("../rip");
    MB   = chi("../domb");
    iter = chi("../iter");
    // From Fractorium: flam3 comptibility (f3c). Check inside variations.h to see both versions of each.
    // The behavior of the:
    // cos, cosh, cot, coth, csc, csch, sec, sech, sin, sinh, tan and tanh variations
    // are different in flam3/Apophysis versus Chaotica.
    //      Checked:    use the Apophysis behavior.
    //      Unchecked:  use the Chaotica behavior.
    F3C = chi("../f3c");
    // Output all SYS
    _bound_SYS = array(FF, RIP, MB, iter, F3C);

    int inum = chi("../flamefunc");
    int va[];
    float IW[];
    string sIDX[];
    
    // ACTIVE VARS
    for(int i=0; i<inum; ++i){
        
        string iIDX = itoa(i+1);
        append(va, chi(concat("../vactive_", iIDX)));
        float IWcheck = chf(concat("../iw_", iIDX));
        if(IWcheck==0) va[i]=0;
        if(!va[i]) continue;
        append(IW, chf(concat("../iw_", iIDX)));
        append(sIDX, iIDX);
    }

    // XAOS
    int x_chk = 0;
    int res = len(sIDX);
    float XAOS_TO[];
    // For "xaos FROM" string
    string xaos_tos[], xaos_tos_t[];

    for(int i=0; i<res; ++i){

        string varnote = chs(concat("../xaos_", sIDX[i]));
        string varxaos[] = split(varnote, ":");
        float xaos[];

        string varxaos_strip[] = {};
        foreach(string vx; varxaos){
            append(varxaos_strip, strip(vx));
        }
        int isXAOS = (toupper(varxaos_strip[0])=="XAOS") ? 1 : 0;
        int isDigit = 1;
        foreach( string vxs; varxaos_strip[1:]){
            string new_vxs = join(split(vxs, "."), "");
            if(isDigit && new_vxs[0]=="-" && isdigit(new_vxs[1:])){
                // If it's meant to be a valid xaos: command string
                if(isXAOS){
                    isDigit = 0;
                    warning(concat("\nNegative xaos values inside iterator: ", itoa(i+1), ".\nThis iterator will be reset to a default xaos value of 1's."));
                    break;
                    }
                }
            else if(isDigit && !isdigit(new_vxs)){
                // If it's meant to be a valid xaos: command string
                if(isXAOS){
                    isDigit = 0;
                    warning(concat("\nNon digit xaos values inside iterator: ", itoa(i+1), ".\nThis iterator will be reset to a default xaos value of 1's."));
                    break;
                }
            }
        }

        if(isXAOS && isDigit){
            pop(varxaos_strip, 0);
            foreach(string n; varxaos_strip) append(xaos, max(atof(n), 0));
            resize(xaos, inum, 1.0);
            // For "xaos FROM" string
            resize(varxaos_strip, inum, "1");
        }
        else{
            resize(xaos, inum, 1.0);
            // For "xaos FROM" string
            resize(varxaos_strip, 0);
            resize(varxaos_strip, inum, "1");
            }
        int trace = 0;
        for(int j=0; j<inum; ++j){
            if(!va[j]){ 
                pop(xaos, j-trace);
                // For "xaos FROM" string
                pop(varxaos_strip, j-trace);
                trace++;
            }
        }
        // For "xaos FROM" string
        append(xaos_tos, varxaos_strip);
        // For "xaos TO"
        float IW_xaos[]; for(int k=0; k<res; ++k) append(IW_xaos, IW[i]*IW[k]*xaos[k]);
        if(min(xaos)==max(xaos)){
            if(min(xaos) == 1) append(XAOS_TO, (float[])create_cdf(IW));
            else{ append(XAOS_TO, create_cdf((float[])IW_xaos)); if(!x_chk) x_chk=1; }
        }
        else{ append(XAOS_TO, create_cdf((float[])IW_xaos)); if(!x_chk) x_chk=1; }
    }

    /*
     / Xaos FROM - if selected and Xaos is active
     /
     / The following code becasue I need to start from a string
     / and reformat/reconvert due to a bug in Houdini.
     / [Bug ID# 124486], SideFX Support Ticket [SESI #128304]
    */
    int xm = chi("../xm");
    if(xm && x_chk){
        XAOS_transpose_s(xaos_tos, xaos_tos_t, res);
        resize(XAOS_TO, 0);
        for(int i=0; i<res; ++i){
            int sl=i*res; string xw[]=xaos_tos_t[sl:sl+res];
            float xaos_froms[]; foreach(string n; xw) append(xaos_froms, max(atof(n), 0));
            float IW_xaos[]; for(int k=0; k<res; ++k) append(IW_xaos, IW[i]*IW[k]*xaos_froms[k]);
            append(XAOS_TO, create_cdf((float[])IW_xaos));
        }
    }
    // OUT
    _bound_sIDX = sIDX;
    _bound_IW = create_cdf(IW);
    if(x_chk){
        _bound_XS = 1;
        _bound_XST = (float[])XAOS_TO;
    }
}

cvex
TFFAxaos( export string sIDX[] = {};
          export int    SYS[]  = {};
          export int    XS     = 0;
          export float  IW[]   = {};
          export float  XST[]  = {}; )
{
    _TFFAxaos(sIDX, SYS, XS, IW, XST);
}
