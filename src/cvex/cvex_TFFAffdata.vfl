/*  
 /  Tested on:  Houdini 19.x
 /              Houdini 19.5
 /              Houdini 20.x
 /              Houdini 20.5
 /
 /  Title:      FLAM3H. SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       December 2024, Last revised December 2024
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       FF DATA "CVEX"
 /
 /  Comment:    Collect all FF iterator data.
*/


#pragma opname  "TFFAxformsdata"
#pragma oplabel "TFFAxformsdata"
#pragma opmininputs 1
#pragma opmaxinputs 1

#include <functions.h>

void
_TFFAxformsdata(int _bound_PFF, _bound_fp1t, _bound_fv1t, _bound_fv2t, _bound_fP1t, _bound_fP2t; 
                float _bound_fp1w, _bound_fv1w, _bound_fv2w, _bound_fP1w, _bound_fP2w; 
                vector2 _bound_FX, _bound_FY, _bound_FO, _bound_PFX, _bound_PFY, _bound_PFO;
                )
{

    // INIT
    int PFF, fp1t, fv1t, fv2t, fP1t, fP2t;
    float fp1w, fv1w, fv2w, fP1w, fP2w;
    vector2 fx, fy, fo, pfx, pfy, pfo;
    
    // Utils
    float _a;
    vector2 _x, _y;
    matrix2 _m2;

    // FF PRE 01
    fp1w = chf("ffpre1weight");
    if(fp1w > 0) fp1t = chi("ffpre1type");
    // FF VAR 01
    fv1w = chf("ffv1weight");
    if(fv1w!= 0) fv1t = chi("ffv1type");
    // FF VAR 02
    fv2w = chf("ffv2weight");
    if(fv2w!= 0) fv2t = chi("ffv2type");
    // // FF POST VAR 01
    fP1w = chf("ffp1weight");
    if(fP1w > 0) fP1t = chi("ffp1type");
    // // FF POST VAR 02
    fP2w = chf("ffp2weight");
    if(fP2w > 0) fP2t = chi("ffp2type");
    // FF AFFINE
    _x = chu("ffx");
    _y = chu("ffy");
    _a = chf("ffang");
    if(_a!=0){
        affineRot(_m2, _x, _y, -radians(_a));
        _x = set(_m2.xx, _m2.xy);
        _y = set(_m2.yx, _m2.yy);
    }
    fx = _x; fy = _y;
    fo = chu("ffo");
    // FF POST AFFINE
    PFF = chi("ffdopost");
    if(PFF){
        _x = chu("ffpx");
        _y = chu("ffpy");
        _a = chf("ffpang");
        if(_a!=0){
            affineRot(_m2, _x, _y, -radians(_a));
            _x = set(_m2.xx, _m2.xy);
            _y = set(_m2.yx, _m2.yy);
        }
        pfx = _x; pfy = _y;
        pfo = chu("ffpo");

    }

    // OUT POST Affine toggle
    _bound_PFF = PFF;
    // OUT VARS TYPE
    _bound_fp1t = fp1t;
    _bound_fv1t = fv1t;
    _bound_fv2t = fv2t;
    _bound_fP1t = fP1t;
    _bound_fP2t = fP2t;
    // OUT VARS WEIGHTS
    _bound_fp1w = fp1w;
    _bound_fv1w = fv1w;
    _bound_fv2w = fv2w;
    _bound_fP1w = fP1w;
    _bound_fP2w = fP2w;
    // OUT PRE Affine
    _bound_FX = fx;
    _bound_FY = fy;
    _bound_FO = fo;
    // OUT POST Affine
    _bound_PFX = pfx;
    _bound_PFY = pfy;
    _bound_PFO = pfo;

}

cvex
TFFAxformsdata( export int PFF = 0;
                export int fp1t = 0;
                export int fv1t = 0;
                export int fv2t = 0;
                export int fP1t = 0;
                export int fP2t = 0;
                export float fp1w = 0;
                export float fv1w = 0;
                export float fv2w = 0;
                export float fP1w = 0;
                export float fP2w = 0;
                export vector2 FX = 0;
                export vector2 FY = 0;
                export vector2 FO = 0;
                export vector2 PFX = 0;
                export vector2 PFY = 0;
                export vector2 PFO = 0;)
{
    _TFFAxformsdata(PFF, fp1t, fv1t, fv2t, fP1t, fP2t, fp1w, fv1w, fv2w, fP1w, fP2w, FX, FY, FO, PFX, PFY, PFO);
}
