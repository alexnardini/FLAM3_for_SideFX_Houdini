/*  
 /  Tested on:  Houdini 19.x
 /              Houdini 19.5
 /              Houdini 20.x
 /
 /  Title:      SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       February 2024, Last revised February 2024
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       SENSOR INFO BBOX "CVEX"
 /
 /  Comment:    Compute camera sensor bbox data.
*/


#pragma opname  "TFFAsensorbbox"
#pragma oplabel "TFFAsensorbbox"
#pragma opmininputs 1
#pragma opmaxinputs 1


float res_weight(const float x, y, w){ return ( x * 1+(y*w) ) / ( 1920 * 1+(1080*w) ); }


struct sensor_info{
    int mode;
    float zoom;
    vector2 res;

    void sensor_info_DATA(){
        zoom = chf("flam3h_sensor_zoom");
        res  = chu("flam3h_sensor_res");
    }
}

void _TFFAsensorbbox()
{
    float sensor_zoom, resx, resy, sw, factor, scale, w, resw;
    vector pos_info, myp, myp_offset;
    vector2 sensor_res;

    sensor_info INFO;
    INFO->sensor_info_DATA();
    sensor_res = INFO.res;
    sensor_zoom = INFO.zoom;

    resx = sensor_res[0];
    resy = sensor_res[1];
    
    for(int i=0; i<2; ++i){

        if(!i){ // lower bound
            sw = 60;
            myp_offset = {0, -0.8, 1};
            pos_info = set(resx/2, -(resy/2), 0);
        }
        else{   // upper bound
            sw = 500;
            myp_offset = {0, 0.35, 0.1};
            pos_info = set(-(resx/2), resy/2, 0);
        }

        myp = 0;
        myp += myp_offset;

        w = 0.5;
        resw = res_weight(resx, resy, w);

        factor = 1.0 / float(sensor_zoom);
        scale = factor * sw;
        matrix m4_tx = maketransform(0, 0, 0, 0, factor);
        matrix m4_scale = maketransform(0, 0, 0, 0, scale*resw);

        myp = myp * m4_scale + pos_info * m4_tx;

        // Build data
        addpoint(0, myp);
    }
}


cvex
TFFAsensorbbox()
{
    _TFFAsensorbbox();
}
