/*  
 /  Tested on:  Houdini 19.x
 /              Houdini 19.5
 /              Houdini 20.x
 /
 /  Title:      SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       October 2020, Last revised February 2024
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       UICOLLECT "CVEX"
 /
 /  Comment:    UI FLAM3 viewport TAG infos collection.
*/


#pragma opname  "TFFAuicollect"
#pragma oplabel "TFFAuicollect"
#pragma opmininputs 1
#pragma opmaxinputs 1


void
_TFFAuicollect(string _bound_VARTYPE[]; int _bound_XS){

    string T[];
    string Ts[] = { "linear", 
                    "sinusoidal",
                    "spherical",
                    "swirl",
                    "horseshoe",
                    "polar",
                    "handkerchief",
                    "heart",
                    "disc",
                    "spiral",
                    "hiperbolic",
                    "diamond",
                    "ex",
                    "julia",
                    "bent",
                    "waves",
                    "fisheye",
                    "popcorn",
                    "exponential",
                    "power",
                    "cosine",
                    "rings",
                    "fan",
                    "bubble",
                    "cylinder",
                    "eyefish",
                    "blur",
                    "curl",
                    "ngon",
                    "pdj",
                    "blob",
                    "juliaN",
                    "juliaScope",
                    "gaussian_blur",
                    "fan2",
                    "rings2",
                    "rectangles",
                    "radialblur",
                    "pie",
                    "arch",
                    "tangent",
                    "square",
                    "rays",
                    "blade",
                    "secant2",
                    "twintrian",
                    "cross",
                    "disc2",
                    "supershape",
                    "flower",
                    "conic",
                    "parabola",
                    "bent2",
                    "bipolar",
                    "boarders",
                    "butterfly",
                    "cell",
                    "cpow",
                    "edisc",
                    "elliptic",
                    "noise",
                    "escher",
                    "foci",
                    "lazysusan",
                    "loonie",
                    "pre blur",
                    "modulus",
                    "oscope",
                    "polar2",
                    "popcorn2",
                    "scry",
                    "separation",
                    "split",
                    "splits",
                    "stripes",
                    "wedge",
                    "wedge julia",
                    "wedge sph",
                    "whorl",
                    "waves2",
                    "exp",
                    "log",
                    "sin",
                    "cos",
                    "tan",
                    "sec",
                    "csc",
                    "cot",
                    "sinh",
                    "cosh",
                    "tanh",
                    "sech",
                    "csch",
                    "coth",
                    "auger",
                    "flux",
                    "mobius",
                    "curve",
                    "perspective",
                    "bwraps",
                    "hemisphere",
                    "polynomial",
                    "crop",
                    "unpolar",
                    "glynnia",
                    "point_symmetry" };


    // SYS
    int SYS[], FF, RIP, MB, inum, iter, f3c, xaos_chk, xaos_mode;
    SYS = detail(1, "SYS");
    FF   = SYS[0];
    RIP  = SYS[1];  
    MB   = SYS[2];
    iter = SYS[3];
    f3c  = SYS[4];
    inum = chi("../flamefunc");
    xaos_mode = chi("../xm");

    // UI collect
    float ppw1, ppw2, pbw, w1, w2, w3, w4, pw1, fw1, fw2, fpw1, fPw1, fPw2;
    append(T, concat("[", itoa(iter), "]"));
    xaos_chk = detail(1, "XS");
    if(xaos_chk){
        if(!xaos_mode) append(T, concat("[", "Xt", "]"));   // xaos TO
        else append(T, concat("[", "fX", "]"));             // xaos FROM
    }
    if(RIP) append(T, "RIP");
    if(f3c) append(T, "F3C");
    if(MB) append(T, "MB");

    for(int i=0; i<inum; ++i){

        string _IDX = itoa(i+1);
        string VAR, W, PP[], PB, V1, V2, V3, V4, P1;
        if(!chi(concat("../vactive_", _IDX))) VAR = " :::::::::: ";
        else{
            w1 = chf(concat("../v1weight_", _IDX));
            if(w1!=0) V1 = Ts[atoi(chs(concat("../v1type_", _IDX)))]+":";
            else V1 = ":";
            w2 = chf(concat("../v2weight_", _IDX));
            if(w2!=0) V2 = Ts[atoi(chs(concat("../v2type_", _IDX)))]+":";
            else V2 = ":";
            w3 = chf(concat("../v3weight_", _IDX));
            if(w3!=0) V3 = Ts[atoi(chs(concat("../v3type_", _IDX)))]+":";
            else V3 = ":";
            w4 = chf(concat("../v4weight_", _IDX));
            if(w4!=0) V4 = Ts[atoi(chs(concat("../v4type_", _IDX)))]+":";
            else V4 = ":";
            float w_total = w1+w2+w3+w4;
            
            // Pre blur
            pbw = chf(concat("../preblurweight_" , _IDX));
            if(pbw>0){ if(w_total != 0) PB="*"; }
            // Pre var 1
            ppw1 = chf(concat("../pre1weight_" , _IDX));
            if(ppw1>0){ if(w_total != 0) append(PP, Ts[atoi(chs(concat("../pre1type_", _IDX)))]); }
            // Pre var 2
            ppw2 = chf(concat("../pre2weight_" , _IDX));
            if(ppw2>0){ if(w_total != 0) append(PP, Ts[atoi(chs(concat("../pre2type_", _IDX)))]); }
            // Build pre vars tag string
            string p_build;
            if(len(PP)==1) p_build = concat( "[ ", PP[0], " ]:");
            else if(len(PP)>1) p_build = concat( "[ ", join(PP, ", "), " ]:");
            else p_build = "";
            // Post var
            pw1 = chf(concat("../p1weight_", _IDX));
            if(pw1>0) { if(w_total != 0) P1 = concat( "[ ", Ts[atoi(chs(concat("../p1type_", _IDX)))], " ]:"); }
            // Iterator weight
            if(w_total != 0) W = sprintf( "%g", chf(concat("../iw_", _IDX))); else W = "";
            
            // Reformat iterator weight string floats
            string out[] = {};
            string SPLIT[] = split(W, ".");
            if(len(SPLIT)>1){
                int count = 1;
                foreach(string s; SPLIT){ append(out, s[:(6/count)]); count++; }
            }
            else out = SPLIT;
            W = join(out, ".");
            VAR = concat(PB, p_build, V1, V2, V3, V4, P1, W);
        }
        append(T, VAR);
        PP = {};
    }

    if(FF){

        string VAR, FV1, FV2, Fp[], FP[];
        fw1 = chf("../ffv1weight");
        if(fw1!=0) FV1 = Ts[atoi(chs("../ffv1type"))]+":";
        else FV1 = ":";
        fw2 = chf("../ffv2weight");
        if(fw2!=0) FV2 = Ts[atoi(chs("../ffv2type"))]+":";
        else FV2 = ":";
        float fw_total = fw1+fw2;
        // Pre var 01
        fpw1 = chf("../ffpre1weight");
        if(fpw1>0){ if(fw_total != 0) append(Fp, Ts[atoi(chs("../ffpre1type"))]); }
        string Fp_build;
        if(len(Fp)==1) Fp_build = concat( "[ ", Fp[0], " ]:");
        else if(len(Fp)>1) Fp_build = concat( "[", join(Fp, ", "), "]:");
        else Fp_build = "";
        // Post var 1
        fPw1 = chf("../ffp1weight");
        if(fPw1>0){ if(fw_total != 0) append(FP, Ts[atoi(chs("../ffp1type"))]); }
        // Post var 2
        fPw2 = chf("../ffp2weight");
        if(fPw2>0){ if(fw_total != 0) append(FP, Ts[atoi(chs("../ffp2type"))]); }
        // Build post vars tag string
        string FP_build;
        if(len(FP)==1) FP_build = concat( "[ ", FP[0], " ]");
        else if(len(FP)>1) FP_build = concat( "[ ", join(FP, ", "), " ]");
        else FP_build = "";

        VAR = concat(Fp_build, FV1, FV2, FP_build);
        append(T, toupper(VAR));
        }
        
    _bound_VARTYPE = T;
    _bound_XS = xaos_chk;
}

cvex
TFFAuicollect( export string VARTYPE[] = {};
               export int XS = 0; )
{
    _TFFAuicollect(VARTYPE, XS);
}
