/*  
 /  Tested on:  Houdini 19.x
 /              Houdini 19.5
 /              Houdini 20.x
 /              Houdini 20.5
 /
 /  Title:      FLAM3H. SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       October 2020, Last revised December 2024
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       THEFRACTALFLAMEALGORITHM "CVEX"
 /
 /  Comment:    Chaos game.
*/


#define PSCL 0.001
#define FL "../ff_"
#define FP "../fp1_"

#pragma opname  "FLAM3"
#pragma oplabel "FLAM3"
#pragma opmininputs 1
#pragma opmaxinputs 2

#include <functions.h>
#include <genome.h>
#include <variations.h>
#include <xaos.h>
#include <flame.h>
#include <flameff.h>

void _FLAM3(int _bound_ptnum; float _bound_pscale, _bound_clr, _bound_Alpha; vector _bound_P)
{
    // UTILS
    int RES, XS, FF, RIP, MB, F3C, ITER, idx;
    float IW[], XST[], pscl, clr, prv_clr, a, mbm; prv_clr=0; pscl=PSCL;
    vector2 tmp, mem;

    // BUILD genomes
    //
    // genome: SYS GLB
    gemSYSGLB GEMSYSGLB; GEMSYSGLB->gemSYSGLBBuild();
    /* CAST */ FF=GEMSYSGLB.FF; RIP=GEMSYSGLB.RIP; MB=GEMSYSGLB.MB; F3C=GEMSYSGLB.F3C; ITER=GEMSYSGLB.ITER;
    // genome: SYS
    gemSYS GEMSYS; GEMSYS->gemSYSBuild();
    /* CAST */ RES=GEMSYS.RES; XS=GEMSYS.XS; IW=GEMSYS.IW; XST=GEMSYS.XST;
    // genome: ITERATORS
    gem GEM; GEM->gemBuild(FF);
    // cast FLAME
    int     v1t[], v2t[], v3t[], v4t[], p1t[], p2t[], P1t[], PPL[]; /* CAST */ v1t=GEM.v1t; v2t=GEM.v2t; v3t=GEM.v3t; v4t=GEM.v4t; p1t=GEM.p1t; p2t=GEM.p2t; P1t=GEM.P1t; PPL=GEM.PPL;
    float   v1w[], v2w[], v3w[], v4w[], p1w[], p2w[], P1w[], pbw[], CLR[], OM[], A[]; /* CAST */ v1w=GEM.v1w; v2w=GEM.v2w; v3w=GEM.v3w; v4w=GEM.v4w; p1w=GEM.p1w; p2w=GEM.p2w; P1w=GEM.P1w; pbw=GEM.pbw; CLR=GEM.CLR; OM=GEM.OM; A=GEM.A;
    vector2 x[], y[], o[], px[], py[], po[]; /* CAST */ x=GEM.x; y=GEM.y; o=GEM.o; px=GEM.px; py=GEM.py; po=GEM.po;
    // cast iterator (the least needed. To be used inside the big loop)
    int _PPL;
    float  _v1w, _v2w, _v3w, _v4w, _p1w, _p2w, _P1w, _pbw, _CLR, _OM;
    vector2 _x, _y, _o;
    // cast FF
    int     fp1t, fv1t, fv2t, fP1t, fP2t, PFF; /* CAST */ fp1t=GEM.fp1t; fv1t=GEM.fv1t; fv2t=GEM.fv2t; fP1t=GEM.fP1t; fP2t=GEM.fP2t; PFF=GEM.PFF;
    float   fp1w, fv1w, fv2w, fP1w, fP2w; /* CAST */ fp1w=GEM.fp1w; fv1w=GEM.fv1w; fv2w=GEM.fv2w; fP1w=GEM.fP1w; fP2w=GEM.fP2w;
    vector2 fx, fy, fo, pfx, pfy, pfo;    /* CAST */ fx=GEM.fx; fy=GEM.fy; fo=GEM.fo; pfx=GEM.pfx; pfy=GEM.pfy; pfo=GEM.pfo;
    // BUILD samples
    mem=biunit();
    // If XAOS, pick a starting iterator from distribution
    if(XS) idx=sample_cdf((float[])IW, nrandom('twister'));
    // CHAOS game
    for(int i=0; i<ITER; ++i){

        // xaos
        idx = (XS) ? XAOS(idx, RES, XST) : sample_cdf((float[])IW, nrandom("twister"));
        // cast iterator (the least needed)
        _x=x[idx];_y=y[idx];_o=o[idx]; _pbw=pbw[idx];_p1w=p1w[idx];_p2w=p2w[idx];_v1w=v1w[idx];_v2w=v2w[idx];_v3w=v3w[idx];_v4w=v4w[idx];_P1w=P1w[idx]; _PPL=PPL[idx]; _CLR=CLR[idx];_OM=OM[idx];

        // pre affine
        affine(mem, _x, _y, _o);
        // PRE
        if(_pbw >0) V_PREBLUR(mem, _pbw);
        if(_p1w >0) mem  = FLAME(idx, p1t[idx], F3C, mem, _x, _y, _o, _p1w);
        if(_p2w >0) mem  = FLAME(idx, p2t[idx], F3C, mem, _x, _y, _o, _p2w);
        // VAR
        tmp=0;
        if(_v1w!=0) tmp += FLAME(idx, v1t[idx], F3C, mem, _x, _y, _o, _v1w);
        if(_v2w!=0) tmp += FLAME(idx, v2t[idx], F3C, mem, _x, _y, _o, _v2w);
        if(_v3w!=0) tmp += FLAME(idx, v3t[idx], F3C, mem, _x, _y, _o, _v3w);
        if(_v4w!=0) tmp += FLAME(idx, v4t[idx], F3C, mem, _x, _y, _o, _v4w);
        // POST
        if(_P1w >0) tmp  = FLAME(idx, P1t[idx], F3C, tmp, _x, _y, _o, _P1w);
        // post affine
        if(_PPL) affine(tmp, px[idx], py[idx], po[idx]);
        // clr
        prv_clr=clr=_CLR+(_OM*prv_clr);
        // out
        mem=tmp;
    }
    // FF
    if(FF){

        // FF pre affine
        affine(mem, fx, fy, fo);
        // FF PRE
        if(fp1w >0) mem  = FLAMEFF(FP, fp1t, F3C, mem, fx, fy, fo, fp1w);
        // FF VAR
        tmp=0;
        if(fv1w!=0) tmp += FLAMEFF(FL, fv1t, F3C, mem, fx, fy, fo, fv1w);
        if(fv2w!=0) tmp += FLAMEFF(FL, fv2t, F3C, mem, fx, fy, fo, fv2w);
        // FF POST
        if(fP1w >0) tmp  = FLAMEFF(FP, fP1t, F3C, tmp, fx, fy, fo, fP1w);
        if(fP2w >0) tmp  = FLAMEFF(FP, fP2t, F3C, tmp, fx, fy, fo, fP2w);
        // FF post affine
        if(PFF) affine(tmp, pfx, pfy, pfo);
        // FF out
        mem=tmp;
    }
    a=A[idx];
    if(chkPT(RIP, mem, a)) removepoint(0, _bound_ptnum);
    else{
        
        pscl*=a;
        if(MB){ mbm=detail(1, "Tstep_mult", 0); pscl*=mbm; setpointattrib(0, "mb_mod", _bound_ptnum, mbm, "set"); }
        // OUT
        _bound_P=(vector)mem;
        _bound_clr=clr;
        _bound_pscale=pscl;
        _bound_Alpha=a;
    }
}

cvex
FLAM3(  export int    ptnum  = 0;
	    export float  pscale = 0;
	    export float  clr    = 0;
        export float  Alpha  = 0;
	    export vector P      = 0)
{
    _FLAM3(ptnum, pscale, clr, Alpha, P);
}