/*  
 /  Tested on:  Houdini 19.x
 /              Houdini 19.5
 /              Houdini 20.x
 /              Houdini 20.5
 /
 /  Title:      FLAM3H. SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       November 2024, Last revised November 2024
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       FLAM3 XFORMS HANDLES TM "CVEX"
 /
 /  Comment:    xforms iterators affine handles viz.
*/



#pragma opname  "TFFAxformshandles"
#pragma oplabel "TFFAxformshandles"
#pragma opmininputs 1
#pragma opmaxinputs 2

#include <functions.h>


void _FLAM3HANDLES(const string _bound_sIDX[]; vector _bound_P)
{

    int id, PPL;
    id = detail(1, "iteration");
    vector2 mem, x, y, o, px, py, po;
    mem = (vector2)_bound_P;

    // Build genome handle
    string sIDX[]=_bound_sIDX;
    
    // GENOME
    int res = len(sIDX);
    float _a;
    vector2 _x, _y;
    matrix2 _m2;
    string idx=sIDX[id];
    
    // PRE AFFINE
    _x = chu(concat("../../x_", idx));
    _y = chu(concat("../../y_", idx));
    _a = chf(concat("../../ang_", idx));
    if(_a!=0){
        affineRot(_m2, _x, _y, -radians(_a));
        _x = set(_m2.xx, _m2.xy);
        _y = set(_m2.yx, _m2.yy);
    }
    x = _x; y = _y;
    o = chu(concat("../../o_", idx));
    // pre affine
    affine(mem, x, y, o);

    // POST AFFINE
    PPL = chi(concat("../../dopost_", idx));
    if(PPL){
        _x = chu(concat("../../px_", idx));
        _y = chu(concat("../../py_", idx));
        _a = chf(concat("../../pang_", idx));
        if(_a!=0){
            affineRot(_m2, _x, _y, -radians(_a));
            _x = set(_m2.xx, _m2.xy);
            _y = set(_m2.yx, _m2.yy);
        }
        px = _x; py = _y;
        po = chu(concat("../../po_", idx));
        // post affine
        affine(mem, px, py, po);
    }
    // OUT
    _bound_P=(vector)mem + {0, 0, 0.01}; // Adding an offset to be on top of the FLAM3H points
}

cvex
FLAM3HANDLES(   const  string sIDX[] = {};
	            export vector P      = 0)
{
    _FLAM3HANDLES(sIDX, P);
}
