/*  
 /  Tested on:  Houdini 19.x
 /              Houdini 19.5
 /              Houdini 20.x
 /              Houdini 20.5
 /
 /  Title:      FLAM3H. SideFX Houdini FLAM3: 2D
 /  Author:     Alessandro Nardini
 /  date:       November 2023, Last revised February 2024
 /
 /  info:       Based on the original: "The Fractal Flame Algorithm"
 /  Authors:    Scott Draves, Erik Reckase
 /
 /  Paper:      https://flam3.com/flame_draves.pdf
 /  Date:       September 2003, Last revised November 2008
 /
 /  Github:     https://github.com/scottdraves/flam3
 /  Date:       December 2002, Last revised May 2015
 /
 /  Name:       SENSOR "CVEX"
 /
 /  Comment:    All the render settings required by third-party programs
 /              such as Apophysis and Fractorium are stored together with the fractal flames
 /              when they are saved from FLAM3H. A portion of the render parameters
 /              deal with the camera and how the fractal flame you just saved is framed.
 /              The FLAM3H camera sensor will precisely display the image framing.
*/


#define LIMIT   1000

#pragma opname  "TFFAsensor"
#pragma oplabel "TFFAsensor"
#pragma opmininputs 1
#pragma opmaxinputs 1



struct sensor{
    vector2 res, center;
    float zoom, rot;

    void sensorDATA(){
        res = chu("outres");
        center = chu("outcenter");
        zoom = chf("outscale");
        rot = chf("outrotate");
    }
}

void _TFFAsensor()
{
    
    sensor SENSOR;
    SENSOR->sensorDATA();

    vector2 sensor_res = SENSOR.res;
    vector2 sensor_center = SENSOR.center;
    float sensor_zoom = SENSOR.zoom;
    float sensor_rot = SENSOR.rot;
    
    // FLAM3H CAMERA Sensor
    vector translation, rotation;
    translation = set(sensor_center[0], sensor_center[1], 0);
    rotation = set(0, 0, sensor_rot);
    float factor = 1.0 / sensor_zoom;
    
    matrix m4_first, m4_second, m4_first_no_scale, m4_second_sensor, m4_flip;
    m4_first = maketransform(0, 0, translation, 0, factor);
    m4_first_no_scale = maketransform(0, 0, translation, 0, 1);
    m4_second = maketransform(0, 0, 0, rotation, 1, translation);
    m4_second_sensor = maketransform(0, 0, 0, -rotation, 1, translation);
    m4_flip = maketransform(0, 0, 0, 0, set(1, -1, 1));
    
    float resx = sensor_res[0];
    float resy = sensor_res[1];
    vector _p1, _p2, _p3, _p4;
    _p1 = set(-(resx/2), resy/2, 0);
    _p2 = set(resx/2, resy/2, 0);
    _p3 = set(resx/2, -(resy/2), 0);
    _p4 = set(-(resx/2), -(resy/2), 0);
    vector _points[] = array(_p1, _p2, _p3, _p4);
    
    vector _points_tm[] = {};
    for(int i=0; i<4; i++){
        vector pos = _points[i];
        pos *= m4_first * m4_second_sensor;
        append(_points_tm, pos);
    }
    vector frame_sensor_offset = {0,0,0.1};
    for(int i=0; i<4; i++){
        vector pos = _points_tm[i];
        _points_tm[i] = pos * invert(m4_first_no_scale) * invert(m4_second_sensor) + frame_sensor_offset;
    }

    vector center_sensor = (_points_tm[0] + _points_tm[1] + _points_tm[2] + _points_tm[3])/4.0;
    matrix m4_center_sensor = maketransform(0, 0, center_sensor, 0, 1);
    vector _points_tm_out[] = {};
    for(int i=0; i<4; i++){
        vector pos = _points_tm[i];
        _points_tm[i] = pos * invert(m4_center_sensor);
        append(_points_tm_out, _points_tm[i] * (matrix(ident())*LIMIT) + frame_sensor_offset);
    }
    
    int p1, p2, p3, p4, p1_o, p2_o, p3_o, p4_o, p1_l, p2_l, p3_l, p4_l;
    p1 = addpoint(0, _points_tm[0]);
    p2 = addpoint(0, _points_tm[1]);
    p3 = addpoint(0, _points_tm[2]);
    p4 = addpoint(0, _points_tm[3]);
    p1_o = addpoint(0, _points_tm_out[0]);
    p2_o = addpoint(0, _points_tm_out[1]);
    p3_o = addpoint(0, _points_tm_out[2]);
    p4_o = addpoint(0, _points_tm_out[3]);
    p1_l = addpoint(0, _points_tm[0]);
    p2_l = addpoint(0, _points_tm[1]);
    p3_l = addpoint(0, _points_tm[2]);
    p4_l = addpoint(0, _points_tm[3]);
    
    vector color_sensor = 0.05;
    int sensor_ptn[] = array(p1, p2, p3, p4, p1_o, p2_o, p3_o, p4_o);
    foreach(int pt; sensor_ptn){
        setpointattrib(0, "Cd", pt, color_sensor, "set");
    }
    vector color_l = 1;
    int l_ptn[] = array(p1_l, p2_l, p3_l, p4_l);
    foreach(int pt; l_ptn){
        setpointattrib(0, "Cd", pt, color_l, "set");
    }
    int prim_1 = addprim(0, "poly", array(p1, p2, p2_o, p1_o, p1));
    int prim_2 = addprim(0, "poly", array(p2, p3, p3_o, p2_o, p2));
    int prim_3 = addprim(0, "poly", array(p3, p4, p4_o, p3_o, p3));
    int prim_4 = addprim(0, "poly", array(p4, p1, p1_o, p4_o, p4));
    int prim_5 = addprim(0, "polyline", array(p1_l, p2_l, p3_l, p4_l, p1_l));

    setprimattrib(0, "P", prim_1, m4_flip, "mult");
    setprimattrib(0, "P", prim_2, m4_flip, "mult");
    setprimattrib(0, "P", prim_3, m4_flip, "mult");
    setprimattrib(0, "P", prim_4, m4_flip, "mult");
    setprimattrib(0, "P", prim_5, m4_flip, "mult");

    // FLAM3H Flame points
    packedtransform(0, 0, invert(m4_first_no_scale) * m4_second * invert(m4_center_sensor) * m4_flip);
}

cvex
TFFAsensor()
{
    _TFFAsensor();
}