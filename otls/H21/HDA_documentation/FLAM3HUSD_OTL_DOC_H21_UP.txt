#icon: opdef:.?FLAM3HUSD_DOC_icon.svg
#type: node
#context: lop
#namespace: FLAM3HUSD
#internal: FLAM3HUSD
#version: 0.2.22 - Prototype

"""Simple utility node to quickly render FLAM3H(tm) fractal Flames in Solaris."""

== Welcome to FLAM3HUSD for SideFX Houdini ==
( _From H21 and up only_ )

A simple utility node to make rendering FLAM3H(tm) fractal Flames in Solaris for previews easy.<br />
It offers the very fundamental functionalities to setup your fractal Flames point cloud and start rendering with Karma within a few clicks.<br />

It has been designed to be user-friendly, simple, and intuitive.

Currently, FLAM3HUSD rely entirely on Karma CPU.

_*This tool is a prototype and it may or may not change in the future.*_<br />
_*This version is only fully compatible with FLAM3H(tm) v1.6.97 or higher.*_


@Badges

This documentation adopt the use of badges to signal some parameter's types and their scope.

_Below a list of the currently adopted badges and their meaning_:

- [Icon:BUTTONS/pane_menu] it is either a menu or a mini-menu.

- [Icon:opdef:.?icon_actionButtonSVG.svg] it is an Action button.

- [Icon:DATATYPES/boolean] it is a toggle.

- [Icon:DATATYPES/string] it is a string.

- [Icon:opdef:.?icon_optionStarBlueSVG.svg] it is a tip/information.

_Note that some parameters may use one or more of those badges_.


@Platforms

:platform:Windows
    This HDA and all its Python code have being extensively tested on Windows.

    
_The following platforms should function flawlessly, though I didn't get a chance to test every feature, so some may not function as intended._
    
:platform:Mac

:platform:Linux


@parameters FLAM3HUSD Tabs parameters

== Before you start == (BEFORESTART)

_Third-party applications use an_ [orthogonal|Wp:Orthographic_projection] _type of viewer in their editors_.<br />
_If you'd like to get close to a fractal Flame editor vibe, set the_ [viewport|Wp:Viewport] _to_: *Front* (_or press the key ((3)) while the cursor is on any viewport_). _Once you have done that, you can also go to the FLAM3HUSD preferences' tab and set the viewport color to: *Dark* (if not already)_.

_At the moment of this writing (up to H21)_:<br />
_It is suggested to go to the Houdini: *`Edit`*->*`Preferences`*->*`3Dviewport`* and set the Renderer to_ [OpenGL|Wp:OpenGL] _as it provide a better points visualization in the viewport when millions of them are displayed and/or their viewport point size is smaller than *`1`*(one). Changing the viewer renderer will require a restart of Houdini_.


    
== FLAM3HUSD system == (IMPORT)
    
~~~
:box:
    #display: inverted teal

    *FLAM3HUSD system and import options*

FLAM3HUSD documentation:
    #id: IMPORT
    [Largeicon:opdef:.?icon_F_docStarSVG.svg]
    
    Display this documentation.

    <br />

frame viewport:
    #id: SYS
    [Largeicon:opdef:.?icon_FrameRedSVG.svg]
    
    Re-frame current viewports based on a centered bounding box<br />
    and set all of them to type: *`Front`* (_for undistorted fractal Flames rendering_)
    
    This is being added because it occasionally happens that the camera viewport frames the current Flame really small due to some of its points ending up being really far away from the zero world position.

    _Additionally_:

    It will set the viewports clipping planes to proper values every time is invoked.

    <br /><br />
    [Icon:NETWORKS/lop] *Context aware*<br />
    - This option is context aware, and it will function only if a Lop viewer is available.

FLAM3H(tm) SOP path [Icon:DATATYPES/string]:
    #id: IMPORT
    Path to the FLAM3H(tm) node to be imported inside Solaris.<br />
    A default path is already provided to import the default first FLAM3H(tm) node name. Change this as needed.

    <br />
    [Icon:opdef:.?icon_optionStarBlueSVG.svg] *Tips*<br />
    - Once a valid FLAM3H(tm) node has been imported, FLAM3HUSD will take care of bulding a useful Scene Graph Tree.
    - When multiple FLAM3HUSD are created, the imported FLAM3H(tm) data will all be grouped under a common root named: *`FLAM3H`*

    <br />
    _Additionally_:<br />
    
    - If there are several FLAM3H(tm) nodes, it will always import the one that hasn't been imported by the other FLAM3HUSD nodes when you create a new instance of the FLAM3HUSD node.
    - If the current FLAM3HUSD nodes have already imported all of the exisiting FLAM3H(tm) nodes, nothing will be imported on creation, leaving the field blank.
    - On creation, any of the FLAM3H(tm) nodes with density values higher than *`50M`*(_millions_) will be skipped, leaving the field blank. The user can select to import them manually right after the FLAM3HUSD node has been created. 

    <br />

FLAM3H(tm) Next/Prev [Icon:opdef:.?icon_actionButtonSVG.svg]:
    #id: F3HNEXTPREV
    [Largeicon:opdef:.?icon_optionFlameINEntrieSVG.svg]

    Import and cycle through the available FLAM3H™ nodes instances.

    This is usefull when multiple FLAM3H™ nodes instances exist in the current Houdini session and you want to easily cycle between all of them one by one.

    _Usage_:
    - ((LMB)) to import a FLAM3H™ node or to import the *`next`* FLAM3H™ node instance. When you reach the last instance it will start again from the start (index *`0`*(Zero)).
    - ((SHIFT)) + ((LMB)) to import a FLAM3H™ node or to import the *`preview`* FLAM3H™ node instance. When you reach the first instance, it will start again from the end (last available index)

    <br />
    [Icon:opdef:.?icon_optionStarBlueSVG.svg] *Tips*<br />
    - When multiple FLAM3HUSD nodes exist already, ((LMB)) this icon without a valid import yet will import the FLAM3H™ node instance that has not been imported already by the others, otherwise it will import the first one to start with.
    - Importing FLAM3H™ node instances from this icon will not check if the imported FLAM3H™ node density value is set to more than *`50M`*(millions). It will import all density values regardless.


== Prefs == (PREFS)
    
~~~
:box:
    #display: inverted teal

    *FLAM3HUSD preferences*
    
:box:
    #display: rounded white
    
    == Viewport == (OPTIONS)
    
Dark [Icon:DATATYPES/boolean]:
    #id: PREFS
    *`Off`* by default.

    If it isn't already, change the viewport's color scheme to dark.

    If unchecked,<br />
    it will remember the color scheme for every viewport and fall back on it.
    Checking this box has no effect if the color scheme in a viewport is already dark.

    <br /><br />
    [Icon:NETWORKS/lop] *Context aware*<br />
    - This option is context aware, and it will function only if a Lop viewer is available.

    <br />
    
menu Renderer [Icon:BUTTONS/pane_menu]:
    #id: PREFS
    Select from a variety of Hydra renderers.

    At the moment the choices are:
    - *`Houdini`*<br />this can be either *`OpenGL`* or *`Vulkan`* depending on your Houdini preferences settings.
    - *`Karma CPU`* 

    <br /><br />
    [Icon:NETWORKS/lop] *Context aware*<br />
    - This option is context aware, and it will function only if a Lop viewer is available.

    <br />

Force renderer [Icon:opdef:.?icon_actionButtonSVG.svg]:
    #id: PREFS
    [Largeicon:opdef:.?icon_rendererMenuSVG.svg]
    
    _Usage_:
    - ((LMB)) to force all Lop viewers to be set to the selected renderer.

    <br /><br />
    [Icon:NETWORKS/lop] *Context aware*<br />
    - This option is context aware, and it will function only if a Lop viewer is available.
    
:box:
    #display: rounded white
    
    == Renderer: Houdini == (OPTIONSGL)
    
menu Display [Icon:BUTTONS/pane_menu]:
    #id: PREFS
    Either points or pixels should be selected for the viewport particle display mode.

    <br /><br />
    _Some of the menu labels posses a bookmark icon_:

    - [Largeicon:opdef:.?icon_optionStarWhiteSVG.svg] mark the default preset.

    <br /><br />
    [Icon:NETWORKS/lop] *Context aware*<br />
    - This option is context aware, and it will function only if a Lop viewer is available.

    <br />
    
Size:
    #id: PREFS
    The setting for viewport particle display Points. Define how big the particles appear in the viewport.

    <br /><br />
    [Icon:NETWORKS/lop] *Context aware*<br />
    - This option is context aware, and it will function only if a Lop viewer is available.

    <br />

Reset size [Icon:opdef:.?icon_actionButtonSVG.svg]:
    #id: PREFS
    [Largeicon:opdef:.?icon_optionStarWhiteSVG.svg]
    
    _Usage_:
    - ((LMB)) to reset the viewport point size to a default of *`1`*(one).

    <br /><br />
    [Icon:NETWORKS/lop] *Context aware*<br />
    - This option is context aware, and it will function only if a Lop viewer is available.
    
:box:
    #display: rounded white
    
    == Renderer: Karma CPU == (OPTIONSKARMA)
    
Points widths:
    #id: PREFS
    The point attribute *`@pscale`* will become *`@widths`* when importing FLAM3H(tm) into Stage/Solaris.
    This option, which is a multiplier, enables rapid adjustments while Karma is rendering interactively.

    When the FLAM3H(tm) shader is in use, increasing this value will increase the additive effect if the *`Emission`* and *`Transmission`* Shader parameters are being used.

    <br />

Reset points widths [Icon:opdef:.?icon_actionButtonSVG.svg]:
    #id: PREFS
    [Largeicon:opdef:.?icon_optionStarWhiteSVG.svg]
    
    _Usage_:
    - ((LMB)) to reset the point widths to a default of *`1`*(one).

    <br />

Import FLAM3H(tm) Handles [Icon:DATATYPES/boolean]:
    #id: PREFS
    *`Off`* by default.

    Import the FLAM3H(tm) xforms handles VIZ.

    To be rendered together with the fractal Flame.<br />
    Sometime you may want to render the handles purely for debug.

    <br />

    NOTE:
        - _This parameter is available only<br />from FLAM3HUSD HDA versions for Houdini 19.5 and up_.
        
    <br />

Handles widths:
    #id: PREFS
    Adjust the thickness of the FLAM3H(tm) xforms handles VIZ.<br />
    This option, which is a multiplier, enables rapid adjustments while Karma is rendering interactively.

    <br />

    NOTE:
        - _This parameter is available only<br />from FLAM3HUSD HDA versions for Houdini 19.5 and up_.

    <br />

Reset handles widths [Icon:opdef:.?icon_actionButtonSVG.svg]:
    #id: PREFS
    [Largeicon:opdef:.?icon_optionStarWhiteSVG.svg]
    
    _Usage_:
    - ((LMB)) to reset the handles curves widths to a default of *`2`*(two).

    <br />

    NOTE:
        - _This parameter is available only<br />from FLAM3HUSD HDA versions for Houdini 19.5 and up_.

    <br />

Pixel samples:
    #id: PREFS
    Set the Karma renderer pixel samples.

    <br />

Reset pixel samples [Icon:opdef:.?icon_actionButtonSVG.svg]:
    #id: PREFS
    [Largeicon:opdef:.?icon_rendererKarmaPropertiesSVG.svg]
    
    _Usage_:
    - ((LMB)) to reset the pixel samples to a default of *`128`*.

    <br />
    
menu Denoiser [Icon:BUTTONS/pane_menu]:
    #id: PREFS
    Options to choose from the available Karma denoisers.


:box:
    #display: rounded white
    
    == Renderer: Karma FLAM3H(tm) Shader == (OPTIONSF3HSHADER)

Use Shader [Icon:DATATYPES/boolean]:
    #id: PREFS
    *`Off`* by default.
    
    Use the FLAM3H(tm) custom MaterialX Shader.

    This shader allow you to perform color correction operations<br />
    and fine tune the point color values accumulation settings (_only from H20.5 and up_) on the fly.

    <br />

Reset Shader parms [Icon:opdef:.?icon_actionButtonSVG.svg]:
    #id: PREFS
    [Largeicon:opdef:.?icon_rendererKarmaPropertiesSVG.svg]
    
    _Usage_:
    - ((LMB)) to reset the FLAM3H(tm) Shader to its default values.

    <br />

Shader parameters:
    #id: PREFS
    Inside here you have various shader parameters at your disposal:

    <br />

    [Icon:opdef:.?icon_optionStarBlueSVG.svg] *Color Corrections*<br />

    The following are parameters to color correct the incoming FLAM3H(tm) points color values.

    - *`Gamma`*<br />Adjust the Gamma of the incoming points' color.
    - *`H`*<br />Adjust the Hue of the incoming points' color.
    - *`S`*<br />Adjust the Saturation of the incoming points' color.
    - *`V`*<br />Adjust the Value/intensity of the incoming points' color.

    <br />

    [Icon:opdef:.?icon_optionStarBlueSVG.svg] *Accumulation / Histogram*<br />

    The following are parameters to fine-tune the point color values accumulation<br />
    to match what third-party render engines implement as: _build a buffer with the histogram or summation/accumulation of every point in every pixel_.

    The point *`widths`* parameter amplify or weaken this effect and you should find a good balance based on each Flame and its points count.
    
    - *`Emission`*<br />Adjust the FLAM3H(tm) Shader emission.<br />Control how strong the light emitted by the fractal Flame points is.<br />Higher values increase the additive effect,<br />lower values decrease it until a value of *`0`*(Zero) which result in a full black color.
    - *`Transmission`*<br />Adjust the FLAM3H(tm) Shader transmission.<br />Control how the emission is transmitted across the fractal Flame points.<br /><br />You should increase this value to get a correct point color values accumulation effects, with a value of *`1`*(one) being the suggested one and keep the *`Emission`* parameter' value at *`1`*(one) to start with.<br /><br />When this value is higher than *`0`*(Zero) cause the resulting rendered image to loose its Alpha channel but the visual benefits are far greater.

    <br />
    
    NOTE:
        - _*`Emission`* parameter is available only<br />from FLAM3HUSD HDA versions for Houdini 19.5 and up_.

        - _*`Transmission`* parameter is available only<br />from FLAM3HUSD HDA versions for Houdini 20.5 and up_.

        _*`Emission`* and *`Transmission`* are responsable for a proper point color values accumulation and they are crucial for a correct fractal Flame look with the Karma renderer_.<br />

        _They will match what third-party render engines implement as_:<br />
        _*build a buffer with the histogram or summation/accumulation of every point in every pixel*_.

:box:
    #display: rounded white
    
    == Renderer: Karma Tone map == (OPTIONSTONEMAP)

menu Presets [Icon:BUTTONS/pane_menu]:
    #id: PREFS
    This is a parameter menu with some tone mapping presets to apply to the interactive viewport rendering image.

    <br />

    NOTE:
        - _*`Tone map`* parameter menu is available only<br />from FLAM3HUSD HDA versions for Houdini 20.5 and up_.



:box:
    #display: rounded white

@License

:box:
    #display: rounded gray
    [Icon:opdef:.?icon_optionStarBlueSVG.svg] *Notice*<br /><br />
    - This documentation is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0).<br />
    _See the file LICENSE.docs in the repository for details_.

    - The software described in this documentation is licensed separately under the GNU General Public License, version 3 (GPL-3.0).<br />

        [Icon:opdef:.?icon_optionStarBlueSVG.svg] *Software (GPL-3.0)*

        All source code and Houdini-related source materials are licensed under the<br />
        *GNU General Public License v3.0* (LICENSE).<br />

        _For this project, “source code” includes not only conventional files but also Houdini-specific assets in their editable form, such as_:
        - Digital Assets (_.otl, .hda, .hdalc, .hdanc_)
        - Node networks and sub-networks
        - Custom node definitions and parameter interfaces
        - Houdini CVEX, VEX, VOP or OpenCL code
        - Shelf tools, scripts, and presets
        - Any related configuration or scene files that represent the tool in its preferred form for making modifications

        _These are all considered part of the “preferred form of the work for making modifications” under the GPL and must be shared under the same terms_.

        _See the LICENSE file in the repository for details_.

        
:box:
    #display: rounded white
    
:box:
    #display: rounded white

@Author

= [Largeicon:opdef:.?icon_F3H_iconSVG.svg] _stands for liFe ( made in Italy )_ =
    
:box:
    #display: rounded gray
    [Icon:opdef:.?icon_optionStarBlueSVG.svg] *Mini bio*<br /><br />
    _Alessandro Nardini is an Italian artist and developer who's spent most of his career serving the entertainment industry._
    _He served many different branches of the entertainment industry's post-production,_
    _spanning feature films, games, TV/commercials, episodic series and streaming._
