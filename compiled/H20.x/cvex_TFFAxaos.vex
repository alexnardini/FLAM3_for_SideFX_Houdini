;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [8 x i8] c"../doff\00"
@1 = private constant [7 x i8] c"../rip\00"
@2 = private constant [8 x i8] c"../domb\00"
@3 = private constant [8 x i8] c"../iter\00"
@4 = private constant [7 x i8] c"../f3c\00"
@5 = private constant [13 x i8] c"../flamefunc\00"
@6 = private constant [0 x i64] zeroinitializer
@7 = private constant [0 x double] zeroinitializer
@8 = private constant [0 x i8*] zeroinitializer
@9 = private constant [1 x i8] zeroinitializer
@10 = private constant [12 x i8] c"../vactive_\00"
@11 = private constant [7 x i8] c"../iw_\00"
@12 = private constant [2 x i8] c"1\00"
@13 = private constant [107 x i8] c"\0AAll iterators are inactive or their Weight set to: 0(Zero)\0AOne iterator's Weight internally set to: 1e-08\00"
@14 = private constant [16 x i8] c"\0AZERO ITERATORS\00"
@15 = private constant [9 x i8] c"../xaos_\00"
@16 = private constant [2 x i8] c":\00"
@17 = private constant [5 x i8] c"XAOS\00"
@18 = private constant [12 x i8] c"\0AIterator: \00"
@19 = private constant [46 x i8] c" -> without a valid \22 xaos: \22 command string.\00"
@20 = private constant [2 x i8] c".\00"
@21 = private constant [2 x i8] c"-\00"
@22 = private constant [40 x i8] c"\0ANegative xaos values inside iterator: \00"
@23 = private constant [62 x i8] c".\0AThis iterator will be reset to a default xaos value of 1's.\00"
@24 = private constant [41 x i8] c"\0ANon digit xaos values inside iterator: \00"
@25 = private constant [6 x i8] c"../xm\00"
@sIDX = external global i8**
@SYS = external global i64*
@XS = external global i64
@IW = external global double*
@XST = external global double*
@26 = private constant [5 x i8] c"sIDX\00"
@27 = private constant [4 x i8] c"SYS\00"
@28 = private constant [3 x i8] c"XS\00"
@29 = private constant [3 x i8] c"IW\00"
@30 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@[S[II[F[F"(i8*** %_bound_sIDX, i64** %_bound_SYS, i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %return10 = call i64* @"array@[I:IIIII"(i64 %return, i64 %return1, i64 %return2, i64 %return3, i64 %return4)
  store i64* %return10, i64** %_bound_SYS
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter15, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter15 ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter15 ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter15 ]
  %va.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), %__llvm_entry ], [ %va.1, %iter15 ]
  %return14 = call i64 @"lt@III"(i64 %i.0, i64 %return11)
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return17 = call i8* @"itoa@SI"(i64 %output)
  %return20 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8* %return17)
  %return21 = call i64 @"chi@IS"(i8* %return20)
  %output22 = call i64* @"append@[II"(i64* %va.0, i64 %return21)
  %return24 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @11, i64 0, i64 0), i8* %return17)
  %return25 = call double @"chf@FS"(i8* %return24)
  %return27 = fcmp oeq double %return25, 0.000000e+00
  br i1 %return27, label %true, label %end29

end:                                              ; preds = %cond
  %return51 = call i64 @"len@I[F"(double* %IW.0)
  %return52 = call i64 @"eq@III"(i64 %return51, i64 0)
  %3 = icmp ne i64 %return52, 0
  br i1 %3, label %true53, label %end54

iter15:                                           ; preds = %end29, %end39
  %sIDX.1 = phi i8** [ %sIDX.0, %end29 ], [ %output47, %end39 ]
  %IW.1 = phi double* [ %IW.0, %end29 ], [ %output44, %end39 ]
  br label %cond

true:                                             ; preds = %body
  %return31 = call { i64, i64* } @"setcomp@I[III"(i64* %output22, i64 0, i64 %i.0)
  %output33 = extractvalue { i64, i64* } %return31, 1
  br label %end29

end29:                                            ; preds = %true, %body
  %va.1 = phi i64* [ %output33, %true ], [ %output22, %body ]
  %return36 = call i64 @"getcomp@I[II"(i64* %va.1, i64 %i.0)
  %return37 = call i64 @"not@II"(i64 %return36)
  %4 = icmp ne i64 %return37, 0
  br i1 %4, label %iter15, label %end39

end39:                                            ; preds = %end29
  %output44 = call double* @"append@[FF"(double* %IW.0, double %return25)
  %output47 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return17)
  br label %iter15

true53:                                           ; preds = %end
  %output56 = call double* @"append@[FF"(double* %IW.0, double 1.000000e-08)
  %output58 = call i8** @"append@[SS"(i8** %sIDX.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  %5 = icmp ne i64 %return11, 0
  br i1 %5, label %true60, label %false

end54:                                            ; preds = %true60, %false, %end
  %sIDX.2 = phi i8** [ %output58, %true60 ], [ %output58, %false ], [ %sIDX.0, %end ]
  %IW.2 = phi double* [ %output56, %true60 ], [ %output56, %false ], [ %IW.0, %end ]
  %return63 = call i64 @"len@I[S"(i8** %sIDX.2)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond65

true60:                                           ; preds = %true53
  call void @"warning@S"(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @13, i64 0, i64 0))
  br label %end54

false:                                            ; preds = %true53
  call void @"warning@S"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @14, i64 0, i64 0))
  br label %end54

cond65:                                           ; preds = %end274, %end54
  %x_chk.0 = phi i64 [ 0, %end54 ], [ %x_chk.1, %end274 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end54 ], [ %XAOS_TO.1, %end274 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %end54 ], [ %output243, %end274 ]
  %i64.0 = phi i64 [ 0, %end54 ], [ %output303, %end274 ]
  %return69 = call i64 @"lt@III"(i64 %i64.0, i64 %return63)
  %6 = icmp ne i64 %return69, 0
  br i1 %6, label %body66, label %end70

body66:                                           ; preds = %cond65
  %return74 = call i8* @"getcomp@S[SI"(i8** %sIDX.2, i64 %i64.0)
  %return75 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @15, i64 0, i64 0), i8* %return74)
  %return76 = call i8* @"chs@SS"(i8* %return75)
  %return78 = call i8** @"split@[SSS"(i8* %return76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i64 0, i64 0))
  %return80 = call i64 @"len@I[S"(i8** %return78)
  br label %cond81

end70:                                            ; preds = %cond65
  %return304 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @25, i64 0, i64 0))
  %return307 = call i64 @"and@III"(i64 %return304, i64 %x_chk.0)
  %7 = icmp ne i64 %return307, 0
  br i1 %7, label %true308, label %end309

cond81:                                           ; preds = %body82, %body66
  %varxaos_strip.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %body66 ], [ %output94, %body82 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %body66 ], [ %output96, %body82 ]
  %return85 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return80)
  %8 = icmp ne i64 %return85, 0
  br i1 %8, label %body82, label %end86

body82:                                           ; preds = %cond81
  %return90 = call i8* @"getcomp@S[SI"(i8** %return78, i64 %__impl_foreach_index.0)
  %return93 = call i8* @"strip@SS"(i8* %return90)
  %output94 = call i8** @"append@[SS"(i8** %varxaos_strip.0, i8* %return93)
  %output96 = add i64 %__impl_foreach_index.0, 1
  br label %cond81

end86:                                            ; preds = %cond81
  %return98 = call i8* @"getcomp@S[SI"(i8** %varxaos_strip.0, i64 0)
  %return99 = call i8* @"toupper@SS"(i8* %return98)
  %return100 = call i64 @"eq@ISS"(i8* %return99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i64 0, i64 0))
  %9 = icmp ne i64 %return100, 0
  %. = select i1 %9, i64 1, i64 0
  %return105 = call i64 @"not@II"(i64 %.)
  %return107 = call i64 @"and@III"(i64 %return105, i64 %return11)
  %10 = icmp ne i64 %return107, 0
  br i1 %10, label %true108, label %end109

true108:                                          ; preds = %end86
  %return113 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @18, i64 0, i64 0), i8* %return74, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @19, i64 0, i64 0))
  call void @"warning@S"(i8* %return113)
  br label %end109

end109:                                           ; preds = %true108, %end86
  %return115 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return116 = call i64 @"len@I[S"(i8** %return115)
  br label %cond117

cond117:                                          ; preds = %end142, %end109
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end109 ], [ %output165, %end142 ]
  %return121 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return116)
  %11 = icmp ne i64 %return121, 0
  br i1 %11, label %body118, label %end122

body118:                                          ; preds = %cond117
  %return125 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return127 = call i8* @"getcomp@S[SI"(i8** %return125, i64 %__impl_foreach_index_1.0)
  %return129 = call i8** @"split@[SSS"(i8* %return127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i64 0, i64 0))
  %return130 = call i8* @"join@S[SS"(i8** %return129, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @9, i64 0, i64 0))
  %return133 = call i8* @"getcomp@SSI"(i8* %return130, i64 0)
  %return134 = call i64 @"eq@ISS"(i8* %return133, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i64 0, i64 0))
  %return135 = call i64 @"and@III"(i64 1, i64 %return134)
  %return137 = call i8* @"slice@SSIIIIII"(i8* %return130, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return138 = call i64 @"isdigit@IS"(i8* %return137)
  %return139 = call i64 @"and@III"(i64 %return135, i64 %return138)
  %12 = icmp ne i64 %return139, 0
  br i1 %12, label %true140, label %false141

end122:                                           ; preds = %true158, %true144, %cond117
  %isDigit.0 = phi i64 [ 0, %true144 ], [ 0, %true158 ], [ 1, %cond117 ]
  %return168 = call i64 @"and@III"(i64 %., i64 %isDigit.0)
  %13 = icmp ne i64 %return168, 0
  br i1 %13, label %true169, label %false170

true140:                                          ; preds = %body118
  br i1 %9, label %true144, label %end142

false141:                                         ; preds = %body118
  %return152 = call i64 @"isdigit@IS"(i8* %return130)
  %return153 = call i64 @"not@II"(i64 %return152)
  %return154 = call i64 @"and@III"(i64 1, i64 %return153)
  %14 = icmp ne i64 %return154, 0
  %or.cond = and i1 %14, %9
  br i1 %or.cond, label %true158, label %end142

end142:                                           ; preds = %false141, %true140
  %output165 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond117

true144:                                          ; preds = %true140
  %return149 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @22, i64 0, i64 0), i8* %return74, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @23, i64 0, i64 0))
  call void @"warning@S"(i8* %return149)
  br label %end122

true158:                                          ; preds = %false141
  %return163 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @24, i64 0, i64 0), i8* %return74, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @23, i64 0, i64 0))
  call void @"warning@S"(i8* %return163)
  br label %end122

true169:                                          ; preds = %end122
  %return173 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.0, i64 0)
  %output175 = extractvalue { i8*, i8** } %return173, 1
  %return177 = call i64 @"len@I[S"(i8** %output175)
  br label %cond178

false170:                                         ; preds = %end122
  %output203 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), i64 %return11, double 1.000000e+00)
  %output205 = call i8** @"resize@[SI"(i8** %varxaos_strip.0, i64 0)
  %output208 = call i8** @"resize@[SIS"(i8** %output205, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  br label %end171

end171:                                           ; preds = %false170, %end183
  %xaos.0 = phi double* [ %output197, %end183 ], [ %output203, %false170 ]
  %varxaos_strip.1 = phi i8** [ %output200, %end183 ], [ %output208, %false170 ]
  br label %cond209

cond178:                                          ; preds = %body179, %true169
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %true169 ], [ %output192, %body179 ]
  %__impl_foreach_index_2.0 = phi i64 [ 0, %true169 ], [ %output194, %body179 ]
  %return182 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return177)
  %15 = icmp ne i64 %return182, 0
  br i1 %15, label %body179, label %end183

body179:                                          ; preds = %cond178
  %return187 = call i8* @"getcomp@S[SI"(i8** %output175, i64 %__impl_foreach_index_2.0)
  %return190 = call double @"atof@FS"(i8* %return187)
  %return191 = call double @"max@FFF"(double %return190, double 0.000000e+00)
  %output192 = call double* @"append@[FF"(double* %xaos.1, double %return191)
  %output194 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond178

end183:                                           ; preds = %cond178
  %output197 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return11, double 1.000000e+00)
  %output200 = call i8** @"resize@[SIS"(i8** %output175, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  br label %end171

cond209:                                          ; preds = %end221, %end171
  %xaos.2 = phi double* [ %xaos.0, %end171 ], [ %xaos.3, %end221 ]
  %varxaos_strip.2 = phi i8** [ %varxaos_strip.1, %end171 ], [ %varxaos_strip.3, %end221 ]
  %trace.0 = phi i64 [ 0, %end171 ], [ %trace.1, %end221 ]
  %j.0 = phi i64 [ 0, %end171 ], [ %output240, %end221 ]
  %return213 = call i64 @"lt@III"(i64 %j.0, i64 %return11)
  %16 = icmp ne i64 %return213, 0
  br i1 %16, label %body210, label %end214

body210:                                          ; preds = %cond209
  %return218 = call i64 @"getcomp@I[II"(i64* %va.0, i64 %j.0)
  %return219 = call i64 @"not@II"(i64 %return218)
  %17 = icmp ne i64 %return219, 0
  br i1 %17, label %true220, label %end221

end214:                                           ; preds = %cond209
  %output243 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos_strip.2)
  br label %cond244

true220:                                          ; preds = %body210
  %output225 = sub i64 %j.0, %trace.0
  %return226 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %output225)
  %output228 = extractvalue { double, double* } %return226, 1
  %return233 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.2, i64 %output225)
  %output235 = extractvalue { i8*, i8** } %return233, 1
  %output238 = add i64 %trace.0, 1
  br label %end221

end221:                                           ; preds = %true220, %body210
  %xaos.3 = phi double* [ %output228, %true220 ], [ %xaos.2, %body210 ]
  %varxaos_strip.3 = phi i8** [ %output235, %true220 ], [ %varxaos_strip.2, %body210 ]
  %trace.1 = phi i64 [ %output238, %true220 ], [ %trace.0, %body210 ]
  %output240 = add i64 %j.0, 1
  br label %cond209

cond244:                                          ; preds = %body245, %end214
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end214 ], [ %output263, %body245 ]
  %k.0 = phi i64 [ 0, %end214 ], [ %output265, %body245 ]
  %return248 = call i64 @"lt@III"(i64 %k.0, i64 %return63)
  %18 = icmp ne i64 %return248, 0
  br i1 %18, label %body245, label %end249

body245:                                          ; preds = %cond244
  %return254 = call double @"getcomp@F[FI"(double* %IW.2, i64 %i64.0)
  %return257 = call double @"getcomp@F[FI"(double* %IW.2, i64 %k.0)
  %output258 = fmul double %return254, %return257
  %return261 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output262 = fmul double %output258, %return261
  %output263 = call double* @"append@[FF"(double* %IW_xaos.0, double %output262)
  %output265 = add i64 %k.0, 1
  br label %cond244

end249:                                           ; preds = %cond244
  %return267 = call double @"min@F[F"(double* %xaos.2)
  %return269 = call double @"max@F[F"(double* %xaos.2)
  %return270 = fcmp oeq double %return267, %return269
  br i1 %return270, label %true272, label %false273

true272:                                          ; preds = %end249
  %return276 = call double @"min@F[F"(double* %xaos.2)
  %return277 = fcmp oeq double %return276, 1.000000e+00
  br i1 %return277, label %true279, label %false280

false273:                                         ; preds = %end249
  %return296 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output297 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return296)
  %return299 = call i64 @"not@II"(i64 %x_chk.0)
  %19 = icmp ne i64 %return299, 0
  br i1 %19, label %true300, label %end274

end274:                                           ; preds = %false273, %true300, %false280, %true292, %true279
  %x_chk.1 = phi i64 [ %x_chk.0, %true279 ], [ 1, %true292 ], [ %x_chk.0, %false280 ], [ 1, %true300 ], [ %x_chk.0, %false273 ]
  %XAOS_TO.1 = phi double* [ %output285, %true279 ], [ %output289, %true292 ], [ %output289, %false280 ], [ %output297, %true300 ], [ %output297, %false273 ]
  %output303 = add i64 %i64.0, 1
  br label %cond65

true279:                                          ; preds = %true272
  %return284 = call double* @"create_cdf@[F[F"(double* %IW.2)
  %output285 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return284)
  br label %end274

false280:                                         ; preds = %true272
  %return288 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output289 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return288)
  %return291 = call i64 @"not@II"(i64 %x_chk.0)
  %20 = icmp ne i64 %return291, 0
  br i1 %20, label %true292, label %end274

true292:                                          ; preds = %false280
  br label %end274

true300:                                          ; preds = %false273
  br label %end274

true308:                                          ; preds = %end70
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return63, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output313 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond315

end309:                                           ; preds = %cond315, %end70
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond315 ], [ %XAOS_TO.0, %end70 ]
  store i8** %sIDX.2, i8*** %_bound_sIDX
  %return383 = call double* @"create_cdf@[F[F"(double* %IW.2)
  store double* %return383, double** %_bound_IW
  %21 = icmp ne i64 %x_chk.0, 0
  br i1 %21, label %true385, label %end386

cond315:                                          ; preds = %end358, %true308
  %XAOS_TO.3 = phi double* [ %output313, %true308 ], [ %output378, %end358 ]
  %i314.0 = phi i64 [ 0, %true308 ], [ %output380, %end358 ]
  %return319 = call i64 @"lt@III"(i64 %i314.0, i64 %return63)
  %22 = icmp ne i64 %return319, 0
  br i1 %22, label %body316, label %end309

body316:                                          ; preds = %cond315
  %output324 = mul i64 %i314.0, %return63
  %xaos_tos_t325 = load i8**, i8*** %xaos_tos_t
  %output329 = add i64 %output324, %return63
  %return330 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t325, i64 1, i64 %output324, i64 1, i64 %output329, i64 0, i64 0)
  %return333 = call i64 @"len@I[S"(i8** %return330)
  br label %cond334

cond334:                                          ; preds = %body335, %body316
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %body316 ], [ %output348, %body335 ]
  %__impl_foreach_index_3.0 = phi i64 [ 0, %body316 ], [ %output350, %body335 ]
  %return338 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return333)
  %23 = icmp ne i64 %return338, 0
  br i1 %23, label %body335, label %end339

body335:                                          ; preds = %cond334
  %return343 = call i8* @"getcomp@S[SI"(i8** %return330, i64 %__impl_foreach_index_3.0)
  %return346 = call double @"atof@FS"(i8* %return343)
  %return347 = call double @"max@FFF"(double %return346, double 0.000000e+00)
  %output348 = call double* @"append@[FF"(double* %xaos_froms.0, double %return347)
  %output350 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond334

end339:                                           ; preds = %cond334
  br label %cond353

cond353:                                          ; preds = %body354, %end339
  %IW_xaos351.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end339 ], [ %output372, %body354 ]
  %k352.0 = phi i64 [ 0, %end339 ], [ %output374, %body354 ]
  %return357 = call i64 @"lt@III"(i64 %k352.0, i64 %return63)
  %24 = icmp ne i64 %return357, 0
  br i1 %24, label %body354, label %end358

body354:                                          ; preds = %cond353
  %return363 = call double @"getcomp@F[FI"(double* %IW.2, i64 %i314.0)
  %return366 = call double @"getcomp@F[FI"(double* %IW.2, i64 %k352.0)
  %output367 = fmul double %return363, %return366
  %return370 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k352.0)
  %output371 = fmul double %output367, %return370
  %output372 = call double* @"append@[FF"(double* %IW_xaos351.0, double %output371)
  %output374 = add i64 %k352.0, 1
  br label %cond353

end358:                                           ; preds = %cond353
  %return377 = call double* @"create_cdf@[F[F"(double* %IW_xaos351.0)
  %output378 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return377)
  %output380 = add i64 %i314.0, 1
  br label %cond315

true385:                                          ; preds = %end309
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end386

end386:                                           ; preds = %true385, %end309
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #0

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #0

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS:S"(i8*, i8*, i8*) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind
declare i64 @"isdigit@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
define void @TFFAxaos(i8** %sIDX, i64* %SYS, i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<SYS>" = alloca i64*
  %"<XS>" = alloca i64
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<sIDX>" = alloca i8**
  store i8** %sIDX, i8*** %"<sIDX>"
  store i64* %SYS, i64** %"<SYS>"
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@[S[II[F[F"(i8*** %"<sIDX>", i64** %"<SYS>", i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i8**, i8*** %"<sIDX>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i64 0, i64 0), i8** %evalue) #3
  %evalue1 = load i64*, i64** %"<SYS>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @27, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64, i64* %"<XS>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @28, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load double*, double** %"<IW>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @29, i64 0, i64 0), double* %evalue5) #3
  %evalue7 = load double*, double** %"<XST>"
  %gvalue8 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0), double* %evalue7) #3
  store i8** %gvalue, i8*** @sIDX
  store i64* %gvalue2, i64** @SYS
  store i64 %gvalue4, i64* @XS
  store double* %gvalue6, double** @IW
  store double* %gvalue8, double** @XST
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
