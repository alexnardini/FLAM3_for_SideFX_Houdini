;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [8 x i8] c"../doff\00"
@1 = private constant [7 x i8] c"../rip\00"
@2 = private constant [8 x i8] c"../domb\00"
@3 = private constant [8 x i8] c"../iter\00"
@4 = private constant [7 x i8] c"../f3c\00"
@5 = private constant [13 x i8] c"../flamefunc\00"
@6 = private constant [0 x i64] zeroinitializer
@7 = private constant [0 x double] zeroinitializer
@8 = private constant [0 x i8*] zeroinitializer
@9 = private constant [1 x i8] zeroinitializer
@10 = private constant [12 x i8] c"../vactive_\00"
@11 = private constant [7 x i8] c"../iw_\00"
@12 = private constant [2 x i8] c"1\00"
@13 = private constant [107 x i8] c"\0AAll iterators are inactive or their Weight set to: 0(Zero)\0AOne iterator's Weight internally set to: 1e-08\00"
@14 = private constant [16 x i8] c"\0AZERO ITERATORS\00"
@15 = private constant [9 x i8] c"../xaos_\00"
@16 = private constant [2 x i8] c":\00"
@17 = private constant [5 x i8] c"XAOS\00"
@18 = private constant [12 x i8] c"\0AIterator: \00"
@19 = private constant [46 x i8] c" -> without a valid \22 xaos: \22 command string.\00"
@20 = private constant [2 x i8] c".\00"
@21 = private constant [2 x i8] c"-\00"
@22 = private constant [40 x i8] c"\0ANegative xaos values inside iterator: \00"
@23 = private constant [62 x i8] c".\0AThis iterator will be reset to a default xaos value of 1's.\00"
@24 = private constant [41 x i8] c"\0ANon digit xaos values inside iterator: \00"
@25 = private constant [6 x i8] c"../xm\00"
@sIDX = external global i8**
@SYS = external global i64*
@XS = external global i64
@IW = external global double*
@XST = external global double*
@26 = private constant [5 x i8] c"sIDX\00"
@27 = private constant [4 x i8] c"SYS\00"
@28 = private constant [3 x i8] c"XS\00"
@29 = private constant [3 x i8] c"IW\00"
@30 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@[S[II[F[F"(i8*** %_bound_sIDX, i64** %_bound_SYS, i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %return10 = call i64* @"array@[I:IIIII"(i64 %return, i64 %return1, i64 %return2, i64 %return3, i64 %return4)
  store i64* %return10, i64** %_bound_SYS
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter15, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter15 ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter15 ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter15 ]
  %va.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), %__llvm_entry ], [ %va.1, %iter15 ]
  %return14 = call i64 @"lt@III"(i64 %i.0, i64 %return11)
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return17 = call i8* @"itoa@SI"(i64 %output)
  %return20 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8* %return17)
  %return21 = call i64 @"chi@IS"(i8* %return20)
  %output22 = call i64* @"append@[II"(i64* %va.0, i64 %return21)
  %return24 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @11, i64 0, i64 0), i8* %return17)
  %return25 = call double @"chf@FS"(i8* %return24)
  %return27 = fcmp oeq double %return25, 0.000000e+00
  br i1 %return27, label %true, label %end29

end:                                              ; preds = %cond
  %return51 = call i64 @"len@I[F"(double* %IW.0)
  %return52 = call i64 @"eq@III"(i64 %return51, i64 0)
  %3 = icmp ne i64 %return52, 0
  br i1 %3, label %true53, label %end54

iter15:                                           ; preds = %end29, %end39
  %sIDX.1 = phi i8** [ %sIDX.0, %end29 ], [ %output47, %end39 ]
  %IW.1 = phi double* [ %IW.0, %end29 ], [ %output44, %end39 ]
  br label %cond

true:                                             ; preds = %body
  %return31 = call { i64, i64* } @"setcomp@I[III"(i64* %output22, i64 0, i64 %i.0)
  %output33 = extractvalue { i64, i64* } %return31, 1
  br label %end29

end29:                                            ; preds = %true, %body
  %va.1 = phi i64* [ %output33, %true ], [ %output22, %body ]
  %return36 = call i64 @"getcomp@I[II"(i64* %va.1, i64 %i.0)
  %return37 = call i64 @"not@II"(i64 %return36)
  %4 = icmp ne i64 %return37, 0
  br i1 %4, label %iter15, label %end39

end39:                                            ; preds = %end29
  %output44 = call double* @"append@[FF"(double* %IW.0, double %return25)
  %output47 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return17)
  br label %iter15

true53:                                           ; preds = %end
  %output56 = call double* @"append@[FF"(double* %IW.0, double 1.000000e-08)
  %output58 = call i8** @"append@[SS"(i8** %sIDX.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  %5 = icmp ne i64 %return11, 0
  br i1 %5, label %true60, label %false

end54:                                            ; preds = %true60, %false, %end
  %sIDX.2 = phi i8** [ %output58, %true60 ], [ %output58, %false ], [ %sIDX.0, %end ]
  %IW.2 = phi double* [ %output56, %true60 ], [ %output56, %false ], [ %IW.0, %end ]
  %return63 = call i64 @"len@I[S"(i8** %sIDX.2)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond65

true60:                                           ; preds = %true53
  call void @"warning@S"(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @13, i64 0, i64 0))
  br label %end54

false:                                            ; preds = %true53
  call void @"warning@S"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @14, i64 0, i64 0))
  br label %end54

cond65:                                           ; preds = %end275, %end54
  %x_chk.0 = phi i64 [ 0, %end54 ], [ %x_chk.1, %end275 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end54 ], [ %XAOS_TO.1, %end275 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %end54 ], [ %output244, %end275 ]
  %i64.0 = phi i64 [ 0, %end54 ], [ %output304, %end275 ]
  %return69 = call i64 @"lt@III"(i64 %i64.0, i64 %return63)
  %6 = icmp ne i64 %return69, 0
  br i1 %6, label %body66, label %end70

body66:                                           ; preds = %cond65
  %return74 = call i8* @"getcomp@S[SI"(i8** %sIDX.2, i64 %i64.0)
  %return75 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @15, i64 0, i64 0), i8* %return74)
  %return76 = call i8* @"chs@SS"(i8* %return75)
  %return78 = call i8** @"split@[SSS"(i8* %return76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i64 0, i64 0))
  %return80 = call i64 @"len@I[S"(i8** %return78)
  br label %cond81

end70:                                            ; preds = %cond65
  %return305 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @25, i64 0, i64 0))
  %return308 = call i64 @"and@III"(i64 %return305, i64 %x_chk.0)
  %7 = icmp ne i64 %return308, 0
  br i1 %7, label %true309, label %end310

cond81:                                           ; preds = %body82, %body66
  %varxaos_strip.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %body66 ], [ %output94, %body82 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %body66 ], [ %output96, %body82 ]
  %return85 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return80)
  %8 = icmp ne i64 %return85, 0
  br i1 %8, label %body82, label %end86

body82:                                           ; preds = %cond81
  %return90 = call i8* @"getcomp@S[SI"(i8** %return78, i64 %__impl_foreach_index.0)
  %return93 = call i8* @"strip@SS"(i8* %return90)
  %output94 = call i8** @"append@[SS"(i8** %varxaos_strip.0, i8* %return93)
  %output96 = add i64 %__impl_foreach_index.0, 1
  br label %cond81

end86:                                            ; preds = %cond81
  %return98 = call i8* @"getcomp@S[SI"(i8** %varxaos_strip.0, i64 0)
  %return99 = call i8* @"toupper@SS"(i8* %return98)
  %return100 = call i64 @"eq@ISS"(i8* %return99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i64 0, i64 0))
  %9 = icmp ne i64 %return100, 0
  %. = select i1 %9, i64 1, i64 0
  %return105 = call i64 @"not@II"(i64 %.)
  %10 = icmp ne i64 %return105, 0
  %11 = icmp ne i64 %return11, 0
  %or.cond = and i1 %10, %11
  br i1 %or.cond, label %true109, label %end107

end107:                                           ; preds = %true109, %end86
  %return116 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return117 = call i64 @"len@I[S"(i8** %return116)
  br label %cond118

true109:                                          ; preds = %end86
  %output112 = add i64 %i64.0, 1
  %return113 = call i8* @"itoa@SI"(i64 %output112)
  %return114 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @18, i64 0, i64 0), i8* %return113, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @19, i64 0, i64 0))
  call void @"warning@S"(i8* %return114)
  br label %end107

cond118:                                          ; preds = %end143, %end107
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end107 ], [ %output166, %end143 ]
  %return122 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return117)
  %12 = icmp ne i64 %return122, 0
  br i1 %12, label %body119, label %end123

body119:                                          ; preds = %cond118
  %return126 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return128 = call i8* @"getcomp@S[SI"(i8** %return126, i64 %__impl_foreach_index_1.0)
  %return130 = call i8** @"split@[SSS"(i8* %return128, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i64 0, i64 0))
  %return131 = call i8* @"join@S[SS"(i8** %return130, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @9, i64 0, i64 0))
  %return134 = call i8* @"getcomp@SSI"(i8* %return131, i64 0)
  %return135 = call i64 @"eq@ISS"(i8* %return134, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i64 0, i64 0))
  %return136 = call i64 @"and@III"(i64 1, i64 %return135)
  %return138 = call i8* @"slice@SSIIIIII"(i8* %return131, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return139 = call i64 @"isdigit@IS"(i8* %return138)
  %return140 = call i64 @"and@III"(i64 %return136, i64 %return139)
  %13 = icmp ne i64 %return140, 0
  br i1 %13, label %true141, label %false142

end123:                                           ; preds = %true159, %true145, %cond118
  %isDigit.0 = phi i64 [ 0, %true145 ], [ 0, %true159 ], [ 1, %cond118 ]
  %return169 = call i64 @"and@III"(i64 %., i64 %isDigit.0)
  %14 = icmp ne i64 %return169, 0
  br i1 %14, label %true170, label %false171

true141:                                          ; preds = %body119
  br i1 %9, label %true145, label %end143

false142:                                         ; preds = %body119
  %return153 = call i64 @"isdigit@IS"(i8* %return131)
  %return154 = call i64 @"not@II"(i64 %return153)
  %return155 = call i64 @"and@III"(i64 1, i64 %return154)
  %15 = icmp ne i64 %return155, 0
  %or.cond391 = and i1 %15, %9
  br i1 %or.cond391, label %true159, label %end143

end143:                                           ; preds = %false142, %true141
  %output166 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond118

true145:                                          ; preds = %true141
  %output148 = add i64 %i64.0, 1
  %return149 = call i8* @"itoa@SI"(i64 %output148)
  %return150 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @22, i64 0, i64 0), i8* %return149, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @23, i64 0, i64 0))
  call void @"warning@S"(i8* %return150)
  br label %end123

true159:                                          ; preds = %false142
  %output162 = add i64 %i64.0, 1
  %return163 = call i8* @"itoa@SI"(i64 %output162)
  %return164 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @24, i64 0, i64 0), i8* %return163, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @23, i64 0, i64 0))
  call void @"warning@S"(i8* %return164)
  br label %end123

true170:                                          ; preds = %end123
  %return174 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.0, i64 0)
  %output176 = extractvalue { i8*, i8** } %return174, 1
  %return178 = call i64 @"len@I[S"(i8** %output176)
  br label %cond179

false171:                                         ; preds = %end123
  %output204 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), i64 %return11, double 1.000000e+00)
  %output206 = call i8** @"resize@[SI"(i8** %varxaos_strip.0, i64 0)
  %output209 = call i8** @"resize@[SIS"(i8** %output206, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  br label %end172

end172:                                           ; preds = %false171, %end184
  %xaos.0 = phi double* [ %output198, %end184 ], [ %output204, %false171 ]
  %varxaos_strip.1 = phi i8** [ %output201, %end184 ], [ %output209, %false171 ]
  br label %cond210

cond179:                                          ; preds = %body180, %true170
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %true170 ], [ %output193, %body180 ]
  %__impl_foreach_index_2.0 = phi i64 [ 0, %true170 ], [ %output195, %body180 ]
  %return183 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return178)
  %16 = icmp ne i64 %return183, 0
  br i1 %16, label %body180, label %end184

body180:                                          ; preds = %cond179
  %return188 = call i8* @"getcomp@S[SI"(i8** %output176, i64 %__impl_foreach_index_2.0)
  %return191 = call double @"atof@FS"(i8* %return188)
  %return192 = call double @"max@FFF"(double %return191, double 0.000000e+00)
  %output193 = call double* @"append@[FF"(double* %xaos.1, double %return192)
  %output195 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond179

end184:                                           ; preds = %cond179
  %output198 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return11, double 1.000000e+00)
  %output201 = call i8** @"resize@[SIS"(i8** %output176, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  br label %end172

cond210:                                          ; preds = %end222, %end172
  %xaos.2 = phi double* [ %xaos.0, %end172 ], [ %xaos.3, %end222 ]
  %varxaos_strip.2 = phi i8** [ %varxaos_strip.1, %end172 ], [ %varxaos_strip.3, %end222 ]
  %trace.0 = phi i64 [ 0, %end172 ], [ %trace.1, %end222 ]
  %j.0 = phi i64 [ 0, %end172 ], [ %output241, %end222 ]
  %return214 = call i64 @"lt@III"(i64 %j.0, i64 %return11)
  %17 = icmp ne i64 %return214, 0
  br i1 %17, label %body211, label %end215

body211:                                          ; preds = %cond210
  %return219 = call i64 @"getcomp@I[II"(i64* %va.0, i64 %j.0)
  %return220 = call i64 @"not@II"(i64 %return219)
  %18 = icmp ne i64 %return220, 0
  br i1 %18, label %true221, label %end222

end215:                                           ; preds = %cond210
  %output244 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos_strip.2)
  br label %cond245

true221:                                          ; preds = %body211
  %output226 = sub i64 %j.0, %trace.0
  %return227 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %output226)
  %output229 = extractvalue { double, double* } %return227, 1
  %return234 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.2, i64 %output226)
  %output236 = extractvalue { i8*, i8** } %return234, 1
  %output239 = add i64 %trace.0, 1
  br label %end222

end222:                                           ; preds = %true221, %body211
  %xaos.3 = phi double* [ %output229, %true221 ], [ %xaos.2, %body211 ]
  %varxaos_strip.3 = phi i8** [ %output236, %true221 ], [ %varxaos_strip.2, %body211 ]
  %trace.1 = phi i64 [ %output239, %true221 ], [ %trace.0, %body211 ]
  %output241 = add i64 %j.0, 1
  br label %cond210

cond245:                                          ; preds = %body246, %end215
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end215 ], [ %output264, %body246 ]
  %k.0 = phi i64 [ 0, %end215 ], [ %output266, %body246 ]
  %return249 = call i64 @"lt@III"(i64 %k.0, i64 %return63)
  %19 = icmp ne i64 %return249, 0
  br i1 %19, label %body246, label %end250

body246:                                          ; preds = %cond245
  %return255 = call double @"getcomp@F[FI"(double* %IW.2, i64 %i64.0)
  %return258 = call double @"getcomp@F[FI"(double* %IW.2, i64 %k.0)
  %output259 = fmul double %return255, %return258
  %return262 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output263 = fmul double %output259, %return262
  %output264 = call double* @"append@[FF"(double* %IW_xaos.0, double %output263)
  %output266 = add i64 %k.0, 1
  br label %cond245

end250:                                           ; preds = %cond245
  %return268 = call double @"min@F[F"(double* %xaos.2)
  %return270 = call double @"max@F[F"(double* %xaos.2)
  %return271 = fcmp oeq double %return268, %return270
  br i1 %return271, label %true273, label %false274

true273:                                          ; preds = %end250
  %return277 = call double @"min@F[F"(double* %xaos.2)
  %return278 = fcmp oeq double %return277, 1.000000e+00
  br i1 %return278, label %true280, label %false281

false274:                                         ; preds = %end250
  %return297 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output298 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return297)
  %return300 = call i64 @"not@II"(i64 %x_chk.0)
  %20 = icmp ne i64 %return300, 0
  br i1 %20, label %true301, label %end275

end275:                                           ; preds = %false274, %true301, %false281, %true293, %true280
  %x_chk.1 = phi i64 [ %x_chk.0, %true280 ], [ 1, %true293 ], [ %x_chk.0, %false281 ], [ 1, %true301 ], [ %x_chk.0, %false274 ]
  %XAOS_TO.1 = phi double* [ %output286, %true280 ], [ %output290, %true293 ], [ %output290, %false281 ], [ %output298, %true301 ], [ %output298, %false274 ]
  %output304 = add i64 %i64.0, 1
  br label %cond65

true280:                                          ; preds = %true273
  %return285 = call double* @"create_cdf@[F[F"(double* %IW.2)
  %output286 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return285)
  br label %end275

false281:                                         ; preds = %true273
  %return289 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output290 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return289)
  %return292 = call i64 @"not@II"(i64 %x_chk.0)
  %21 = icmp ne i64 %return292, 0
  br i1 %21, label %true293, label %end275

true293:                                          ; preds = %false281
  br label %end275

true301:                                          ; preds = %false274
  br label %end275

true309:                                          ; preds = %end70
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return63, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output314 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond316

end310:                                           ; preds = %cond316, %end70
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond316 ], [ %XAOS_TO.0, %end70 ]
  store i8** %sIDX.2, i8*** %_bound_sIDX
  %return384 = call double* @"create_cdf@[F[F"(double* %IW.2)
  store double* %return384, double** %_bound_IW
  %22 = icmp ne i64 %x_chk.0, 0
  br i1 %22, label %true386, label %end387

cond316:                                          ; preds = %end359, %true309
  %XAOS_TO.3 = phi double* [ %output314, %true309 ], [ %output379, %end359 ]
  %i315.0 = phi i64 [ 0, %true309 ], [ %output381, %end359 ]
  %return320 = call i64 @"lt@III"(i64 %i315.0, i64 %return63)
  %23 = icmp ne i64 %return320, 0
  br i1 %23, label %body317, label %end310

body317:                                          ; preds = %cond316
  %output325 = mul i64 %i315.0, %return63
  %xaos_tos_t326 = load i8**, i8*** %xaos_tos_t
  %output330 = add i64 %output325, %return63
  %return331 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t326, i64 1, i64 %output325, i64 1, i64 %output330, i64 0, i64 0)
  %return334 = call i64 @"len@I[S"(i8** %return331)
  br label %cond335

cond335:                                          ; preds = %body336, %body317
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %body317 ], [ %output349, %body336 ]
  %__impl_foreach_index_3.0 = phi i64 [ 0, %body317 ], [ %output351, %body336 ]
  %return339 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return334)
  %24 = icmp ne i64 %return339, 0
  br i1 %24, label %body336, label %end340

body336:                                          ; preds = %cond335
  %return344 = call i8* @"getcomp@S[SI"(i8** %return331, i64 %__impl_foreach_index_3.0)
  %return347 = call double @"atof@FS"(i8* %return344)
  %return348 = call double @"max@FFF"(double %return347, double 0.000000e+00)
  %output349 = call double* @"append@[FF"(double* %xaos_froms.0, double %return348)
  %output351 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond335

end340:                                           ; preds = %cond335
  br label %cond354

cond354:                                          ; preds = %body355, %end340
  %IW_xaos352.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end340 ], [ %output373, %body355 ]
  %k353.0 = phi i64 [ 0, %end340 ], [ %output375, %body355 ]
  %return358 = call i64 @"lt@III"(i64 %k353.0, i64 %return63)
  %25 = icmp ne i64 %return358, 0
  br i1 %25, label %body355, label %end359

body355:                                          ; preds = %cond354
  %return364 = call double @"getcomp@F[FI"(double* %IW.2, i64 %i315.0)
  %return367 = call double @"getcomp@F[FI"(double* %IW.2, i64 %k353.0)
  %output368 = fmul double %return364, %return367
  %return371 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k353.0)
  %output372 = fmul double %output368, %return371
  %output373 = call double* @"append@[FF"(double* %IW_xaos352.0, double %output372)
  %output375 = add i64 %k353.0, 1
  br label %cond354

end359:                                           ; preds = %cond354
  %return378 = call double* @"create_cdf@[F[F"(double* %IW_xaos352.0)
  %output379 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return378)
  %output381 = add i64 %i315.0, 1
  br label %cond316

true386:                                          ; preds = %end310
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end387

end387:                                           ; preds = %true386, %end310
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #0

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #0

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS:S"(i8*, i8*, i8*) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind
declare i64 @"isdigit@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
define void @TFFAxaos(i8** %sIDX, i64* %SYS, i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<SYS>" = alloca i64*
  %"<XS>" = alloca i64
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<sIDX>" = alloca i8**
  store i8** %sIDX, i8*** %"<sIDX>"
  store i64* %SYS, i64** %"<SYS>"
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@[S[II[F[F"(i8*** %"<sIDX>", i64** %"<SYS>", i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i8**, i8*** %"<sIDX>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i64 0, i64 0), i8** %evalue) #3
  %evalue1 = load i64*, i64** %"<SYS>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @27, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64, i64* %"<XS>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @28, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load double*, double** %"<IW>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @29, i64 0, i64 0), double* %evalue5) #3
  %evalue7 = load double*, double** %"<XST>"
  %gvalue8 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0), double* %evalue7) #3
  store i8** %gvalue, i8*** @sIDX
  store i64* %gvalue2, i64** @SYS
  store i64 %gvalue4, i64* @XS
  store double* %gvalue6, double** @IW
  store double* %gvalue8, double** @XST
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
