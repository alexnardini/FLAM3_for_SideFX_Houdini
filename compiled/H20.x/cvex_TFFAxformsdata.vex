;_name	TFFAxformsdata
; ModuleID = 'TFFAxformsdata'
source_filename = "TFFAxformsdata"

@0 = private constant [16 x i8] c"../../flamefunc\00"
@1 = private constant [0 x i64] zeroinitializer
@2 = private constant [0 x i8*] zeroinitializer
@3 = private constant [15 x i8] c"../../vactive_\00"
@4 = private constant [14 x i8] c"../../dopost_\00"
@5 = private constant [10 x i8] c"../../iw_\00"
@6 = private constant [0 x <2 x double>] zeroinitializer
@7 = private constant [0 x <3 x double>] zeroinitializer
@8 = private constant [9 x i8] c"../../x_\00"
@9 = private constant [9 x i8] c"../../y_\00"
@10 = private constant [11 x i8] c"../../ang_\00"
@11 = private constant [9 x i8] c"../../o_\00"
@12 = private constant [10 x i8] c"../../px_\00"
@13 = private constant [10 x i8] c"../../py_\00"
@14 = private constant [12 x i8] c"../../pang_\00"
@15 = private constant [10 x i8] c"../../po_\00"
@sIDX = external global i8**
@POST = external global i64*
@RES = external global i64
@X = external global <2 x double>*
@Y = external global <2 x double>*
@O = external global <2 x double>*
@PX = external global <2 x double>*
@PY = external global <2 x double>*
@PO = external global <2 x double>*
@COL = external global <3 x double>*
@16 = private constant [5 x i8] c"sIDX\00"
@17 = private constant [5 x i8] c"POST\00"
@18 = private constant [4 x i8] c"RES\00"
@19 = private constant [2 x i8] c"X\00"
@20 = private constant [2 x i8] c"Y\00"
@21 = private constant [2 x i8] c"O\00"
@22 = private constant [3 x i8] c"PX\00"
@23 = private constant [3 x i8] c"PY\00"
@24 = private constant [3 x i8] c"PO\00"
@25 = private constant [4 x i8] c"COL\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 0)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %x, <2 x double>* %y, double* %ang) #3 {
__llvm_entry:
  %x1 = load <2 x double>, <2 x double>* %x
  %y2 = load <2 x double>, <2 x double>* %y
  %return = call <4 x double> @"set@2UU"(<2 x double> %x1, <2 x double> %y2)
  store <4 x double> %return, <4 x double>* %m2
  %ang4 = load double, double* %ang
  %output = call <4 x double> @"rotate@2F"(<4 x double> %return, double %ang4)
  store <4 x double> %output, <4 x double>* %m2
  ret void
}

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxformsdata@[S[II[U[U[U[U[U[U[V"(i8*** %_bound_sIDX, i64** %_bound_POST, i64* %_bound_RES, <2 x double>** %_bound_X, <2 x double>** %_bound_Y, <2 x double>** %_bound_O, <2 x double>** %_bound_PX, <2 x double>** %_bound_PY, <2 x double>** %_bound_PO, <3 x double>** %_bound_COL) #3 {
__llvm_entry:
  %_m2 = alloca <4 x double>
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca <2 x double>
  %4 = alloca <2 x double>
  %5 = alloca double
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @0, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @2, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter ]
  %POST.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), %__llvm_entry ], [ %POST.1, %iter ]
  %va.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), %__llvm_entry ], [ %va.1, %iter ]
  %return3 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %6 = icmp ne i64 %return3, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return5 = call i8* @"itoa@SI"(i64 %output)
  %return8 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i64 0, i64 0), i8* %return5)
  %return9 = call i64 @"chi@IS"(i8* %return8)
  %output10 = call i64* @"append@[II"(i64* %va.0, i64 %return9)
  %return12 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0), i8* %return5)
  %return13 = call i64 @"chi@IS"(i8* %return12)
  %return15 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0), i8* %return5)
  %return16 = call double @"chf@FS"(i8* %return15)
  %return18 = fcmp oeq double %return16, 0.000000e+00
  br i1 %return18, label %true, label %end20

end:                                              ; preds = %cond
  %return40 = call i64 @"len@I[S"(i8** %sIDX.0)
  %output43 = call <2 x double>* @"resize@[UI"(<2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @6, i64 0, i64 0), i64 %return40)
  store <4 x double> zeroinitializer, <4 x double>* %_m2, !vex-initializer-store !3
  br label %cond46

iter:                                             ; preds = %end20, %end30
  %sIDX.1 = phi i8** [ %sIDX.0, %end20 ], [ %output33, %end30 ]
  %POST.1 = phi i64* [ %POST.0, %end20 ], [ %output36, %end30 ]
  br label %cond

true:                                             ; preds = %body
  %return22 = call { i64, i64* } @"setcomp@I[III"(i64* %output10, i64 0, i64 %i.0)
  %output24 = extractvalue { i64, i64* } %return22, 1
  br label %end20

end20:                                            ; preds = %true, %body
  %va.1 = phi i64* [ %output24, %true ], [ %output10, %body ]
  %return27 = call i64 @"getcomp@I[II"(i64* %va.1, i64 %i.0)
  %return28 = call i64 @"not@II"(i64 %return27)
  %7 = icmp ne i64 %return28, 0
  br i1 %7, label %iter, label %end30

end30:                                            ; preds = %end20
  %output33 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return5)
  %output36 = call i64* @"append@[II"(i64* %POST.0, i64 %return13)
  br label %iter

cond46:                                           ; preds = %end110, %end
  %x.0 = phi <2 x double>* [ %output43, %end ], [ %output90, %end110 ]
  %y.0 = phi <2 x double>* [ %output43, %end ], [ %output96, %end110 ]
  %o.0 = phi <2 x double>* [ %output43, %end ], [ %output104, %end110 ]
  %px.0 = phi <2 x double>* [ %output43, %end ], [ %px.1, %end110 ]
  %py.0 = phi <2 x double>* [ %output43, %end ], [ %py.1, %end110 ]
  %po.0 = phi <2 x double>* [ %output43, %end ], [ %po.1, %end110 ]
  %new.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @7, i64 0, i64 0), %end ], [ %output173, %end110 ]
  %i45.0 = phi i64 [ 0, %end ], [ %output175, %end110 ]
  %return50 = call i64 @"lt@III"(i64 %i45.0, i64 %return40)
  %8 = icmp ne i64 %return50, 0
  br i1 %8, label %body47, label %end51

body47:                                           ; preds = %cond46
  %return55 = call i8* @"getcomp@S[SI"(i8** %sIDX.0, i64 %i45.0)
  %return57 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @8, i64 0, i64 0), i8* %return55)
  %return58 = call <2 x double> @"chu@US"(i8* %return57)
  %return60 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @9, i64 0, i64 0), i8* %return55)
  %return61 = call <2 x double> @"chu@US"(i8* %return60)
  %return63 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i64 0, i64 0), i8* %return55)
  %return64 = call double @"chf@FS"(i8* %return63)
  %return66 = fcmp one double %return64, 0.000000e+00
  br i1 %return66, label %true68, label %end69

end51:                                            ; preds = %cond46
  store i8** %sIDX.0, i8*** %_bound_sIDX
  store i64* %POST.0, i64** %_bound_POST
  store i64 %return40, i64* %_bound_RES
  store <2 x double>* %x.0, <2 x double>** %_bound_X
  store <2 x double>* %y.0, <2 x double>** %_bound_Y
  store <2 x double>* %o.0, <2 x double>** %_bound_O
  store <2 x double>* %px.0, <2 x double>** %_bound_PX
  store <2 x double>* %py.0, <2 x double>** %_bound_PY
  store <2 x double>* %po.0, <2 x double>** %_bound_PO
  store <3 x double>* %new.0, <3 x double>** %_bound_COL
  ret void

true68:                                           ; preds = %body47
  store <2 x double> %return58, <2 x double>* %0
  store <2 x double> %return61, <2 x double>* %1
  %return73 = call double @"radians@FF"(double %return64)
  %return74 = call double @"neg@FF"(double %return73)
  store double %return74, double* %2
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %0, <2 x double>* %1, double* %2)
  %_m275 = load <4 x double>, <4 x double>* %_m2
  %return76 = call double @"getcomp@F2II"(<4 x double> %_m275, i64 0, i64 0)
  %return78 = call double @"getcomp@F2II"(<4 x double> %_m275, i64 0, i64 1)
  %return79 = call <2 x double> @"set@UFF"(double %return76, double %return78)
  %return81 = call double @"getcomp@F2II"(<4 x double> %_m275, i64 1, i64 0)
  %return83 = call double @"getcomp@F2II"(<4 x double> %_m275, i64 1, i64 1)
  %return84 = call <2 x double> @"set@UFF"(double %return81, double %return83)
  br label %end69

end69:                                            ; preds = %true68, %body47
  %_x.0 = phi <2 x double> [ %return79, %true68 ], [ %return58, %body47 ]
  %_y.0 = phi <2 x double> [ %return84, %true68 ], [ %return61, %body47 ]
  %return88 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %x.0, <2 x double> %_x.0, i64 %i45.0)
  %output90 = extractvalue { <2 x double>, <2 x double>* } %return88, 1
  %return94 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %y.0, <2 x double> %_y.0, i64 %i45.0)
  %output96 = extractvalue { <2 x double>, <2 x double>* } %return94, 1
  %return99 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i64 0, i64 0), i8* %return55)
  %return100 = call <2 x double> @"chu@US"(i8* %return99)
  %return102 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %o.0, <2 x double> %return100, i64 %i45.0)
  %output104 = extractvalue { <2 x double>, <2 x double>* } %return102, 1
  %return106 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i64 0, i64 0), i8* %return55)
  %return107 = call i64 @"chi@IS"(i8* %return106)
  %9 = icmp ne i64 %return107, 0
  br i1 %9, label %true109, label %end110

true109:                                          ; preds = %end69
  %return112 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @12, i64 0, i64 0), i8* %return55)
  %return113 = call <2 x double> @"chu@US"(i8* %return112)
  %return115 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @13, i64 0, i64 0), i8* %return55)
  %return116 = call <2 x double> @"chu@US"(i8* %return115)
  %return118 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @14, i64 0, i64 0), i8* %return55)
  %return119 = call double @"chf@FS"(i8* %return118)
  %return121 = fcmp one double %return119, 0.000000e+00
  br i1 %return121, label %true123, label %end124

end110:                                           ; preds = %end124, %end69
  %px.1 = phi <2 x double>* [ %output145, %end124 ], [ %px.0, %end69 ]
  %py.1 = phi <2 x double>* [ %output151, %end124 ], [ %py.0, %end69 ]
  %po.1 = phi <2 x double>* [ %output159, %end124 ], [ %po.0, %end69 ]
  %return161 = call i64 @"atoi@IS"(i8* %return55)
  %cast = sitofp i64 %return161 to double
  %return162 = call double @"rand@FF"(double %cast)
  %return164 = call <3 x double> @"rgbtohsv@VV"(<3 x double> <double 1.000000e+00, double 0.000000e+00, double 0.000000e+00>)
  %return167 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return164, double %return162, i64 0)
  %output169 = extractvalue { double, <3 x double> } %return167, 1
  %return172 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %output169)
  %output173 = call <3 x double>* @"append@[VV"(<3 x double>* %new.0, <3 x double> %return172)
  %output175 = add i64 %i45.0, 1
  br label %cond46

true123:                                          ; preds = %true109
  store <2 x double> %return113, <2 x double>* %3
  store <2 x double> %return116, <2 x double>* %4
  %return128 = call double @"radians@FF"(double %return119)
  %return129 = call double @"neg@FF"(double %return128)
  store double %return129, double* %5
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %3, <2 x double>* %4, double* %5)
  %_m2130 = load <4 x double>, <4 x double>* %_m2
  %return131 = call double @"getcomp@F2II"(<4 x double> %_m2130, i64 0, i64 0)
  %return133 = call double @"getcomp@F2II"(<4 x double> %_m2130, i64 0, i64 1)
  %return134 = call <2 x double> @"set@UFF"(double %return131, double %return133)
  %return136 = call double @"getcomp@F2II"(<4 x double> %_m2130, i64 1, i64 0)
  %return138 = call double @"getcomp@F2II"(<4 x double> %_m2130, i64 1, i64 1)
  %return139 = call <2 x double> @"set@UFF"(double %return136, double %return138)
  br label %end124

end124:                                           ; preds = %true123, %true109
  %_x.1 = phi <2 x double> [ %return134, %true123 ], [ %return113, %true109 ]
  %_y.1 = phi <2 x double> [ %return139, %true123 ], [ %return116, %true109 ]
  %return143 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %px.0, <2 x double> %_x.1, i64 %i45.0)
  %output145 = extractvalue { <2 x double>, <2 x double>* } %return143, 1
  %return149 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %py.0, <2 x double> %_y.1, i64 %i45.0)
  %output151 = extractvalue { <2 x double>, <2 x double>* } %return149, 1
  %return154 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @15, i64 0, i64 0), i8* %return55)
  %return155 = call <2 x double> @"chu@US"(i8* %return154)
  %return157 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %po.0, <2 x double> %return155, i64 %i45.0)
  %output159 = extractvalue { <2 x double>, <2 x double>* } %return157, 1
  br label %end110
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare <2 x double>* @"resize@[UI"(<2 x double>*, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #0

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F2II"(<4 x double>, i64, i64) #0

; Function Attrs: nounwind readnone
declare { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>*, <2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"atoi@IS"(i8*) #0

; Function Attrs: nounwind
declare double @"rand@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"rgbtohsv@VV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"hsvtorgb@VV"(<3 x double>) #0

; Function Attrs: nounwind
declare <3 x double>* @"append@[VV"(<3 x double>*, <3 x double>) #1

; Function Attrs: nounwind
define void @TFFAxformsdata(i8** %sIDX, i64* %POST, i64 %RES, <2 x double>* %X, <2 x double>* %Y, <2 x double>* %O, <2 x double>* %PX, <2 x double>* %PY, <2 x double>* %PO, <3 x double>* %COL) #1 {
__llvm_entry:
  %"<POST>" = alloca i64*
  %"<RES>" = alloca i64
  %"<X>" = alloca <2 x double>*
  %"<Y>" = alloca <2 x double>*
  %"<O>" = alloca <2 x double>*
  %"<PX>" = alloca <2 x double>*
  %"<PY>" = alloca <2 x double>*
  %"<PO>" = alloca <2 x double>*
  %"<COL>" = alloca <3 x double>*
  %"<sIDX>" = alloca i8**
  store i8** %sIDX, i8*** %"<sIDX>"
  store i64* %POST, i64** %"<POST>"
  store i64 %RES, i64* %"<RES>"
  store <2 x double>* %X, <2 x double>** %"<X>"
  store <2 x double>* %Y, <2 x double>** %"<Y>"
  store <2 x double>* %O, <2 x double>** %"<O>"
  store <2 x double>* %PX, <2 x double>** %"<PX>"
  store <2 x double>* %PY, <2 x double>** %"<PY>"
  store <2 x double>* %PO, <2 x double>** %"<PO>"
  store <3 x double>* %COL, <3 x double>** %"<COL>"
  call void @"_TFFAxformsdata@[S[II[U[U[U[U[U[U[V"(i8*** %"<sIDX>", i64** %"<POST>", i64* %"<RES>", <2 x double>** %"<X>", <2 x double>** %"<Y>", <2 x double>** %"<O>", <2 x double>** %"<PX>", <2 x double>** %"<PY>", <2 x double>** %"<PO>", <3 x double>** %"<COL>")
  %evalue = load i8**, i8*** %"<sIDX>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i64 0, i64 0), i8** %evalue) #4
  %evalue1 = load i64*, i64** %"<POST>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i64 0, i64 0), i64* %evalue1) #4
  %evalue3 = load i64, i64* %"<RES>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @18, i64 0, i64 0), i64 %evalue3) #4
  %evalue5 = load <2 x double>*, <2 x double>** %"<X>"
  %gvalue6 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i64 0, i64 0), <2 x double>* %evalue5) #4
  %evalue7 = load <2 x double>*, <2 x double>** %"<Y>"
  %gvalue8 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i64 0, i64 0), <2 x double>* %evalue7) #4
  %evalue9 = load <2 x double>*, <2 x double>** %"<O>"
  %gvalue10 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i64 0, i64 0), <2 x double>* %evalue9) #4
  %evalue11 = load <2 x double>*, <2 x double>** %"<PX>"
  %gvalue12 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @22, i64 0, i64 0), <2 x double>* %evalue11) #4
  %evalue13 = load <2 x double>*, <2 x double>** %"<PY>"
  %gvalue14 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @23, i64 0, i64 0), <2 x double>* %evalue13) #4
  %evalue15 = load <2 x double>*, <2 x double>** %"<PO>"
  %gvalue16 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @24, i64 0, i64 0), <2 x double>* %evalue15) #4
  %evalue17 = load <3 x double>*, <3 x double>** %"<COL>"
  %gvalue18 = call <3 x double>* @"_export@[VS[V"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @25, i64 0, i64 0), <3 x double>* %evalue17) #4
  store i8** %gvalue, i8*** @sIDX
  store i64* %gvalue2, i64** @POST
  store i64 %gvalue4, i64* @RES
  store <2 x double>* %gvalue6, <2 x double>** @X
  store <2 x double>* %gvalue8, <2 x double>** @Y
  store <2 x double>* %gvalue10, <2 x double>** @O
  store <2 x double>* %gvalue12, <2 x double>** @PX
  store <2 x double>* %gvalue14, <2 x double>** @PY
  store <2 x double>* %gvalue16, <2 x double>** @PO
  store <3 x double>* %gvalue18, <3 x double>** @COL
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare <2 x double>* @"_export@[US[U"(i8*, <2 x double>*)

declare <3 x double>* @"_export@[VS[V"(i8*, <3 x double>*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxformsdata(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @2, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0, <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @6, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @6, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @6, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @6, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @6, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @6, i64 0, i64 0), <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @7, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline }
attributes #3 = { alwaysinline nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
