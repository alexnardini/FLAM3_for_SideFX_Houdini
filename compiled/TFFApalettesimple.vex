;_name	TFFApalettesimple
; ModuleID = 'TFFApalettesimple'

@0 = private constant [15 x i8] c"../palettehsv_\00"
@1 = private constant [8 x i8] c"../domb\00"
@2 = private constant [9 x i8] c"../vizmb\00"
@3 = private constant [11 x i8] c"../palette\00"
@Cd = external global <3 x double>
@mb_modulate = external global double
@4 = private constant [3 x i8] c"Cd\00"
@5 = private constant [12 x i8] c"mb_modulate\00"

define private void @"_TFFApalettesimple@FVF"(double* %_bound_COORD, <3 x double>* %_bound_Cd, double* %_bound_mb_modulate) nounwind alwaysinline {
__llvm_entry:
  %return = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([15 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8]* @2, i64 0, i64 0))
  %_bound_COORD3 = load double* %_bound_COORD
  %return4 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([11 x i8]* @3, i64 0, i64 0), double %_bound_COORD3)
  %return6 = call double @"getcomp@FVI"(<3 x double> %return, i64 0)
  %return7 = fcmp one double %return6, 0.000000e+00
  %return8 = zext i1 %return7 to i64
  %return10 = call double @"getcomp@FVI"(<3 x double> %return, i64 1)
  %return11 = fcmp one double %return10, 1.000000e+00
  %return12 = zext i1 %return11 to i64
  %return13 = call i64 @"or@III"(i64 %return8, i64 %return12)
  %return15 = call double @"getcomp@FVI"(<3 x double> %return, i64 2)
  %return16 = fcmp one double %return15, 1.000000e+00
  %return17 = zext i1 %return16 to i64
  %return18 = call i64 @"or@III"(i64 %return13, i64 %return17)
  %0 = icmp ne i64 %return18, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return20 = call <3 x double> @"rgbtohsv@VV"(<3 x double> %return4)
  %return22 = call double @"getcomp@FVI"(<3 x double> %return20, i64 0)
  %output = fadd double %return22, %return6
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return20, double %output, i64 0)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  %return29 = call double @"getcomp@FVI"(<3 x double> %output27, i64 1)
  %output32 = fmul double %return29, %return10
  %return34 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output27, double %output32, i64 1)
  %output36 = extractvalue { double, <3 x double> } %return34, 1
  %return38 = call double @"getcomp@FVI"(<3 x double> %output36, i64 2)
  %output41 = fmul double %return38, %return15
  %return43 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output36, double %output41, i64 2)
  %output45 = extractvalue { double, <3 x double> } %return43, 1
  %return47 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %output45)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %color.0 = phi <3 x double> [ %return47, %true ], [ %return4, %__llvm_entry ]
  %return50 = call i64 @"and@III"(i64 %return1, i64 %return2)
  %1 = icmp ne i64 %return50, 0
  br i1 %1, label %true51, label %end52

true51:                                           ; preds = %end
  %_bound_mb_modulate54 = load double* %_bound_mb_modulate
  %cast = call <3 x double> @"set@VF"(double %_bound_mb_modulate54)
  %output55 = call <3 x double> @"mul@VV"(<3 x double> %color.0, <3 x double> %cast)
  br label %end52

end52:                                            ; preds = %true51, %end
  %color.1 = phi <3 x double> [ %output55, %true51 ], [ %color.0, %end ]
  store <3 x double> %color.1, <3 x double>* %_bound_Cd
  ret void
}

declare <3 x double> @"chv@VS"(i8*) nounwind readnone

declare i64 @"chi@IS"(i8*) nounwind readnone

declare <3 x double> @"chramp@VSF"(i8*, double) nounwind readnone

declare double @"getcomp@FVI"(<3 x double>, i64) nounwind readnone

declare i64 @"or@III"(i64, i64) nounwind readnone

declare <3 x double> @"rgbtohsv@VV"(<3 x double>) nounwind readnone

define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) alwaysinline {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) nounwind readnone

declare <3 x double> @"hsvtorgb@VV"(<3 x double>) nounwind readnone

declare i64 @"and@III"(i64, i64) nounwind readnone

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

define void @TFFApalettesimple(double %COORD, <3 x double> %Cd, double %mb_modulate) nounwind {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store double %COORD, double* %0
  store double %mb_modulate, double* %1
  call void @"_TFFApalettesimple@FVF"(double* %0, <3 x double>* %"<Cd>", double* %1)
  %evalue = load <3 x double>* %"<Cd>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue) nounwind readonly
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([12 x i8]* @5, i64 0, i64 0), double %mb_modulate) nounwind readonly
  store <3 x double> %gvalue, <3 x double>* @Cd
  store double %gvalue4, double* @mb_modulate
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFApalettesimple(double 0.000000e+00, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 0.000000e+00)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.499"}
!2 = metadata !{metadata !"64"}

;_code_end
