;_name	FLAM3HANDLES
; ModuleID = 'FLAM3HANDLES'
source_filename = "FLAM3HANDLES"

@0 = private constant [10 x i8] c"iteration\00"
@1 = private constant [0 x i8*] zeroinitializer
@2 = private constant [9 x i8] c"../../x_\00"
@3 = private constant [9 x i8] c"../../y_\00"
@4 = private constant [11 x i8] c"../../ang_\00"
@5 = private constant [9 x i8] c"../../o_\00"
@6 = private constant [14 x i8] c"../../dopost_\00"
@7 = private constant [10 x i8] c"../../px_\00"
@8 = private constant [10 x i8] c"../../py_\00"
@9 = private constant [12 x i8] c"../../pang_\00"
@10 = private constant [10 x i8] c"../../po_\00"
@P = external global <3 x double>
@11 = private constant [2 x i8] c"P\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"affine@UUUU"(<2 x double>* %p, <2 x double>* %x, <2 x double>* %y, <2 x double>* %o) #2 {
__llvm_entry:
  %x1 = load <2 x double>, <2 x double>* %x
  %return = call double @"getcomp@FUI"(<2 x double> %x1, i64 0)
  %p2 = load <2 x double>, <2 x double>* %p
  %return3 = call double @"getcomp@FUI"(<2 x double> %p2, i64 0)
  %output = fmul double %return, %return3
  %y4 = load <2 x double>, <2 x double>* %y
  %return5 = call double @"getcomp@FUI"(<2 x double> %y4, i64 0)
  %return7 = call double @"getcomp@FUI"(<2 x double> %p2, i64 1)
  %output8 = fmul double %return5, %return7
  %output9 = fadd double %output, %output8
  %o10 = load <2 x double>, <2 x double>* %o
  %return11 = call double @"getcomp@FUI"(<2 x double> %o10, i64 0)
  %output12 = fadd double %output9, %return11
  %return14 = call double @"getcomp@FUI"(<2 x double> %x1, i64 1)
  %output17 = fmul double %return14, %return3
  %return19 = call double @"getcomp@FUI"(<2 x double> %y4, i64 1)
  %output22 = fmul double %return19, %return7
  %output23 = fadd double %output17, %output22
  %return25 = call double @"getcomp@FUI"(<2 x double> %o10, i64 1)
  %output26 = fadd double %output23, %return25
  %return27 = call <2 x double> @"set@UFF"(double %output12, double %output26)
  store <2 x double> %return27, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %x, <2 x double>* %y, double* %ang) #2 {
__llvm_entry:
  %x1 = load <2 x double>, <2 x double>* %x
  %y2 = load <2 x double>, <2 x double>* %y
  %return = call <4 x double> @"set@2UU"(<2 x double> %x1, <2 x double> %y2)
  store <4 x double> %return, <4 x double>* %m2
  %ang4 = load double, double* %ang
  %output = call <4 x double> @"rotate@2F"(<4 x double> %return, double %ang4)
  store <4 x double> %output, <4 x double>* %m2
  ret void
}

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_FLAM3HANDLES@[SV"(i8*** %_bound_sIDX, <3 x double>* %_bound_P) #2 {
__llvm_entry:
  %mem = alloca <2 x double>
  %_m2 = alloca <4 x double>
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca <2 x double>
  %4 = alloca <2 x double>
  %5 = alloca <2 x double>
  %6 = alloca <2 x double>
  %7 = alloca <2 x double>
  %8 = alloca double
  %9 = alloca <2 x double>
  %10 = alloca <2 x double>
  %11 = alloca <2 x double>
  %return = call i64 @"detail@IIS"(i64 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %_bound_P1 = load <3 x double>, <3 x double>* %_bound_P
  %cast = call <2 x double> @"set@UV"(<3 x double> %_bound_P1)
  store <2 x double> %cast, <2 x double>* %mem
  %_bound_sIDX2 = load i8**, i8*** %_bound_sIDX
  store <4 x double> zeroinitializer, <4 x double>* %_m2, !vex-initializer-store !3
  %return7 = call i8* @"getcomp@S[SI"(i8** %_bound_sIDX2, i64 %return)
  %return9 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0), i8* %return7)
  %return10 = call <2 x double> @"chu@US"(i8* %return9)
  %return12 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0), i8* %return7)
  %return13 = call <2 x double> @"chu@US"(i8* %return12)
  %return15 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0), i8* %return7)
  %return16 = call double @"chf@FS"(i8* %return15)
  %return18 = fcmp one double %return16, 0.000000e+00
  br i1 %return18, label %true, label %end

true:                                             ; preds = %__llvm_entry
  store <2 x double> %return10, <2 x double>* %0
  store <2 x double> %return13, <2 x double>* %1
  %return23 = call double @"radians@FF"(double %return16)
  %return24 = call double @"neg@FF"(double %return23)
  store double %return24, double* %2
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %0, <2 x double>* %1, double* %2)
  %_m225 = load <4 x double>, <4 x double>* %_m2
  %return26 = call double @"getcomp@F2II"(<4 x double> %_m225, i64 0, i64 0)
  %return28 = call double @"getcomp@F2II"(<4 x double> %_m225, i64 0, i64 1)
  %return29 = call <2 x double> @"set@UFF"(double %return26, double %return28)
  %return31 = call double @"getcomp@F2II"(<4 x double> %_m225, i64 1, i64 0)
  %return33 = call double @"getcomp@F2II"(<4 x double> %_m225, i64 1, i64 1)
  %return34 = call <2 x double> @"set@UFF"(double %return31, double %return33)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %_x.0 = phi <2 x double> [ %return29, %true ], [ %return10, %__llvm_entry ]
  %_y.0 = phi <2 x double> [ %return34, %true ], [ %return13, %__llvm_entry ]
  %return38 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i8* %return7)
  %return39 = call <2 x double> @"chu@US"(i8* %return38)
  %return41 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @6, i64 0, i64 0), i8* %return7)
  %return42 = call i64 @"chi@IS"(i8* %return41)
  %12 = icmp ne i64 %return42, 0
  br i1 %12, label %true44, label %end45

true44:                                           ; preds = %end
  %return47 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0), i8* %return7)
  %return48 = call <2 x double> @"chu@US"(i8* %return47)
  %return50 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @8, i64 0, i64 0), i8* %return7)
  %return51 = call <2 x double> @"chu@US"(i8* %return50)
  %return53 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i64 0, i64 0), i8* %return7)
  %return54 = call double @"chf@FS"(i8* %return53)
  %return56 = fcmp one double %return54, 0.000000e+00
  br i1 %return56, label %true58, label %end59

end45:                                            ; preds = %end59, %end
  %px.0 = phi <2 x double> [ %_x.1, %end59 ], [ zeroinitializer, %end ]
  %py.0 = phi <2 x double> [ %_y.1, %end59 ], [ zeroinitializer, %end ]
  %po.0 = phi <2 x double> [ %return79, %end59 ], [ zeroinitializer, %end ]
  store <2 x double> %_x.0, <2 x double>* %3
  store <2 x double> %_y.0, <2 x double>* %4
  store <2 x double> %return39, <2 x double>* %5
  call void @"affine@UUUU"(<2 x double>* %mem, <2 x double>* %3, <2 x double>* %4, <2 x double>* %5)
  br i1 %12, label %true84, label %end85

true58:                                           ; preds = %true44
  store <2 x double> %return48, <2 x double>* %6
  store <2 x double> %return51, <2 x double>* %7
  %return63 = call double @"radians@FF"(double %return54)
  %return64 = call double @"neg@FF"(double %return63)
  store double %return64, double* %8
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %6, <2 x double>* %7, double* %8)
  %_m265 = load <4 x double>, <4 x double>* %_m2
  %return66 = call double @"getcomp@F2II"(<4 x double> %_m265, i64 0, i64 0)
  %return68 = call double @"getcomp@F2II"(<4 x double> %_m265, i64 0, i64 1)
  %return69 = call <2 x double> @"set@UFF"(double %return66, double %return68)
  %return71 = call double @"getcomp@F2II"(<4 x double> %_m265, i64 1, i64 0)
  %return73 = call double @"getcomp@F2II"(<4 x double> %_m265, i64 1, i64 1)
  %return74 = call <2 x double> @"set@UFF"(double %return71, double %return73)
  br label %end59

end59:                                            ; preds = %true58, %true44
  %_x.1 = phi <2 x double> [ %return69, %true58 ], [ %return48, %true44 ]
  %_y.1 = phi <2 x double> [ %return74, %true58 ], [ %return51, %true44 ]
  %return78 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @10, i64 0, i64 0), i8* %return7)
  %return79 = call <2 x double> @"chu@US"(i8* %return78)
  br label %end45

true84:                                           ; preds = %end45
  store <2 x double> %px.0, <2 x double>* %9
  store <2 x double> %py.0, <2 x double>* %10
  store <2 x double> %po.0, <2 x double>* %11
  call void @"affine@UUUU"(<2 x double>* %mem, <2 x double>* %9, <2 x double>* %10, <2 x double>* %11)
  br label %end85

end85:                                            ; preds = %true84, %end45
  %mem89 = load <2 x double>, <2 x double>* %mem
  %cast90 = call <3 x double> @"set@VU"(<2 x double> %mem89)
  %output = call <3 x double> @"add@VV"(<3 x double> %cast90, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-02>)
  store <3 x double> %output, <3 x double>* %_bound_P
  ret void
}

; Function Attrs: nounwind
declare i64 @"detail@IIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UV"(<3 x double>) #0

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F2II"(<4 x double>, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VU"(<2 x double>) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #0

; Function Attrs: nounwind
define void @FLAM3HANDLES(i8** %sIDX, <3 x double> %P) #1 {
__llvm_entry:
  %"<P>" = alloca <3 x double>
  %0 = alloca i8**
  store <3 x double> %P, <3 x double>* %"<P>"
  store i8** %sIDX, i8*** %0
  call void @"_FLAM3HANDLES@[SV"(i8*** %0, <3 x double>* %"<P>")
  %evalue = load <3 x double>, <3 x double>* %"<P>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), <3 x double> %evalue) #3
  store <3 x double> %gvalue, <3 x double>* @P
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @FLAM3HANDLES(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @1, i64 0, i64 0), <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
