;_name	TheFractalFlameAlgorithm
; ModuleID = 'TheFractalFlameAlgorithm'
source_filename = "TheFractalFlameAlgorithm"

%gemSYS = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, double }
%gem = type { i64*, i64*, i64*, i64*, i64*, i64, i64, i64, i64, double*, double*, double*, double*, double*, double*, double*, double, double, double, double, double, <2 x double>, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>, <2 x double>, <2 x double>, <2 x double>, <2 x double>, <2 x double>, i8** }
%gemPrm = type { double*, double*, double*, double*, double*, double*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <3 x double>*, <2 x double>* }

@0 = private constant [8 x i8] c"twister\00"
@1 = private constant [14 x i8] c"../dotmglobal\00"
@2 = private constant [16 x i8] c"../dofinalflame\00"
@3 = private constant [14 x i8] c"../_dofpost_2\00"
@4 = private constant [16 x i8] c"../delinvalidpt\00"
@5 = private constant [12 x i8] c"../symmetry\00"
@6 = private constant [13 x i8] c"../flamefunc\00"
@7 = private constant [8 x i8] c"../iter\00"
@8 = private constant [8 x i8] c"../domb\00"
@9 = private constant [14 x i8] c"../rotational\00"
@10 = private constant [9 x i8] c"../vizmb\00"
@11 = private constant [11 x i8] c"Tstep_mult\00"
@12 = private constant [8 x i8] c"../clr_\00"
@13 = private constant [13 x i8] c"../clrspeed_\00"
@14 = private constant [18 x i8] c"../preblurweight_\00"
@15 = private constant [13 x i8] c"../v1weight_\00"
@16 = private constant [11 x i8] c"../v1type_\00"
@17 = private constant [13 x i8] c"../v2weight_\00"
@18 = private constant [11 x i8] c"../v2type_\00"
@19 = private constant [13 x i8] c"../v3weight_\00"
@20 = private constant [11 x i8] c"../v3type_\00"
@21 = private constant [13 x i8] c"../v4weight_\00"
@22 = private constant [11 x i8] c"../v4type_\00"
@23 = private constant [6 x i8] c"../x_\00"
@24 = private constant [6 x i8] c"../y_\00"
@25 = private constant [8 x i8] c"../ang_\00"
@26 = private constant [6 x i8] c"../o_\00"
@27 = private constant [11 x i8] c"../dopost_\00"
@28 = private constant [7 x i8] c"../px_\00"
@29 = private constant [7 x i8] c"../py_\00"
@30 = private constant [7 x i8] c"../po_\00"
@31 = private constant [7 x i8] c"../frt\00"
@32 = private constant [7 x i8] c"../fsc\00"
@33 = private constant [14 x i8] c"../ffv1weight\00"
@34 = private constant [12 x i8] c"../ffv1type\00"
@35 = private constant [14 x i8] c"../ffv2weight\00"
@36 = private constant [12 x i8] c"../ffv2type\00"
@37 = private constant [14 x i8] c"../ffv3weight\00"
@38 = private constant [12 x i8] c"../ffv3type\00"
@39 = private constant [14 x i8] c"../ffp1weight\00"
@40 = private constant [12 x i8] c"../ffp1type\00"
@41 = private constant [9 x i8] c"../_fx_2\00"
@42 = private constant [9 x i8] c"../_fy_2\00"
@43 = private constant [10 x i8] c"../_ang_2\00"
@44 = private constant [9 x i8] c"../_fo_2\00"
@45 = private constant [10 x i8] c"../_pfx_2\00"
@46 = private constant [10 x i8] c"../_pfy_2\00"
@47 = private constant [10 x i8] c"../_pfo_2\00"
@48 = private constant [0 x i64] zeroinitializer
@49 = private constant [0 x double] zeroinitializer
@50 = private constant [0 x <2 x double>] zeroinitializer
@51 = private constant [0 x i8*] zeroinitializer
@52 = private constant [20 x i64] [i64 27, i64 28, i64 29, i64 30, i64 31, i64 32, i64 34, i64 35, i64 36, i64 37, i64 38, i64 47, i64 48, i64 49, i64 50, i64 51, i64 52, i64 53, i64 56, i64 57]
@53 = private constant [21 x i64] [i64 61, i64 63, i64 66, i64 67, i64 69, i64 71, i64 72, i64 73, i64 74, i64 75, i64 76, i64 77, i64 78, i64 79, i64 94, i64 95, i64 96, i64 97, i64 98, i64 99, i64 101]
@54 = private constant [10 x i8] c"../curlc_\00"
@55 = private constant [9 x i8] c"../ngon_\00"
@56 = private constant [9 x i8] c"../pdjw_\00"
@57 = private constant [9 x i8] c"../blob_\00"
@58 = private constant [11 x i8] c"../julian_\00"
@59 = private constant [15 x i8] c"../juliascope_\00"
@60 = private constant [9 x i8] c"../fan2_\00"
@61 = private constant [14 x i8] c"../rings2val_\00"
@62 = private constant [15 x i8] c"../rectangles_\00"
@63 = private constant [15 x i8] c"../radialblur_\00"
@64 = private constant [8 x i8] c"../pie_\00"
@65 = private constant [10 x i8] c"../disc2_\00"
@66 = private constant [15 x i8] c"../supershape_\00"
@67 = private constant [16 x i8] c"../supershapen_\00"
@68 = private constant [11 x i8] c"../flower_\00"
@69 = private constant [10 x i8] c"../conic_\00"
@70 = private constant [13 x i8] c"../parabola_\00"
@71 = private constant [12 x i8] c"../bent2xy_\00"
@72 = private constant [17 x i8] c"../bipolarshift_\00"
@73 = private constant [13 x i8] c"../cellsize_\00"
@74 = private constant [9 x i8] c"../cpow_\00"
@75 = private constant [15 x i8] c"../escherbeta_\00"
@76 = private constant [17 x i8] c"../lazysusanxyz_\00"
@77 = private constant [14 x i8] c"../lazysusan_\00"
@78 = private constant [15 x i8] c"../modulusXYZ_\00"
@79 = private constant [11 x i8] c"../oscope_\00"
@80 = private constant [16 x i8] c"../popcorn2xyz_\00"
@81 = private constant [14 x i8] c"../popcorn2c_\00"
@82 = private constant [18 x i8] c"../separationxyz_\00"
@83 = private constant [24 x i8] c"../separationinsidexyz_\00"
@84 = private constant [13 x i8] c"../splitxyz_\00"
@85 = private constant [14 x i8] c"../splitsxyz_\00"
@86 = private constant [12 x i8] c"../stripes_\00"
@87 = private constant [10 x i8] c"../wedge_\00"
@88 = private constant [15 x i8] c"../wedgejulia_\00"
@89 = private constant [13 x i8] c"../wedgesph_\00"
@90 = private constant [10 x i8] c"../whorl_\00"
@91 = private constant [19 x i8] c"../waves2scalexyz_\00"
@92 = private constant [18 x i8] c"../waves2freqxyz_\00"
@93 = private constant [10 x i8] c"../auger_\00"
@94 = private constant [15 x i8] c"../fluxspread_\00"
@95 = private constant [13 x i8] c"../mobiusre_\00"
@96 = private constant [13 x i8] c"../mobiusim_\00"
@97 = private constant [19 x i8] c"../curvexyzlenght_\00"
@98 = private constant [16 x i8] c"../curvexyzamp_\00"
@99 = private constant [10 x i8] c"../persp_\00"
@100 = private constant [11 x i8] c"../bwraps_\00"
@101 = private constant [16 x i8] c"../bwrapstwist_\00"
@102 = private constant [18 x i8] c"../polynomialpow_\00"
@103 = private constant [17 x i8] c"../polynomiallc_\00"
@104 = private constant [17 x i8] c"../polynomialsc_\00"
@105 = private constant [0 x <3 x double>] zeroinitializer
@106 = private constant [0 x <4 x double>] zeroinitializer
@107 = private constant [12 x i8] c"../_curlc_2\00"
@108 = private constant [11 x i8] c"../_ngon_2\00"
@109 = private constant [11 x i8] c"../_pdjw_2\00"
@110 = private constant [11 x i8] c"../_blob_2\00"
@111 = private constant [13 x i8] c"../_julian_2\00"
@112 = private constant [17 x i8] c"../_juliascope_2\00"
@113 = private constant [11 x i8] c"../_fan2_2\00"
@114 = private constant [16 x i8] c"../_rings2val_2\00"
@115 = private constant [17 x i8] c"../_rectangles_2\00"
@116 = private constant [17 x i8] c"../_radialblur_2\00"
@117 = private constant [10 x i8] c"../_pie_2\00"
@118 = private constant [17 x i8] c"../_supershape_2\00"
@119 = private constant [18 x i8] c"../_supershapen_2\00"
@120 = private constant [13 x i8] c"../_flower_2\00"
@121 = private constant [12 x i8] c"../_conic_2\00"
@122 = private constant [15 x i8] c"../_parabola_2\00"
@123 = private constant [14 x i8] c"../_bent2xy_2\00"
@124 = private constant [19 x i8] c"../_bipolarshift_2\00"
@125 = private constant [15 x i8] c"../_cellsize_2\00"
@126 = private constant [11 x i8] c"../_cpow_2\00"
@127 = private constant [17 x i8] c"../_escherbeta_2\00"
@128 = private constant [19 x i8] c"../_lazysusanxyz_2\00"
@129 = private constant [16 x i8] c"../_lazysusan_2\00"
@130 = private constant [17 x i8] c"../_modulusXYZ_2\00"
@131 = private constant [13 x i8] c"../_oscope_2\00"
@132 = private constant [18 x i8] c"../_popcorn2xyz_2\00"
@133 = private constant [16 x i8] c"../_popcorn2c_2\00"
@134 = private constant [20 x i8] c"../_separationxyz_2\00"
@135 = private constant [26 x i8] c"../_separationinsidexyz_2\00"
@136 = private constant [15 x i8] c"../_splitxyz_2\00"
@137 = private constant [16 x i8] c"../_splitsxyz_2\00"
@138 = private constant [14 x i8] c"../_stripes_2\00"
@139 = private constant [12 x i8] c"../_wedge_2\00"
@140 = private constant [17 x i8] c"../_wedgejulia_2\00"
@141 = private constant [15 x i8] c"../_wedgesph_2\00"
@142 = private constant [12 x i8] c"../_whorl_2\00"
@143 = private constant [21 x i8] c"../_waves2scalexyz_2\00"
@144 = private constant [20 x i8] c"../_waves2freqxyz_2\00"
@145 = private constant [12 x i8] c"../_auger_2\00"
@146 = private constant [17 x i8] c"../_fluxspread_2\00"
@147 = private constant [15 x i8] c"../_mobiusre_2\00"
@148 = private constant [15 x i8] c"../_mobiusim_2\00"
@149 = private constant [21 x i8] c"../_curvexyzlenght_2\00"
@150 = private constant [18 x i8] c"../_curvexyzamp_2\00"
@151 = private constant [12 x i8] c"../_persp_2\00"
@152 = private constant [13 x i8] c"../_bwraps_2\00"
@153 = private constant [18 x i8] c"../_bwrapstwist_2\00"
@154 = private constant [20 x i8] c"../_polynomialpow_2\00"
@155 = private constant [19 x i8] c"../_polynomiallc_2\00"
@156 = private constant [19 x i8] c"../_polynomialsc_2\00"
@157 = private constant [13 x i8] c"../symgpivot\00"
@158 = private constant [12 x i8] c"mb_modulate\00"
@159 = private constant [4 x i8] c"set\00"
@ptnum = external global i64
@pscale = external global double
@COORD = external global double
@P = external global <3 x double>
@160 = private constant [6 x i8] c"ptnum\00"
@161 = private constant [7 x i8] c"pscale\00"
@162 = private constant [6 x i8] c"COORD\00"
@163 = private constant [2 x i8] c"P\00"

; Function Attrs: alwaysinline nounwind
define private double @"ATAN@FU"(<2 x double>* %p) #0 {
__llvm_entry:
  %p1 = load <2 x double>, <2 x double>* %p
  %return = call double @"getcomp@FUI"(<2 x double> %p1, i64 0)
  %return3 = call double @"getcomp@FUI"(<2 x double> %p1, i64 1)
  %return4 = call double @"atan2@FFF"(double %return, double %return3)
  ret double %return4
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private double @"ATANYX@FU"(<2 x double>* %p) #0 {
__llvm_entry:
  %p1 = load <2 x double>, <2 x double>* %p
  %return = call double @"getcomp@FUI"(<2 x double> %p1, i64 1)
  %return3 = call double @"getcomp@FUI"(<2 x double> %p1, i64 0)
  %return4 = call double @"atan2@FFF"(double %return, double %return3)
  ret double %return4
}

; Function Attrs: alwaysinline nounwind
define private double @"SUMSQ@FU"(<2 x double>* %p) #0 {
__llvm_entry:
  %p1 = load <2 x double>, <2 x double>* %p
  %return = call double @"getcomp@FUI"(<2 x double> %p1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %p1, i64 1)
  %output8 = fmul double %return5, %return5
  %output9 = fadd double %output, %output8
  ret double %output9
}

; Function Attrs: alwaysinline nounwind
define private double @"SQRT@FU"(<2 x double>* %p) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %p1 = load <2 x double>, <2 x double>* %p
  store <2 x double> %p1, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %return = call double @"sqrt@FF"(double %SUMSQ)
  ret double %return
}

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private double @"sgn@FF"(double* %n) #0 {
__llvm_entry:
  %n1 = load double, double* %n
  %return = fcmp olt double %n1, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"neg@II"(i64 1)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return5 = fcmp ogt double %n1, 0.000000e+00
  %. = select i1 %return5, i64 1, i64 0
  br label %end

end:                                              ; preds = %false, %true
  %phi10 = phi i64 [ %return3, %true ], [ %., %false ]
  %cast = sitofp i64 %phi10 to double
  ret double %cast
}

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: alwaysinline nounwind
define private double @"fmod@FFF"(double* %a, double* %b) #0 {
__llvm_entry:
  %a1 = load double, double* %a
  %b3 = load double, double* %b
  %output = call double @"div@FF"(double %a1, double %b3)
  %return = call double @"floor@FF"(double %output)
  %output5 = fmul double %return, %b3
  %output6 = fsub double %a1, %output5
  ret double %output6
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"sincos@FFF"(double* %a, double* %sa, double* %ca) #0 {
__llvm_entry:
  %a1 = load double, double* %a
  %return = call double @"sin@FF"(double %a1)
  store double %return, double* %sa
  %a2 = load double, double* %a
  %return3 = call double @"cos@FF"(double %a2)
  store double %return3, double* %ca
  ret void
}

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private <2 x double> @"biunit@U"() #0 {
__llvm_entry:
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return1 to double
  %return2 = call double @"fit01@FFFF"(double %return, double %cast, double 1.000000e+00)
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return6 = call double @"fit01@FFFF"(double %return3, double %cast, double 1.000000e+00)
  %return7 = call <2 x double> @"set@UFF"(double %return2, double %return6)
  ret <2 x double> %return7
}

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #2

; Function Attrs: nounwind
declare double @"fit01@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private i64 @"chkNAN_v@IIU"(i64* %ACTIVE, <2 x double>* %vec) #0 {
__llvm_entry:
  %ACTIVE1 = load i64, i64* %ACTIVE
  %0 = icmp ne i64 %ACTIVE1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %vec2 = load <2 x double>, <2 x double>* %vec
  %return = call double @"getcomp@FUI"(<2 x double> %vec2, i64 0)
  %return3 = call i64 @"isfinite@IF"(double %return)
  %return4 = call i64 @"not@II"(i64 %return3)
  %return6 = call double @"getcomp@FUI"(<2 x double> %vec2, i64 1)
  %return7 = call i64 @"isfinite@IF"(double %return6)
  %return8 = call i64 @"not@II"(i64 %return7)
  %return9 = call i64 @"or@III"(i64 %return4, i64 %return8)
  %return12 = call i64 @"isnan@IF"(double %return)
  %return13 = call i64 @"or@III"(i64 %return9, i64 %return12)
  %return16 = call i64 @"isnan@IF"(double %return6)
  %return17 = call i64 @"or@III"(i64 %return13, i64 %return16)
  %return19 = call double @"length@FU"(<2 x double> %vec2)
  %return20 = fcmp ogt double %return19, 1.000000e+03
  %return21 = zext i1 %return20 to i64
  %return22 = call i64 @"or@III"(i64 %return17, i64 %return21)
  %1 = icmp ne i64 %return22, 0
  %. = select i1 %1, i64 1, i64 0
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %merge = phi i64 [ 0, %__llvm_entry ], [ %., %true ]
  ret i64 %merge
}

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #1

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #2

; Function Attrs: alwaysinline nounwind
define private void @"V_SYM@UUI"(<2 x double>* %p, <2 x double>* %pivot, i64* %num) #0 {
__llvm_entry:
  %num1 = load i64, i64* %num
  %return = call i64 @"not@II"(i64 %num1)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = call double @"div@FF"(double 1.000000e+00, double 3.000000e+00)
  %return3 = fcmp ogt double %return2, %output
  br i1 %return3, label %true5, label %end

false:                                            ; preds = %__llvm_entry
  %1 = icmp ne i64 %num1, 0
  br i1 %1, label %true22, label %end

end:                                              ; preds = %false, %end28, %true, %end11
  ret void

true5:                                            ; preds = %true
  %return7 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return8 = fcmp ogt double %return7, 5.000000e-01
  br i1 %return8, label %true10, label %end11

true10:                                           ; preds = %true5
  br label %end11

end11:                                            ; preds = %true10, %true5
  %ang.0 = phi double [ 2.400000e+02, %true10 ], [ 1.200000e+02, %true5 ]
  %p12 = load <2 x double>, <2 x double>* %p
  %cast = call <3 x double> @"set@VI"(i64 0)
  %return14 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %ang.0)
  %cast15 = call <3 x double> @"set@VI"(i64 1)
  %pivot16 = load <2 x double>, <2 x double>* %pivot
  %cast17 = call <3 x double> @"set@VU"(<2 x double> %pivot16)
  %return18 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return14, <3 x double> %cast15, <3 x double> %cast17)
  %cast19 = call <4 x double> @"set@24"(<16 x double> %return18)
  %output20 = call <2 x double> @"mul@U2"(<2 x double> %p12, <4 x double> %cast19)
  store <2 x double> %output20, <2 x double>* %p
  br label %end

true22:                                           ; preds = %false
  %return24 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return25 = fcmp oge double %return24, 2.000000e-01
  br i1 %return25, label %true27, label %end28

true27:                                           ; preds = %true22
  %return29 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return31 = fcmp olt double 2.000000e-01, %return29
  %return32 = zext i1 %return31 to i64
  %cast33 = sitofp i64 %return32 to double
  %return34 = fcmp ole double %cast33, 4.000000e-01
  br i1 %return34, label %true36, label %false37

end28:                                            ; preds = %false55, %true63, %true54, %true45, %true36, %true22
  %ang.1 = phi double [ 7.200000e+01, %true36 ], [ 1.440000e+02, %true45 ], [ 2.160000e+02, %true54 ], [ 2.880000e+02, %true63 ], [ 0.000000e+00, %false55 ], [ 0.000000e+00, %true22 ]
  %p65 = load <2 x double>, <2 x double>* %p
  %cast66 = call <3 x double> @"set@VI"(i64 0)
  %return68 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %ang.1)
  %cast69 = call <3 x double> @"set@VI"(i64 1)
  %pivot70 = load <2 x double>, <2 x double>* %pivot
  %cast71 = call <3 x double> @"set@VU"(<2 x double> %pivot70)
  %return72 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast66, <3 x double> %return68, <3 x double> %cast69, <3 x double> %cast71)
  %cast73 = call <4 x double> @"set@24"(<16 x double> %return72)
  %output74 = call <2 x double> @"mul@U2"(<2 x double> %p65, <4 x double> %cast73)
  store <2 x double> %output74, <2 x double>* %p
  br label %end

true36:                                           ; preds = %true27
  br label %end28

false37:                                          ; preds = %true27
  %return40 = fcmp olt double 4.000000e-01, %return29
  %return41 = zext i1 %return40 to i64
  %cast42 = sitofp i64 %return41 to double
  %return43 = fcmp ole double %cast42, 6.000000e-01
  br i1 %return43, label %true45, label %false46

true45:                                           ; preds = %false37
  br label %end28

false46:                                          ; preds = %false37
  %return49 = fcmp olt double 6.000000e-01, %return29
  %return50 = zext i1 %return49 to i64
  %cast51 = sitofp i64 %return50 to double
  %return52 = fcmp ole double %cast51, 8.000000e-01
  br i1 %return52, label %true54, label %false55

true54:                                           ; preds = %false46
  br label %end28

false55:                                          ; preds = %false46
  %return58 = fcmp olt double 8.000000e-01, %return29
  %return59 = zext i1 %return58 to i64
  %cast60 = sitofp i64 %return59 to double
  %return61 = fcmp ole double %cast60, 1.000000e+00
  br i1 %return61, label %true63, label %end28

true63:                                           ; preds = %false55
  br label %end28
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VU"(<2 x double>) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@24"(<16 x double>) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@U2"(<2 x double>, <4 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"affine@UUUU"(<2 x double>* %p, <2 x double>* %x, <2 x double>* %y, <2 x double>* %o) #0 {
__llvm_entry:
  %x1 = load <2 x double>, <2 x double>* %x
  %return = call double @"getcomp@FUI"(<2 x double> %x1, i64 0)
  %p2 = load <2 x double>, <2 x double>* %p
  %return3 = call double @"getcomp@FUI"(<2 x double> %p2, i64 0)
  %output = fmul double %return, %return3
  %y4 = load <2 x double>, <2 x double>* %y
  %return5 = call double @"getcomp@FUI"(<2 x double> %y4, i64 0)
  %return7 = call double @"getcomp@FUI"(<2 x double> %p2, i64 1)
  %output8 = fmul double %return5, %return7
  %output9 = fadd double %output, %output8
  %o10 = load <2 x double>, <2 x double>* %o
  %return11 = call double @"getcomp@FUI"(<2 x double> %o10, i64 0)
  %output12 = fadd double %output9, %return11
  %return14 = call double @"getcomp@FUI"(<2 x double> %x1, i64 1)
  %output17 = fmul double %return14, %return3
  %return19 = call double @"getcomp@FUI"(<2 x double> %y4, i64 1)
  %output22 = fmul double %return19, %return7
  %output23 = fadd double %output17, %output22
  %return25 = call double @"getcomp@FUI"(<2 x double> %o10, i64 1)
  %output26 = fadd double %output23, %return25
  %return27 = call <2 x double> @"set@UFF"(double %output12, double %output26)
  store <2 x double> %return27, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %x, <2 x double>* %y, double* %ang) #0 {
__llvm_entry:
  %x1 = load <2 x double>, <2 x double>* %x
  %y2 = load <2 x double>, <2 x double>* %y
  %return = call <4 x double> @"set@2UU"(<2 x double> %x1, <2 x double> %y2)
  store <4 x double> %return, <4 x double>* %m2
  %ang4 = load double, double* %ang
  %output = call <4 x double> @"rotate@2F"(<4 x double> %return, double %ang4)
  store <4 x double> %output, <4 x double>* %m2
  ret void
}

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_SINUSOIDAL@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %output = fmul double %w1, %return3
  %tmp = load <2 x double>, <2 x double>* %p
  %return4 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output, i64 0)
  %output6 = extractvalue { double, <2 x double> } %return4, 1
  store <2 x double> %output6, <2 x double>* %p
  %w7 = load double, double* %w
  %_p8 = load <2 x double>, <2 x double>* %_p
  %return9 = call double @"getcomp@FUI"(<2 x double> %_p8, i64 1)
  %return10 = call double @"sin@FF"(double %return9)
  %output11 = fmul double %w7, %return10
  %return13 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output6, double %output11, i64 1)
  %output15 = extractvalue { double, <2 x double> } %return13, 1
  store <2 x double> %output15, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline
define private { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <2 x double> @"setcomp@UFI"(<2 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <2 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <2 x double> } %mrv, <2 x double> %rw16, 1
  ret { double, <2 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_SPHERICAL@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %output = fadd double %SUMSQ, 1.000000e-10
  %output3 = call double @"div@FF"(double %w1, double %output)
  %_p5 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p5, i64 0)
  %output6 = fmul double %output3, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return7 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output6, i64 0)
  %output9 = extractvalue { double, <2 x double> } %return7, 1
  store <2 x double> %output9, <2 x double>* %p
  %_p11 = load <2 x double>, <2 x double>* %_p
  %return12 = call double @"getcomp@FUI"(<2 x double> %_p11, i64 1)
  %output13 = fmul double %output3, %return12
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output9, double %output13, i64 1)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SWIRL@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %return = call double @"sin@FF"(double %SUMSQ)
  %return4 = call double @"cos@FF"(double %SUMSQ)
  %_p6 = load <2 x double>, <2 x double>* %_p
  %return7 = call double @"getcomp@FUI"(<2 x double> %_p6, i64 0)
  %output = fmul double %return, %return7
  %return10 = call double @"getcomp@FUI"(<2 x double> %_p6, i64 1)
  %output11 = fmul double %return4, %return10
  %output12 = fsub double %output, %output11
  %output16 = fmul double %return4, %return7
  %output20 = fmul double %return, %return10
  %output21 = fadd double %output16, %output20
  %w22 = load double, double* %w
  %output24 = fmul double %w22, %output12
  %tmp = load <2 x double>, <2 x double>* %p
  %return25 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <2 x double> } %return25, 1
  store <2 x double> %output27, <2 x double>* %p
  %w28 = load double, double* %w
  %output30 = fmul double %w28, %output21
  %return32 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output27, double %output30, i64 1)
  %output34 = extractvalue { double, <2 x double> } %return32, 1
  store <2 x double> %output34, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_HORSESHOE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %output = fadd double %SQRT, 1.000000e-10
  %output3 = call double @"div@FF"(double %w1, double %output)
  %_p4 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p4, i64 0)
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p4, i64 1)
  %output7 = fsub double %return, %return6
  %output12 = fadd double %return, %return6
  %output13 = fmul double %output7, %output12
  %output15 = fmul double %output13, %output3
  %tmp = load <2 x double>, <2 x double>* %p
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  %_p19 = load <2 x double>, <2 x double>* %_p
  %return20 = call double @"getcomp@FUI"(<2 x double> %_p19, i64 0)
  %output21 = fmul double 2.000000e+00, %return20
  %return23 = call double @"getcomp@FUI"(<2 x double> %_p19, i64 1)
  %output24 = fmul double %output21, %return23
  %output26 = fmul double %output24, %output3
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output18, double %output26, i64 1)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_POLAR@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %output = fmul double %ATAN, 0x3FD45F306DC9C883
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %output3 = fsub double %SQRT, 1.000000e+00
  %w4 = load double, double* %w
  %output6 = fmul double %w4, %output
  %tmp = load <2 x double>, <2 x double>* %p
  %return = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output6, i64 0)
  %output8 = extractvalue { double, <2 x double> } %return, 1
  store <2 x double> %output8, <2 x double>* %p
  %w9 = load double, double* %w
  %output11 = fmul double %w9, %output3
  %return13 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output8, double %output11, i64 1)
  %output15 = extractvalue { double, <2 x double> } %return13, 1
  store <2 x double> %output15, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_HANDKERCHIEF@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca <2 x double>
  %3 = alloca <2 x double>
  %4 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %w2 = load double, double* %w
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %output = fmul double %w2, %SQRT
  %_p5 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p5, <2 x double>* %2
  %SQRT6 = call double @"SQRT@FU"(<2 x double>* %2)
  %output7 = fadd double %ATAN, %SQRT6
  %return = call double @"sin@FF"(double %output7)
  %output8 = fmul double %output, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return9 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <2 x double> } %return9, 1
  store <2 x double> %output11, <2 x double>* %p
  %w12 = load double, double* %w
  %_p13 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p13, <2 x double>* %3
  %SQRT14 = call double @"SQRT@FU"(<2 x double>* %3)
  %output15 = fmul double %w12, %SQRT14
  %_p17 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p17, <2 x double>* %4
  %SQRT18 = call double @"SQRT@FU"(<2 x double>* %4)
  %output19 = fsub double %ATAN, %SQRT18
  %return20 = call double @"cos@FF"(double %output19)
  %output21 = fmul double %output15, %return20
  %tmp22 = load <2 x double>, <2 x double>* %p
  %return23 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp22, double %output21, i64 1)
  %output25 = extractvalue { double, <2 x double> } %return23, 1
  store <2 x double> %output25, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_HEART@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %1
  %ATAN = call double @"ATAN@FU"(<2 x double>* %1)
  %output = fmul double %SQRT, %ATAN
  %return = call double @"sin@FF"(double %output)
  %return5 = call double @"cos@FF"(double %output)
  %w6 = load double, double* %w
  %_p7 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p7, <2 x double>* %2
  %SQRT8 = call double @"SQRT@FU"(<2 x double>* %2)
  %output9 = fmul double %w6, %SQRT8
  %output11 = fmul double %output9, %return
  %output14 = fmul double %output11, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %p
  %return19 = call double @"neg@FF"(double %output11)
  %output21 = fmul double %return19, %return5
  %return23 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output17, double %output21, i64 1)
  %output25 = extractvalue { double, <2 x double> } %return23, 1
  store <2 x double> %output25, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_DISC@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %output = call double @"div@FF"(double 1.000000e+00, double 0x400921FB4D12D84A)
  %output2 = fmul double %ATAN, %output
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %output4 = fmul double 0x400921FB4D12D84A, %SQRT
  store double %output4, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %w6 = load double, double* %w
  %sr7 = load double, double* %sr
  %output8 = fmul double %w6, %sr7
  %output10 = fmul double %output8, %output2
  %tmp = load <2 x double>, <2 x double>* %p
  %return = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output10, i64 0)
  %output12 = extractvalue { double, <2 x double> } %return, 1
  store <2 x double> %output12, <2 x double>* %p
  %w13 = load double, double* %w
  %cr14 = load double, double* %cr
  %output15 = fmul double %w13, %cr14
  %output17 = fmul double %output15, %output2
  %return19 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output12, double %output17, i64 1)
  %output21 = extractvalue { double, <2 x double> } %return19, 1
  store <2 x double> %output21, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SPIRAL@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %sr = alloca double
  %cr = alloca double
  %1 = alloca <2 x double>
  %2 = alloca double
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %cast = call <2 x double> @"set@UF"(double %SQRT)
  %output = call <2 x double> @"div@UU"(<2 x double> %_p1, <2 x double> %cast)
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %1
  %SQRT4 = call double @"SQRT@FU"(<2 x double>* %1)
  %output5 = fadd double %SQRT4, 1.000000e-10
  %w6 = load double, double* %w
  %output8 = call double @"div@FF"(double %w6, double %output5)
  store double %output5, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %return = call double @"getcomp@FUI"(<2 x double> %output, i64 1)
  %sr12 = load double, double* %sr
  %output13 = fadd double %return, %sr12
  %output14 = fmul double %output8, %output13
  %tmp = load <2 x double>, <2 x double>* %p
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %p
  %return20 = call double @"getcomp@FUI"(<2 x double> %output, i64 0)
  %cr21 = load double, double* %cr
  %output22 = fsub double %return20, %cr21
  %output23 = fmul double %output8, %output22
  %return25 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output17, double %output23, i64 1)
  %output27 = extractvalue { double, <2 x double> } %return25, 1
  store <2 x double> %output27, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UF"(double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"div@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_HIPERBOLIC@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %cast = call <2 x double> @"set@UF"(double %SQRT)
  %output = call <2 x double> @"div@UU"(<2 x double> %_p1, <2 x double> %cast)
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %1
  %SQRT4 = call double @"SQRT@FU"(<2 x double>* %1)
  %output5 = fadd double %SQRT4, 1.000000e-10
  %w6 = load double, double* %w
  %return = call double @"getcomp@FUI"(<2 x double> %output, i64 0)
  %output8 = fmul double %w6, %return
  %output10 = call double @"div@FF"(double %output8, double %output5)
  %tmp = load <2 x double>, <2 x double>* %p
  %return11 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output10, i64 0)
  %output13 = extractvalue { double, <2 x double> } %return11, 1
  store <2 x double> %output13, <2 x double>* %p
  %w14 = load double, double* %w
  %return16 = call double @"getcomp@FUI"(<2 x double> %output, i64 1)
  %output17 = fmul double %w14, %return16
  %output19 = fmul double %output17, %output5
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output13, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_DIAMOND@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %sr = alloca double
  %cr = alloca double
  %1 = alloca <2 x double>
  %2 = alloca double
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %cast = call <2 x double> @"set@UF"(double %SQRT)
  %output = call <2 x double> @"div@UU"(<2 x double> %_p1, <2 x double> %cast)
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %1
  %SQRT4 = call double @"SQRT@FU"(<2 x double>* %1)
  store double %SQRT4, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %w6 = load double, double* %w
  %return = call double @"getcomp@FUI"(<2 x double> %output, i64 0)
  %cr8 = load double, double* %cr
  %output9 = fmul double %return, %cr8
  %output10 = fmul double %w6, %output9
  %tmp = load <2 x double>, <2 x double>* %p
  %return11 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output10, i64 0)
  %output13 = extractvalue { double, <2 x double> } %return11, 1
  store <2 x double> %output13, <2 x double>* %p
  %w14 = load double, double* %w
  %return16 = call double @"getcomp@FUI"(<2 x double> %output, i64 1)
  %sr17 = load double, double* %sr
  %output18 = fmul double %return16, %sr17
  %output19 = fmul double %w14, %output18
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output13, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_EX@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %output = fadd double %ATAN, %SQRT
  %return = call double @"sin@FF"(double %output)
  %output7 = fsub double %ATAN, %SQRT
  %return8 = call double @"cos@FF"(double %output7)
  %output11 = fmul double %return, %return
  %output13 = fmul double %output11, %return
  %output15 = fmul double %output13, %SQRT
  %output18 = fmul double %return8, %return8
  %output20 = fmul double %output18, %return8
  %output22 = fmul double %output20, %SQRT
  %w23 = load double, double* %w
  %output26 = fadd double %output15, %output22
  %output27 = fmul double %w23, %output26
  %tmp = load <2 x double>, <2 x double>* %p
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  %w31 = load double, double* %w
  %output34 = fsub double %output15, %output22
  %output35 = fmul double %w31, %output34
  %return37 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output30, double %output35, i64 1)
  %output39 = extractvalue { double, <2 x double> } %return37, 1
  store <2 x double> %output39, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_JULIA@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %output = fmul double 5.000000e-01, %ATAN
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return2 = fcmp olt double %return, 5.000000e-01
  br i1 %return2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output5 = fadd double %output, 0x400921FB4D12D84A
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %aa.0 = phi double [ %output5, %true ], [ %output, %__llvm_entry ]
  %w6 = load double, double* %w
  %_p7 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p7, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %return8 = call double @"sqrt@FF"(double %SQRT)
  %output9 = fmul double %w6, %return8
  store double %aa.0, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %ca12 = load double, double* %ca
  %output13 = fmul double %output9, %ca12
  %tmp = load <2 x double>, <2 x double>* %p
  %return14 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output13, i64 0)
  %output16 = extractvalue { double, <2 x double> } %return14, 1
  store <2 x double> %output16, <2 x double>* %p
  %sa18 = load double, double* %sa
  %output19 = fmul double %output9, %sa18
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output16, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_BENT@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %return5 = fcmp olt double %return, 0.000000e+00
  br i1 %return5, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output = fmul double %return, 2.000000e+00
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nx.0 = phi double [ %output, %true ], [ %return, %__llvm_entry ]
  %return9 = fcmp olt double %return3, 0.000000e+00
  br i1 %return9, label %true11, label %end12

true11:                                           ; preds = %end
  %output14 = call double @"div@FF"(double %return3, double 2.000000e+00)
  br label %end12

end12:                                            ; preds = %true11, %end
  %ny.0 = phi double [ %output14, %true11 ], [ %return3, %end ]
  %w15 = load double, double* %w
  %output17 = fmul double %w15, %nx.0
  %tmp = load <2 x double>, <2 x double>* %p
  %return18 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <2 x double> } %return18, 1
  store <2 x double> %output20, <2 x double>* %p
  %w21 = load double, double* %w
  %output23 = fmul double %w21, %ny.0
  %return25 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output20, double %output23, i64 1)
  %output27 = extractvalue { double, <2 x double> } %return25, 1
  store <2 x double> %output27, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_WAVES@UUFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %d, double* %e, double* %f, double* %h) #0 {
__llvm_entry:
  %f1 = load double, double* %f
  %output = fmul double %f1, %f1
  %output3 = fadd double %output, 1.000000e-10
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output3)
  %h5 = load double, double* %h
  %output7 = fmul double %h5, %h5
  %output8 = fadd double %output7, 1.000000e-10
  %output9 = call double @"div@FF"(double 1.000000e+00, double %output8)
  %_p10 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p10, i64 0)
  %d11 = load double, double* %d
  %return13 = call double @"getcomp@FUI"(<2 x double> %_p10, i64 1)
  %output15 = fmul double %return13, %output4
  %return16 = call double @"sin@FF"(double %output15)
  %output17 = fmul double %d11, %return16
  %output18 = fadd double %return, %output17
  %e21 = load double, double* %e
  %output25 = fmul double %return, %output9
  %return26 = call double @"sin@FF"(double %output25)
  %output27 = fmul double %e21, %return26
  %output28 = fadd double %return13, %output27
  %w29 = load double, double* %w
  %output31 = fmul double %w29, %output18
  %tmp = load <2 x double>, <2 x double>* %p
  %return32 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output31, i64 0)
  %output34 = extractvalue { double, <2 x double> } %return32, 1
  store <2 x double> %output34, <2 x double>* %p
  %w35 = load double, double* %w
  %output37 = fmul double %w35, %output28
  %return39 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output34, double %output37, i64 1)
  %output41 = extractvalue { double, <2 x double> } %return39, 1
  store <2 x double> %output41, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_FISHEYE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %w2 = load double, double* %w
  %output = fmul double 2.000000e+00, %w2
  %output4 = fadd double %SQRT, 1.000000e+00
  %output5 = call double @"div@FF"(double %output, double %output4)
  %_p7 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p7, i64 1)
  %output8 = fmul double %output5, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return9 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <2 x double> } %return9, 1
  store <2 x double> %output11, <2 x double>* %p
  %_p13 = load <2 x double>, <2 x double>* %_p
  %return14 = call double @"getcomp@FUI"(<2 x double> %_p13, i64 0)
  %output15 = fmul double %output5, %return14
  %return17 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output11, double %output15, i64 1)
  %output19 = extractvalue { double, <2 x double> } %return17, 1
  store <2 x double> %output19, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_POPCORN@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %d, double* %h) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %output = fmul double 3.000000e+00, %return
  %return2 = call double @"tan@FF"(double %output)
  %return4 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %output5 = fmul double 3.000000e+00, %return4
  %return6 = call double @"tan@FF"(double %output5)
  %d9 = load double, double* %d
  %return11 = call double @"sin@FF"(double %return2)
  %output12 = fmul double %d9, %return11
  %output13 = fadd double %return4, %output12
  %h16 = load double, double* %h
  %return18 = call double @"sin@FF"(double %return6)
  %output19 = fmul double %h16, %return18
  %output20 = fadd double %return, %output19
  %w21 = load double, double* %w
  %output23 = fmul double %w21, %output13
  %tmp = load <2 x double>, <2 x double>* %p
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  %w27 = load double, double* %w
  %output29 = fmul double %w27, %output20
  %return31 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output26, double %output29, i64 1)
  %output33 = extractvalue { double, <2 x double> } %return31, 1
  store <2 x double> %output33, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_EXPONENTIAL@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sdy = alloca double
  %cdy = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sdy, !vex-initializer-store !3
  store double 0.000000e+00, double* %cdy, !vex-initializer-store !3
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output = fsub double %return, 1.000000e+00
  %return3 = call double @"exp@FF"(double %output)
  %output4 = fmul double %w1, %return3
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output7 = fmul double 0x400921FB4D12D84A, %return6
  store double %output7, double* %0
  call void @"sincos@FFF"(double* %0, double* %sdy, double* %cdy)
  %cdy10 = load double, double* %cdy
  %output11 = fmul double %output4, %cdy10
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %sdy16 = load double, double* %sdy
  %output17 = fmul double %output4, %sdy16
  %return19 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output17, i64 1)
  %output21 = extractvalue { double, <2 x double> } %return19, 1
  store <2 x double> %output21, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"exp@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_POWER@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %cast = call <2 x double> @"set@UF"(double %SQRT)
  %output = call <2 x double> @"div@UU"(<2 x double> %_p1, <2 x double> %cast)
  %w3 = load double, double* %w
  %_p4 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p4, <2 x double>* %1
  %SQRT5 = call double @"SQRT@FU"(<2 x double>* %1)
  %return = call double @"getcomp@FUI"(<2 x double> %output, i64 0)
  %return7 = call double @"pow@FFF"(double %SQRT5, double %return)
  %output8 = fmul double %w3, %return7
  %return11 = call double @"getcomp@FUI"(<2 x double> %output, i64 1)
  %output12 = fmul double %output8, %return11
  %tmp = load <2 x double>, <2 x double>* %p
  %return13 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <2 x double> } %return13, 1
  store <2 x double> %output15, <2 x double>* %p
  %output19 = fmul double %output8, %return
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output15, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"pow@FFF"(double, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_COSINE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %output = fmul double %return, 0x400921FB4D12D84A
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %sa, double* %ca)
  %ca3 = load double, double* %ca
  %_p4 = load <2 x double>, <2 x double>* %_p
  %return5 = call double @"getcomp@FUI"(<2 x double> %_p4, i64 1)
  %return6 = call double @"cosh@FF"(double %return5)
  %output7 = fmul double %ca3, %return6
  %sa8 = load double, double* %sa
  %return9 = call double @"neg@FF"(double %sa8)
  %return12 = call double @"sinh@FF"(double %return5)
  %output13 = fmul double %return9, %return12
  %w14 = load double, double* %w
  %output16 = fmul double %w14, %output7
  %tmp = load <2 x double>, <2 x double>* %p
  %return17 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <2 x double> } %return17, 1
  store <2 x double> %output19, <2 x double>* %p
  %w20 = load double, double* %w
  %output22 = fmul double %w20, %output13
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output19, double %output22, i64 1)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"cosh@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"sinh@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_RINGS@UUFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %d) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca double
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %cast = call <2 x double> @"set@UF"(double %SQRT)
  %output = call <2 x double> @"div@UU"(<2 x double> %_p1, <2 x double> %cast)
  %d3 = load double, double* %d
  %output5 = fmul double %d3, %d3
  %output6 = fadd double %output5, 1.000000e-10
  %_p7 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p7, <2 x double>* %1
  %SQRT8 = call double @"SQRT@FU"(<2 x double>* %1)
  %w9 = load double, double* %w
  %output12 = fadd double %SQRT8, %output6
  store double %output12, double* %2
  %output14 = fmul double 2.000000e+00, %output6
  store double %output14, double* %3
  %fmod = call double @"fmod@FFF"(double* %2, double* %3)
  %output16 = fsub double %fmod, %output6
  %output19 = fsub double 1.000000e+00, %output6
  %output20 = fmul double %SQRT8, %output19
  %output21 = fadd double %output16, %output20
  %output22 = fmul double %w9, %output21
  %return = call double @"getcomp@FUI"(<2 x double> %output, i64 1)
  %output25 = fmul double %output22, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return26 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output25, i64 0)
  %output28 = extractvalue { double, <2 x double> } %return26, 1
  store <2 x double> %output28, <2 x double>* %p
  %return31 = call double @"getcomp@FUI"(<2 x double> %output, i64 0)
  %output32 = fmul double %output22, %return31
  %return34 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output28, double %output32, i64 1)
  %output36 = extractvalue { double, <2 x double> } %return34, 1
  store <2 x double> %output36, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_FAN@UUFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %d) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %d1 = load double, double* %d
  %output = fmul double %d1, %d1
  %output3 = fadd double %output, 1.000000e-10
  %output4 = fmul double 0x400921FB4D12D84A, %output3
  %output7 = fmul double 5.000000e-01, %output4
  %_p8 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p8, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %w9 = load double, double* %w
  %_p10 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p10, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %output11 = fmul double %w9, %SQRT
  %output15 = fadd double %ATAN, %d1
  store double %output15, double* %2
  store double %output4, double* %3
  %fmod = call double @"fmod@FFF"(double* %2, double* %3)
  %return = fcmp ogt double %fmod, %output7
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return20 = call double @"neg@FF"(double %output7)
  br label %end

end:                                              ; preds = %__llvm_entry, %true
  %phi = phi double [ %return20, %true ], [ %output7, %__llvm_entry ]
  %output22 = fadd double %ATAN, %phi
  store double %output22, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %ca25 = load double, double* %ca
  %output26 = fmul double %output11, %ca25
  %tmp = load <2 x double>, <2 x double>* %p
  %return27 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output26, i64 0)
  %output29 = extractvalue { double, <2 x double> } %return27, 1
  store <2 x double> %output29, <2 x double>* %p
  %sa31 = load double, double* %sa
  %output32 = fmul double %output11, %sa31
  %return34 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output29, double %output32, i64 1)
  %output36 = extractvalue { double, <2 x double> } %return34, 1
  store <2 x double> %output36, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_BUBBLE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %output = fmul double 2.500000e-01, %SUMSQ
  %output3 = fadd double %output, 1.000000e+00
  %output4 = call double @"div@FF"(double %w1, double %output3)
  %_p6 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p6, i64 0)
  %output7 = fmul double %output4, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return8 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <2 x double> } %return8, 1
  store <2 x double> %output10, <2 x double>* %p
  %_p12 = load <2 x double>, <2 x double>* %_p
  %return13 = call double @"getcomp@FUI"(<2 x double> %_p12, i64 1)
  %output14 = fmul double %output4, %return13
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_CYLINDER@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %output = fmul double %w1, %return3
  %tmp = load <2 x double>, <2 x double>* %p
  %return4 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output, i64 0)
  %output6 = extractvalue { double, <2 x double> } %return4, 1
  store <2 x double> %output6, <2 x double>* %p
  %w7 = load double, double* %w
  %_p8 = load <2 x double>, <2 x double>* %_p
  %return9 = call double @"getcomp@FUI"(<2 x double> %_p8, i64 1)
  %output10 = fmul double %w7, %return9
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output6, double %output10, i64 1)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_EYEFISH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %w1 = load double, double* %w
  %output = fmul double %w1, 2.000000e+00
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %output3 = fadd double 1.000000e+00, %SQRT
  %output4 = call double @"div@FF"(double %output, double %output3)
  %_p6 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p6, i64 0)
  %output7 = fmul double %output4, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return8 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <2 x double> } %return8, 1
  store <2 x double> %output10, <2 x double>* %p
  %_p12 = load <2 x double>, <2 x double>* %_p
  %return13 = call double @"getcomp@FUI"(<2 x double> %_p12, i64 1)
  %output14 = fmul double %output4, %return13
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_BLUR@UF"(<2 x double>* %p, double* %w) #0 {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  store double %output1, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %w3 = load double, double* %w
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output5 = fmul double %w3, %return4
  %cosr7 = load double, double* %cosr
  %output8 = fmul double %output5, %cosr7
  %tmp = load <2 x double>, <2 x double>* %p
  %return9 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <2 x double> } %return9, 1
  store <2 x double> %output11, <2 x double>* %p
  %sinr13 = load double, double* %sinr
  %output14 = fmul double %output5, %sinr13
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output11, double %output14, i64 1)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_CURL@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %c1, double* %c2) #0 {
__llvm_entry:
  %c11 = load double, double* %c1
  %return = fcmp oeq double %c11, 0.000000e+00
  %c23 = load double, double* %c2
  %return4 = fcmp oeq double %c23, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br i1 %return4, label %true6, label %false7

false:                                            ; preds = %__llvm_entry
  %_p87 = load <2 x double>, <2 x double>* %_p
  %return88 = call double @"getcomp@FUI"(<2 x double> %_p87, i64 0)
  %output89 = fmul double %c11, %return88
  %output90 = fadd double 1.000000e+00, %output89
  br i1 %return4, label %true83, label %false84

end:                                              ; preds = %true83, %false84, %true6, %false7
  ret void

true6:                                            ; preds = %true
  %w9 = load double, double* %w
  %_p10 = load <2 x double>, <2 x double>* %_p
  %return11 = call double @"getcomp@FUI"(<2 x double> %_p10, i64 0)
  %output = fmul double %w9, %return11
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %w15 = load double, double* %w
  %_p16 = load <2 x double>, <2 x double>* %_p
  %return17 = call double @"getcomp@FUI"(<2 x double> %_p16, i64 1)
  %output18 = fmul double %w15, %return17
  %return20 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output18, i64 1)
  %output22 = extractvalue { double, <2 x double> } %return20, 1
  store <2 x double> %output22, <2 x double>* %p
  br label %end

false7:                                           ; preds = %true
  %_p24 = load <2 x double>, <2 x double>* %_p
  %return25 = call double @"getcomp@FUI"(<2 x double> %_p24, i64 0)
  %return26 = call double @"sqrt@FF"(double %return25)
  %return28 = call double @"getcomp@FUI"(<2 x double> %_p24, i64 1)
  %return29 = call double @"sqrt@FF"(double %return28)
  %output30 = fsub double %return26, %return29
  %output31 = fmul double %c23, %output30
  %output32 = fadd double 1.000000e+00, %output31
  %output34 = fmul double %c23, 2.000000e+00
  %output37 = fmul double %output34, %return25
  %output40 = fmul double %output37, %return28
  %w41 = load double, double* %w
  %output44 = fmul double %output32, %output32
  %output47 = fmul double %output40, %output40
  %output48 = fadd double %output44, %output47
  %output49 = call double @"div@FF"(double %w41, double %output48)
  %output53 = fmul double %return25, %output32
  %output57 = fmul double %return28, %output40
  %output58 = fadd double %output53, %output57
  %output60 = fmul double %output58, %output49
  %tmp61 = load <2 x double>, <2 x double>* %p
  %return62 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp61, double %output60, i64 0)
  %output64 = extractvalue { double, <2 x double> } %return62, 1
  store <2 x double> %output64, <2 x double>* %p
  %_p65 = load <2 x double>, <2 x double>* %_p
  %return66 = call double @"getcomp@FUI"(<2 x double> %_p65, i64 1)
  %output68 = fmul double %return66, %output32
  %return70 = call double @"getcomp@FUI"(<2 x double> %_p65, i64 0)
  %output72 = fmul double %return70, %output40
  %output73 = fsub double %output68, %output72
  %output75 = fmul double %output73, %output49
  %return77 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output64, double %output75, i64 1)
  %output79 = extractvalue { double, <2 x double> } %return77, 1
  store <2 x double> %output79, <2 x double>* %p
  br label %end

true83:                                           ; preds = %false
  %return93 = call double @"getcomp@FUI"(<2 x double> %_p87, i64 1)
  %output94 = fmul double %c11, %return93
  %w95 = load double, double* %w
  %output98 = fmul double %output90, %output90
  %output101 = fmul double %output94, %output94
  %output102 = fadd double %output98, %output101
  %output103 = call double @"div@FF"(double %w95, double %output102)
  %output107 = fmul double %return88, %output90
  %output111 = fmul double %return93, %output94
  %output112 = fadd double %output107, %output111
  %output114 = fmul double %output112, %output103
  %tmp115 = load <2 x double>, <2 x double>* %p
  %return116 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp115, double %output114, i64 0)
  %output118 = extractvalue { double, <2 x double> } %return116, 1
  store <2 x double> %output118, <2 x double>* %p
  %_p119 = load <2 x double>, <2 x double>* %_p
  %return120 = call double @"getcomp@FUI"(<2 x double> %_p119, i64 1)
  %output122 = fmul double %return120, %output90
  %return124 = call double @"getcomp@FUI"(<2 x double> %_p119, i64 0)
  %output126 = fmul double %return124, %output94
  %output127 = fsub double %output122, %output126
  %output129 = fmul double %output127, %output103
  %return131 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output118, double %output129, i64 1)
  %output133 = extractvalue { double, <2 x double> } %return131, 1
  store <2 x double> %output133, <2 x double>* %p
  br label %end

false84:                                          ; preds = %false
  %return142 = call double @"sqrt@FF"(double %return88)
  %return144 = call double @"getcomp@FUI"(<2 x double> %_p87, i64 1)
  %return145 = call double @"sqrt@FF"(double %return144)
  %output146 = fsub double %return142, %return145
  %output147 = fmul double %c23, %output146
  %output148 = fadd double %output90, %output147
  %output152 = fmul double %c11, %return144
  %output154 = fmul double %c23, 2.000000e+00
  %output157 = fmul double %output154, %return88
  %output160 = fmul double %output157, %return144
  %output161 = fadd double %output152, %output160
  %w162 = load double, double* %w
  %output165 = fmul double %output148, %output148
  %output168 = fmul double %output161, %output161
  %output169 = fadd double %output165, %output168
  %output170 = call double @"div@FF"(double %w162, double %output169)
  %output174 = fmul double %return88, %output148
  %output178 = fmul double %return144, %output161
  %output179 = fadd double %output174, %output178
  %output181 = fmul double %output179, %output170
  %tmp182 = load <2 x double>, <2 x double>* %p
  %return183 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp182, double %output181, i64 0)
  %output185 = extractvalue { double, <2 x double> } %return183, 1
  store <2 x double> %output185, <2 x double>* %p
  %_p186 = load <2 x double>, <2 x double>* %_p
  %return187 = call double @"getcomp@FUI"(<2 x double> %_p186, i64 1)
  %output189 = fmul double %return187, %output148
  %return191 = call double @"getcomp@FUI"(<2 x double> %_p186, i64 0)
  %output193 = fmul double %return191, %output161
  %output194 = fsub double %output189, %output193
  %output196 = fmul double %output194, %output170
  %return198 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output185, double %output196, i64 1)
  %output200 = extractvalue { double, <2 x double> } %return198, 1
  store <2 x double> %output200, <2 x double>* %p
  br label %end
}

; Function Attrs: alwaysinline nounwind
define private void @"V_NGON@UUFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %pow, double* %sides, double* %corners, double* %circle) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %return = call double @"neg@FF"(double 5.000000e-01)
  %pow1 = load double, double* %pow
  %output = fmul double %return, %pow1
  %sides2 = load double, double* %sides
  %output3 = call double @"div@FF"(double 0x401921FB4D12D84A, double %sides2)
  %output5 = call double @"div@FF"(double 1.000000e+00, double %output3)
  %_p6 = load <2 x double>, <2 x double>* %_p
  %return7 = call double @"getcomp@FUI"(<2 x double> %_p6, i64 0)
  %return8 = fcmp oeq double %return7, 0.000000e+00
  %return9 = zext i1 %return8 to i64
  %return11 = call double @"getcomp@FUI"(<2 x double> %_p6, i64 1)
  %return12 = fcmp oeq double %return11, 0.000000e+00
  %return13 = zext i1 %return12 to i64
  %return14 = call i64 @"and@III"(i64 %return9, i64 %return13)
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %end, label %false

false:                                            ; preds = %__llvm_entry
  store <2 x double> %_p6, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %return17 = call double @"pow@FFF"(double %SUMSQ, double %output)
  br label %end

end:                                              ; preds = %__llvm_entry, %false
  %phi18 = phi double [ %return17, %false ], [ 0.000000e+00, %__llvm_entry ]
  %_p19 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p19, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  %output24 = fmul double %ATANYX, %output5
  %return25 = call double @"floor@FF"(double %output24)
  %output26 = fmul double %output3, %return25
  %output27 = fsub double %ATANYX, %output26
  %output30 = fmul double 5.000000e-01, %output3
  %return31 = fcmp ogt double %output27, %output30
  br i1 %return31, label %true33, label %end34

true33:                                           ; preds = %end
  %output37 = fsub double %output27, %output3
  br label %end34

end34:                                            ; preds = %true33, %end
  %phi.0 = phi double [ %output37, %true33 ], [ %output27, %end ]
  %corners38 = load double, double* %corners
  %return40 = call double @"cos@FF"(double %phi.0)
  %output41 = call double @"div@FF"(double 1.000000e+00, double %return40)
  %output42 = fsub double %output41, 1.000000e+00
  %output43 = fmul double %corners38, %output42
  %circle44 = load double, double* %circle
  %output45 = fadd double %output43, %circle44
  %w46 = load double, double* %w
  %output47 = fmul double %output45, %w46
  %output49 = fmul double %output47, %phi18
  %_p51 = load <2 x double>, <2 x double>* %_p
  %return52 = call double @"getcomp@FUI"(<2 x double> %_p51, i64 0)
  %output53 = fmul double %output49, %return52
  %tmp = load <2 x double>, <2 x double>* %p
  %return54 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output53, i64 0)
  %output56 = extractvalue { double, <2 x double> } %return54, 1
  store <2 x double> %output56, <2 x double>* %p
  %_p58 = load <2 x double>, <2 x double>* %_p
  %return59 = call double @"getcomp@FUI"(<2 x double> %_p58, i64 1)
  %output60 = fmul double %output49, %return59
  %return62 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output56, double %output60, i64 1)
  %output64 = extractvalue { double, <2 x double> } %return62, 1
  store <2 x double> %output64, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_PDJ@UUFP"(<2 x double>* %p, <2 x double>* %_p, double* %w, <4 x double>* %pp) #0 {
__llvm_entry:
  %pp1 = load <4 x double>, <4 x double>* %pp
  %return = call double @"getcomp@FPI"(<4 x double> %pp1, i64 1)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output = fmul double %return, %return3
  %return4 = call double @"cos@FF"(double %output)
  %return6 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 2)
  %output9 = fmul double %return6, %return3
  %return10 = call double @"sin@FF"(double %output9)
  %return12 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 0)
  %return14 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output15 = fmul double %return12, %return14
  %return16 = call double @"sin@FF"(double %output15)
  %return18 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 3)
  %output21 = fmul double %return18, %return14
  %return22 = call double @"cos@FF"(double %output21)
  %w23 = load double, double* %w
  %output26 = fsub double %return16, %return4
  %output27 = fmul double %w23, %output26
  %tmp = load <2 x double>, <2 x double>* %p
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  %w31 = load double, double* %w
  %output34 = fsub double %return10, %return22
  %output35 = fmul double %w31, %output34
  %return37 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output30, double %output35, i64 1)
  %output39 = extractvalue { double, <2 x double> } %return37, 1
  store <2 x double> %output39, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FPI"(<4 x double>, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_BLOB@UUFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %pp1, double* %pp2, double* %pp3) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %cast = call <2 x double> @"set@UF"(double %SQRT)
  %output = call <2 x double> @"div@UU"(<2 x double> %_p1, <2 x double> %cast)
  %_p4 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p4, <2 x double>* %1
  %SQRT5 = call double @"SQRT@FU"(<2 x double>* %1)
  %_p7 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p7, <2 x double>* %2
  %ATAN = call double @"ATAN@FU"(<2 x double>* %2)
  %pp18 = load double, double* %pp1
  %pp29 = load double, double* %pp2
  %output10 = fsub double %pp18, %pp29
  %pp314 = load double, double* %pp3
  %output16 = fmul double %pp314, %ATAN
  %return = call double @"sin@FF"(double %output16)
  %output17 = fmul double 5.000000e-01, %return
  %output18 = fadd double 5.000000e-01, %output17
  %output19 = fmul double %output10, %output18
  %output20 = fadd double %pp29, %output19
  %output21 = fmul double %SQRT5, %output20
  %w22 = load double, double* %w
  %return24 = call double @"getcomp@FUI"(<2 x double> %output, i64 0)
  %output25 = fmul double %w22, %return24
  %output27 = fmul double %output25, %output21
  %tmp = load <2 x double>, <2 x double>* %p
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  %w31 = load double, double* %w
  %return33 = call double @"getcomp@FUI"(<2 x double> %output, i64 1)
  %output34 = fmul double %w31, %return33
  %output36 = fmul double %output34, %output21
  %return38 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output30, double %output36, i64 1)
  %output40 = extractvalue { double, <2 x double> } %return38, 1
  store <2 x double> %output40, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_JULIAN@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %power, double* %jdist) #0 {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %power1 = load double, double* %power
  %jdist2 = load double, double* %jdist
  %output = call double @"div@FF"(double %jdist2, double %power1)
  %output4 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output6 = fmul double %power1, %return
  %return7 = call double @"trunc@FF"(double %output6)
  %cast = fptosi double %return7 to i64
  %_p8 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p8, <2 x double>* %0
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %0)
  %cast10 = sitofp i64 %cast to double
  %output11 = fmul double 0x401921FB4D12D84A, %cast10
  %output12 = fadd double %ATANYX, %output11
  %power13 = load double, double* %power
  %output14 = call double @"div@FF"(double %output12, double %power13)
  %w15 = load double, double* %w
  %_p16 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p16, <2 x double>* %1
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %1)
  %return18 = call double @"pow@FFF"(double %SUMSQ, double %output4)
  %output19 = fmul double %w15, %return18
  store double %output14, double* %2
  call void @"sincos@FFF"(double* %2, double* %sina, double* %cosa)
  %cosa22 = load double, double* %cosa
  %output23 = fmul double %output19, %cosa22
  %tmp = load <2 x double>, <2 x double>* %p
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  %sina28 = load double, double* %sina
  %output29 = fmul double %output19, %sina28
  %return31 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output26, double %output29, i64 1)
  %output33 = extractvalue { double, <2 x double> } %return31, 1
  store <2 x double> %output33, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"trunc@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_JULIASCOPE@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %power, double* %jdist) #0 {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca <2 x double>
  %1 = alloca double
  %2 = alloca <2 x double>
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %power1 = load double, double* %power
  %jdist2 = load double, double* %jdist
  %output = call double @"div@FF"(double %jdist2, double %power1)
  %output4 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output6 = fmul double %power1, %return
  %return7 = call double @"trunc@FF"(double %output6)
  %cast = fptosi double %return7 to i64
  %return9 = and i64 %cast, 1
  %return10 = call i64 @"eq@III"(i64 %return9, i64 0)
  %3 = icmp ne i64 %return10, 0
  %cast12 = sitofp i64 %cast to double
  %output13 = fmul double 0x401921FB4D12D84A, %cast12
  %_p14 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p14, <2 x double>* %0
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %0)
  br i1 %3, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output15 = fadd double %output13, %ATANYX
  %power16 = load double, double* %power
  %output17 = call double @"div@FF"(double %output15, double %power16)
  br label %end

false:                                            ; preds = %__llvm_entry
  %output23 = fsub double %output13, %ATANYX
  %power24 = load double, double* %power
  %output25 = call double @"div@FF"(double %output23, double %power24)
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi double [ %output17, %true ], [ %output25, %false ]
  store double %phi, double* %1
  call void @"sincos@FFF"(double* %1, double* %sina, double* %cosa)
  %w27 = load double, double* %w
  %_p28 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p28, <2 x double>* %2
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %2)
  %return30 = call double @"pow@FFF"(double %SUMSQ, double %output4)
  %output31 = fmul double %w27, %return30
  %cosa33 = load double, double* %cosa
  %output34 = fmul double %output31, %cosa33
  %tmp = load <2 x double>, <2 x double>* %p
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output34, i64 0)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  %sina39 = load double, double* %sina
  %output40 = fmul double %output31, %sina39
  %return42 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output37, double %output40, i64 1)
  %output44 = extractvalue { double, <2 x double> } %return42, 1
  store <2 x double> %output44, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_GAUSSIAN@UF"(<2 x double>* %p, double* %w) #0 {
__llvm_entry:
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  %w2 = load double, double* %w
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output5 = fadd double %return3, %return4
  %return6 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output7 = fadd double %output5, %return6
  %return8 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output9 = fadd double %output7, %return8
  %output10 = fsub double %output9, 2.000000e+00
  %output11 = fmul double %w2, %output10
  %return14 = call double @"cos@FF"(double %output1)
  %output15 = fmul double %output11, %return14
  %tmp = load <2 x double>, <2 x double>* %p
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  %return21 = call double @"sin@FF"(double %output1)
  %output22 = fmul double %output11, %return21
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output18, double %output22, i64 1)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_FAN2@UUFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %fan2) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %fan21 = load <2 x double>, <2 x double>* %fan2
  %return = call double @"getcomp@FUI"(<2 x double> %fan21, i64 1)
  %return3 = call double @"getcomp@FUI"(<2 x double> %fan21, i64 0)
  %output = fmul double %return3, %return3
  %output6 = fadd double %output, 1.000000e-10
  %output7 = fmul double 0x400921FB4D12D84A, %output6
  %output9 = fmul double 5.000000e-01, %output7
  %_p10 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p10, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %w11 = load double, double* %w
  %_p12 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p12, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %output13 = fmul double %w11, %SQRT
  %output16 = fadd double %ATAN, %return
  %output22 = call double @"div@FF"(double %output16, double %output7)
  %cast = fptosi double %output22 to i64
  %cast23 = sitofp i64 %cast to double
  %output24 = fmul double %output7, %cast23
  %output25 = fsub double %output16, %output24
  %return28 = fcmp ogt double %output25, %output9
  %output32 = fsub double %ATAN, %output9
  %output35 = fadd double %ATAN, %output9
  %phi = select i1 %return28, double %output32, double %output35
  store double %phi, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %sa38 = load double, double* %sa
  %output39 = fmul double %output13, %sa38
  %tmp = load <2 x double>, <2 x double>* %p
  %return40 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output39, i64 0)
  %output42 = extractvalue { double, <2 x double> } %return40, 1
  store <2 x double> %output42, <2 x double>* %p
  %ca44 = load double, double* %ca
  %output45 = fmul double %output13, %ca44
  %return47 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output42, double %output45, i64 1)
  %output49 = extractvalue { double, <2 x double> } %return47, 1
  store <2 x double> %output49, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_RINGS2@UUFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %rings2val) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %cast = call <2 x double> @"set@UF"(double %SQRT)
  %output = call <2 x double> @"div@UU"(<2 x double> %_p1, <2 x double> %cast)
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %1
  %SQRT4 = call double @"SQRT@FU"(<2 x double>* %1)
  %rings2val5 = load double, double* %rings2val
  %output7 = fmul double %rings2val5, %rings2val5
  %return = call double @"neg@FF"(double 2.000000e+00)
  %output10 = fmul double %return, %output7
  %output13 = fadd double %SQRT4, %output7
  %output15 = fmul double 2.000000e+00, %output7
  %output16 = call double @"div@FF"(double %output13, double %output15)
  %cast17 = fptosi double %output16 to i64
  %cast18 = sitofp i64 %cast17 to double
  %output19 = fmul double %output10, %cast18
  %output22 = fsub double 1.000000e+00, %output7
  %output23 = fmul double %SQRT4, %output22
  %output24 = fadd double %output19, %output23
  %output25 = fadd double %SQRT4, %output24
  %w26 = load double, double* %w
  %return28 = call double @"getcomp@FUI"(<2 x double> %output, i64 0)
  %output29 = fmul double %w26, %return28
  %output31 = fmul double %output29, %output25
  %tmp = load <2 x double>, <2 x double>* %p
  %return32 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output31, i64 0)
  %output34 = extractvalue { double, <2 x double> } %return32, 1
  store <2 x double> %output34, <2 x double>* %p
  %w35 = load double, double* %w
  %return37 = call double @"getcomp@FUI"(<2 x double> %output, i64 1)
  %output38 = fmul double %w35, %return37
  %output40 = fmul double %output38, %output25
  %return42 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output34, double %output40, i64 1)
  %output44 = extractvalue { double, <2 x double> } %return42, 1
  store <2 x double> %output44, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_RECTANGLES@UUFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %rect) #0 {
__llvm_entry:
  %rect1 = load <2 x double>, <2 x double>* %rect
  %return = call double @"getcomp@FUI"(<2 x double> %rect1, i64 0)
  %return2 = fcmp oeq double %return, 0.000000e+00
  %w4 = load double, double* %w
  %_p5 = load <2 x double>, <2 x double>* %_p
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p5, i64 0)
  br i1 %return2, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = fmul double %w4, %return6
  %tmp = load <2 x double>, <2 x double>* %p
  %return7 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output, i64 0)
  %output9 = extractvalue { double, <2 x double> } %return7, 1
  store <2 x double> %output9, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %output15 = call double @"div@FF"(double %return6, double %return)
  %return16 = call i64 @"floor@IF"(double %output15)
  %output17 = mul i64 2, %return16
  %output18 = add i64 %output17, 1
  %rect19 = load <2 x double>, <2 x double>* %rect
  %return20 = call double @"getcomp@FUI"(<2 x double> %rect19, i64 0)
  %cast = sitofp i64 %output18 to double
  %output21 = fmul double %cast, %return20
  %_p22 = load <2 x double>, <2 x double>* %_p
  %return23 = call double @"getcomp@FUI"(<2 x double> %_p22, i64 0)
  %output24 = fsub double %output21, %return23
  %output25 = fmul double %w4, %output24
  %tmp26 = load <2 x double>, <2 x double>* %p
  %return27 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp26, double %output25, i64 0)
  %output29 = extractvalue { double, <2 x double> } %return27, 1
  store <2 x double> %output29, <2 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %rect30 = load <2 x double>, <2 x double>* %rect
  %return31 = call double @"getcomp@FUI"(<2 x double> %rect30, i64 1)
  %return32 = fcmp oeq double %return31, 0.000000e+00
  %w37 = load double, double* %w
  %_p38 = load <2 x double>, <2 x double>* %_p
  %return39 = call double @"getcomp@FUI"(<2 x double> %_p38, i64 1)
  br i1 %return32, label %true34, label %false35

true34:                                           ; preds = %end
  %output40 = fmul double %w37, %return39
  %tmp41 = load <2 x double>, <2 x double>* %p
  %return42 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp41, double %output40, i64 1)
  %output44 = extractvalue { double, <2 x double> } %return42, 1
  store <2 x double> %output44, <2 x double>* %p
  br label %end36

false35:                                          ; preds = %end
  %output50 = call double @"div@FF"(double %return39, double %return31)
  %return51 = call i64 @"floor@IF"(double %output50)
  %output52 = mul i64 2, %return51
  %output53 = add i64 %output52, 1
  %rect54 = load <2 x double>, <2 x double>* %rect
  %return55 = call double @"getcomp@FUI"(<2 x double> %rect54, i64 1)
  %cast56 = sitofp i64 %output53 to double
  %output57 = fmul double %cast56, %return55
  %_p58 = load <2 x double>, <2 x double>* %_p
  %return59 = call double @"getcomp@FUI"(<2 x double> %_p58, i64 1)
  %output60 = fsub double %output57, %return59
  %output61 = fmul double %w37, %output60
  %tmp62 = load <2 x double>, <2 x double>* %p
  %return63 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp62, double %output61, i64 1)
  %output65 = extractvalue { double, <2 x double> } %return63, 1
  store <2 x double> %output65, <2 x double>* %p
  br label %end36

end36:                                            ; preds = %false35, %true34
  ret void
}

; Function Attrs: nounwind
declare i64 @"floor@IF"(double) #2

; Function Attrs: alwaysinline nounwind
define private void @"V_RADIALBLUR@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %spin, double* %zoom) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %w1 = load double, double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fadd double %return, %return2
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output4 = fadd double %output, %return3
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output6 = fadd double %output4, %return5
  %output7 = fsub double %output6, 2.000000e+00
  %output8 = fmul double %w1, %output7
  %_p9 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p9, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %_p10 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p10, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  %spin11 = load double, double* %spin
  %output13 = fmul double %spin11, %output8
  %output14 = fadd double %ATANYX, %output13
  store double %output14, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %zoom16 = load double, double* %zoom
  %output18 = fmul double %zoom16, %output8
  %output19 = fsub double %output18, 1.000000e+00
  %ca21 = load double, double* %ca
  %output22 = fmul double %SQRT, %ca21
  %_p24 = load <2 x double>, <2 x double>* %_p
  %return25 = call double @"getcomp@FUI"(<2 x double> %_p24, i64 0)
  %output26 = fmul double %output19, %return25
  %output27 = fadd double %output22, %output26
  %tmp = load <2 x double>, <2 x double>* %p
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  %sa32 = load double, double* %sa
  %output33 = fmul double %SQRT, %sa32
  %_p35 = load <2 x double>, <2 x double>* %_p
  %return36 = call double @"getcomp@FUI"(<2 x double> %_p35, i64 1)
  %output37 = fmul double %output19, %return36
  %output38 = fadd double %output33, %output37
  %return40 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output30, double %output38, i64 1)
  %output42 = extractvalue { double, <2 x double> } %return40, 1
  store <2 x double> %output42, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_PIE@UFFFF"(<2 x double>* %p, double* %w, double* %slices, double* %thickness, double* %rotation) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %slices1 = load double, double* %slices
  %output = fmul double %return, %slices1
  %cast = fptosi double %output to i64
  %cast2 = sitofp i64 %cast to double
  %rotation3 = load double, double* %rotation
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %thickness6 = load double, double* %thickness
  %output7 = fmul double %return5, %thickness6
  %output8 = fadd double %cast2, %output7
  %output9 = fmul double 0x401921FB4D12D84A, %output8
  %slices10 = load double, double* %slices
  %output11 = call double @"div@FF"(double %output9, double %slices10)
  %output12 = fadd double %rotation3, %output11
  %w13 = load double, double* %w
  %return14 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output15 = fmul double %w13, %return14
  store double %output12, double* %0
  call void @"sincos@FFF"(double* %0, double* %sa, double* %ca)
  %ca18 = load double, double* %ca
  %output19 = fmul double %output15, %ca18
  %tmp = load <2 x double>, <2 x double>* %p
  %return20 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output19, i64 0)
  %output22 = extractvalue { double, <2 x double> } %return20, 1
  store <2 x double> %output22, <2 x double>* %p
  %sa24 = load double, double* %sa
  %output25 = fmul double %output15, %sa24
  %return27 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output22, double %output25, i64 1)
  %output29 = extractvalue { double, <2 x double> } %return27, 1
  store <2 x double> %output29, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_ARCH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %w1 = load double, double* %w
  %output = fmul double %return, %w1
  %output2 = fmul double %output, 0x400921FB4D12D84A
  store double %output2, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %_p4 = load <2 x double>, <2 x double>* %_p
  %return5 = call double @"getcomp@FUI"(<2 x double> %_p4, i64 0)
  %w6 = load double, double* %w
  %sinr7 = load double, double* %sinr
  %output8 = fmul double %w6, %sinr7
  %output9 = fadd double %return5, %output8
  %tmp = load <2 x double>, <2 x double>* %p
  %return10 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <2 x double> } %return10, 1
  store <2 x double> %output12, <2 x double>* %p
  %_p13 = load <2 x double>, <2 x double>* %_p
  %return14 = call double @"getcomp@FUI"(<2 x double> %_p13, i64 1)
  %w15 = load double, double* %w
  %sinr16 = load double, double* %sinr
  %output18 = fmul double %sinr16, %sinr16
  %output19 = fmul double %w15, %output18
  %cosr20 = load double, double* %cosr
  %output21 = call double @"div@FF"(double %output19, double %cosr20)
  %output22 = fadd double %return14, %output21
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output12, double %output22, i64 1)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_TANGENT@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %return5 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %return6 = call double @"cos@FF"(double %return5)
  %output = call double @"div@FF"(double %return3, double %return6)
  %output7 = fmul double %w1, %output
  %tmp = load <2 x double>, <2 x double>* %p
  %return8 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <2 x double> } %return8, 1
  store <2 x double> %output10, <2 x double>* %p
  %w11 = load double, double* %w
  %_p12 = load <2 x double>, <2 x double>* %_p
  %return13 = call double @"getcomp@FUI"(<2 x double> %_p12, i64 1)
  %return14 = call double @"tan@FF"(double %return13)
  %output15 = fmul double %w11, %return14
  %return17 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output10, double %output15, i64 1)
  %output19 = extractvalue { double, <2 x double> } %return17, 1
  store <2 x double> %output19, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SQUARE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %w1 = load double, double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fsub double %return, 5.000000e-01
  %output2 = fmul double %w1, %output
  %tmp = load <2 x double>, <2 x double>* %p
  %return3 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output2, i64 0)
  %output5 = extractvalue { double, <2 x double> } %return3, 1
  store <2 x double> %output5, <2 x double>* %p
  %w6 = load double, double* %w
  %return7 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output8 = fsub double %return7, 5.000000e-01
  %output9 = fmul double %w6, %output8
  %tmp10 = load <2 x double>, <2 x double>* %p
  %return11 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp10, double %output9, i64 0)
  %output13 = extractvalue { double, <2 x double> } %return11, 1
  store <2 x double> %output13, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_RAYS@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %w1 = load double, double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fmul double %w1, %return
  %output2 = fmul double %output, 0x400921FB4D12D84A
  %w3 = load double, double* %w
  %_p4 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p4, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %output5 = fadd double %SUMSQ, 1.000000e-10
  %output6 = call double @"div@FF"(double %w3, double %output5)
  %w7 = load double, double* %w
  %return9 = call double @"tan@FF"(double %output2)
  %output10 = fmul double %w7, %return9
  %output12 = fmul double %output10, %output6
  %_p14 = load <2 x double>, <2 x double>* %_p
  %return15 = call double @"getcomp@FUI"(<2 x double> %_p14, i64 0)
  %return16 = call double @"cos@FF"(double %return15)
  %output17 = fmul double %output12, %return16
  %tmp = load <2 x double>, <2 x double>* %p
  %return18 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <2 x double> } %return18, 1
  store <2 x double> %output20, <2 x double>* %p
  %_p22 = load <2 x double>, <2 x double>* %_p
  %return23 = call double @"getcomp@FUI"(<2 x double> %_p22, i64 1)
  %return24 = call double @"sin@FF"(double %return23)
  %output25 = fmul double %output12, %return24
  %return27 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output20, double %output25, i64 1)
  %output29 = extractvalue { double, <2 x double> } %return27, 1
  store <2 x double> %output29, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_BLADE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca <2 x double>
  %1 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %w1 = load double, double* %w
  %output = fmul double %return, %w1
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %output3 = fmul double %output, %SQRT
  store double %output3, double* %1
  call void @"sincos@FFF"(double* %1, double* %sinr, double* %cosr)
  %w5 = load double, double* %w
  %_p6 = load <2 x double>, <2 x double>* %_p
  %return7 = call double @"getcomp@FUI"(<2 x double> %_p6, i64 0)
  %output8 = fmul double %w5, %return7
  %cosr9 = load double, double* %cosr
  %sinr10 = load double, double* %sinr
  %output11 = fadd double %cosr9, %sinr10
  %output12 = fmul double %output8, %output11
  %tmp = load <2 x double>, <2 x double>* %p
  %return13 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <2 x double> } %return13, 1
  store <2 x double> %output15, <2 x double>* %p
  %w16 = load double, double* %w
  %_p17 = load <2 x double>, <2 x double>* %_p
  %return18 = call double @"getcomp@FUI"(<2 x double> %_p17, i64 0)
  %output19 = fmul double %w16, %return18
  %cosr20 = load double, double* %cosr
  %sinr21 = load double, double* %sinr
  %output22 = fsub double %cosr20, %sinr21
  %output23 = fmul double %output19, %output22
  %return25 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output15, double %output23, i64 1)
  %output27 = extractvalue { double, <2 x double> } %return25, 1
  store <2 x double> %output27, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SECANT2@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %output = fmul double %w1, %SQRT
  %return = call double @"cos@FF"(double %output)
  %output7 = call double @"div@FF"(double 1.000000e+00, double %return)
  %w8 = load double, double* %w
  %_p9 = load <2 x double>, <2 x double>* %_p
  %return10 = call double @"getcomp@FUI"(<2 x double> %_p9, i64 0)
  %output11 = fmul double %w8, %return10
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %return16 = fcmp olt double %return, 0.000000e+00
  %w18 = load double, double* %w
  %output20 = fadd double %output7, 1.000000e+00
  %output21 = fmul double %w18, %output20
  %output24 = fsub double %output7, 1.000000e+00
  %output25 = fmul double %w18, %output24
  %phi = select i1 %return16, double %output21, double %output25
  %return27 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %phi, i64 1)
  %output29 = extractvalue { double, <2 x double> } %return27, 1
  store <2 x double> %output29, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_TWINTRIAN@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca <2 x double>
  %1 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %w1 = load double, double* %w
  %output = fmul double %return, %w1
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %output3 = fmul double %output, %SQRT
  store double %output3, double* %1
  call void @"sincos@FFF"(double* %1, double* %sinr, double* %cosr)
  %sinr5 = load double, double* %sinr
  %output7 = fmul double %sinr5, %sinr5
  %return8 = call double @"log10@FF"(double %output7)
  %cosr9 = load double, double* %cosr
  %output10 = fadd double %return8, %cosr9
  %return12 = call i64 @"isfinite@IF"(double %output10)
  %return13 = call i64 @"not@II"(i64 %return12)
  %return15 = call i64 @"isnan@IF"(double %output10)
  %return16 = call i64 @"or@III"(i64 %return13, i64 %return15)
  %2 = icmp ne i64 %return16, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return17 = call double @"neg@FF"(double 3.000000e+01)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %diff.0 = phi double [ %return17, %true ], [ %output10, %__llvm_entry ]
  %w18 = load double, double* %w
  %_p19 = load <2 x double>, <2 x double>* %_p
  %return20 = call double @"getcomp@FUI"(<2 x double> %_p19, i64 0)
  %output21 = fmul double %w18, %return20
  %output23 = fmul double %output21, %diff.0
  %tmp = load <2 x double>, <2 x double>* %p
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  %w27 = load double, double* %w
  %_p28 = load <2 x double>, <2 x double>* %_p
  %return29 = call double @"getcomp@FUI"(<2 x double> %_p28, i64 0)
  %output30 = fmul double %w27, %return29
  %sinr32 = load double, double* %sinr
  %output33 = fmul double %sinr32, 0x400921FB4D12D84A
  %output34 = fsub double %diff.0, %output33
  %output35 = fmul double %output30, %output34
  %return37 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output26, double %output35, i64 1)
  %output39 = extractvalue { double, <2 x double> } %return37, 1
  store <2 x double> %output39, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"log10@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_CROSS@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %output8 = fmul double %return5, %return5
  %output9 = fsub double %output, %output8
  %w10 = load double, double* %w
  %output13 = fmul double %output9, %output9
  %output14 = fadd double %output13, 1.000000e-10
  %output15 = call double @"div@FF"(double 1.000000e+00, double %output14)
  %return16 = call double @"sqrt@FF"(double %output15)
  %output17 = fmul double %w10, %return16
  %output21 = fmul double %return, %output17
  %tmp = load <2 x double>, <2 x double>* %p
  %return22 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <2 x double> } %return22, 1
  store <2 x double> %output24, <2 x double>* %p
  %_p25 = load <2 x double>, <2 x double>* %_p
  %return26 = call double @"getcomp@FUI"(<2 x double> %_p25, i64 1)
  %output28 = fmul double %return26, %output17
  %return30 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output24, double %output28, i64 1)
  %output32 = extractvalue { double, <2 x double> } %return30, 1
  store <2 x double> %output32, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_DISC2@UUFFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %rot, double* %twist, double* %disc2_timespi, double* %disc2_sinadd, double* %disc2_cosadd) #0 {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  %1 = alloca <2 x double>
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %disc2_timespi1 = load double, double* %disc2_timespi
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return4 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output = fadd double %return, %return4
  %output5 = fmul double %disc2_timespi1, %output
  store double %output5, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %w7 = load double, double* %w
  %_p8 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p8, <2 x double>* %1
  %ATAN = call double @"ATAN@FU"(<2 x double>* %1)
  %output9 = fmul double %w7, %ATAN
  %output10 = call double @"div@FF"(double %output9, double 0x400921FB4D12D84A)
  %sinr11 = load double, double* %sinr
  %disc2_cosadd12 = load double, double* %disc2_cosadd
  %output13 = fadd double %sinr11, %disc2_cosadd12
  %output15 = fmul double %output13, %output10
  %tmp = load <2 x double>, <2 x double>* %p
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  %cosr19 = load double, double* %cosr
  %disc2_sinadd20 = load double, double* %disc2_sinadd
  %output21 = fadd double %cosr19, %disc2_sinadd20
  %output23 = fmul double %output21, %output10
  %return25 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output18, double %output23, i64 1)
  %output27 = extractvalue { double, <2 x double> } %return25, 1
  store <2 x double> %output27, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SUPERSHAPE@UUFFFFFFV"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %ss_rnd, double* %ss_m, double* %ss_holes, double* %ss_pm_4, double* %ss_pneg1_n1, <3 x double>* %ss_n) #0 {
__llvm_entry:
  %st = alloca double
  %ct = alloca double
  %0 = alloca <2 x double>
  %1 = alloca double
  %2 = alloca <2 x double>
  store double 0.000000e+00, double* %st, !vex-initializer-store !3
  store double 0.000000e+00, double* %ct, !vex-initializer-store !3
  %ss_pm_41 = load double, double* %ss_pm_4
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %0)
  %output = fmul double %ss_pm_41, %ATANYX
  %output3 = fadd double %output, 7.853981e-01
  store double %output3, double* %1
  call void @"sincos@FFF"(double* %1, double* %st, double* %ct)
  %ct5 = load double, double* %ct
  %return = call double @"abs@FF"(double %ct5)
  %ss_n7 = load <3 x double>, <3 x double>* %ss_n
  %return8 = call double @"getcomp@FVI"(<3 x double> %ss_n7, i64 1)
  %return9 = call double @"pow@FFF"(double %return, double %return8)
  %st10 = load double, double* %st
  %return11 = call double @"abs@FF"(double %st10)
  %ss_n13 = load <3 x double>, <3 x double>* %ss_n
  %return14 = call double @"getcomp@FVI"(<3 x double> %ss_n13, i64 2)
  %return15 = call double @"pow@FFF"(double %return11, double %return14)
  %_p16 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p16, <2 x double>* %2
  %SQRT17 = call double @"SQRT@FU"(<2 x double>* %2)
  %w18 = load double, double* %w
  %ss_rnd19 = load double, double* %ss_rnd
  %return20 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output21 = fmul double %ss_rnd19, %return20
  %ss_rnd22 = load double, double* %ss_rnd
  %output23 = fsub double 1.000000e+00, %ss_rnd22
  %output25 = fmul double %output23, %SQRT17
  %output26 = fadd double %output21, %output25
  %ss_holes27 = load double, double* %ss_holes
  %output28 = fsub double %output26, %ss_holes27
  %output29 = fmul double %w18, %output28
  %output32 = fadd double %return9, %return15
  %ss_pneg1_n133 = load double, double* %ss_pneg1_n1
  %return34 = call double @"pow@FFF"(double %output32, double %ss_pneg1_n133)
  %output35 = fmul double %output29, %return34
  %output37 = call double @"div@FF"(double %output35, double %SQRT17)
  %_p39 = load <2 x double>, <2 x double>* %_p
  %return40 = call double @"getcomp@FUI"(<2 x double> %_p39, i64 0)
  %output41 = fmul double %output37, %return40
  %tmp = load <2 x double>, <2 x double>* %p
  %return42 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output41, i64 0)
  %output44 = extractvalue { double, <2 x double> } %return42, 1
  store <2 x double> %output44, <2 x double>* %p
  %_p46 = load <2 x double>, <2 x double>* %_p
  %return47 = call double @"getcomp@FUI"(<2 x double> %_p46, i64 1)
  %output48 = fmul double %output37, %return47
  %return50 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output44, double %output48, i64 1)
  %output52 = extractvalue { double, <2 x double> } %return50, 1
  store <2 x double> %output52, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_FLOWER@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %petals, double* %holes) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %0)
  %w2 = load double, double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %holes3 = load double, double* %holes
  %output = fsub double %return, %holes3
  %output4 = fmul double %w2, %output
  %petals5 = load double, double* %petals
  %output7 = fmul double %petals5, %ATANYX
  %return8 = call double @"cos@FF"(double %output7)
  %output9 = fmul double %output4, %return8
  %_p10 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p10, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %output11 = call double @"div@FF"(double %output9, double %SQRT)
  %_p13 = load <2 x double>, <2 x double>* %_p
  %return14 = call double @"getcomp@FUI"(<2 x double> %_p13, i64 0)
  %output15 = fmul double %output11, %return14
  %tmp = load <2 x double>, <2 x double>* %p
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  %_p20 = load <2 x double>, <2 x double>* %_p
  %return21 = call double @"getcomp@FUI"(<2 x double> %_p20, i64 1)
  %output22 = fmul double %output11, %return21
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output18, double %output22, i64 1)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_CONIC@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %eccentricity, double* %holes) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT2 = call double @"SQRT@FU"(<2 x double>* %0)
  %_p3 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p3, i64 0)
  %output = call double @"div@FF"(double %return, double %SQRT2)
  %w5 = load double, double* %w
  %return6 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %holes7 = load double, double* %holes
  %output8 = fsub double %return6, %holes7
  %output9 = fmul double %w5, %output8
  %eccentricity10 = load double, double* %eccentricity
  %output11 = fmul double %output9, %eccentricity10
  %output14 = fmul double %eccentricity10, %output
  %output15 = fadd double 1.000000e+00, %output14
  %output16 = call double @"div@FF"(double %output11, double %output15)
  %output18 = call double @"div@FF"(double %output16, double %SQRT2)
  %_p20 = load <2 x double>, <2 x double>* %_p
  %return21 = call double @"getcomp@FUI"(<2 x double> %_p20, i64 0)
  %output22 = fmul double %output18, %return21
  %tmp = load <2 x double>, <2 x double>* %p
  %return23 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output22, i64 0)
  %output25 = extractvalue { double, <2 x double> } %return23, 1
  store <2 x double> %output25, <2 x double>* %p
  %_p27 = load <2 x double>, <2 x double>* %_p
  %return28 = call double @"getcomp@FUI"(<2 x double> %_p27, i64 1)
  %output29 = fmul double %output18, %return28
  %return31 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output25, double %output29, i64 1)
  %output33 = extractvalue { double, <2 x double> } %return31, 1
  store <2 x double> %output33, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_PARABOLA@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %height, double* %width) #0 {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca <2 x double>
  %1 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  store double %SQRT, double* %1
  call void @"sincos@FFF"(double* %1, double* %sr, double* %cr)
  %height3 = load double, double* %height
  %w4 = load double, double* %w
  %output = fmul double %height3, %w4
  %sr5 = load double, double* %sr
  %output6 = fmul double %output, %sr5
  %output8 = fmul double %output6, %sr5
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output9 = fmul double %output8, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return10 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <2 x double> } %return10, 1
  store <2 x double> %output12, <2 x double>* %p
  %width13 = load double, double* %width
  %w14 = load double, double* %w
  %output15 = fmul double %width13, %w14
  %cr16 = load double, double* %cr
  %output17 = fmul double %output15, %cr16
  %return18 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output19 = fmul double %output17, %return18
  %tmp20 = load <2 x double>, <2 x double>* %p
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp20, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_BENT2@UUFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %bent2) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %return5 = fcmp olt double %return, 0.000000e+00
  br i1 %return5, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %bent28 = load <2 x double>, <2 x double>* %bent2
  %return9 = call double @"getcomp@FUI"(<2 x double> %bent28, i64 0)
  %output = fmul double %return, %return9
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nx.0 = phi double [ %output, %true ], [ %return, %__llvm_entry ]
  %return11 = fcmp olt double %return3, 0.000000e+00
  br i1 %return11, label %true13, label %end14

true13:                                           ; preds = %end
  %bent216 = load <2 x double>, <2 x double>* %bent2
  %return17 = call double @"getcomp@FUI"(<2 x double> %bent216, i64 1)
  %output18 = fmul double %return3, %return17
  br label %end14

end14:                                            ; preds = %true13, %end
  %ny.0 = phi double [ %output18, %true13 ], [ %return3, %end ]
  %w19 = load double, double* %w
  %output21 = fmul double %w19, %nx.0
  %tmp = load <2 x double>, <2 x double>* %p
  %return22 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <2 x double> } %return22, 1
  store <2 x double> %output24, <2 x double>* %p
  %w25 = load double, double* %w
  %output27 = fmul double %w25, %ny.0
  %return29 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output24, double %output27, i64 1)
  %output31 = extractvalue { double, <2 x double> } %return29, 1
  store <2 x double> %output31, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_BIPOLAR@UUFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %shift) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %output = fadd double %SUMSQ, 1.000000e+00
  %_p3 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p3, i64 0)
  %output4 = fmul double 2.000000e+00, %return
  %return5 = call double @"neg@FF"(double 0x3FF921FB4D12D84A)
  %shift6 = load double, double* %shift
  %output7 = fmul double %return5, %shift6
  %return9 = call double @"getcomp@FUI"(<2 x double> %_p3, i64 1)
  %output10 = fmul double 2.000000e+00, %return9
  %output12 = fsub double %SUMSQ, 1.000000e+00
  %return13 = call double @"atan2@FFF"(double %output10, double %output12)
  %output14 = fmul double 5.000000e-01, %return13
  %output16 = fadd double %output14, %output7
  %return18 = fcmp ogt double %output16, 0x3FF921FB4D12D84A
  br i1 %return18, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output22 = fadd double %output16, 0x3FF921FB4D12D84A
  store double %output22, double* %1
  store double 0x400921FB4D12D84A, double* %2
  %fmod = call double @"fmod@FFF"(double* %1, double* %2)
  %output23 = fadd double %return5, %fmod
  br label %end

false:                                            ; preds = %__llvm_entry
  %return26 = fcmp olt double %output16, %return5
  br i1 %return26, label %true28, label %end

end:                                              ; preds = %false, %true28, %true
  %y.0 = phi double [ %output23, %true ], [ %output33, %true28 ], [ %output16, %false ]
  %w34 = load double, double* %w
  %output35 = fmul double %w34, 2.500000e-01
  %output36 = fmul double %output35, 0x3FE45F306DC9C883
  %output39 = fadd double %output, %output4
  %output42 = fsub double %output, %output4
  %output43 = call double @"div@FF"(double %output39, double %output42)
  %return44 = call double @"log@FF"(double %output43)
  %output45 = fmul double %output36, %return44
  %tmp = load <2 x double>, <2 x double>* %p
  %return46 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output45, i64 0)
  %output48 = extractvalue { double, <2 x double> } %return46, 1
  store <2 x double> %output48, <2 x double>* %p
  %w49 = load double, double* %w
  %output50 = fmul double %w49, 0x3FE45F306DC9C883
  %output52 = fmul double %output50, %y.0
  %return54 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output48, double %output52, i64 1)
  %output56 = extractvalue { double, <2 x double> } %return54, 1
  store <2 x double> %output56, <2 x double>* %p
  ret void

true28:                                           ; preds = %false
  %output31 = fsub double 0x3FF921FB4D12D84A, %output16
  store double %output31, double* %3
  store double 0x400921FB4D12D84A, double* %4
  %fmod32 = call double @"fmod@FFF"(double* %3, double* %4)
  %output33 = fsub double 0x3FF921FB4D12D84A, %fmod32
  br label %end
}

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_BOARDERS@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %return2 = call double @"rint@FF"(double %return)
  %return4 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %return5 = call double @"rint@FF"(double %return4)
  %output = fsub double %return, %return2
  %output12 = fsub double %return4, %return5
  %return13 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return14 = fcmp oge double %return13, 7.500000e-01
  br i1 %return14, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output17 = fmul double %output, 5.000000e-01
  %output19 = fadd double %output17, %return2
  %tmp = load <2 x double>, <2 x double>* %p
  %return20 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output19, i64 0)
  %output22 = extractvalue { double, <2 x double> } %return20, 1
  store <2 x double> %output22, <2 x double>* %p
  %output24 = fmul double %output12, 5.000000e-01
  %output26 = fadd double %output24, %return5
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output22, double %output26, i64 1)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %return32 = call double @"abs@FF"(double %output)
  %return34 = call double @"abs@FF"(double %output12)
  %return35 = fcmp oge double %return32, %return34
  br i1 %return35, label %true37, label %false38

end:                                              ; preds = %true101, %false102, %true43, %false44, %true
  ret void

true37:                                           ; preds = %false
  %return41 = fcmp oge double %output, 0.000000e+00
  %w46 = load double, double* %w
  %output48 = fmul double %output, 5.000000e-01
  %output50 = fadd double %output48, %return2
  br i1 %return41, label %true43, label %false44

false38:                                          ; preds = %false
  %return99 = fcmp oge double %output12, 0.000000e+00
  %w104 = load double, double* %w
  %output106 = fmul double %output12, 5.000000e-01
  %output108 = fadd double %output106, %return5
  br i1 %return99, label %true101, label %false102

true43:                                           ; preds = %true37
  %output51 = fadd double %output50, 2.500000e-01
  %output52 = fmul double %w46, %output51
  %tmp53 = load <2 x double>, <2 x double>* %p
  %return54 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp53, double %output52, i64 0)
  %output56 = extractvalue { double, <2 x double> } %return54, 1
  store <2 x double> %output56, <2 x double>* %p
  %w57 = load double, double* %w
  %output59 = fmul double %output12, 5.000000e-01
  %output61 = fadd double %output59, %return5
  %output63 = fmul double 2.500000e-01, %output12
  %output65 = call double @"div@FF"(double %output63, double %output)
  %output66 = fadd double %output61, %output65
  %output67 = fmul double %w57, %output66
  %return69 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output56, double %output67, i64 1)
  %output71 = extractvalue { double, <2 x double> } %return69, 1
  store <2 x double> %output71, <2 x double>* %p
  br label %end

false44:                                          ; preds = %true37
  %output77 = fsub double %output50, 2.500000e-01
  %output78 = fmul double %w46, %output77
  %tmp79 = load <2 x double>, <2 x double>* %p
  %return80 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp79, double %output78, i64 0)
  %output82 = extractvalue { double, <2 x double> } %return80, 1
  store <2 x double> %output82, <2 x double>* %p
  %w83 = load double, double* %w
  %output85 = fmul double %output12, 5.000000e-01
  %output87 = fadd double %output85, %return5
  %output89 = fmul double 2.500000e-01, %output12
  %output91 = call double @"div@FF"(double %output89, double %output)
  %output92 = fsub double %output87, %output91
  %output93 = fmul double %w83, %output92
  %return95 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output82, double %output93, i64 1)
  %output97 = extractvalue { double, <2 x double> } %return95, 1
  store <2 x double> %output97, <2 x double>* %p
  br label %end

true101:                                          ; preds = %false38
  %output109 = fadd double %output108, 2.500000e-01
  %output110 = fmul double %w104, %output109
  %tmp111 = load <2 x double>, <2 x double>* %p
  %return112 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp111, double %output110, i64 1)
  %output114 = extractvalue { double, <2 x double> } %return112, 1
  store <2 x double> %output114, <2 x double>* %p
  %w115 = load double, double* %w
  %output117 = fmul double %output, 5.000000e-01
  %output119 = fadd double %output117, %return2
  %output122 = call double @"div@FF"(double %output, double %output12)
  %output123 = fmul double %output122, 2.500000e-01
  %output124 = fadd double %output119, %output123
  %output125 = fmul double %w115, %output124
  %return127 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output114, double %output125, i64 0)
  %output129 = extractvalue { double, <2 x double> } %return127, 1
  store <2 x double> %output129, <2 x double>* %p
  br label %end

false102:                                         ; preds = %false38
  %output135 = fsub double %output108, 2.500000e-01
  %output136 = fmul double %w104, %output135
  %tmp137 = load <2 x double>, <2 x double>* %p
  %return138 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp137, double %output136, i64 1)
  %output140 = extractvalue { double, <2 x double> } %return138, 1
  store <2 x double> %output140, <2 x double>* %p
  %w141 = load double, double* %w
  %output143 = fmul double %output, 5.000000e-01
  %output145 = fadd double %output143, %return2
  %output148 = call double @"div@FF"(double %output, double %output12)
  %output149 = fmul double %output148, 2.500000e-01
  %output150 = fsub double %output145, %output149
  %output151 = fmul double %w141, %output150
  %return153 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output140, double %output151, i64 0)
  %output155 = extractvalue { double, <2 x double> } %return153, 1
  store <2 x double> %output155, <2 x double>* %p
  br label %end
}

; Function Attrs: nounwind readnone
declare double @"rint@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_BUTTERFLY@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %w1 = load double, double* %w
  %output = fmul double %w1, 0x3FF4D8D7A58FA311
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output3 = fmul double %return, 2.000000e+00
  %return8 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output9 = fmul double %return, %return8
  %return10 = call double @"abs@FF"(double %output9)
  %_p11 = load <2 x double>, <2 x double>* %_p
  %return12 = call double @"getcomp@FUI"(<2 x double> %_p11, i64 0)
  %output15 = fmul double %return12, %return12
  %output16 = fadd double 1.000000e-10, %output15
  %output19 = fmul double %output3, %output3
  %output20 = fadd double %output16, %output19
  %output21 = call double @"div@FF"(double %return10, double %output20)
  %return22 = call double @"sqrt@FF"(double %output21)
  %output23 = fmul double %output, %return22
  %output27 = fmul double %output23, %return12
  %tmp = load <2 x double>, <2 x double>* %p
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  %output33 = fmul double %output23, %output3
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output30, double %output33, i64 1)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_CELL@UUFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %size) #0 {
__llvm_entry:
  %size1 = load double, double* %size
  %output = call double @"div@FF"(double 1.000000e+00, double %size1)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output4 = fmul double %return, %output
  %return5 = call double @"floor@FF"(double %output4)
  %return7 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output9 = fmul double %return7, %output
  %return10 = call double @"floor@FF"(double %output9)
  %output15 = fmul double %return5, %size1
  %output16 = fsub double %return, %output15
  %output21 = fmul double %return10, %size1
  %output22 = fsub double %return7, %output21
  %return24 = fcmp oge double %return10, 0.000000e+00
  %return27 = fcmp oge double %return5, 0.000000e+00
  br i1 %return24, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output33 = fmul double %return10, 2.000000e+00
  br i1 %return27, label %true29, label %false30

false:                                            ; preds = %__llvm_entry
  %output49 = fmul double 2.000000e+00, %return10
  %output50 = fadd double %output49, 1.000000e+00
  %return51 = call double @"neg@FF"(double %output50)
  br i1 %return27, label %true45, label %false46

end:                                              ; preds = %true45, %false46, %true29, %false30
  %y.0 = phi double [ %output33, %true29 ], [ %output33, %false30 ], [ %return51, %true45 ], [ %return51, %false46 ]
  %x.0 = phi double [ %output35, %true29 ], [ %return41, %false30 ], [ %output53, %true45 ], [ %return61, %false46 ]
  %size64 = load double, double* %size
  %output65 = fmul double %x.0, %size64
  %output66 = fadd double %output16, %output65
  %tmp = load <2 x double>, <2 x double>* %p
  %return67 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output66, i64 0)
  %output69 = extractvalue { double, <2 x double> } %return67, 1
  store <2 x double> %output69, <2 x double>* %p
  %size72 = load double, double* %size
  %output73 = fmul double %y.0, %size72
  %output74 = fadd double %output22, %output73
  %return75 = call double @"neg@FF"(double %output74)
  %return77 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output69, double %return75, i64 1)
  %output79 = extractvalue { double, <2 x double> } %return77, 1
  store <2 x double> %output79, <2 x double>* %p
  ret void

true29:                                           ; preds = %true
  %output35 = fmul double %return5, 2.000000e+00
  br label %end

false30:                                          ; preds = %true
  %output39 = fmul double 2.000000e+00, %return5
  %output40 = fadd double %output39, 1.000000e+00
  %return41 = call double @"neg@FF"(double %output40)
  br label %end

true45:                                           ; preds = %false
  %output53 = fmul double %return5, 2.000000e+00
  br label %end

false46:                                          ; preds = %false
  %output59 = fmul double 2.000000e+00, %return5
  %output60 = fadd double %output59, 1.000000e+00
  %return61 = call double @"neg@FF"(double %output60)
  br label %end
}

; Function Attrs: alwaysinline nounwind
define private void @"V_CPOW@UUFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %power, double* %pow_r, double* %pow_i) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %1
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %1)
  %return = call double @"log@FF"(double %SUMSQ)
  %output = fmul double 5.000000e-01, %return
  %power3 = load double, double* %power
  %output4 = call double @"div@FF"(double 0x401921FB4D12D84A, double %power3)
  %pow_r5 = load double, double* %pow_r
  %output7 = call double @"div@FF"(double %pow_r5, double %power3)
  %pow_i8 = load double, double* %pow_i
  %output10 = call double @"div@FF"(double %pow_i8, double %power3)
  %output13 = fmul double %output7, %ATANYX
  %output16 = fmul double %output10, %output
  %output17 = fadd double %output13, %output16
  %return20 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output21 = fmul double %power3, %return20
  %return22 = call double @"floor@FF"(double %output21)
  %output23 = fmul double %output4, %return22
  %output24 = fadd double %output17, %output23
  %w25 = load double, double* %w
  %output28 = fmul double %output7, %output
  %output31 = fmul double %output10, %ATANYX
  %output32 = fsub double %output28, %output31
  %return33 = call double @"exp@FF"(double %output32)
  %output34 = fmul double %w25, %return33
  store double %output24, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %ca37 = load double, double* %ca
  %output38 = fmul double %output34, %ca37
  %tmp = load <2 x double>, <2 x double>* %p
  %return39 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output38, i64 0)
  %output41 = extractvalue { double, <2 x double> } %return39, 1
  store <2 x double> %output41, <2 x double>* %p
  %sa43 = load double, double* %sa
  %output44 = fmul double %output34, %sa43
  %return46 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output41, double %output44, i64 1)
  %output48 = extractvalue { double, <2 x double> } %return46, 1
  store <2 x double> %output48, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_EDISC@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %snv = alloca double
  %csv = alloca double
  %0 = alloca <2 x double>
  %1 = alloca double
  store double 0.000000e+00, double* %snv, !vex-initializer-store !3
  store double 0.000000e+00, double* %csv, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output = fmul double 2.000000e+00, %return
  %output5 = fadd double %SUMSQ, %output
  %return6 = call double @"sqrt@FF"(double %output5)
  %output9 = fsub double %SUMSQ, %output
  %return10 = call double @"sqrt@FF"(double %output9)
  %output13 = fadd double %return6, %return10
  %output14 = fmul double %output13, 5.000000e-01
  %output17 = fsub double %output14, 1.000000e+00
  %return18 = call double @"sqrt@FF"(double %output17)
  %output19 = fadd double %output14, %return18
  %return20 = call double @"log@FF"(double %output19)
  %output24 = call double @"div@FF"(double %return, double %output14)
  %return25 = call double @"acos@FF"(double %output24)
  %return26 = call double @"neg@FF"(double %return25)
  %w27 = load double, double* %w
  %output28 = call double @"div@FF"(double %w27, double 0x402724046ECF9681)
  store double %return20, double* %1
  call void @"sincos@FFF"(double* %1, double* %snv, double* %csv)
  %return31 = call double @"sinh@FF"(double %return26)
  %return33 = call double @"cosh@FF"(double %return26)
  %_p34 = load <2 x double>, <2 x double>* %_p
  %return35 = call double @"getcomp@FUI"(<2 x double> %_p34, i64 1)
  %return36 = fcmp ogt double %return35, 0.000000e+00
  br i1 %return36, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %snv38 = load double, double* %snv
  %return39 = call double @"neg@FF"(double %snv38)
  store double %return39, double* %snv
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %output42 = fmul double %output28, %return33
  %csv43 = load double, double* %csv
  %output44 = fmul double %output42, %csv43
  %tmp45 = load <2 x double>, <2 x double>* %p
  %return46 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp45, double %output44, i64 0)
  %output48 = extractvalue { double, <2 x double> } %return46, 1
  store <2 x double> %output48, <2 x double>* %p
  %output51 = fmul double %output28, %return31
  %snv52 = load double, double* %snv
  %output53 = fmul double %output51, %snv52
  %return55 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output48, double %output53, i64 1)
  %output57 = extractvalue { double, <2 x double> } %return55, 1
  store <2 x double> %output57, <2 x double>* %p
  ret void
}

; Function Attrs: nounwind readnone
declare double @"acos@FF"(double) #1

; Function Attrs: alwaysinline nounwind
define private void @"V_ELLIPTIC@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %output = fadd double %SUMSQ, 1.000000e+00
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output3 = fmul double 2.000000e+00, %return
  %output6 = fadd double %output, %output3
  %return7 = call double @"sqrt@FF"(double %output6)
  %output10 = fsub double %output, %output3
  %return11 = call double @"sqrt@FF"(double %output10)
  %output12 = fadd double %return7, %return11
  %output13 = fmul double 5.000000e-01, %output12
  %output17 = call double @"div@FF"(double %return, double %output13)
  %output20 = fmul double %output17, %output17
  %output21 = fsub double 1.000000e+00, %output20
  %output23 = fsub double %output13, 1.000000e+00
  %w24 = load double, double* %w
  %output25 = call double @"div@FF"(double %w24, double 0x3FF921FB4D12D84A)
  %return27 = fcmp olt double %output21, 0.000000e+00
  br i1 %return27, label %end, label %false

false:                                            ; preds = %__llvm_entry
  %return30 = call double @"sqrt@FF"(double %output21)
  br label %end

end:                                              ; preds = %__llvm_entry, %false
  %phi = phi double [ %return30, %false ], [ 0.000000e+00, %__llvm_entry ]
  %return32 = fcmp olt double %output23, 0.000000e+00
  br i1 %return32, label %end36, label %false35

false35:                                          ; preds = %end
  %return38 = call double @"sqrt@FF"(double %output23)
  br label %end36

end36:                                            ; preds = %end, %false35
  %phi39 = phi double [ %return38, %false35 ], [ 0.000000e+00, %end ]
  %return43 = call double @"atan2@FFF"(double %output17, double %phi)
  %output44 = fmul double %output25, %return43
  %tmp45 = load <2 x double>, <2 x double>* %p
  %return46 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp45, double %output44, i64 0)
  %output48 = extractvalue { double, <2 x double> } %return46, 1
  store <2 x double> %output48, <2 x double>* %p
  %_p49 = load <2 x double>, <2 x double>* %_p
  %return50 = call double @"getcomp@FUI"(<2 x double> %_p49, i64 1)
  %return51 = fcmp ogt double %return50, 0.000000e+00
  %output59 = fadd double %output13, %phi39
  %return60 = call double @"log@FF"(double %output59)
  br i1 %return51, label %true53, label %false54

true53:                                           ; preds = %end36
  %output61 = fmul double %output25, %return60
  br label %end55

false54:                                          ; preds = %end36
  %return67 = call double @"neg@FF"(double %return60)
  %output68 = fmul double %output25, %return67
  br label %end55

end55:                                            ; preds = %false54, %true53
  %phi69 = phi double [ %output61, %true53 ], [ %output68, %false54 ]
  %tmp70 = load <2 x double>, <2 x double>* %p
  %return71 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp70, double %phi69, i64 1)
  %output73 = extractvalue { double, <2 x double> } %return71, 1
  store <2 x double> %output73, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_NOISE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  store double %output1, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %w3 = load double, double* %w
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output5 = fmul double %w3, %return4
  %_p6 = load <2 x double>, <2 x double>* %_p
  %return7 = call double @"getcomp@FUI"(<2 x double> %_p6, i64 0)
  %output9 = fmul double %return7, %output5
  %cosr10 = load double, double* %cosr
  %output11 = fmul double %output9, %cosr10
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %_p15 = load <2 x double>, <2 x double>* %_p
  %return16 = call double @"getcomp@FUI"(<2 x double> %_p15, i64 1)
  %output18 = fmul double %return16, %output5
  %sinr19 = load double, double* %sinr
  %output20 = fmul double %output18, %sinr19
  %return22 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output20, i64 1)
  %output24 = extractvalue { double, <2 x double> } %return22, 1
  store <2 x double> %output24, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_ESCHER@UUFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %beta) #0 {
__llvm_entry:
  %seb = alloca double
  %ceb = alloca double
  %sn = alloca double
  %cn = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca double
  store double 0.000000e+00, double* %seb, !vex-initializer-store !3
  store double 0.000000e+00, double* %ceb, !vex-initializer-store !3
  store double 0.000000e+00, double* %sn, !vex-initializer-store !3
  store double 0.000000e+00, double* %cn, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %1
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %1)
  %return = call double @"log@FF"(double %SUMSQ)
  %output = fmul double 5.000000e-01, %return
  %beta3 = load double, double* %beta
  store double %beta3, double* %2
  call void @"sincos@FFF"(double* %2, double* %seb, double* %ceb)
  %ceb4 = load double, double* %ceb
  %output5 = fadd double 1.000000e+00, %ceb4
  %output6 = fmul double 5.000000e-01, %output5
  %seb7 = load double, double* %seb
  %output8 = fmul double 5.000000e-01, %seb7
  %w9 = load double, double* %w
  %output12 = fmul double %output6, %output
  %output15 = fmul double %output8, %ATANYX
  %output16 = fsub double %output12, %output15
  %return17 = call double @"exp@FF"(double %output16)
  %output18 = fmul double %w9, %return17
  %output21 = fmul double %output6, %ATANYX
  %output24 = fmul double %output8, %output
  %output25 = fadd double %output21, %output24
  store double %output25, double* %3
  call void @"sincos@FFF"(double* %3, double* %sn, double* %cn)
  %cn28 = load double, double* %cn
  %output29 = fmul double %output18, %cn28
  %tmp = load <2 x double>, <2 x double>* %p
  %return30 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output29, i64 0)
  %output32 = extractvalue { double, <2 x double> } %return30, 1
  store <2 x double> %output32, <2 x double>* %p
  %sn34 = load double, double* %sn
  %output35 = fmul double %output18, %sn34
  %return37 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output32, double %output35, i64 1)
  %output39 = extractvalue { double, <2 x double> } %return37, 1
  store <2 x double> %output39, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_FOCI@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sn = alloca double
  %cn = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sn, !vex-initializer-store !3
  store double 0.000000e+00, double* %cn, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %return2 = call double @"exp@FF"(double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 2.500000e-01, double %output)
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  store double %return6, double* %0
  call void @"sincos@FFF"(double* %0, double* %sn, double* %cn)
  %w7 = load double, double* %w
  %output10 = fadd double %output, %output4
  %cn11 = load double, double* %cn
  %output12 = fsub double %output10, %cn11
  %output13 = call double @"div@FF"(double %w7, double %output12)
  %output17 = fsub double %output, %output4
  %output18 = fmul double %output13, %output17
  %tmp19 = load <2 x double>, <2 x double>* %p
  %return20 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp19, double %output18, i64 0)
  %output22 = extractvalue { double, <2 x double> } %return20, 1
  store <2 x double> %output22, <2 x double>* %p
  %sn24 = load double, double* %sn
  %output25 = fmul double %output13, %sn24
  %return27 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output22, double %output25, i64 1)
  %output29 = extractvalue { double, <2 x double> } %return27, 1
  store <2 x double> %output29, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_LAZYSUSAN@UUFFFFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %spin, double* %twist, double* %space, <2 x double>* %lazy) #0 {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %lazy2 = load <2 x double>, <2 x double>* %lazy
  %return3 = call double @"getcomp@FUI"(<2 x double> %lazy2, i64 0)
  %output = fsub double %return, %return3
  %return5 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %return7 = call double @"getcomp@FUI"(<2 x double> %lazy2, i64 1)
  %output8 = fsub double %return5, %return7
  %return11 = call <2 x double> @"set@UFF"(double %output, double %output8)
  store <2 x double> %return11, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %w13 = load double, double* %w
  %return14 = fcmp olt double %SQRT, %w13
  br i1 %return14, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store <2 x double> %return11, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  %spin19 = load double, double* %spin
  %output20 = fadd double %ATANYX, %spin19
  %twist21 = load double, double* %twist
  %w22 = load double, double* %w
  %output24 = fsub double %w22, %SQRT
  %output25 = fmul double %twist21, %output24
  %output26 = fadd double %output20, %output25
  store double %output26, double* %2
  call void @"sincos@FFF"(double* %2, double* %sina, double* %cosa)
  %w28 = load double, double* %w
  %output30 = fmul double %w28, %SQRT
  %cosa32 = load double, double* %cosa
  %output33 = fmul double %output30, %cosa32
  %lazy34 = load <2 x double>, <2 x double>* %lazy
  %return35 = call double @"getcomp@FUI"(<2 x double> %lazy34, i64 0)
  %output36 = fadd double %output33, %return35
  %tmp = load <2 x double>, <2 x double>* %p
  %return37 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output36, i64 0)
  %output39 = extractvalue { double, <2 x double> } %return37, 1
  store <2 x double> %output39, <2 x double>* %p
  %sina41 = load double, double* %sina
  %output42 = fmul double %output30, %sina41
  %lazy43 = load <2 x double>, <2 x double>* %lazy
  %return44 = call double @"getcomp@FUI"(<2 x double> %lazy43, i64 1)
  %output45 = fadd double %output42, %return44
  %return47 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output39, double %output45, i64 1)
  %output49 = extractvalue { double, <2 x double> } %return47, 1
  store <2 x double> %output49, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %space51 = load double, double* %space
  %output53 = call double @"div@FF"(double %space51, double %SQRT)
  %output54 = fadd double 1.000000e+00, %output53
  %output55 = fmul double %w13, %output54
  %output58 = fmul double %output55, %output
  %lazy59 = load <2 x double>, <2 x double>* %lazy
  %return60 = call double @"getcomp@FUI"(<2 x double> %lazy59, i64 0)
  %output61 = fadd double %output58, %return60
  %tmp62 = load <2 x double>, <2 x double>* %p
  %return63 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp62, double %output61, i64 0)
  %output65 = extractvalue { double, <2 x double> } %return63, 1
  store <2 x double> %output65, <2 x double>* %p
  %output68 = fmul double %output55, %output8
  %lazy69 = load <2 x double>, <2 x double>* %lazy
  %return70 = call double @"getcomp@FUI"(<2 x double> %lazy69, i64 1)
  %output71 = fadd double %output68, %return70
  %return73 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output65, double %output71, i64 1)
  %output75 = extractvalue { double, <2 x double> } %return73, 1
  store <2 x double> %output75, <2 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_LOONIE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %w3 = load double, double* %w
  %output = fmul double %w3, %w3
  %return = fcmp olt double %SUMSQ, %output
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output11 = call double @"div@FF"(double %output, double %SUMSQ)
  %output12 = fsub double %output11, 1.000000e+00
  %return13 = call double @"sqrt@FF"(double %output12)
  %output14 = fmul double %w3, %return13
  %_p16 = load <2 x double>, <2 x double>* %_p
  %return17 = call double @"getcomp@FUI"(<2 x double> %_p16, i64 0)
  %output18 = fmul double %output14, %return17
  %tmp = load <2 x double>, <2 x double>* %p
  %return19 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <2 x double> } %return19, 1
  store <2 x double> %output21, <2 x double>* %p
  %_p23 = load <2 x double>, <2 x double>* %_p
  %return24 = call double @"getcomp@FUI"(<2 x double> %_p23, i64 1)
  %output25 = fmul double %output14, %return24
  %return27 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output21, double %output25, i64 1)
  %output29 = extractvalue { double, <2 x double> } %return27, 1
  store <2 x double> %output29, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %_p31 = load <2 x double>, <2 x double>* %_p
  %return32 = call double @"getcomp@FUI"(<2 x double> %_p31, i64 0)
  %output33 = fmul double %w3, %return32
  %tmp34 = load <2 x double>, <2 x double>* %p
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp34, double %output33, i64 0)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  %w38 = load double, double* %w
  %_p39 = load <2 x double>, <2 x double>* %_p
  %return40 = call double @"getcomp@FUI"(<2 x double> %_p39, i64 1)
  %output41 = fmul double %w38, %return40
  %return43 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output37, double %output41, i64 1)
  %output45 = extractvalue { double, <2 x double> } %return43, 1
  store <2 x double> %output45, <2 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_PREBLUR@UF"(<2 x double>* %p, double* %w) #0 {
__llvm_entry:
  %sinA = alloca double
  %cosA = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinA, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosA, !vex-initializer-store !3
  %w1 = load double, double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output = fadd double %return, %return2
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output4 = fadd double %output, %return3
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output6 = fadd double %output4, %return5
  %output7 = fsub double %output6, 2.000000e+00
  %output8 = fmul double %w1, %output7
  %return9 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output10 = fmul double %return9, 2.000000e+00
  %output11 = fmul double %output10, 0x400921FB4D12D84A
  store double %output11, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinA, double* %cosA)
  %p13 = load <2 x double>, <2 x double>* %p
  %return14 = call double @"getcomp@FUI"(<2 x double> %p13, i64 0)
  %cosA16 = load double, double* %cosA
  %output17 = fmul double %output8, %cosA16
  %output18 = fadd double %return14, %output17
  %return19 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %p13, double %output18, i64 0)
  %output21 = extractvalue { double, <2 x double> } %return19, 1
  store <2 x double> %output21, <2 x double>* %p
  %return23 = call double @"getcomp@FUI"(<2 x double> %output21, i64 1)
  %sinA25 = load double, double* %sinA
  %output26 = fmul double %output8, %sinA25
  %output27 = fadd double %return23, %output26
  %return29 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output21, double %output27, i64 1)
  %output31 = extractvalue { double, <2 x double> } %return29, 1
  store <2 x double> %output31, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_MODULUS@UUFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %m) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %m1 = load <2 x double>, <2 x double>* %m
  %return = call double @"getcomp@FUI"(<2 x double> %m1, i64 0)
  %output = fmul double 2.000000e+00, %return
  %return3 = call double @"getcomp@FUI"(<2 x double> %m1, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %_p5 = load <2 x double>, <2 x double>* %_p
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p5, i64 0)
  %return9 = fcmp ogt double %return6, %return
  br i1 %return9, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %w11 = load double, double* %w
  %output18 = fadd double %return6, %return
  store double %output18, double* %0
  store double %output, double* %1
  %fmod = call double @"fmod@FFF"(double* %0, double* %1)
  %output20 = fadd double %return, %fmod
  %output21 = fmul double %w11, %output20
  %tmp = load <2 x double>, <2 x double>* %p
  %return22 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <2 x double> } %return22, 1
  store <2 x double> %output24, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %p25 = load <2 x double>, <2 x double>* %p
  %return26 = call double @"getcomp@FUI"(<2 x double> %p25, i64 0)
  %return29 = fcmp olt double %return26, %return
  %w34 = load double, double* %w
  br i1 %return29, label %true31, label %false32

end:                                              ; preds = %true31, %false32, %true
  %_p58 = load <2 x double>, <2 x double>* %_p
  %return59 = call double @"getcomp@FUI"(<2 x double> %_p58, i64 1)
  %m60 = load <2 x double>, <2 x double>* %m
  %return61 = call double @"getcomp@FUI"(<2 x double> %m60, i64 1)
  %return62 = fcmp ogt double %return59, %return61
  br i1 %return62, label %true64, label %false65

true31:                                           ; preds = %false
  %output41 = fadd double %return, %return6
  store double %output41, double* %2
  store double %output, double* %3
  %fmod43 = call double @"fmod@FFF"(double* %2, double* %3)
  %output44 = fsub double %return, %fmod43
  %output45 = fmul double %w34, %output44
  %tmp46 = load <2 x double>, <2 x double>* %p
  %return47 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp46, double %output45, i64 0)
  %output49 = extractvalue { double, <2 x double> } %return47, 1
  store <2 x double> %output49, <2 x double>* %p
  br label %end

false32:                                          ; preds = %false
  %output53 = fmul double %w34, %return6
  %return55 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %p25, double %output53, i64 0)
  %output57 = extractvalue { double, <2 x double> } %return55, 1
  store <2 x double> %output57, <2 x double>* %p
  br label %end

true64:                                           ; preds = %end
  %w67 = load double, double* %w
  %output74 = fadd double %return59, %return61
  store double %output74, double* %4
  store double %output4, double* %5
  %fmod76 = call double @"fmod@FFF"(double* %4, double* %5)
  %output77 = fadd double %return61, %fmod76
  %output78 = fmul double %w67, %output77
  %tmp79 = load <2 x double>, <2 x double>* %p
  %return80 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp79, double %output78, i64 1)
  %output82 = extractvalue { double, <2 x double> } %return80, 1
  store <2 x double> %output82, <2 x double>* %p
  br label %end66

false65:                                          ; preds = %end
  %p83 = load <2 x double>, <2 x double>* %p
  %return84 = call double @"getcomp@FUI"(<2 x double> %p83, i64 0)
  %return86 = call double @"getcomp@FUI"(<2 x double> %m60, i64 0)
  %return87 = fcmp olt double %return84, %return86
  %w92 = load double, double* %w
  br i1 %return87, label %true89, label %false90

end66:                                            ; preds = %true89, %false90, %true64
  ret void

true89:                                           ; preds = %false65
  %output99 = fadd double %return61, %return59
  store double %output99, double* %6
  store double %output4, double* %7
  %fmod101 = call double @"fmod@FFF"(double* %6, double* %7)
  %output102 = fsub double %return61, %fmod101
  %output103 = fmul double %w92, %output102
  %tmp104 = load <2 x double>, <2 x double>* %p
  %return105 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp104, double %output103, i64 1)
  %output107 = extractvalue { double, <2 x double> } %return105, 1
  store <2 x double> %output107, <2 x double>* %p
  br label %end66

false90:                                          ; preds = %false65
  %output111 = fmul double %w92, %return59
  %return113 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %p83, double %output111, i64 1)
  %output115 = extractvalue { double, <2 x double> } %return113, 1
  store <2 x double> %output115, <2 x double>* %p
  br label %end66
}

; Function Attrs: alwaysinline nounwind
define private void @"V_OSCOPE@UUFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %freq, double* %amp, double* %damp, double* %sep) #0 {
__llvm_entry:
  %freq1 = load double, double* %freq
  %output = fmul double 0x401921FB4D12D84A, %freq1
  %damp2 = load double, double* %damp
  %return = fcmp oeq double %damp2, 0.000000e+00
  %amp4 = load double, double* %amp
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_p6 = load <2 x double>, <2 x double>* %_p
  %return7 = call double @"getcomp@FUI"(<2 x double> %_p6, i64 0)
  %output8 = fmul double %output, %return7
  %return9 = call double @"cos@FF"(double %output8)
  %output10 = fmul double %amp4, %return9
  %sep11 = load double, double* %sep
  %output12 = fadd double %output10, %sep11
  br label %end

false:                                            ; preds = %__llvm_entry
  %_p14 = load <2 x double>, <2 x double>* %_p
  %return15 = call double @"getcomp@FUI"(<2 x double> %_p14, i64 0)
  %return16 = call double @"abs@FF"(double %return15)
  %return17 = call double @"neg@FF"(double %return16)
  %damp18 = load double, double* %damp
  %output19 = fmul double %return17, %damp18
  %return20 = call double @"exp@FF"(double %output19)
  %output21 = fmul double %amp4, %return20
  %_p23 = load <2 x double>, <2 x double>* %_p
  %return24 = call double @"getcomp@FUI"(<2 x double> %_p23, i64 0)
  %output25 = fmul double %output, %return24
  %return26 = call double @"cos@FF"(double %output25)
  %output27 = fmul double %output21, %return26
  %sep28 = load double, double* %sep
  %output29 = fadd double %output27, %sep28
  br label %end

end:                                              ; preds = %false, %true
  %tt.0 = phi double [ %output12, %true ], [ %output29, %false ]
  %_p30 = load <2 x double>, <2 x double>* %_p
  %return31 = call double @"getcomp@FUI"(<2 x double> %_p30, i64 1)
  %return32 = call double @"abs@FF"(double %return31)
  %return34 = fcmp ole double %return32, %tt.0
  %w39 = load double, double* %w
  %_p40 = load <2 x double>, <2 x double>* %_p
  %return41 = call double @"getcomp@FUI"(<2 x double> %_p40, i64 0)
  %output42 = fmul double %w39, %return41
  %tmp = load <2 x double>, <2 x double>* %p
  %return43 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output42, i64 0)
  %output45 = extractvalue { double, <2 x double> } %return43, 1
  store <2 x double> %output45, <2 x double>* %p
  %w46 = load double, double* %w
  %_p47 = load <2 x double>, <2 x double>* %_p
  %return48 = call double @"getcomp@FUI"(<2 x double> %_p47, i64 1)
  br i1 %return34, label %true36, label %false37

true36:                                           ; preds = %end
  %return49 = call double @"neg@FF"(double %return48)
  %output50 = fmul double %w46, %return49
  %return52 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output45, double %output50, i64 1)
  %output54 = extractvalue { double, <2 x double> } %return52, 1
  store <2 x double> %output54, <2 x double>* %p
  br label %end38

false37:                                          ; preds = %end
  %output66 = fmul double %w46, %return48
  %return68 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output45, double %output66, i64 1)
  %output70 = extractvalue { double, <2 x double> } %return68, 1
  store <2 x double> %output70, <2 x double>* %p
  br label %end38

end38:                                            ; preds = %false37, %true36
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_POLAR2@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %w1 = load double, double* %w
  %output = call double @"div@FF"(double %w1, double 0x400921FB4D12D84A)
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %0
  %ATAN = call double @"ATAN@FU"(<2 x double>* %0)
  %output4 = fmul double %output, %ATAN
  %tmp = load <2 x double>, <2 x double>* %p
  %return = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output4, i64 0)
  %output6 = extractvalue { double, <2 x double> } %return, 1
  store <2 x double> %output6, <2 x double>* %p
  %output8 = call double @"div@FF"(double %output, double 2.000000e+00)
  %_p9 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p9, <2 x double>* %1
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %1)
  %return10 = call double @"log@FF"(double %SUMSQ)
  %output11 = fmul double %output8, %return10
  %tmp12 = load <2 x double>, <2 x double>* %p
  %return13 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp12, double %output11, i64 1)
  %output15 = extractvalue { double, <2 x double> } %return13, 1
  store <2 x double> %output15, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_POPCORN2@UUFFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %pop2c, <2 x double>* %pop2) #0 {
__llvm_entry:
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %pop23 = load <2 x double>, <2 x double>* %pop2
  %return4 = call double @"getcomp@FUI"(<2 x double> %pop23, i64 0)
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %pop2c7 = load double, double* %pop2c
  %output = fmul double %return6, %pop2c7
  %return8 = call double @"tan@FF"(double %output)
  %return9 = call double @"sin@FF"(double %return8)
  %output10 = fmul double %return4, %return9
  %output11 = fadd double %return, %output10
  %output12 = fmul double %w1, %output11
  %tmp = load <2 x double>, <2 x double>* %p
  %return13 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <2 x double> } %return13, 1
  store <2 x double> %output15, <2 x double>* %p
  %w16 = load double, double* %w
  %_p17 = load <2 x double>, <2 x double>* %_p
  %return18 = call double @"getcomp@FUI"(<2 x double> %_p17, i64 1)
  %pop219 = load <2 x double>, <2 x double>* %pop2
  %return20 = call double @"getcomp@FUI"(<2 x double> %pop219, i64 1)
  %return22 = call double @"getcomp@FUI"(<2 x double> %_p17, i64 0)
  %pop2c23 = load double, double* %pop2c
  %output24 = fmul double %return22, %pop2c23
  %return25 = call double @"tan@FF"(double %output24)
  %return26 = call double @"sin@FF"(double %return25)
  %output27 = fmul double %return20, %return26
  %output28 = fadd double %return18, %output27
  %output29 = fmul double %w16, %output28
  %return31 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output15, double %output29, i64 1)
  %output33 = extractvalue { double, <2 x double> } %return31, 1
  store <2 x double> %output33, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SCRY@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %1
  %SQRT = call double @"SQRT@FU"(<2 x double>* %1)
  %w4 = load double, double* %w
  %output = fadd double %w4, 1.000000e-10
  %output5 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output6 = fadd double %SUMSQ, %output5
  %output7 = fmul double %SQRT, %output6
  %output8 = call double @"div@FF"(double 1.000000e+00, double %output7)
  %_p9 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p9, i64 0)
  %output11 = fmul double %return, %output8
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %_p15 = load <2 x double>, <2 x double>* %_p
  %return16 = call double @"getcomp@FUI"(<2 x double> %_p15, i64 1)
  %output18 = fmul double %return16, %output8
  %return20 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output18, i64 1)
  %output22 = extractvalue { double, <2 x double> } %return20, 1
  store <2 x double> %output22, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SEPARATION@UUFUU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %sep, <2 x double>* %ins) #0 {
__llvm_entry:
  %sep1 = load <2 x double>, <2 x double>* %sep
  %return = call double @"getcomp@FUI"(<2 x double> %sep1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %sep1, i64 1)
  %output8 = fmul double %return5, %return5
  %_p9 = load <2 x double>, <2 x double>* %_p
  %return10 = call double @"getcomp@FUI"(<2 x double> %_p9, i64 0)
  %return11 = fcmp ogt double %return10, 0.000000e+00
  %w13 = load double, double* %w
  %output18 = fmul double %return10, %return10
  %output20 = fadd double %output18, %output
  %return21 = call double @"sqrt@FF"(double %output20)
  %ins24 = load <2 x double>, <2 x double>* %ins
  %return25 = call double @"getcomp@FUI"(<2 x double> %ins24, i64 0)
  %output26 = fmul double %return10, %return25
  br i1 %return11, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output27 = fsub double %return21, %output26
  %output28 = fmul double %w13, %output27
  %tmp = load <2 x double>, <2 x double>* %p
  %return29 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output28, i64 0)
  %output31 = extractvalue { double, <2 x double> } %return29, 1
  store <2 x double> %output31, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %output46 = fadd double %return21, %output26
  %return47 = call double @"neg@FF"(double %output46)
  %output48 = fmul double %w13, %return47
  %tmp49 = load <2 x double>, <2 x double>* %p
  %return50 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp49, double %output48, i64 0)
  %output52 = extractvalue { double, <2 x double> } %return50, 1
  store <2 x double> %output52, <2 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %_p53 = load <2 x double>, <2 x double>* %_p
  %return54 = call double @"getcomp@FUI"(<2 x double> %_p53, i64 1)
  %return55 = fcmp ogt double %return54, 0.000000e+00
  %w60 = load double, double* %w
  %output65 = fmul double %return54, %return54
  %output67 = fadd double %output65, %output8
  %return68 = call double @"sqrt@FF"(double %output67)
  %ins71 = load <2 x double>, <2 x double>* %ins
  %return72 = call double @"getcomp@FUI"(<2 x double> %ins71, i64 1)
  %output73 = fmul double %return54, %return72
  br i1 %return55, label %true57, label %false58

true57:                                           ; preds = %end
  %output74 = fsub double %return68, %output73
  %output75 = fmul double %w60, %output74
  %tmp76 = load <2 x double>, <2 x double>* %p
  %return77 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp76, double %output75, i64 1)
  %output79 = extractvalue { double, <2 x double> } %return77, 1
  store <2 x double> %output79, <2 x double>* %p
  br label %end59

false58:                                          ; preds = %end
  %output94 = fadd double %return68, %output73
  %return95 = call double @"neg@FF"(double %output94)
  %output96 = fmul double %w60, %return95
  %tmp97 = load <2 x double>, <2 x double>* %p
  %return98 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp97, double %output96, i64 1)
  %output100 = extractvalue { double, <2 x double> } %return98, 1
  store <2 x double> %output100, <2 x double>* %p
  br label %end59

end59:                                            ; preds = %false58, %true57
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SPLIT@UUFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %split) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %split2 = load <2 x double>, <2 x double>* %split
  %return3 = call double @"getcomp@FUI"(<2 x double> %split2, i64 0)
  %output = fmul double %return, %return3
  %output4 = fmul double %output, 0x400921FB4D12D84A
  %return5 = call double @"cos@FF"(double %output4)
  %return6 = fcmp oge double %return5, 0.000000e+00
  %w8 = load double, double* %w
  %return10 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  br i1 %return6, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output11 = fmul double %w8, %return10
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 1)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %return18 = call double @"neg@FF"(double %return10)
  %output19 = fmul double %w8, %return18
  %tmp20 = load <2 x double>, <2 x double>* %p
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp20, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %_p24 = load <2 x double>, <2 x double>* %_p
  %return25 = call double @"getcomp@FUI"(<2 x double> %_p24, i64 1)
  %split26 = load <2 x double>, <2 x double>* %split
  %return27 = call double @"getcomp@FUI"(<2 x double> %split26, i64 1)
  %output28 = fmul double %return25, %return27
  %output29 = fmul double %output28, 0x400921FB4D12D84A
  %return30 = call double @"cos@FF"(double %output29)
  %return31 = fcmp oge double %return30, 0.000000e+00
  %w36 = load double, double* %w
  %return38 = call double @"getcomp@FUI"(<2 x double> %_p24, i64 0)
  br i1 %return31, label %true33, label %false34

true33:                                           ; preds = %end
  %output39 = fmul double %w36, %return38
  %tmp40 = load <2 x double>, <2 x double>* %p
  %return41 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp40, double %output39, i64 0)
  %output43 = extractvalue { double, <2 x double> } %return41, 1
  store <2 x double> %output43, <2 x double>* %p
  br label %end35

false34:                                          ; preds = %end
  %return47 = call double @"neg@FF"(double %return38)
  %output48 = fmul double %w36, %return47
  %tmp49 = load <2 x double>, <2 x double>* %p
  %return50 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp49, double %output48, i64 0)
  %output52 = extractvalue { double, <2 x double> } %return50, 1
  store <2 x double> %output52, <2 x double>* %p
  br label %end35

end35:                                            ; preds = %false34, %true33
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_SPLITS@UUFU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %splits) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %return2 = fcmp oge double %return, 0.000000e+00
  %w4 = load double, double* %w
  %splits7 = load <2 x double>, <2 x double>* %splits
  %return8 = call double @"getcomp@FUI"(<2 x double> %splits7, i64 0)
  br i1 %return2, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = fadd double %return, %return8
  %output9 = fmul double %w4, %output
  %tmp = load <2 x double>, <2 x double>* %p
  %return10 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <2 x double> } %return10, 1
  store <2 x double> %output12, <2 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %output18 = fsub double %return, %return8
  %output19 = fmul double %w4, %output18
  %tmp20 = load <2 x double>, <2 x double>* %p
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp20, double %output19, i64 0)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %_p24 = load <2 x double>, <2 x double>* %_p
  %return25 = call double @"getcomp@FUI"(<2 x double> %_p24, i64 1)
  %return26 = fcmp oge double %return25, 0.000000e+00
  %w31 = load double, double* %w
  %splits34 = load <2 x double>, <2 x double>* %splits
  %return35 = call double @"getcomp@FUI"(<2 x double> %splits34, i64 1)
  br i1 %return26, label %true28, label %false29

true28:                                           ; preds = %end
  %output36 = fadd double %return25, %return35
  %output37 = fmul double %w31, %output36
  %tmp38 = load <2 x double>, <2 x double>* %p
  %return39 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp38, double %output37, i64 1)
  %output41 = extractvalue { double, <2 x double> } %return39, 1
  store <2 x double> %output41, <2 x double>* %p
  br label %end30

false29:                                          ; preds = %end
  %output47 = fsub double %return25, %return35
  %output48 = fmul double %w31, %output47
  %tmp49 = load <2 x double>, <2 x double>* %p
  %return50 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp49, double %output48, i64 1)
  %output52 = extractvalue { double, <2 x double> } %return50, 1
  store <2 x double> %output52, <2 x double>* %p
  br label %end30

end30:                                            ; preds = %false29, %true28
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_STRIPES@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %space, double* %warp) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %output = fadd double %return, 5.000000e-01
  %return2 = call double @"floor@FF"(double %output)
  %output6 = fsub double %return, %return2
  %w7 = load double, double* %w
  %space9 = load double, double* %space
  %output10 = fsub double 1.000000e+00, %space9
  %output11 = fmul double %output6, %output10
  %output13 = fadd double %output11, %return2
  %output14 = fmul double %w7, %output13
  %tmp = load <2 x double>, <2 x double>* %p
  %return15 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <2 x double> } %return15, 1
  store <2 x double> %output17, <2 x double>* %p
  %w18 = load double, double* %w
  %_p19 = load <2 x double>, <2 x double>* %_p
  %return20 = call double @"getcomp@FUI"(<2 x double> %_p19, i64 1)
  %output23 = fmul double %output6, %output6
  %warp24 = load double, double* %warp
  %output25 = fmul double %output23, %warp24
  %output26 = fadd double %return20, %output25
  %output27 = fmul double %w18, %output26
  %return29 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output17, double %output27, i64 1)
  %output31 = extractvalue { double, <2 x double> } %return29, 1
  store <2 x double> %output31, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_WEDGE@UUFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %swirl, double* %angle, double* %hole, double* %count) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  %swirl3 = load double, double* %swirl
  %output = fmul double %swirl3, %SQRT
  %output5 = fadd double %ATANYX, %output
  %count6 = load double, double* %count
  %output8 = fmul double %count6, %output5
  %output9 = fadd double %output8, 0x400921FB4D12D84A
  %output10 = fmul double %output9, 0x3FD45F306DC9C883
  %output11 = fmul double %output10, 5.000000e-01
  %return = call double @"floor@FF"(double %output11)
  %angle12 = load double, double* %angle
  %output14 = fmul double %angle12, %count6
  %output15 = fmul double %output14, 0x3FD45F306DC9C883
  %output16 = fmul double %output15, 5.000000e-01
  %output17 = fsub double 1.000000e+00, %output16
  %output20 = fmul double %output5, %output17
  %output23 = fmul double %return, %angle12
  %output24 = fadd double %output20, %output23
  store double %output24, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %w26 = load double, double* %w
  %hole28 = load double, double* %hole
  %output29 = fadd double %SQRT, %hole28
  %output30 = fmul double %w26, %output29
  %ca32 = load double, double* %ca
  %output33 = fmul double %output30, %ca32
  %tmp = load <2 x double>, <2 x double>* %p
  %return34 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output33, i64 0)
  %output36 = extractvalue { double, <2 x double> } %return34, 1
  store <2 x double> %output36, <2 x double>* %p
  %sa38 = load double, double* %sa
  %output39 = fmul double %output30, %sa38
  %return41 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output36, double %output39, i64 1)
  %output43 = extractvalue { double, <2 x double> } %return41, 1
  store <2 x double> %output43, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_WEDGEJULIA@UUFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %power, double* %angle, double* %dist, double* %count) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %angle1 = load double, double* %angle
  %count2 = load double, double* %count
  %output = fmul double %angle1, %count2
  %output3 = fmul double %output, 0x3FD45F306DC9C883
  %output4 = fmul double %output3, 5.000000e-01
  %output5 = fsub double 1.000000e+00, %output4
  %power6 = load double, double* %power
  %return = call double @"abs@FF"(double %power6)
  %dist7 = load double, double* %dist
  %power8 = load double, double* %power
  %output9 = call double @"div@FF"(double %dist7, double %power8)
  %output10 = call double @"div@FF"(double %output9, double 2.000000e+00)
  %w11 = load double, double* %w
  %_p12 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p12, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %return14 = call double @"pow@FFF"(double %SUMSQ, double %output10)
  %output15 = fmul double %w11, %return14
  %return17 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %output18 = fmul double %return, %return17
  %cast = fptosi double %output18 to i64
  %cast19 = sitofp i64 %cast to double
  %_p20 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p20, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  %output22 = fmul double 0x401921FB4D12D84A, %cast19
  %output23 = fadd double %ATANYX, %output22
  %power24 = load double, double* %power
  %output25 = call double @"div@FF"(double %output23, double %power24)
  %count26 = load double, double* %count
  %output28 = fmul double %count26, %output25
  %output29 = fadd double %output28, 0x400921FB4D12D84A
  %output30 = fmul double %output29, 0x3FD45F306DC9C883
  %output31 = fmul double %output30, 5.000000e-01
  %return32 = call double @"floor@FF"(double %output31)
  %output35 = fmul double %output25, %output5
  %angle37 = load double, double* %angle
  %output38 = fmul double %return32, %angle37
  %output39 = fadd double %output35, %output38
  store double %output39, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %ca42 = load double, double* %ca
  %output43 = fmul double %output15, %ca42
  %tmp = load <2 x double>, <2 x double>* %p
  %return44 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output43, i64 0)
  %output46 = extractvalue { double, <2 x double> } %return44, 1
  store <2 x double> %output46, <2 x double>* %p
  %sa48 = load double, double* %sa
  %output49 = fmul double %output15, %sa48
  %return51 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output46, double %output49, i64 1)
  %output53 = extractvalue { double, <2 x double> } %return51, 1
  store <2 x double> %output53, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_WEDGESPH@UUFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %swirl, double* %angle, double* %hole, double* %count) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %output = fadd double %SQRT, 1.000000e-10
  %output2 = call double @"div@FF"(double 1.000000e+00, double %output)
  %_p3 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p3, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  %swirl4 = load double, double* %swirl
  %output6 = fmul double %swirl4, %output2
  %output7 = fadd double %ATANYX, %output6
  %count8 = load double, double* %count
  %output10 = fmul double %count8, %output7
  %output11 = fadd double %output10, 0x400921FB4D12D84A
  %output12 = fmul double %output11, 0x3FD45F306DC9C883
  %output13 = fmul double %output12, 5.000000e-01
  %return = call double @"floor@FF"(double %output13)
  %angle14 = load double, double* %angle
  %output16 = fmul double %angle14, %count8
  %output17 = fmul double %output16, 0x3FD45F306DC9C883
  %output18 = fmul double %output17, 5.000000e-01
  %output19 = fsub double 1.000000e+00, %output18
  %output22 = fmul double %output7, %output19
  %output25 = fmul double %return, %angle14
  %output26 = fadd double %output22, %output25
  store double %output26, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %w28 = load double, double* %w
  %hole30 = load double, double* %hole
  %output31 = fadd double %output2, %hole30
  %output32 = fmul double %w28, %output31
  %ca34 = load double, double* %ca
  %output35 = fmul double %output32, %ca34
  %tmp = load <2 x double>, <2 x double>* %p
  %return36 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output35, i64 0)
  %output38 = extractvalue { double, <2 x double> } %return36, 1
  store <2 x double> %output38, <2 x double>* %p
  %sa40 = load double, double* %sa
  %output41 = fmul double %output32, %sa40
  %return43 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output38, double %output41, i64 1)
  %output45 = extractvalue { double, <2 x double> } %return43, 1
  store <2 x double> %output45, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_WHORL@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %inside, double* %outside) #0 {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1, <2 x double>* %0
  %SQRT = call double @"SQRT@FU"(<2 x double>* %0)
  %w3 = load double, double* %w
  %return = fcmp olt double %SQRT, %w3
  %_p5 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p5, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %inside6 = load double, double* %inside
  %w7 = load double, double* %w
  %output = fsub double %w7, %SQRT
  %output9 = call double @"div@FF"(double %inside6, double %output)
  %output10 = fadd double %ATANYX, %output9
  br label %end

false:                                            ; preds = %__llvm_entry
  %outside13 = load double, double* %outside
  %w14 = load double, double* %w
  %output16 = fsub double %w14, %SQRT
  %output17 = call double @"div@FF"(double %outside13, double %output16)
  %output18 = fadd double %ATANYX, %output17
  br label %end

end:                                              ; preds = %false, %true
  %aa.0 = phi double [ %output10, %true ], [ %output18, %false ]
  store double %aa.0, double* %2
  call void @"sincos@FFF"(double* %2, double* %sa, double* %ca)
  %w20 = load double, double* %w
  %output22 = fmul double %w20, %SQRT
  %ca23 = load double, double* %ca
  %output24 = fmul double %output22, %ca23
  %tmp = load <2 x double>, <2 x double>* %p
  %return25 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <2 x double> } %return25, 1
  store <2 x double> %output27, <2 x double>* %p
  %w28 = load double, double* %w
  %output30 = fmul double %w28, %SQRT
  %sa31 = load double, double* %sa
  %output32 = fmul double %output30, %sa31
  %return34 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output27, double %output32, i64 1)
  %output36 = extractvalue { double, <2 x double> } %return34, 1
  store <2 x double> %output36, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_WAVES2@UUFUU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %scl, <2 x double>* %freq) #0 {
__llvm_entry:
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %scl3 = load <2 x double>, <2 x double>* %scl
  %return4 = call double @"getcomp@FUI"(<2 x double> %scl3, i64 0)
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %freq7 = load <2 x double>, <2 x double>* %freq
  %return8 = call double @"getcomp@FUI"(<2 x double> %freq7, i64 0)
  %output = fmul double %return6, %return8
  %return9 = call double @"sin@FF"(double %output)
  %output10 = fmul double %return4, %return9
  %output11 = fadd double %return, %output10
  %output12 = fmul double %w1, %output11
  %tmp = load <2 x double>, <2 x double>* %p
  %return13 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <2 x double> } %return13, 1
  store <2 x double> %output15, <2 x double>* %p
  %w16 = load double, double* %w
  %_p17 = load <2 x double>, <2 x double>* %_p
  %return18 = call double @"getcomp@FUI"(<2 x double> %_p17, i64 1)
  %scl19 = load <2 x double>, <2 x double>* %scl
  %return20 = call double @"getcomp@FUI"(<2 x double> %scl19, i64 1)
  %return22 = call double @"getcomp@FUI"(<2 x double> %_p17, i64 0)
  %freq23 = load <2 x double>, <2 x double>* %freq
  %return24 = call double @"getcomp@FUI"(<2 x double> %freq23, i64 1)
  %output25 = fmul double %return22, %return24
  %return26 = call double @"sin@FF"(double %output25)
  %output27 = fmul double %return20, %return26
  %output28 = fadd double %return18, %output27
  %output29 = fmul double %w16, %output28
  %return31 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output15, double %output29, i64 1)
  %output33 = extractvalue { double, <2 x double> } %return31, 1
  store <2 x double> %output33, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHEEXP@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %expsin = alloca double
  %expcos = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %expsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %expcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %return2 = call double @"exp@FF"(double %return)
  %p3 = load <2 x double>, <2 x double>* %p
  %return4 = call double @"getcomp@FUI"(<2 x double> %p3, i64 1)
  store double %return4, double* %0
  call void @"sincos@FFF"(double* %0, double* %expsin, double* %expcos)
  %w5 = load double, double* %w
  %output = fmul double %w5, %return2
  %expcos7 = load double, double* %expcos
  %output8 = fmul double %output, %expcos7
  %tmp = load <2 x double>, <2 x double>* %p
  %return9 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <2 x double> } %return9, 1
  store <2 x double> %output11, <2 x double>* %p
  %w12 = load double, double* %w
  %output14 = fmul double %w12, %return2
  %expsin15 = load double, double* %expsin
  %output16 = fmul double %output14, %expsin15
  %return18 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output11, double %output16, i64 1)
  %output20 = extractvalue { double, <2 x double> } %return18, 1
  store <2 x double> %output20, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHELOG@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %w1 = load double, double* %w
  %output = fmul double %w1, 5.000000e-01
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %return = call double @"log@FF"(double %SUMSQ)
  %output3 = fmul double %output, %return
  %tmp = load <2 x double>, <2 x double>* %p
  %return4 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output3, i64 0)
  %output6 = extractvalue { double, <2 x double> } %return4, 1
  store <2 x double> %output6, <2 x double>* %p
  %w7 = load double, double* %w
  %_p8 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p8, <2 x double>* %1
  %ATANYX = call double @"ATANYX@FU"(<2 x double>* %1)
  %output9 = fmul double %w7, %ATANYX
  %tmp10 = load <2 x double>, <2 x double>* %p
  %return11 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp10, double %output9, i64 1)
  %output13 = extractvalue { double, <2 x double> } %return11, 1
  store <2 x double> %output13, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHESIN@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sinacos = alloca double
  %0 = alloca double
  %sinsin = alloca double
  store double 0.000000e+00, double* %sinsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sinacos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinsin, double* %sinacos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double, double* %w
  %sinsin9 = load double, double* %sinsin
  %output = fmul double %w8, %sinsin9
  %output11 = fmul double %output, %return7
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %w15 = load double, double* %w
  %sinacos16 = load double, double* %sinacos
  %output17 = fmul double %w15, %sinacos16
  %output19 = fmul double %output17, %return4
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHECOS@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %coscos = alloca double
  %0 = alloca double
  %cossin = alloca double
  store double 0.000000e+00, double* %cossin, !vex-initializer-store !3
  store double 0.000000e+00, double* %coscos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cossin, double* %coscos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double, double* %w
  %coscos9 = load double, double* %coscos
  %output = fmul double %w8, %coscos9
  %output11 = fmul double %output, %return7
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %w15 = load double, double* %w
  %cossin16 = load double, double* %cossin
  %output17 = fmul double %w15, %cossin16
  %output19 = fmul double %output17, %return4
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHETAN@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %tancos = alloca double
  %0 = alloca double
  %tansin = alloca double
  store double 0.000000e+00, double* %tansin, !vex-initializer-store !3
  store double 0.000000e+00, double* %tancos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %tansin, double* %tancos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %tancos10 = load double, double* %tancos
  %output12 = fadd double %tancos10, %return9
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %w14 = load double, double* %w
  %output16 = fmul double %w14, %output13
  %output18 = fmul double %output16, %return5
  %tmp = load <2 x double>, <2 x double>* %p
  %return19 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <2 x double> } %return19, 1
  store <2 x double> %output21, <2 x double>* %p
  %w22 = load double, double* %w
  %output24 = fmul double %w22, %output13
  %output26 = fmul double %output24, %return9
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output21, double %output26, i64 1)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHESEC@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %seccos = alloca double
  %0 = alloca double
  %secsin = alloca double
  store double 0.000000e+00, double* %secsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %seccos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %secsin, double* %seccos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %return9 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output = fmul double 2.000000e+00, %return9
  %return10 = call double @"cos@FF"(double %output)
  %output13 = fmul double 2.000000e+00, %return3
  %return14 = call double @"cosh@FF"(double %output13)
  %output15 = fadd double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double, double* %w
  %output19 = fmul double %w17, %output16
  %seccos20 = load double, double* %seccos
  %output21 = fmul double %output19, %seccos20
  %output23 = fmul double %output21, %return7
  %tmp = load <2 x double>, <2 x double>* %p
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  %w27 = load double, double* %w
  %output29 = fmul double %w27, %output16
  %secsin30 = load double, double* %secsin
  %output31 = fmul double %output29, %secsin30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHECSC@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %csccos = alloca double
  %0 = alloca double
  %cscsin = alloca double
  store double 0.000000e+00, double* %cscsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %csccos, !vex-initializer-store !3
  %p1 = load <2 x double>, <2 x double>* %p
  %return = call double @"getcomp@FUI"(<2 x double> %p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cscsin, double* %csccos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %output = fmul double 2.000000e+00, %return3
  %return10 = call double @"cosh@FF"(double %output)
  %return12 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output13 = fmul double 2.000000e+00, %return12
  %return14 = call double @"cos@FF"(double %output13)
  %output15 = fsub double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double, double* %w
  %output19 = fmul double %w17, %output16
  %cscsin20 = load double, double* %cscsin
  %output21 = fmul double %output19, %cscsin20
  %output23 = fmul double %output21, %return7
  %tmp = load <2 x double>, <2 x double>* %p
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  %w27 = load double, double* %w
  %output29 = fmul double %w27, %output16
  %csccos30 = load double, double* %csccos
  %output31 = fmul double %output29, %csccos30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHECOT@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %cotcos = alloca double
  %0 = alloca double
  %cotsin = alloca double
  store double 0.000000e+00, double* %cotsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cotcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %cotsin, double* %cotcos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %cotcos11 = load double, double* %cotcos
  %output12 = fsub double %return9, %cotcos11
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %w14 = load double, double* %w
  %output16 = fmul double %w14, %output13
  %cotsin17 = load double, double* %cotsin
  %output18 = fmul double %output16, %cotsin17
  %tmp = load <2 x double>, <2 x double>* %p
  %return19 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <2 x double> } %return19, 1
  store <2 x double> %output21, <2 x double>* %p
  %w22 = load double, double* %w
  %output24 = fmul double %w22, %output13
  %return25 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return25 to double
  %output26 = fmul double %output24, %cast
  %output28 = fmul double %output26, %return5
  %return30 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output21, double %output28, i64 1)
  %output32 = extractvalue { double, <2 x double> } %return30, 1
  store <2 x double> %output32, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHESINH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sinhcos = alloca double
  %0 = alloca double
  %sinhsin = alloca double
  store double 0.000000e+00, double* %sinhsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sinhcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinhsin, double* %sinhcos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double, double* %w
  %output = fmul double %w8, %return4
  %sinhcos10 = load double, double* %sinhcos
  %output11 = fmul double %output, %sinhcos10
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %w15 = load double, double* %w
  %output17 = fmul double %w15, %return7
  %sinhsin18 = load double, double* %sinhsin
  %output19 = fmul double %output17, %sinhsin18
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHECOSH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %coshcos = alloca double
  %0 = alloca double
  %coshsin = alloca double
  store double 0.000000e+00, double* %coshsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %coshcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %coshsin, double* %coshcos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double, double* %w
  %output = fmul double %w8, %return7
  %coshcos10 = load double, double* %coshcos
  %output11 = fmul double %output, %coshcos10
  %tmp = load <2 x double>, <2 x double>* %p
  %return12 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <2 x double> } %return12, 1
  store <2 x double> %output14, <2 x double>* %p
  %w15 = load double, double* %w
  %output17 = fmul double %w15, %return4
  %coshsin18 = load double, double* %coshsin
  %output19 = fmul double %output17, %coshsin18
  %return21 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <2 x double> } %return21, 1
  store <2 x double> %output23, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHETANH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %tanhcos = alloca double
  %0 = alloca double
  %tanhsin = alloca double
  store double 0.000000e+00, double* %tanhsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %tanhcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %tanhsin, double* %tanhcos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %tanhcos8 = load double, double* %tanhcos
  %output10 = fadd double %tanhcos8, %return7
  %output11 = call double @"div@FF"(double 1.000000e+00, double %output10)
  %w12 = load double, double* %w
  %output14 = fmul double %w12, %output11
  %output16 = fmul double %output14, %return4
  %tmp = load <2 x double>, <2 x double>* %p
  %return17 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <2 x double> } %return17, 1
  store <2 x double> %output19, <2 x double>* %p
  %w20 = load double, double* %w
  %output22 = fmul double %w20, %output11
  %tanhsin23 = load double, double* %tanhsin
  %output24 = fmul double %output22, %tanhsin23
  %return26 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output19, double %output24, i64 1)
  %output28 = extractvalue { double, <2 x double> } %return26, 1
  store <2 x double> %output28, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHESECH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %sechcos = alloca double
  %0 = alloca double
  %sechsin = alloca double
  store double 0.000000e+00, double* %sechsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sechcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sechsin, double* %sechcos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %return9 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output = fmul double 2.000000e+00, %return9
  %return10 = call double @"cos@FF"(double %output)
  %output13 = fmul double 2.000000e+00, %return3
  %return14 = call double @"cosh@FF"(double %output13)
  %output15 = fadd double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double, double* %w
  %output19 = fmul double %w17, %output16
  %sechcos20 = load double, double* %sechcos
  %output21 = fmul double %output19, %sechcos20
  %output23 = fmul double %output21, %return7
  %tmp = load <2 x double>, <2 x double>* %p
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  %w27 = load double, double* %w
  %output29 = fmul double %w27, %output16
  %sechsin30 = load double, double* %sechsin
  %output31 = fmul double %output29, %sechsin30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHECSCH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %cschcos = alloca double
  %0 = alloca double
  %cschsin = alloca double
  store double 0.000000e+00, double* %cschsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cschcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cschsin, double* %cschcos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %output = fmul double 2.000000e+00, %return3
  %return10 = call double @"cosh@FF"(double %output)
  %return12 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output13 = fmul double 2.000000e+00, %return12
  %return14 = call double @"cos@FF"(double %output13)
  %output15 = fsub double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double, double* %w
  %output19 = fmul double %w17, %output16
  %output21 = fmul double %output19, %return4
  %cschcos22 = load double, double* %cschcos
  %output23 = fmul double %output21, %cschcos22
  %tmp = load <2 x double>, <2 x double>* %p
  %return24 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <2 x double> } %return24, 1
  store <2 x double> %output26, <2 x double>* %p
  %w27 = load double, double* %w
  %output29 = fmul double %w27, %output16
  %output31 = fmul double %output29, %return7
  %cschsin32 = load double, double* %cschsin
  %output33 = fmul double %output31, %cschsin32
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_COTHECOTH@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %cothcos = alloca double
  %0 = alloca double
  %cothsin = alloca double
  store double 0.000000e+00, double* %cothsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cothcos, !vex-initializer-store !3
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %cothsin, double* %cothcos)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %cothcos11 = load double, double* %cothcos
  %output12 = fsub double %return9, %cothcos11
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %w14 = load double, double* %w
  %output16 = fmul double %w14, %output13
  %output18 = fmul double %output16, %return5
  %tmp = load <2 x double>, <2 x double>* %p
  %return19 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <2 x double> } %return19, 1
  store <2 x double> %output21, <2 x double>* %p
  %w22 = load double, double* %w
  %output24 = fmul double %w22, %output13
  %cothsin25 = load double, double* %cothsin
  %output26 = fmul double %output24, %cothsin25
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output21, double %output26, i64 1)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_AUGER@UUFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %freq, double* %scale, double* %sym, double* %ww) #0 {
__llvm_entry:
  %freq1 = load double, double* %freq
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output = fmul double %freq1, %return
  %return3 = call double @"sin@FF"(double %output)
  %return6 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output7 = fmul double %freq1, %return6
  %return8 = call double @"sin@FF"(double %output7)
  %ww11 = load double, double* %ww
  %scale12 = load double, double* %scale
  %output14 = fmul double %scale12, %return3
  %output15 = call double @"div@FF"(double %output14, double 2.000000e+00)
  %return18 = call double @"abs@FF"(double %return6)
  %output20 = fmul double %return18, %return3
  %output21 = fadd double %output15, %output20
  %output22 = fmul double %ww11, %output21
  %output23 = fadd double %return6, %output22
  %_p24 = load <2 x double>, <2 x double>* %_p
  %return25 = call double @"getcomp@FUI"(<2 x double> %_p24, i64 0)
  %ww26 = load double, double* %ww
  %scale27 = load double, double* %scale
  %output29 = fmul double %scale27, %return8
  %output30 = call double @"div@FF"(double %output29, double 2.000000e+00)
  %return33 = call double @"abs@FF"(double %return25)
  %output35 = fmul double %return33, %return8
  %output36 = fadd double %output30, %output35
  %output37 = fmul double %ww26, %output36
  %output38 = fadd double %return25, %output37
  %w39 = load double, double* %w
  %_p40 = load <2 x double>, <2 x double>* %_p
  %return41 = call double @"getcomp@FUI"(<2 x double> %_p40, i64 0)
  %sym42 = load double, double* %sym
  %output46 = fmul double %output23, %return41
  %output47 = fmul double %sym42, %output46
  %output48 = fadd double %return41, %output47
  %output49 = fmul double %w39, %output48
  %tmp = load <2 x double>, <2 x double>* %p
  %return50 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output49, i64 0)
  %output52 = extractvalue { double, <2 x double> } %return50, 1
  store <2 x double> %output52, <2 x double>* %p
  %w53 = load double, double* %w
  %output55 = fmul double %w53, %output38
  %return57 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output52, double %output55, i64 1)
  %output59 = extractvalue { double, <2 x double> } %return57, 1
  store <2 x double> %output59, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_FLUX@UUFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %spread) #0 {
__llvm_entry:
  %_p1 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p1, i64 0)
  %w2 = load double, double* %w
  %output = fadd double %return, %w2
  %output6 = fsub double %return, %w2
  %spread8 = load double, double* %spread
  %output9 = fadd double 2.000000e+00, %spread8
  %output10 = fmul double %w2, %output9
  %return12 = call double @"getcomp@FUI"(<2 x double> %_p1, i64 1)
  %output15 = fmul double %return12, %return12
  %output18 = fmul double %output, %output
  %output19 = fadd double %output15, %output18
  %return20 = call double @"sqrt@FF"(double %output19)
  %output28 = fmul double %output6, %output6
  %output29 = fadd double %output15, %output28
  %return30 = call double @"sqrt@FF"(double %output29)
  %output31 = call double @"div@FF"(double %return20, double %return30)
  %return32 = call double @"sqrt@FF"(double %output31)
  %output33 = fmul double %output10, %return32
  %return37 = call double @"atan2@FFF"(double %return12, double %output6)
  %return41 = call double @"atan2@FFF"(double %return12, double %output)
  %output42 = fsub double %return37, %return41
  %output43 = fmul double %output42, 5.000000e-01
  %return46 = call double @"cos@FF"(double %output43)
  %output47 = fmul double %output33, %return46
  %tmp = load <2 x double>, <2 x double>* %p
  %return48 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output47, i64 0)
  %output50 = extractvalue { double, <2 x double> } %return48, 1
  store <2 x double> %output50, <2 x double>* %p
  %return53 = call double @"sin@FF"(double %output43)
  %output54 = fmul double %output33, %return53
  %return56 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output50, double %output54, i64 1)
  %output58 = extractvalue { double, <2 x double> } %return56, 1
  store <2 x double> %output58, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_MOBIUS@UUFPP"(<2 x double>* %p, <2 x double>* %_p, double* %w, <4 x double>* %re, <4 x double>* %im) #0 {
__llvm_entry:
  %re1 = load <4 x double>, <4 x double>* %re
  %return = call double @"getcomp@FPI"(<4 x double> %re1, i64 0)
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return3 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %output = fmul double %return, %return3
  %im4 = load <4 x double>, <4 x double>* %im
  %return5 = call double @"getcomp@FPI"(<4 x double> %im4, i64 0)
  %return7 = call double @"getcomp@FUI"(<2 x double> %_p2, i64 1)
  %output8 = fmul double %return5, %return7
  %output9 = fsub double %output, %output8
  %return11 = call double @"getcomp@FPI"(<4 x double> %re1, i64 1)
  %output12 = fadd double %output9, %return11
  %output17 = fmul double %return, %return7
  %output22 = fmul double %return5, %return3
  %output23 = fadd double %output17, %output22
  %return25 = call double @"getcomp@FPI"(<4 x double> %im4, i64 1)
  %output26 = fadd double %output23, %return25
  %return28 = call double @"getcomp@FPI"(<4 x double> %re1, i64 2)
  %output31 = fmul double %return28, %return3
  %return33 = call double @"getcomp@FPI"(<4 x double> %im4, i64 2)
  %output36 = fmul double %return33, %return7
  %output37 = fsub double %output31, %output36
  %return39 = call double @"getcomp@FPI"(<4 x double> %re1, i64 3)
  %output40 = fadd double %output37, %return39
  %output45 = fmul double %return28, %return7
  %output50 = fmul double %return33, %return3
  %output51 = fadd double %output45, %output50
  %return53 = call double @"getcomp@FPI"(<4 x double> %im4, i64 3)
  %output54 = fadd double %output51, %return53
  %w55 = load double, double* %w
  %output58 = fmul double %output40, %output40
  %output61 = fmul double %output54, %output54
  %output62 = fadd double %output58, %output61
  %output63 = call double @"div@FF"(double %w55, double %output62)
  %output67 = fmul double %output12, %output40
  %output70 = fmul double %output26, %output54
  %output71 = fadd double %output67, %output70
  %output72 = fmul double %output63, %output71
  %tmp = load <2 x double>, <2 x double>* %p
  %return73 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output72, i64 0)
  %output75 = extractvalue { double, <2 x double> } %return73, 1
  store <2 x double> %output75, <2 x double>* %p
  %output79 = fmul double %output26, %output40
  %output82 = fmul double %output12, %output54
  %output83 = fsub double %output79, %output82
  %output84 = fmul double %output63, %output83
  %return86 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output75, double %output84, i64 1)
  %output88 = extractvalue { double, <2 x double> } %return86, 1
  store <2 x double> %output88, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_CURVE@UUFUU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %l, <2 x double>* %a) #0 {
__llvm_entry:
  %l1 = load <2 x double>, <2 x double>* %l
  %return = call double @"getcomp@FUI"(<2 x double> %l1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %l1, i64 1)
  %output8 = fmul double %return5, %return5
  %return10 = fcmp olt double %output, 1.000000e-20
  br i1 %return10, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return13 = fcmp olt double %output8, 1.000000e-20
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  br label %end16

end16:                                            ; preds = %true15, %end
  %w17 = load double, double* %w
  %_p18 = load <2 x double>, <2 x double>* %_p
  %return19 = call double @"getcomp@FUI"(<2 x double> %_p18, i64 0)
  %a20 = load <2 x double>, <2 x double>* %a
  %return21 = call double @"getcomp@FUI"(<2 x double> %a20, i64 0)
  %return23 = call double @"getcomp@FUI"(<2 x double> %_p18, i64 1)
  %output26 = fmul double %return23, %return23
  %l27 = load <2 x double>, <2 x double>* %l
  %return28 = call double @"getcomp@FUI"(<2 x double> %l27, i64 0)
  %output29 = call double @"div@FF"(double %output26, double %return28)
  %return30 = call double @"exp@FF"(double %output29)
  %output31 = fmul double %return21, %return30
  %output32 = fadd double %return19, %output31
  %output33 = fmul double %w17, %output32
  %tmp = load <2 x double>, <2 x double>* %p
  %return34 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output33, i64 0)
  %output36 = extractvalue { double, <2 x double> } %return34, 1
  store <2 x double> %output36, <2 x double>* %p
  %w37 = load double, double* %w
  %_p38 = load <2 x double>, <2 x double>* %_p
  %return39 = call double @"getcomp@FUI"(<2 x double> %_p38, i64 1)
  %a40 = load <2 x double>, <2 x double>* %a
  %return41 = call double @"getcomp@FUI"(<2 x double> %a40, i64 1)
  %return43 = call double @"getcomp@FUI"(<2 x double> %_p38, i64 0)
  %output46 = fmul double %return43, %return43
  %l47 = load <2 x double>, <2 x double>* %l
  %return48 = call double @"getcomp@FUI"(<2 x double> %l47, i64 1)
  %output49 = call double @"div@FF"(double %output46, double %return48)
  %return50 = call double @"exp@FF"(double %output49)
  %output51 = fmul double %return41, %return50
  %output52 = fadd double %return39, %output51
  %output53 = fmul double %w37, %output52
  %return55 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output36, double %output53, i64 1)
  %output57 = extractvalue { double, <2 x double> } %return55, 1
  store <2 x double> %output57, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_PERSPECTIVE@UUFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %angle, double* %dist) #0 {
__llvm_entry:
  %angle1 = load double, double* %angle
  %output = fmul double %angle1, 0x400921FB4D12D84A
  %output2 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"sin@FF"(double %output2)
  %dist4 = load double, double* %dist
  %return6 = call double @"cos@FF"(double %output2)
  %output7 = fmul double %dist4, %return6
  %_p9 = load <2 x double>, <2 x double>* %_p
  %return10 = call double @"getcomp@FUI"(<2 x double> %_p9, i64 1)
  %output12 = fmul double %return10, %return
  %output13 = fsub double %dist4, %output12
  %output14 = call double @"div@FF"(double 1.000000e+00, double %output13)
  %w15 = load double, double* %w
  %output17 = fmul double %w15, %dist4
  %return19 = call double @"getcomp@FUI"(<2 x double> %_p9, i64 0)
  %output20 = fmul double %output17, %return19
  %output22 = fmul double %output20, %output14
  %tmp = load <2 x double>, <2 x double>* %p
  %return23 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output22, i64 0)
  %output25 = extractvalue { double, <2 x double> } %return23, 1
  store <2 x double> %output25, <2 x double>* %p
  %w26 = load double, double* %w
  %output28 = fmul double %w26, %output7
  %_p29 = load <2 x double>, <2 x double>* %_p
  %return30 = call double @"getcomp@FUI"(<2 x double> %_p29, i64 1)
  %output31 = fmul double %output28, %return30
  %output33 = fmul double %output31, %output14
  %return35 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output25, double %output33, i64 1)
  %output37 = extractvalue { double, <2 x double> } %return35, 1
  store <2 x double> %output37, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_BWRAPS@UUFFFFFF"(<2 x double>* %p, <2 x double>* %_p, double* %w, double* %cellsize, double* %space, double* %gain, double* %innertwist, double* %outertwist) #0 {
__llvm_entry:
  %ss = alloca double
  %cc = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %ss, !vex-initializer-store !3
  store double 0.000000e+00, double* %cc, !vex-initializer-store !3
  %cellsize1 = load double, double* %cellsize
  %space2 = load double, double* %space
  %output = fmul double %space2, %space2
  %output4 = fadd double 1.000000e+00, %output
  %output5 = call double @"div@FF"(double %cellsize1, double %output4)
  %output6 = fmul double 5.000000e-01, %output5
  %gain7 = load double, double* %gain
  %return = call double @"sqrt@FF"(double %gain7)
  %output9 = call double @"div@FF"(double %return, double %cellsize1)
  %output10 = fadd double %output9, 1.000000e-06
  %output13 = fmul double %output10, %output6
  %return15 = fcmp ogt double %output13, 2.000000e+00
  br i1 %return15, label %end, label %false

false:                                            ; preds = %__llvm_entry
  %output21 = fmul double %output13, %output13
  %output22 = call double @"div@FF"(double %output21, double 4.000000e+00)
  %output23 = fadd double %output22, 1.000000e+00
  %output24 = call double @"div@FF"(double %output13, double %output23)
  br label %end

end:                                              ; preds = %__llvm_entry, %false
  %phi = phi double [ %output24, %false ], [ 1.000000e+00, %__llvm_entry ]
  %output27 = fmul double %output6, %output6
  %output30 = call double @"div@FF"(double %output6, double %phi)
  %_p31 = load <2 x double>, <2 x double>* %_p
  %return32 = call double @"getcomp@FUI"(<2 x double> %_p31, i64 0)
  %return34 = call double @"getcomp@FUI"(<2 x double> %_p31, i64 1)
  %cellsize35 = load double, double* %cellsize
  %return36 = fcmp oeq double %cellsize35, 0.000000e+00
  br i1 %return36, label %true38, label %false39

true38:                                           ; preds = %end
  %w41 = load double, double* %w
  %output43 = fmul double %w41, %return32
  %tmp = load <2 x double>, <2 x double>* %p
  %return44 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output43, i64 0)
  %output46 = extractvalue { double, <2 x double> } %return44, 1
  store <2 x double> %output46, <2 x double>* %p
  %w47 = load double, double* %w
  %output49 = fmul double %w47, %return34
  %return51 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output46, double %output49, i64 1)
  %output53 = extractvalue { double, <2 x double> } %return51, 1
  store <2 x double> %output53, <2 x double>* %p
  br label %end40

false39:                                          ; preds = %end
  %output56 = call double @"div@FF"(double %return32, double %cellsize35)
  %return57 = call double @"floor@FF"(double %output56)
  %output58 = fadd double %return57, 5.000000e-01
  %output60 = fmul double %output58, %cellsize35
  %output63 = call double @"div@FF"(double %return34, double %cellsize35)
  %return64 = call double @"floor@FF"(double %output63)
  %output65 = fadd double %return64, 5.000000e-01
  %output67 = fmul double %output65, %cellsize35
  %output70 = fsub double %return32, %output60
  %output73 = fsub double %return34, %output67
  %output76 = fmul double %output70, %output70
  %output79 = fmul double %output73, %output73
  %output80 = fadd double %output76, %output79
  %return82 = fcmp ogt double %output80, %output27
  br i1 %return82, label %true84, label %false85

end40:                                            ; preds = %true84, %false85, %true38
  ret void

true84:                                           ; preds = %false39
  %w87 = load double, double* %w
  %output89 = fmul double %w87, %return32
  %tmp90 = load <2 x double>, <2 x double>* %p
  %return91 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp90, double %output89, i64 0)
  %output93 = extractvalue { double, <2 x double> } %return91, 1
  store <2 x double> %output93, <2 x double>* %p
  %w94 = load double, double* %w
  %output96 = fmul double %w94, %return34
  %return98 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output93, double %output96, i64 1)
  %output100 = extractvalue { double, <2 x double> } %return98, 1
  store <2 x double> %output100, <2 x double>* %p
  br label %end40

false85:                                          ; preds = %false39
  %output103 = fmul double %output70, %output10
  %output106 = fmul double %output73, %output10
  %output110 = fmul double %output103, %output103
  %output113 = fmul double %output106, %output106
  %output114 = fadd double %output110, %output113
  %output115 = call double @"div@FF"(double %output114, double 4.000000e+00)
  %output116 = fadd double %output115, 1.000000e+00
  %output117 = call double @"div@FF"(double %output30, double %output116)
  %output120 = fmul double %output103, %output117
  %output123 = fmul double %output106, %output117
  %output126 = fmul double %output120, %output120
  %output129 = fmul double %output123, %output123
  %output130 = fadd double %output126, %output129
  %output132 = call double @"div@FF"(double %output130, double %output27)
  %innertwist133 = load double, double* %innertwist
  %output135 = fsub double 1.000000e+00, %output132
  %output136 = fmul double %innertwist133, %output135
  %outertwist137 = load double, double* %outertwist
  %output139 = fmul double %outertwist137, %output132
  %output140 = fadd double %output136, %output139
  store double %output140, double* %0
  call void @"sincos@FFF"(double* %0, double* %ss, double* %cc)
  %cc143 = load double, double* %cc
  %output145 = fmul double %cc143, %output120
  %output146 = fadd double %output60, %output145
  %ss147 = load double, double* %ss
  %output149 = fmul double %ss147, %output123
  %output150 = fadd double %output146, %output149
  %output154 = fmul double %ss147, %output120
  %output155 = fsub double %output67, %output154
  %output158 = fmul double %cc143, %output123
  %output159 = fadd double %output155, %output158
  %w160 = load double, double* %w
  %output162 = fmul double %w160, %output150
  %tmp163 = load <2 x double>, <2 x double>* %p
  %return164 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp163, double %output162, i64 0)
  %output166 = extractvalue { double, <2 x double> } %return164, 1
  store <2 x double> %output166, <2 x double>* %p
  %w167 = load double, double* %w
  %output169 = fmul double %w167, %output159
  %return171 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output166, double %output169, i64 1)
  %output173 = extractvalue { double, <2 x double> } %return171, 1
  store <2 x double> %output173, <2 x double>* %p
  br label %end40
}

; Function Attrs: alwaysinline nounwind
define private void @"V_HEMISPHERE@UUF"(<2 x double>* %p, <2 x double>* %_p, double* %w) #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p2, <2 x double>* %0
  %SUMSQ = call double @"SUMSQ@FU"(<2 x double>* %0)
  %output = fadd double %SUMSQ, 1.000000e+00
  %return = call double @"sqrt@FF"(double %output)
  %output3 = call double @"div@FF"(double %w1, double %return)
  %_p4 = load <2 x double>, <2 x double>* %_p
  %return5 = call double @"getcomp@FUI"(<2 x double> %_p4, i64 0)
  %output7 = fmul double %return5, %output3
  %tmp = load <2 x double>, <2 x double>* %p
  %return8 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <2 x double> } %return8, 1
  store <2 x double> %output10, <2 x double>* %p
  %_p11 = load <2 x double>, <2 x double>* %_p
  %return12 = call double @"getcomp@FUI"(<2 x double> %_p11, i64 1)
  %output14 = fmul double %return12, %output3
  %return16 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <2 x double> } %return16, 1
  store <2 x double> %output18, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"V_POLYNOMIAL@UUFUUU"(<2 x double>* %p, <2 x double>* %_p, double* %w, <2 x double>* %pow, <2 x double>* %lc, <2 x double>* %sc) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %w1 = load double, double* %w
  %_p2 = load <2 x double>, <2 x double>* %_p
  %return = call double @"getcomp@FUI"(<2 x double> %_p2, i64 0)
  %return3 = call double @"abs@FF"(double %return)
  %output = fmul double %w1, %return3
  %pow4 = load <2 x double>, <2 x double>* %pow
  %return5 = call double @"getcomp@FUI"(<2 x double> %pow4, i64 0)
  %return6 = call double @"pow@FFF"(double %output, double %return5)
  %w7 = load double, double* %w
  %_p8 = load <2 x double>, <2 x double>* %_p
  %return9 = call double @"getcomp@FUI"(<2 x double> %_p8, i64 1)
  %return10 = call double @"abs@FF"(double %return9)
  %output11 = fmul double %w7, %return10
  %pow12 = load <2 x double>, <2 x double>* %pow
  %return13 = call double @"getcomp@FUI"(<2 x double> %pow12, i64 1)
  %return14 = call double @"pow@FFF"(double %output11, double %return13)
  %_p16 = load <2 x double>, <2 x double>* %_p
  %return17 = call double @"getcomp@FUI"(<2 x double> %_p16, i64 0)
  store double %return17, double* %0
  %sgn = call double @"sgn@FF"(double* %0)
  %output18 = fmul double %return6, %sgn
  %lc19 = load <2 x double>, <2 x double>* %lc
  %return20 = call double @"getcomp@FUI"(<2 x double> %lc19, i64 0)
  %_p21 = load <2 x double>, <2 x double>* %_p
  %return22 = call double @"getcomp@FUI"(<2 x double> %_p21, i64 0)
  %output23 = fmul double %return20, %return22
  %sc24 = load <2 x double>, <2 x double>* %sc
  %return25 = call double @"getcomp@FUI"(<2 x double> %sc24, i64 0)
  %output26 = fmul double %output23, %return25
  %output27 = fadd double %output18, %output26
  %tmp = load <2 x double>, <2 x double>* %p
  %return28 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <2 x double> } %return28, 1
  store <2 x double> %output30, <2 x double>* %p
  %_p32 = load <2 x double>, <2 x double>* %_p
  %return33 = call double @"getcomp@FUI"(<2 x double> %_p32, i64 1)
  store double %return33, double* %1
  %sgn34 = call double @"sgn@FF"(double* %1)
  %output35 = fmul double %return14, %sgn34
  %lc36 = load <2 x double>, <2 x double>* %lc
  %return37 = call double @"getcomp@FUI"(<2 x double> %lc36, i64 1)
  %_p38 = load <2 x double>, <2 x double>* %_p
  %return39 = call double @"getcomp@FUI"(<2 x double> %_p38, i64 1)
  %output40 = fmul double %return37, %return39
  %sc41 = load <2 x double>, <2 x double>* %sc
  %return42 = call double @"getcomp@FUI"(<2 x double> %sc41, i64 1)
  %output43 = fmul double %output40, %return42
  %output44 = fadd double %output35, %output43
  %tmp45 = load <2 x double>, <2 x double>* %p
  %return46 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %tmp45, double %output44, i64 1)
  %output48 = extractvalue { double, <2 x double> } %return46, 1
  store <2 x double> %output48, <2 x double>* %p
  ret void
}

; Function Attrs: alwaysinline nounwind
define private void @"gemSYSBuild@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modF"(%gemSYS* %this) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1, i64 0, i64 0))
  %tmp = load %gemSYS, %gemSYS* %this
  %0 = insertvalue %gemSYS %tmp, i64 %return, 0
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i64 0, i64 0))
  %1 = insertvalue %gemSYS %0, i64 %return1, 3
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @3, i64 0, i64 0))
  %2 = insertvalue %gemSYS %1, i64 %return3, 2
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @4, i64 0, i64 0))
  %3 = insertvalue %gemSYS %2, i64 %return5, 1
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i64 0, i64 0))
  %4 = insertvalue %gemSYS %3, i64 %return7, 5
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @6, i64 0, i64 0))
  %5 = insertvalue %gemSYS %4, i64 %return9, 4
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @7, i64 0, i64 0))
  %6 = insertvalue %gemSYS %5, i64 %return11, 7
  %return13 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @8, i64 0, i64 0))
  %7 = insertvalue %gemSYS %6, i64 %return13, 8
  %8 = insertvalue %gemSYS %7, double 1.000000e+00, 10
  store %gemSYS %8, %gemSYS* %this
  %9 = icmp ne i64 %return7, 0
  br i1 %9, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return17 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @9, i64 0, i64 0))
  %10 = insertvalue %gemSYS %8, i64 %return17, 6
  store %gemSYS %10, %gemSYS* %this
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %this19 = load %gemSYS, %gemSYS* %this
  %domb = extractvalue %gemSYS %this19, 8
  %11 = icmp ne i64 %domb, 0
  br i1 %11, label %true20, label %end21

true20:                                           ; preds = %end
  %return22 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @10, i64 0, i64 0))
  %12 = insertvalue %gemSYS %this19, i64 %return22, 9
  store %gemSYS %12, %gemSYS* %this
  %return24 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @11, i64 0, i64 0), i64 0)
  %tmp25 = load %gemSYS, %gemSYS* %this
  %13 = insertvalue %gemSYS %tmp25, double %return24, 10
  store %gemSYS %13, %gemSYS* %this
  br label %end21

end21:                                            ; preds = %true20, %end
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind
declare double @"detail@FISI"(i64, i8*, i64) #2

; Function Attrs: alwaysinline nounwind
define private %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modFIIIIIIIIIIF"(i64* %TMG, i64* %DELPT, i64* %POSTF, i64* %FF, i64* %iter_f, i64* %sym, i64* %sym_mode, i64* %iter, i64* %domb, i64* %vizmb, double* %mb_mod) #0 {
__llvm_entry:
  %TMG1 = load i64, i64* %TMG
  %0 = insertvalue %gemSYS undef, i64 %TMG1, 0
  %DELPT2 = load i64, i64* %DELPT
  %1 = insertvalue %gemSYS %0, i64 %DELPT2, 1
  %POSTF4 = load i64, i64* %POSTF
  %2 = insertvalue %gemSYS %1, i64 %POSTF4, 2
  %FF6 = load i64, i64* %FF
  %3 = insertvalue %gemSYS %2, i64 %FF6, 3
  %iter_f8 = load i64, i64* %iter_f
  %4 = insertvalue %gemSYS %3, i64 %iter_f8, 4
  %sym10 = load i64, i64* %sym
  %5 = insertvalue %gemSYS %4, i64 %sym10, 5
  %sym_mode12 = load i64, i64* %sym_mode
  %6 = insertvalue %gemSYS %5, i64 %sym_mode12, 6
  %iter14 = load i64, i64* %iter
  %7 = insertvalue %gemSYS %6, i64 %iter14, 7
  %domb16 = load i64, i64* %domb
  %8 = insertvalue %gemSYS %7, i64 %domb16, 8
  %vizmb18 = load i64, i64* %vizmb
  %9 = insertvalue %gemSYS %8, i64 %vizmb18, 9
  %mb_mod20 = load double, double* %mb_mod
  %10 = insertvalue %gemSYS %9, double %mb_mod20, 10
  ret %gemSYS %10
}

; Function Attrs: alwaysinline nounwind
define private %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modF"() #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca double
  %10 = alloca i64
  store i64 0, i64* %10
  store i64 0, i64* %0
  store i64 0, i64* %1
  store i64 0, i64* %2
  store i64 0, i64* %3
  store i64 0, i64* %4
  store i64 0, i64* %5
  store i64 0, i64* %6
  store i64 0, i64* %7
  store i64 0, i64* %8
  store double 0.000000e+00, double* %9
  %gemSYS = call %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modFIIIIIIIIIIF"(i64* %10, i64* %0, i64* %1, i64* %2, i64* %3, i64* %4, i64* %5, i64* %6, i64* %7, i64* %8, double* %9)
  ret %gemSYS %gemSYS
}

; Function Attrs: alwaysinline nounwind
define private void @"gemBuild@Z3gemM35N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[IZ6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modF"(%gem* %this, i64** %VACTIVE, %gemSYS* %SYS) #0 {
__llvm_entry:
  %m2 = alloca <4 x double>
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca <2 x double>
  %4 = alloca <2 x double>
  %5 = alloca double
  store <4 x double> zeroinitializer, <4 x double>* %m2, !vex-initializer-store !3
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output230, %iter ]
  %SYS2 = load %gemSYS, %gemSYS* %SYS
  %iter_f = extractvalue %gemSYS %SYS2, 4
  %return = call i64 @"lt@III"(i64 %i.0, i64 %iter_f)
  %6 = icmp ne i64 %return, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %VACTIVE3 = load i64*, i64** %VACTIVE
  %return5 = call i64 @"getcomp@I[II"(i64* %VACTIVE3, i64 %i.0)
  %return6 = call i64 @"not@II"(i64 %return5)
  %7 = icmp ne i64 %return6, 0
  br i1 %7, label %iter, label %end7

end:                                              ; preds = %cond
  %TMG = extractvalue %gemSYS %SYS2, 0
  %8 = icmp ne i64 %TMG, 0
  br i1 %8, label %true232, label %end233

iter:                                             ; preds = %true192, %false193, %body
  %output230 = add i64 %i.0, 1
  br label %cond

end7:                                             ; preds = %body
  %output = add i64 %i.0, 1
  %return9 = call i8* @"itoa@SI"(i64 %output)
  %this10 = load %gem, %gem* %this
  %sIDX = extractvalue %gem %this10, 34
  %output12 = call i8** @"append@[SS"(i8** %sIDX, i8* %return9)
  %tmp = load %gem, %gem* %this
  %9 = insertvalue %gem %tmp, i8** %output12, 34
  store %gem %9, %gem* %this
  %return15 = call i64 @"len@I[S"(i8** %output12)
  %return17 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @12, i64 0, i64 0), i8* %return9)
  %return18 = call double @"chf@FS"(i8* %return17)
  %return20 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @13, i64 0, i64 0), i8* %return9)
  %return21 = call double @"chf@FS"(i8* %return20)
  %CLR = extractvalue %gem %9, 14
  %output25 = fmul double %return21, %return18
  %output26 = call double* @"append@[FF"(double* %CLR, double %output25)
  %tmp27 = load %gem, %gem* %this
  %10 = insertvalue %gem %tmp27, double* %output26, 14
  store %gem %10, %gem* %this
  %ONEMINUS = extractvalue %gem %10, 15
  %output30 = fsub double 1.000000e+00, %return21
  %output31 = call double* @"append@[FF"(double* %ONEMINUS, double %output30)
  %tmp32 = load %gem, %gem* %this
  %11 = insertvalue %gem %tmp32, double* %output31, 15
  store %gem %11, %gem* %this
  %PBW = extractvalue %gem %11, 13
  %return35 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @14, i64 0, i64 0), i8* %return9)
  %return36 = call double @"chf@FS"(i8* %return35)
  %output37 = call double* @"append@[FF"(double* %PBW, double %return36)
  %tmp38 = load %gem, %gem* %this
  %12 = insertvalue %gem %tmp38, double* %output37, 13
  store %gem %12, %gem* %this
  %v1w = extractvalue %gem %12, 9
  %return41 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @15, i64 0, i64 0), i8* %return9)
  %return42 = call double @"chf@FS"(i8* %return41)
  %output43 = call double* @"append@[FF"(double* %v1w, double %return42)
  %tmp44 = load %gem, %gem* %this
  %13 = insertvalue %gem %tmp44, double* %output43, 9
  store %gem %13, %gem* %this
  %return47 = call i64 @"neg@II"(i64 1)
  %return48 = call double @"getcomp@F[FI"(double* %output43, i64 %return47)
  %return49 = fcmp one double %return48, 0.000000e+00
  %v1type = extractvalue %gem %13, 0
  br i1 %return49, label %true51, label %false

true51:                                           ; preds = %end7
  %return55 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @16, i64 0, i64 0), i8* %return9)
  %return56 = call i8* @"chs@SS"(i8* %return55)
  %return57 = call i64 @"atoi@IS"(i8* %return56)
  %output58 = call i64* @"append@[II"(i64* %v1type, i64 %return57)
  %tmp59 = load %gem, %gem* %this
  %14 = insertvalue %gem %tmp59, i64* %output58, 0
  store %gem %14, %gem* %this
  br label %end52

false:                                            ; preds = %end7
  %output63 = call i64* @"resize@[II"(i64* %v1type, i64 %return15)
  %15 = insertvalue %gem %13, i64* %output63, 0
  store %gem %15, %gem* %this
  br label %end52

end52:                                            ; preds = %false, %true51
  %this65 = load %gem, %gem* %this
  %v2w = extractvalue %gem %this65, 10
  %return67 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @17, i64 0, i64 0), i8* %return9)
  %return68 = call double @"chf@FS"(i8* %return67)
  %output69 = call double* @"append@[FF"(double* %v2w, double %return68)
  %tmp70 = load %gem, %gem* %this
  %16 = insertvalue %gem %tmp70, double* %output69, 10
  store %gem %16, %gem* %this
  %return74 = call double @"getcomp@F[FI"(double* %output69, i64 %return47)
  %return75 = fcmp one double %return74, 0.000000e+00
  %v2type = extractvalue %gem %16, 1
  br i1 %return75, label %true77, label %false78

true77:                                           ; preds = %end52
  %return82 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @18, i64 0, i64 0), i8* %return9)
  %return83 = call i8* @"chs@SS"(i8* %return82)
  %return84 = call i64 @"atoi@IS"(i8* %return83)
  %output85 = call i64* @"append@[II"(i64* %v2type, i64 %return84)
  %tmp86 = load %gem, %gem* %this
  %17 = insertvalue %gem %tmp86, i64* %output85, 1
  store %gem %17, %gem* %this
  br label %end79

false78:                                          ; preds = %end52
  %output90 = call i64* @"resize@[II"(i64* %v2type, i64 %return15)
  %18 = insertvalue %gem %16, i64* %output90, 1
  store %gem %18, %gem* %this
  br label %end79

end79:                                            ; preds = %false78, %true77
  %this92 = load %gem, %gem* %this
  %v3w = extractvalue %gem %this92, 11
  %return94 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @19, i64 0, i64 0), i8* %return9)
  %return95 = call double @"chf@FS"(i8* %return94)
  %output96 = call double* @"append@[FF"(double* %v3w, double %return95)
  %tmp97 = load %gem, %gem* %this
  %19 = insertvalue %gem %tmp97, double* %output96, 11
  store %gem %19, %gem* %this
  %return101 = call double @"getcomp@F[FI"(double* %output96, i64 %return47)
  %return102 = fcmp one double %return101, 0.000000e+00
  %v3type = extractvalue %gem %19, 2
  br i1 %return102, label %true104, label %false105

true104:                                          ; preds = %end79
  %return109 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @20, i64 0, i64 0), i8* %return9)
  %return110 = call i8* @"chs@SS"(i8* %return109)
  %return111 = call i64 @"atoi@IS"(i8* %return110)
  %output112 = call i64* @"append@[II"(i64* %v3type, i64 %return111)
  %tmp113 = load %gem, %gem* %this
  %20 = insertvalue %gem %tmp113, i64* %output112, 2
  store %gem %20, %gem* %this
  br label %end106

false105:                                         ; preds = %end79
  %output117 = call i64* @"resize@[II"(i64* %v3type, i64 %return15)
  %21 = insertvalue %gem %19, i64* %output117, 2
  store %gem %21, %gem* %this
  br label %end106

end106:                                           ; preds = %false105, %true104
  %this119 = load %gem, %gem* %this
  %v4w = extractvalue %gem %this119, 12
  %return121 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @21, i64 0, i64 0), i8* %return9)
  %return122 = call double @"chf@FS"(i8* %return121)
  %output123 = call double* @"append@[FF"(double* %v4w, double %return122)
  %tmp124 = load %gem, %gem* %this
  %22 = insertvalue %gem %tmp124, double* %output123, 12
  store %gem %22, %gem* %this
  %return128 = call double @"getcomp@F[FI"(double* %output123, i64 %return47)
  %return129 = fcmp one double %return128, 0.000000e+00
  %v4type = extractvalue %gem %22, 3
  br i1 %return129, label %true131, label %false132

true131:                                          ; preds = %end106
  %return136 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @22, i64 0, i64 0), i8* %return9)
  %return137 = call i8* @"chs@SS"(i8* %return136)
  %return138 = call i64 @"atoi@IS"(i8* %return137)
  %output139 = call i64* @"append@[II"(i64* %v4type, i64 %return138)
  %tmp140 = load %gem, %gem* %this
  %23 = insertvalue %gem %tmp140, i64* %output139, 3
  store %gem %23, %gem* %this
  br label %end133

false132:                                         ; preds = %end106
  %output144 = call i64* @"resize@[II"(i64* %v4type, i64 %return15)
  %24 = insertvalue %gem %22, i64* %output144, 3
  store %gem %24, %gem* %this
  br label %end133

end133:                                           ; preds = %false132, %true131
  %return147 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @23, i64 0, i64 0), i8* %return9)
  %return148 = call <2 x double> @"chu@US"(i8* %return147)
  %return150 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @24, i64 0, i64 0), i8* %return9)
  %return151 = call <2 x double> @"chu@US"(i8* %return150)
  %return153 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @25, i64 0, i64 0), i8* %return9)
  %return154 = call double @"chf@FS"(i8* %return153)
  store <2 x double> %return148, <2 x double>* %0
  store <2 x double> %return151, <2 x double>* %1
  %return158 = call double @"radians@FF"(double %return154)
  %return159 = call double @"neg@FF"(double %return158)
  store double %return159, double* %2
  call void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %0, <2 x double>* %1, double* %2)
  %this160 = load %gem, %gem* %this
  %x = extractvalue %gem %this160, 22
  %m2161 = load <4 x double>, <4 x double>* %m2
  %return162 = call double @"getcomp@F2II"(<4 x double> %m2161, i64 0, i64 0)
  %return164 = call double @"getcomp@F2II"(<4 x double> %m2161, i64 0, i64 1)
  %return165 = call <2 x double> @"set@UFF"(double %return162, double %return164)
  %output166 = call <2 x double>* @"append@[UU"(<2 x double>* %x, <2 x double> %return165)
  %tmp167 = load %gem, %gem* %this
  %25 = insertvalue %gem %tmp167, <2 x double>* %output166, 22
  store %gem %25, %gem* %this
  %y = extractvalue %gem %25, 23
  %m2169 = load <4 x double>, <4 x double>* %m2
  %return170 = call double @"getcomp@F2II"(<4 x double> %m2169, i64 1, i64 0)
  %return172 = call double @"getcomp@F2II"(<4 x double> %m2169, i64 1, i64 1)
  %return173 = call <2 x double> @"set@UFF"(double %return170, double %return172)
  %output174 = call <2 x double>* @"append@[UU"(<2 x double>* %y, <2 x double> %return173)
  %tmp175 = load %gem, %gem* %this
  %26 = insertvalue %gem %tmp175, <2 x double>* %output174, 23
  store %gem %26, %gem* %this
  %o = extractvalue %gem %26, 24
  %return178 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @26, i64 0, i64 0), i8* %return9)
  %return179 = call <2 x double> @"chu@US"(i8* %return178)
  %output180 = call <2 x double>* @"append@[UU"(<2 x double>* %o, <2 x double> %return179)
  %tmp181 = load %gem, %gem* %this
  %27 = insertvalue %gem %tmp181, <2 x double>* %output180, 24
  store %gem %27, %gem* %this
  %POSTL = extractvalue %gem %27, 4
  %return184 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @27, i64 0, i64 0), i8* %return9)
  %return185 = call i64 @"chi@IS"(i8* %return184)
  %output186 = call i64* @"append@[II"(i64* %POSTL, i64 %return185)
  %tmp187 = load %gem, %gem* %this
  %28 = insertvalue %gem %tmp187, i64* %output186, 4
  store %gem %28, %gem* %this
  %return191 = call i64 @"getcomp@I[II"(i64* %output186, i64 %return47)
  %29 = icmp ne i64 %return191, 0
  %px = extractvalue %gem %28, 25
  br i1 %29, label %true192, label %false193

true192:                                          ; preds = %end133
  %return197 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @28, i64 0, i64 0), i8* %return9)
  %return198 = call <2 x double> @"chu@US"(i8* %return197)
  %output199 = call <2 x double>* @"append@[UU"(<2 x double>* %px, <2 x double> %return198)
  %tmp200 = load %gem, %gem* %this
  %30 = insertvalue %gem %tmp200, <2 x double>* %output199, 25
  store %gem %30, %gem* %this
  %py = extractvalue %gem %30, 26
  %return203 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @29, i64 0, i64 0), i8* %return9)
  %return204 = call <2 x double> @"chu@US"(i8* %return203)
  %output205 = call <2 x double>* @"append@[UU"(<2 x double>* %py, <2 x double> %return204)
  %tmp206 = load %gem, %gem* %this
  %31 = insertvalue %gem %tmp206, <2 x double>* %output205, 26
  store %gem %31, %gem* %this
  %po = extractvalue %gem %31, 27
  %return209 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @30, i64 0, i64 0), i8* %return9)
  %return210 = call <2 x double> @"chu@US"(i8* %return209)
  %output211 = call <2 x double>* @"append@[UU"(<2 x double>* %po, <2 x double> %return210)
  %tmp212 = load %gem, %gem* %this
  %32 = insertvalue %gem %tmp212, <2 x double>* %output211, 27
  store %gem %32, %gem* %this
  br label %iter

false193:                                         ; preds = %end133
  %output216 = call <2 x double>* @"resize@[UI"(<2 x double>* %px, i64 %return15)
  %33 = insertvalue %gem %28, <2 x double>* %output216, 25
  %py219 = extractvalue %gem %33, 26
  %output221 = call <2 x double>* @"resize@[UI"(<2 x double>* %py219, i64 %return15)
  %34 = insertvalue %gem %33, <2 x double>* %output221, 26
  %po224 = extractvalue %gem %34, 27
  %output226 = call <2 x double>* @"resize@[UI"(<2 x double>* %po224, i64 %return15)
  %35 = insertvalue %gem %34, <2 x double>* %output226, 27
  store %gem %35, %gem* %this
  br label %iter

true232:                                          ; preds = %end
  %return234 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @31, i64 0, i64 0))
  %tmp235 = load %gem, %gem* %this
  %36 = insertvalue %gem %tmp235, double %return234, 20
  %return236 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @32, i64 0, i64 0))
  %37 = insertvalue %gem %36, <2 x double> %return236, 21
  store %gem %37, %gem* %this
  br label %end233

end233:                                           ; preds = %true232, %end
  %SYS238 = load %gemSYS, %gemSYS* %SYS
  %FF = extractvalue %gemSYS %SYS238, 3
  %38 = icmp ne i64 %FF, 0
  br i1 %38, label %true239, label %end240

true239:                                          ; preds = %end233
  %return241 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @33, i64 0, i64 0))
  %tmp242 = load %gem, %gem* %this
  %39 = insertvalue %gem %tmp242, double %return241, 16
  store %gem %39, %gem* %this
  %return244 = fcmp one double %return241, 0.000000e+00
  br i1 %return244, label %true246, label %end247

end240:                                           ; preds = %end274, %true300, %end233
  ret void

true246:                                          ; preds = %true239
  %return248 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @34, i64 0, i64 0))
  %40 = insertvalue %gem %39, i64 %return248, 5
  store %gem %40, %gem* %this
  br label %end247

end247:                                           ; preds = %true246, %true239
  %return250 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @35, i64 0, i64 0))
  %tmp251 = load %gem, %gem* %this
  %41 = insertvalue %gem %tmp251, double %return250, 17
  store %gem %41, %gem* %this
  %return253 = fcmp one double %return250, 0.000000e+00
  br i1 %return253, label %true255, label %end256

true255:                                          ; preds = %end247
  %return257 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @36, i64 0, i64 0))
  %42 = insertvalue %gem %41, i64 %return257, 6
  store %gem %42, %gem* %this
  br label %end256

end256:                                           ; preds = %true255, %end247
  %return259 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @37, i64 0, i64 0))
  %tmp260 = load %gem, %gem* %this
  %43 = insertvalue %gem %tmp260, double %return259, 18
  store %gem %43, %gem* %this
  %return262 = fcmp one double %return259, 0.000000e+00
  br i1 %return262, label %true264, label %end265

true264:                                          ; preds = %end256
  %return266 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @38, i64 0, i64 0))
  %44 = insertvalue %gem %43, i64 %return266, 7
  store %gem %44, %gem* %this
  br label %end265

end265:                                           ; preds = %true264, %end256
  %return268 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @39, i64 0, i64 0))
  %tmp269 = load %gem, %gem* %this
  %45 = insertvalue %gem %tmp269, double %return268, 19
  store %gem %45, %gem* %this
  %return271 = fcmp one double %return268, 0.000000e+00
  br i1 %return271, label %true273, label %end274

true273:                                          ; preds = %end265
  %return275 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @40, i64 0, i64 0))
  %46 = insertvalue %gem %45, i64 %return275, 8
  store %gem %46, %gem* %this
  br label %end274

end274:                                           ; preds = %true273, %end265
  %return277 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @41, i64 0, i64 0))
  %return278 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @42, i64 0, i64 0))
  %return279 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @43, i64 0, i64 0))
  store <2 x double> %return277, <2 x double>* %3
  store <2 x double> %return278, <2 x double>* %4
  %return283 = call double @"radians@FF"(double %return279)
  %return284 = call double @"neg@FF"(double %return283)
  store double %return284, double* %5
  call void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %3, <2 x double>* %4, double* %5)
  %m2285 = load <4 x double>, <4 x double>* %m2
  %return286 = call double @"getcomp@F2II"(<4 x double> %m2285, i64 0, i64 0)
  %return288 = call double @"getcomp@F2II"(<4 x double> %m2285, i64 0, i64 1)
  %return289 = call <2 x double> @"set@UFF"(double %return286, double %return288)
  %tmp290 = load %gem, %gem* %this
  %47 = insertvalue %gem %tmp290, <2 x double> %return289, 28
  %return292 = call double @"getcomp@F2II"(<4 x double> %m2285, i64 1, i64 0)
  %return294 = call double @"getcomp@F2II"(<4 x double> %m2285, i64 1, i64 1)
  %return295 = call <2 x double> @"set@UFF"(double %return292, double %return294)
  %48 = insertvalue %gem %47, <2 x double> %return295, 29
  %return297 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @44, i64 0, i64 0))
  %49 = insertvalue %gem %48, <2 x double> %return297, 30
  store %gem %49, %gem* %this
  %SYS299 = load %gemSYS, %gemSYS* %SYS
  %POSTF = extractvalue %gemSYS %SYS299, 2
  %50 = icmp ne i64 %POSTF, 0
  br i1 %50, label %true300, label %end240

true300:                                          ; preds = %end274
  %return302 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @45, i64 0, i64 0))
  %51 = insertvalue %gem %49, <2 x double> %return302, 31
  %return304 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @46, i64 0, i64 0))
  %52 = insertvalue %gem %51, <2 x double> %return304, 32
  %return306 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @47, i64 0, i64 0))
  %53 = insertvalue %gem %52, <2 x double> %return306, 33
  store %gem %53, %gem* %this
  br label %end240
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"atoi@IS"(i8*) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64* @"resize@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #1

; Function Attrs: nounwind
declare double @"radians@FF"(double) #2

; Function Attrs: nounwind readnone
declare double @"getcomp@F2II"(<4 x double>, i64, i64) #1

; Function Attrs: nounwind
declare <2 x double>* @"append@[UU"(<2 x double>*, <2 x double>) #2

; Function Attrs: nounwind readnone
declare <2 x double>* @"resize@[UI"(<2 x double>*, i64) #1

; Function Attrs: alwaysinline nounwind
define private %gem @"gem@Z3gemM35N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[I[I[I[I[IIIII[F[F[F[F[F[F[FFFFFFU[U[U[U[U[U[UUUUUUU[S"(i64** %v1type, i64** %v2type, i64** %v3type, i64** %v4type, i64** %POSTL, i64* %ffv1type, i64* %ffv2type, i64* %ffv3type, i64* %ffp1type, double** %v1w, double** %v2w, double** %v3w, double** %v4w, double** %PBW, double** %CLR, double** %ONEMINUS, double* %ffv1w, double* %ffv2w, double* %ffv3w, double* %ffp1w, double* %grt, <2 x double>* %gsc, <2 x double>** %x, <2 x double>** %y, <2 x double>** %o, <2 x double>** %px, <2 x double>** %py, <2 x double>** %po, <2 x double>* %fx, <2 x double>* %fy, <2 x double>* %fo, <2 x double>* %pfx, <2 x double>* %pfy, <2 x double>* %pfo, i8*** %sIDX) #0 {
__llvm_entry:
  %v1type1 = load i64*, i64** %v1type
  %0 = insertvalue %gem undef, i64* %v1type1, 0
  %v2type2 = load i64*, i64** %v2type
  %1 = insertvalue %gem %0, i64* %v2type2, 1
  %v3type4 = load i64*, i64** %v3type
  %2 = insertvalue %gem %1, i64* %v3type4, 2
  %v4type6 = load i64*, i64** %v4type
  %3 = insertvalue %gem %2, i64* %v4type6, 3
  %POSTL8 = load i64*, i64** %POSTL
  %4 = insertvalue %gem %3, i64* %POSTL8, 4
  %ffv1type10 = load i64, i64* %ffv1type
  %5 = insertvalue %gem %4, i64 %ffv1type10, 5
  %ffv2type12 = load i64, i64* %ffv2type
  %6 = insertvalue %gem %5, i64 %ffv2type12, 6
  %ffv3type14 = load i64, i64* %ffv3type
  %7 = insertvalue %gem %6, i64 %ffv3type14, 7
  %ffp1type16 = load i64, i64* %ffp1type
  %8 = insertvalue %gem %7, i64 %ffp1type16, 8
  %v1w18 = load double*, double** %v1w
  %9 = insertvalue %gem %8, double* %v1w18, 9
  %v2w20 = load double*, double** %v2w
  %10 = insertvalue %gem %9, double* %v2w20, 10
  %v3w22 = load double*, double** %v3w
  %11 = insertvalue %gem %10, double* %v3w22, 11
  %v4w24 = load double*, double** %v4w
  %12 = insertvalue %gem %11, double* %v4w24, 12
  %PBW26 = load double*, double** %PBW
  %13 = insertvalue %gem %12, double* %PBW26, 13
  %CLR28 = load double*, double** %CLR
  %14 = insertvalue %gem %13, double* %CLR28, 14
  %ONEMINUS30 = load double*, double** %ONEMINUS
  %15 = insertvalue %gem %14, double* %ONEMINUS30, 15
  %ffv1w32 = load double, double* %ffv1w
  %16 = insertvalue %gem %15, double %ffv1w32, 16
  %ffv2w34 = load double, double* %ffv2w
  %17 = insertvalue %gem %16, double %ffv2w34, 17
  %ffv3w36 = load double, double* %ffv3w
  %18 = insertvalue %gem %17, double %ffv3w36, 18
  %ffp1w38 = load double, double* %ffp1w
  %19 = insertvalue %gem %18, double %ffp1w38, 19
  %grt40 = load double, double* %grt
  %20 = insertvalue %gem %19, double %grt40, 20
  %gsc42 = load <2 x double>, <2 x double>* %gsc
  %21 = insertvalue %gem %20, <2 x double> %gsc42, 21
  %x44 = load <2 x double>*, <2 x double>** %x
  %22 = insertvalue %gem %21, <2 x double>* %x44, 22
  %y46 = load <2 x double>*, <2 x double>** %y
  %23 = insertvalue %gem %22, <2 x double>* %y46, 23
  %o48 = load <2 x double>*, <2 x double>** %o
  %24 = insertvalue %gem %23, <2 x double>* %o48, 24
  %px50 = load <2 x double>*, <2 x double>** %px
  %25 = insertvalue %gem %24, <2 x double>* %px50, 25
  %py52 = load <2 x double>*, <2 x double>** %py
  %26 = insertvalue %gem %25, <2 x double>* %py52, 26
  %po54 = load <2 x double>*, <2 x double>** %po
  %27 = insertvalue %gem %26, <2 x double>* %po54, 27
  %fx56 = load <2 x double>, <2 x double>* %fx
  %28 = insertvalue %gem %27, <2 x double> %fx56, 28
  %fy58 = load <2 x double>, <2 x double>* %fy
  %29 = insertvalue %gem %28, <2 x double> %fy58, 29
  %fo60 = load <2 x double>, <2 x double>* %fo
  %30 = insertvalue %gem %29, <2 x double> %fo60, 30
  %pfx62 = load <2 x double>, <2 x double>* %pfx
  %31 = insertvalue %gem %30, <2 x double> %pfx62, 31
  %pfy64 = load <2 x double>, <2 x double>* %pfy
  %32 = insertvalue %gem %31, <2 x double> %pfy64, 32
  %pfo66 = load <2 x double>, <2 x double>* %pfo
  %33 = insertvalue %gem %32, <2 x double> %pfo66, 33
  %sIDX68 = load i8**, i8*** %sIDX
  %34 = insertvalue %gem %33, i8** %sIDX68, 34
  ret %gem %34
}

; Function Attrs: alwaysinline nounwind
define private %gem @"gem@Z3gemM35N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S"() #0 {
__llvm_entry:
  %0 = alloca i64*
  %1 = alloca i64*
  %2 = alloca i64*
  %3 = alloca i64*
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca double*
  %9 = alloca double*
  %10 = alloca double*
  %11 = alloca double*
  %12 = alloca double*
  %13 = alloca double*
  %14 = alloca double*
  %15 = alloca double
  %16 = alloca double
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca <2 x double>
  %21 = alloca <2 x double>*
  %22 = alloca <2 x double>*
  %23 = alloca <2 x double>*
  %24 = alloca <2 x double>*
  %25 = alloca <2 x double>*
  %26 = alloca <2 x double>*
  %27 = alloca <2 x double>
  %28 = alloca <2 x double>
  %29 = alloca <2 x double>
  %30 = alloca <2 x double>
  %31 = alloca <2 x double>
  %32 = alloca <2 x double>
  %33 = alloca i8**
  %34 = alloca i64*
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @48, i64 0, i64 0), i64** %34
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @48, i64 0, i64 0), i64** %0
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @48, i64 0, i64 0), i64** %1
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @48, i64 0, i64 0), i64** %2
  store i64* getelementptr inbounds ([0 x i64], [0 x i64]* @48, i64 0, i64 0), i64** %3
  store i64 0, i64* %4
  store i64 0, i64* %5
  store i64 0, i64* %6
  store i64 0, i64* %7
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %8
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %9
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %10
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %11
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %12
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %13
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %14
  store double 0.000000e+00, double* %15
  store double 0.000000e+00, double* %16
  store double 0.000000e+00, double* %17
  store double 0.000000e+00, double* %18
  store double 0.000000e+00, double* %19
  store <2 x double> zeroinitializer, <2 x double>* %20
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %21
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %22
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %23
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %24
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %25
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %26
  store <2 x double> zeroinitializer, <2 x double>* %27
  store <2 x double> zeroinitializer, <2 x double>* %28
  store <2 x double> zeroinitializer, <2 x double>* %29
  store <2 x double> zeroinitializer, <2 x double>* %30
  store <2 x double> zeroinitializer, <2 x double>* %31
  store <2 x double> zeroinitializer, <2 x double>* %32
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @51, i64 0, i64 0), i8*** %33
  %gem = call %gem @"gem@Z3gemM35N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[I[I[I[I[IIIII[F[F[F[F[F[F[FFFFFFU[U[U[U[U[U[UUUUUUU[S"(i64** %34, i64** %0, i64** %1, i64** %2, i64** %3, i64* %4, i64* %5, i64* %6, i64* %7, double** %8, double** %9, double** %10, double** %11, double** %12, double** %13, double** %14, double* %15, double* %16, double* %17, double* %18, double* %19, <2 x double>* %20, <2 x double>** %21, <2 x double>** %22, <2 x double>** %23, <2 x double>** %24, <2 x double>** %25, <2 x double>** %26, <2 x double>* %27, <2 x double>* %28, <2 x double>* %29, <2 x double>* %30, <2 x double>* %31, <2 x double>* %32, i8*** %33)
  ret %gem %gem
}

; Function Attrs: alwaysinline nounwind
define private void @"gemPrmBuild@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U[S[I"(%gemPrm* %this, i8*** %sIDX, i64** %GEMTYPE) #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %GEMTYPE1 = load i64*, i64** %GEMTYPE
  %return = call i64 @"max@I[I"(i64* %GEMTYPE1)
  %return2 = call i64 @"gt@III"(i64 %return, i64 26)
  %3 = icmp ne i64 %return2, 0
  br i1 %3, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %GEMTYPE3 = load i64*, i64** %GEMTYPE
  %return4 = call i64 @"len@I[I"(i64* %GEMTYPE3)
  %this5 = load %gemPrm, %gemPrm* %this
  %rings2_val = extractvalue %gemPrm %this5, 0
  %output = call double* @"resize@[FI"(double* %rings2_val, i64 %return4)
  %4 = insertvalue %gemPrm %this5, double* %output, 0
  %5 = insertvalue %gemPrm %4, double* %output, 5
  %6 = insertvalue %gemPrm %5, double* %output, 4
  %7 = insertvalue %gemPrm %6, double* %output, 3
  %8 = insertvalue %gemPrm %7, double* %output, 2
  %9 = insertvalue %gemPrm %8, double* %output, 1
  %blob = extractvalue %gemPrm %9, 6
  %output16 = call <3 x double>* @"resize@[VI"(<3 x double>* %blob, i64 %return4)
  %10 = insertvalue %gemPrm %9, <3 x double>* %output16, 6
  %11 = insertvalue %gemPrm %10, <3 x double>* %output16, 11
  %12 = insertvalue %gemPrm %11, <3 x double>* %output16, 10
  %13 = insertvalue %gemPrm %12, <3 x double>* %output16, 9
  %14 = insertvalue %gemPrm %13, <3 x double>* %output16, 8
  %15 = insertvalue %gemPrm %14, <3 x double>* %output16, 7
  %16 = insertvalue %gemPrm %15, <3 x double>* %output16, 51
  %curl_c = extractvalue %gemPrm %16, 13
  %output28 = call <2 x double>* @"resize@[UI"(<2 x double>* %curl_c, i64 %return4)
  %17 = insertvalue %gemPrm %16, <2 x double>* %output28, 13
  %18 = insertvalue %gemPrm %17, <2 x double>* %output28, 41
  %19 = insertvalue %gemPrm %18, <2 x double>* %output28, 40
  %20 = insertvalue %gemPrm %19, <2 x double>* %output28, 39
  %21 = insertvalue %gemPrm %20, <2 x double>* %output28, 38
  %22 = insertvalue %gemPrm %21, <2 x double>* %output28, 37
  %23 = insertvalue %gemPrm %22, <2 x double>* %output28, 36
  %24 = insertvalue %gemPrm %23, <2 x double>* %output28, 35
  %25 = insertvalue %gemPrm %24, <2 x double>* %output28, 34
  %26 = insertvalue %gemPrm %25, <2 x double>* %output28, 33
  %27 = insertvalue %gemPrm %26, <2 x double>* %output28, 32
  %28 = insertvalue %gemPrm %27, <2 x double>* %output28, 31
  %29 = insertvalue %gemPrm %28, <2 x double>* %output28, 30
  %30 = insertvalue %gemPrm %29, <2 x double>* %output28, 29
  %31 = insertvalue %gemPrm %30, <2 x double>* %output28, 28
  %32 = insertvalue %gemPrm %31, <2 x double>* %output28, 27
  %33 = insertvalue %gemPrm %32, <2 x double>* %output28, 26
  %34 = insertvalue %gemPrm %33, <2 x double>* %output28, 25
  %35 = insertvalue %gemPrm %34, <2 x double>* %output28, 24
  %36 = insertvalue %gemPrm %35, <2 x double>* %output28, 23
  %37 = insertvalue %gemPrm %36, <2 x double>* %output28, 22
  %38 = insertvalue %gemPrm %37, <2 x double>* %output28, 21
  %39 = insertvalue %gemPrm %38, <2 x double>* %output28, 20
  %40 = insertvalue %gemPrm %39, <2 x double>* %output28, 19
  %41 = insertvalue %gemPrm %40, <2 x double>* %output28, 18
  %42 = insertvalue %gemPrm %41, <2 x double>* %output28, 17
  %43 = insertvalue %gemPrm %42, <2 x double>* %output28, 16
  %44 = insertvalue %gemPrm %43, <2 x double>* %output28, 15
  %45 = insertvalue %gemPrm %44, <2 x double>* %output28, 14
  %46 = insertvalue %gemPrm %45, <2 x double>* %output28, 52
  %ngon = extractvalue %gemPrm %46, 42
  %output63 = call <4 x double>* @"resize@[PI"(<4 x double>* %ngon, i64 %return4)
  %47 = insertvalue %gemPrm %46, <4 x double>* %output63, 42
  %48 = insertvalue %gemPrm %47, <4 x double>* %output63, 50
  %49 = insertvalue %gemPrm %48, <4 x double>* %output63, 49
  %50 = insertvalue %gemPrm %49, <4 x double>* %output63, 48
  %51 = insertvalue %gemPrm %50, <4 x double>* %output63, 47
  %52 = insertvalue %gemPrm %51, <4 x double>* %output63, 46
  %53 = insertvalue %gemPrm %52, <4 x double>* %output63, 45
  %54 = insertvalue %gemPrm %53, <4 x double>* %output63, 44
  %55 = insertvalue %gemPrm %54, <4 x double>* %output63, 43
  store %gemPrm %55, %gemPrm* %this
  br label %cond

end:                                              ; preds = %cond, %__llvm_entry
  ret void

cond:                                             ; preds = %iter, %true
  %i.0 = phi i64 [ 0, %true ], [ %output964, %iter ]
  %return77 = call i64 @"lt@III"(i64 %i.0, i64 %return4)
  %56 = icmp ne i64 %return77, 0
  br i1 %56, label %body, label %end

body:                                             ; preds = %cond
  %GEMTYPE79 = load i64*, i64** %GEMTYPE
  %return81 = call i64 @"getcomp@I[II"(i64* %GEMTYPE79, i64 %i.0)
  %sIDX82 = load i8**, i8*** %sIDX
  %return84 = call i8* @"getcomp@S[SI"(i8** %sIDX82, i64 %i.0)
  %return86 = call i64 @"lt@III"(i64 %return81, i64 27)
  %57 = icmp ne i64 %return86, 0
  br i1 %57, label %iter, label %false

iter:                                             ; preds = %false911, %false745, %false94, %false553, %end332, %true383, %false216, %body, %true933, %true910, %true896, %true873, %true850, %true836, %true822, %true799, %true785, %true771, %true758, %true744, %true730, %true716, %true702, %true679, %true656, %true642, %true628, %true604, %true590, %true566, %true552, %true538, %true524, %true510, %true496, %true482, %true428, %true242, %true229, %true215, %true201, %true187, %true173, %true159, %true145, %true131, %true117, %true103
  %output964 = add i64 %i.0, 1
  br label %cond

false:                                            ; preds = %body
  %return91 = call i64 @"find@I[II"(i64* getelementptr inbounds ([20 x i64], [20 x i64]* @52, i64 0, i64 0), i64 %return81)
  %return92 = call i64 @"ge@III"(i64 %return91, i64 0)
  %58 = icmp ne i64 %return92, 0
  br i1 %58, label %true93, label %false94

true93:                                           ; preds = %false
  %return97 = call i64 @"lt@III"(i64 %return81, i64 38)
  %59 = icmp ne i64 %return97, 0
  br i1 %59, label %true98, label %false99

false94:                                          ; preds = %false
  %return579 = call i64 @"find@I[II"(i64* getelementptr inbounds ([21 x i64], [21 x i64]* @53, i64 0, i64 0), i64 %return81)
  %return580 = call i64 @"ge@III"(i64 %return579, i64 0)
  %60 = icmp ne i64 %return580, 0
  br i1 %60, label %true581, label %iter

true98:                                           ; preds = %true93
  %return102 = call i64 @"eq@III"(i64 %return81, i64 27)
  %61 = icmp ne i64 %return102, 0
  br i1 %61, label %true103, label %false104

false99:                                          ; preds = %true93
  %return241 = call i64 @"eq@III"(i64 %return81, i64 38)
  %62 = icmp ne i64 %return241, 0
  br i1 %62, label %true242, label %false243

true103:                                          ; preds = %true98
  %return108 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @54, i64 0, i64 0), i8* %return84)
  %return109 = call <2 x double> @"chu@US"(i8* %return108)
  %tmp110 = load %gemPrm, %gemPrm* %this
  %tmp111 = extractvalue %gemPrm %tmp110, 13
  %return112 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp111, <2 x double> %return109, i64 %i.0)
  %output114 = extractvalue { <2 x double>, <2 x double>* } %return112, 1
  %63 = insertvalue %gemPrm %tmp110, <2 x double>* %output114, 13
  store %gemPrm %63, %gemPrm* %this
  br label %iter

false104:                                         ; preds = %true98
  %return116 = call i64 @"eq@III"(i64 %return81, i64 28)
  %64 = icmp ne i64 %return116, 0
  br i1 %64, label %true117, label %false118

true117:                                          ; preds = %false104
  %return122 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @55, i64 0, i64 0), i8* %return84)
  %return123 = call <4 x double> @"chp@PS"(i8* %return122)
  %tmp124 = load %gemPrm, %gemPrm* %this
  %tmp125 = extractvalue %gemPrm %tmp124, 42
  %return126 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp125, <4 x double> %return123, i64 %i.0)
  %output128 = extractvalue { <4 x double>, <4 x double>* } %return126, 1
  %65 = insertvalue %gemPrm %tmp124, <4 x double>* %output128, 42
  store %gemPrm %65, %gemPrm* %this
  br label %iter

false118:                                         ; preds = %false104
  %return130 = call i64 @"eq@III"(i64 %return81, i64 29)
  %66 = icmp ne i64 %return130, 0
  br i1 %66, label %true131, label %false132

true131:                                          ; preds = %false118
  %return136 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @56, i64 0, i64 0), i8* %return84)
  %return137 = call <4 x double> @"chp@PS"(i8* %return136)
  %tmp138 = load %gemPrm, %gemPrm* %this
  %tmp139 = extractvalue %gemPrm %tmp138, 43
  %return140 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp139, <4 x double> %return137, i64 %i.0)
  %output142 = extractvalue { <4 x double>, <4 x double>* } %return140, 1
  %67 = insertvalue %gemPrm %tmp138, <4 x double>* %output142, 43
  store %gemPrm %67, %gemPrm* %this
  br label %iter

false132:                                         ; preds = %false118
  %return144 = call i64 @"eq@III"(i64 %return81, i64 30)
  %68 = icmp ne i64 %return144, 0
  br i1 %68, label %true145, label %false146

true145:                                          ; preds = %false132
  %return150 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @57, i64 0, i64 0), i8* %return84)
  %return151 = call <3 x double> @"chv@VS"(i8* %return150)
  %tmp152 = load %gemPrm, %gemPrm* %this
  %tmp153 = extractvalue %gemPrm %tmp152, 6
  %return154 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp153, <3 x double> %return151, i64 %i.0)
  %output156 = extractvalue { <3 x double>, <3 x double>* } %return154, 1
  %69 = insertvalue %gemPrm %tmp152, <3 x double>* %output156, 6
  store %gemPrm %69, %gemPrm* %this
  br label %iter

false146:                                         ; preds = %false132
  %return158 = call i64 @"eq@III"(i64 %return81, i64 31)
  %70 = icmp ne i64 %return158, 0
  br i1 %70, label %true159, label %false160

true159:                                          ; preds = %false146
  %return164 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @58, i64 0, i64 0), i8* %return84)
  %return165 = call <2 x double> @"chu@US"(i8* %return164)
  %tmp166 = load %gemPrm, %gemPrm* %this
  %tmp167 = extractvalue %gemPrm %tmp166, 32
  %return168 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp167, <2 x double> %return165, i64 %i.0)
  %output170 = extractvalue { <2 x double>, <2 x double>* } %return168, 1
  %71 = insertvalue %gemPrm %tmp166, <2 x double>* %output170, 32
  store %gemPrm %71, %gemPrm* %this
  br label %iter

false160:                                         ; preds = %false146
  %return172 = call i64 @"eq@III"(i64 %return81, i64 32)
  %72 = icmp ne i64 %return172, 0
  br i1 %72, label %true173, label %false174

true173:                                          ; preds = %false160
  %return178 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @59, i64 0, i64 0), i8* %return84)
  %return179 = call <2 x double> @"chu@US"(i8* %return178)
  %tmp180 = load %gemPrm, %gemPrm* %this
  %tmp181 = extractvalue %gemPrm %tmp180, 33
  %return182 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp181, <2 x double> %return179, i64 %i.0)
  %output184 = extractvalue { <2 x double>, <2 x double>* } %return182, 1
  %73 = insertvalue %gemPrm %tmp180, <2 x double>* %output184, 33
  store %gemPrm %73, %gemPrm* %this
  br label %iter

false174:                                         ; preds = %false160
  %return186 = call i64 @"eq@III"(i64 %return81, i64 34)
  %74 = icmp ne i64 %return186, 0
  br i1 %74, label %true187, label %false188

true187:                                          ; preds = %false174
  %return192 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @60, i64 0, i64 0), i8* %return84)
  %return193 = call <2 x double> @"chu@US"(i8* %return192)
  %tmp194 = load %gemPrm, %gemPrm* %this
  %tmp195 = extractvalue %gemPrm %tmp194, 15
  %return196 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp195, <2 x double> %return193, i64 %i.0)
  %output198 = extractvalue { <2 x double>, <2 x double>* } %return196, 1
  %75 = insertvalue %gemPrm %tmp194, <2 x double>* %output198, 15
  store %gemPrm %75, %gemPrm* %this
  br label %iter

false188:                                         ; preds = %false174
  %return200 = call i64 @"eq@III"(i64 %return81, i64 35)
  %76 = icmp ne i64 %return200, 0
  br i1 %76, label %true201, label %false202

true201:                                          ; preds = %false188
  %return206 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @61, i64 0, i64 0), i8* %return84)
  %return207 = call double @"chf@FS"(i8* %return206)
  %tmp208 = load %gemPrm, %gemPrm* %this
  %tmp209 = extractvalue %gemPrm %tmp208, 0
  %return210 = call { double, double* } @"setcomp@F[FFI"(double* %tmp209, double %return207, i64 %i.0)
  %output212 = extractvalue { double, double* } %return210, 1
  %77 = insertvalue %gemPrm %tmp208, double* %output212, 0
  store %gemPrm %77, %gemPrm* %this
  br label %iter

false202:                                         ; preds = %false188
  %return214 = call i64 @"eq@III"(i64 %return81, i64 36)
  %78 = icmp ne i64 %return214, 0
  br i1 %78, label %true215, label %false216

true215:                                          ; preds = %false202
  %return220 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @62, i64 0, i64 0), i8* %return84)
  %return221 = call <2 x double> @"chu@US"(i8* %return220)
  %tmp222 = load %gemPrm, %gemPrm* %this
  %tmp223 = extractvalue %gemPrm %tmp222, 16
  %return224 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp223, <2 x double> %return221, i64 %i.0)
  %output226 = extractvalue { <2 x double>, <2 x double>* } %return224, 1
  %79 = insertvalue %gemPrm %tmp222, <2 x double>* %output226, 16
  store %gemPrm %79, %gemPrm* %this
  br label %iter

false216:                                         ; preds = %false202
  %return228 = call i64 @"eq@III"(i64 %return81, i64 37)
  %80 = icmp ne i64 %return228, 0
  br i1 %80, label %true229, label %iter

true229:                                          ; preds = %false216
  %return233 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @63, i64 0, i64 0), i8* %return84)
  %return234 = call <2 x double> @"chu@US"(i8* %return233)
  %tmp235 = load %gemPrm, %gemPrm* %this
  %tmp236 = extractvalue %gemPrm %tmp235, 34
  %return237 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp236, <2 x double> %return234, i64 %i.0)
  %output239 = extractvalue { <2 x double>, <2 x double>* } %return237, 1
  %81 = insertvalue %gemPrm %tmp235, <2 x double>* %output239, 34
  store %gemPrm %81, %gemPrm* %this
  br label %iter

true242:                                          ; preds = %false99
  %return247 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @64, i64 0, i64 0), i8* %return84)
  %return248 = call <3 x double> @"chv@VS"(i8* %return247)
  %tmp249 = load %gemPrm, %gemPrm* %this
  %tmp250 = extractvalue %gemPrm %tmp249, 7
  %return251 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp250, <3 x double> %return248, i64 %i.0)
  %output253 = extractvalue { <3 x double>, <3 x double>* } %return251, 1
  %82 = insertvalue %gemPrm %tmp249, <3 x double>* %output253, 7
  store %gemPrm %82, %gemPrm* %this
  br label %iter

false243:                                         ; preds = %false99
  %return255 = call i64 @"eq@III"(i64 %return81, i64 47)
  %83 = icmp ne i64 %return255, 0
  br i1 %83, label %true256, label %false257

true256:                                          ; preds = %false243
  %return261 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @65, i64 0, i64 0), i8* %return84)
  %return262 = call <2 x double> @"chu@US"(i8* %return261)
  %tmp263 = load %gemPrm, %gemPrm* %this
  %tmp264 = extractvalue %gemPrm %tmp263, 35
  %return265 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp264, <2 x double> %return262, i64 %i.0)
  %output267 = extractvalue { <2 x double>, <2 x double>* } %return265, 1
  %84 = insertvalue %gemPrm %tmp263, <2 x double>* %output267, 35
  store %gemPrm %84, %gemPrm* %this
  %return271 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %output267, i64 %i.0)
  %return272 = call double @"getcomp@FUI"(<2 x double> %return271, i64 0)
  %output273 = fmul double %return272, 0x400921FB4D12D84A
  %tmp275 = extractvalue %gemPrm %84, 51
  %return276 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %tmp275, i64 %i.0)
  %return277 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return276, double %output273, i64 0)
  %output279 = extractvalue { double, <3 x double> } %return277, 1
  %return280 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp275, <3 x double> %output279, i64 %i.0)
  %output282 = extractvalue { <3 x double>, <3 x double>* } %return280, 1
  %85 = insertvalue %gemPrm %84, <3 x double>* %output282, 51
  store %gemPrm %85, %gemPrm* %this
  %return287 = call double @"getcomp@FUI"(<2 x double> %return271, i64 1)
  store double %return287, double* %0
  call void @"sincos@FFF"(double* %0, double* %1, double* %2)
  %arg = load double, double* %1
  %tmp290 = load %gemPrm, %gemPrm* %this
  %tmp291 = extractvalue %gemPrm %tmp290, 51
  %return292 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %tmp291, i64 %i.0)
  %return293 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return292, double %arg, i64 1)
  %output295 = extractvalue { double, <3 x double> } %return293, 1
  %return296 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp291, <3 x double> %output295, i64 %i.0)
  %output298 = extractvalue { <3 x double>, <3 x double>* } %return296, 1
  %86 = insertvalue %gemPrm %tmp290, <3 x double>* %output298, 51
  store %gemPrm %86, %gemPrm* %this
  %arg299 = load double, double* %2
  %return302 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output298, i64 %i.0)
  %return303 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return302, double %arg299, i64 2)
  %output305 = extractvalue { double, <3 x double> } %return303, 1
  %return306 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output298, <3 x double> %output305, i64 %i.0)
  %output308 = extractvalue { <3 x double>, <3 x double>* } %return306, 1
  %87 = insertvalue %gemPrm %86, <3 x double>* %output308, 51
  store %gemPrm %87, %gemPrm* %this
  %return312 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output308, i64 %i.0)
  %return313 = call double @"getcomp@FVI"(<3 x double> %return312, i64 2)
  %output314 = fsub double %return313, 1.000000e+00
  %return318 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return312, double %output314, i64 2)
  %output320 = extractvalue { double, <3 x double> } %return318, 1
  %return321 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output308, <3 x double> %output320, i64 %i.0)
  %output323 = extractvalue { <3 x double>, <3 x double>* } %return321, 1
  %88 = insertvalue %gemPrm %87, <3 x double>* %output323, 51
  store %gemPrm %88, %gemPrm* %this
  %disc2325 = extractvalue %gemPrm %88, 35
  %return327 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %disc2325, i64 %i.0)
  %return328 = call double @"getcomp@FUI"(<2 x double> %return327, i64 1)
  %return329 = fcmp ogt double %return328, 0x401921FB4D12D84A
  br i1 %return329, label %true331, label %end332

false257:                                         ; preds = %false243
  %return427 = call i64 @"eq@III"(i64 %return81, i64 48)
  %89 = icmp ne i64 %return427, 0
  br i1 %89, label %true428, label %false429

true331:                                          ; preds = %true256
  %output338 = fadd double 1.000000e+00, %return328
  %output339 = fsub double %output338, 0x401921FB4D12D84A
  %return344 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output323, i64 %i.0)
  %return345 = call double @"getcomp@FVI"(<3 x double> %return344, i64 2)
  %output347 = fmul double %return345, %output339
  %return351 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return344, double %output347, i64 2)
  %output353 = extractvalue { double, <3 x double> } %return351, 1
  %return354 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output323, <3 x double> %output353, i64 %i.0)
  %output356 = extractvalue { <3 x double>, <3 x double>* } %return354, 1
  %90 = insertvalue %gemPrm %88, <3 x double>* %output356, 51
  store %gemPrm %90, %gemPrm* %this
  %return361 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output356, i64 %i.0)
  %return362 = call double @"getcomp@FVI"(<3 x double> %return361, i64 1)
  %output364 = fmul double %return362, %output339
  %return368 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return361, double %output364, i64 1)
  %output370 = extractvalue { double, <3 x double> } %return368, 1
  %return371 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output356, <3 x double> %output370, i64 %i.0)
  %output373 = extractvalue { <3 x double>, <3 x double>* } %return371, 1
  %91 = insertvalue %gemPrm %90, <3 x double>* %output373, 51
  store %gemPrm %91, %gemPrm* %this
  br label %end332

end332:                                           ; preds = %true331, %true256
  %this374 = load %gemPrm, %gemPrm* %this
  %disc2375 = extractvalue %gemPrm %this374, 35
  %return377 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %disc2375, i64 %i.0)
  %return378 = call double @"getcomp@FUI"(<2 x double> %return377, i64 1)
  %return379 = call i64 @"neg@II"(i64 2)
  %cast = sitofp i64 %return379 to double
  %output380 = fmul double %cast, 0x400921FB4D12D84A
  %return381 = fcmp olt double %return378, %output380
  br i1 %return381, label %true383, label %iter

true383:                                          ; preds = %end332
  %output390 = fadd double 1.000000e+00, %return378
  %output391 = fadd double %output390, 0x401921FB4D12D84A
  %disc2_precalc394 = extractvalue %gemPrm %this374, 51
  %return396 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %disc2_precalc394, i64 %i.0)
  %return397 = call double @"getcomp@FVI"(<3 x double> %return396, i64 2)
  %output399 = fmul double %return397, %output391
  %return403 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return396, double %output399, i64 2)
  %output405 = extractvalue { double, <3 x double> } %return403, 1
  %return406 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %disc2_precalc394, <3 x double> %output405, i64 %i.0)
  %output408 = extractvalue { <3 x double>, <3 x double>* } %return406, 1
  %92 = insertvalue %gemPrm %this374, <3 x double>* %output408, 51
  store %gemPrm %92, %gemPrm* %this
  %return413 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output408, i64 %i.0)
  %return414 = call double @"getcomp@FVI"(<3 x double> %return413, i64 1)
  %output416 = fmul double %return414, %output391
  %return420 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return413, double %output416, i64 1)
  %output422 = extractvalue { double, <3 x double> } %return420, 1
  %return423 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %output408, <3 x double> %output422, i64 %i.0)
  %output425 = extractvalue { <3 x double>, <3 x double>* } %return423, 1
  %93 = insertvalue %gemPrm %92, <3 x double>* %output425, 51
  store %gemPrm %93, %gemPrm* %this
  br label %iter

true428:                                          ; preds = %false257
  %return433 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @66, i64 0, i64 0), i8* %return84)
  %return434 = call <3 x double> @"chv@VS"(i8* %return433)
  %tmp435 = load %gemPrm, %gemPrm* %this
  %tmp436 = extractvalue %gemPrm %tmp435, 8
  %return437 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp436, <3 x double> %return434, i64 %i.0)
  %output439 = extractvalue { <3 x double>, <3 x double>* } %return437, 1
  %94 = insertvalue %gemPrm %tmp435, <3 x double>* %output439, 8
  %return442 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @67, i64 0, i64 0), i8* %return84)
  %return443 = call <3 x double> @"chv@VS"(i8* %return442)
  %tmp445 = extractvalue %gemPrm %94, 9
  %return446 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp445, <3 x double> %return443, i64 %i.0)
  %output448 = extractvalue { <3 x double>, <3 x double>* } %return446, 1
  %95 = insertvalue %gemPrm %94, <3 x double>* %output448, 9
  store %gemPrm %95, %gemPrm* %this
  %return452 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output439, i64 %i.0)
  %return453 = call double @"getcomp@FVI"(<3 x double> %return452, i64 0)
  %output454 = call double @"div@FF"(double %return453, double 4.000000e+00)
  %tmp456 = extractvalue %gemPrm %95, 52
  %return457 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %tmp456, i64 %i.0)
  %return458 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %return457, double %output454, i64 0)
  %output460 = extractvalue { double, <2 x double> } %return458, 1
  %return461 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp456, <2 x double> %output460, i64 %i.0)
  %output463 = extractvalue { <2 x double>, <2 x double>* } %return461, 1
  %96 = insertvalue %gemPrm %95, <2 x double>* %output463, 52
  store %gemPrm %96, %gemPrm* %this
  %return465 = call double @"neg@FF"(double 1.000000e+00)
  %return468 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output448, i64 %i.0)
  %return469 = call double @"getcomp@FVI"(<3 x double> %return468, i64 0)
  %output470 = call double @"div@FF"(double %return465, double %return469)
  %return473 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %output463, i64 %i.0)
  %return474 = call { double, <2 x double> } @"setcomp@FUFI"(<2 x double> %return473, double %output470, i64 1)
  %output476 = extractvalue { double, <2 x double> } %return474, 1
  %return477 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %output463, <2 x double> %output476, i64 %i.0)
  %output479 = extractvalue { <2 x double>, <2 x double>* } %return477, 1
  %97 = insertvalue %gemPrm %96, <2 x double>* %output479, 52
  store %gemPrm %97, %gemPrm* %this
  br label %iter

false429:                                         ; preds = %false257
  %return481 = call i64 @"eq@III"(i64 %return81, i64 49)
  %98 = icmp ne i64 %return481, 0
  br i1 %98, label %true482, label %false483

true482:                                          ; preds = %false429
  %return487 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @68, i64 0, i64 0), i8* %return84)
  %return488 = call <2 x double> @"chu@US"(i8* %return487)
  %tmp489 = load %gemPrm, %gemPrm* %this
  %tmp490 = extractvalue %gemPrm %tmp489, 36
  %return491 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp490, <2 x double> %return488, i64 %i.0)
  %output493 = extractvalue { <2 x double>, <2 x double>* } %return491, 1
  %99 = insertvalue %gemPrm %tmp489, <2 x double>* %output493, 36
  store %gemPrm %99, %gemPrm* %this
  br label %iter

false483:                                         ; preds = %false429
  %return495 = call i64 @"eq@III"(i64 %return81, i64 50)
  %100 = icmp ne i64 %return495, 0
  br i1 %100, label %true496, label %false497

true496:                                          ; preds = %false483
  %return501 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @69, i64 0, i64 0), i8* %return84)
  %return502 = call <2 x double> @"chu@US"(i8* %return501)
  %tmp503 = load %gemPrm, %gemPrm* %this
  %tmp504 = extractvalue %gemPrm %tmp503, 37
  %return505 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp504, <2 x double> %return502, i64 %i.0)
  %output507 = extractvalue { <2 x double>, <2 x double>* } %return505, 1
  %101 = insertvalue %gemPrm %tmp503, <2 x double>* %output507, 37
  store %gemPrm %101, %gemPrm* %this
  br label %iter

false497:                                         ; preds = %false483
  %return509 = call i64 @"eq@III"(i64 %return81, i64 51)
  %102 = icmp ne i64 %return509, 0
  br i1 %102, label %true510, label %false511

true510:                                          ; preds = %false497
  %return515 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @70, i64 0, i64 0), i8* %return84)
  %return516 = call <2 x double> @"chu@US"(i8* %return515)
  %tmp517 = load %gemPrm, %gemPrm* %this
  %tmp518 = extractvalue %gemPrm %tmp517, 14
  %return519 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp518, <2 x double> %return516, i64 %i.0)
  %output521 = extractvalue { <2 x double>, <2 x double>* } %return519, 1
  %103 = insertvalue %gemPrm %tmp517, <2 x double>* %output521, 14
  store %gemPrm %103, %gemPrm* %this
  br label %iter

false511:                                         ; preds = %false497
  %return523 = call i64 @"eq@III"(i64 %return81, i64 52)
  %104 = icmp ne i64 %return523, 0
  br i1 %104, label %true524, label %false525

true524:                                          ; preds = %false511
  %return529 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i64 0, i64 0), i8* %return84)
  %return530 = call <2 x double> @"chu@US"(i8* %return529)
  %tmp531 = load %gemPrm, %gemPrm* %this
  %tmp532 = extractvalue %gemPrm %tmp531, 17
  %return533 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp532, <2 x double> %return530, i64 %i.0)
  %output535 = extractvalue { <2 x double>, <2 x double>* } %return533, 1
  %105 = insertvalue %gemPrm %tmp531, <2 x double>* %output535, 17
  store %gemPrm %105, %gemPrm* %this
  br label %iter

false525:                                         ; preds = %false511
  %return537 = call i64 @"eq@III"(i64 %return81, i64 53)
  %106 = icmp ne i64 %return537, 0
  br i1 %106, label %true538, label %false539

true538:                                          ; preds = %false525
  %return543 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @72, i64 0, i64 0), i8* %return84)
  %return544 = call double @"chf@FS"(i8* %return543)
  %tmp545 = load %gemPrm, %gemPrm* %this
  %tmp546 = extractvalue %gemPrm %tmp545, 1
  %return547 = call { double, double* } @"setcomp@F[FFI"(double* %tmp546, double %return544, i64 %i.0)
  %output549 = extractvalue { double, double* } %return547, 1
  %107 = insertvalue %gemPrm %tmp545, double* %output549, 1
  store %gemPrm %107, %gemPrm* %this
  br label %iter

false539:                                         ; preds = %false525
  %return551 = call i64 @"eq@III"(i64 %return81, i64 56)
  %108 = icmp ne i64 %return551, 0
  br i1 %108, label %true552, label %false553

true552:                                          ; preds = %false539
  %return557 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @73, i64 0, i64 0), i8* %return84)
  %return558 = call double @"chf@FS"(i8* %return557)
  %tmp559 = load %gemPrm, %gemPrm* %this
  %tmp560 = extractvalue %gemPrm %tmp559, 2
  %return561 = call { double, double* } @"setcomp@F[FFI"(double* %tmp560, double %return558, i64 %i.0)
  %output563 = extractvalue { double, double* } %return561, 1
  %109 = insertvalue %gemPrm %tmp559, double* %output563, 2
  store %gemPrm %109, %gemPrm* %this
  br label %iter

false553:                                         ; preds = %false539
  %return565 = call i64 @"eq@III"(i64 %return81, i64 57)
  %110 = icmp ne i64 %return565, 0
  br i1 %110, label %true566, label %iter

true566:                                          ; preds = %false553
  %return570 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @74, i64 0, i64 0), i8* %return84)
  %return571 = call <3 x double> @"chv@VS"(i8* %return570)
  %tmp572 = load %gemPrm, %gemPrm* %this
  %tmp573 = extractvalue %gemPrm %tmp572, 10
  %return574 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp573, <3 x double> %return571, i64 %i.0)
  %output576 = extractvalue { <3 x double>, <3 x double>* } %return574, 1
  %111 = insertvalue %gemPrm %tmp572, <3 x double>* %output576, 10
  store %gemPrm %111, %gemPrm* %this
  br label %iter

true581:                                          ; preds = %false94
  %return584 = call i64 @"lt@III"(i64 %return81, i64 77)
  %112 = icmp ne i64 %return584, 0
  br i1 %112, label %true585, label %false586

true585:                                          ; preds = %true581
  %return589 = call i64 @"eq@III"(i64 %return81, i64 61)
  %113 = icmp ne i64 %return589, 0
  br i1 %113, label %true590, label %false591

false586:                                         ; preds = %true581
  %return770 = call i64 @"eq@III"(i64 %return81, i64 77)
  %114 = icmp ne i64 %return770, 0
  br i1 %114, label %true771, label %false772

true590:                                          ; preds = %true585
  %return595 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @75, i64 0, i64 0), i8* %return84)
  %return596 = call double @"chf@FS"(i8* %return595)
  %tmp597 = load %gemPrm, %gemPrm* %this
  %tmp598 = extractvalue %gemPrm %tmp597, 3
  %return599 = call { double, double* } @"setcomp@F[FFI"(double* %tmp598, double %return596, i64 %i.0)
  %output601 = extractvalue { double, double* } %return599, 1
  %115 = insertvalue %gemPrm %tmp597, double* %output601, 3
  store %gemPrm %115, %gemPrm* %this
  br label %iter

false591:                                         ; preds = %true585
  %return603 = call i64 @"eq@III"(i64 %return81, i64 63)
  %116 = icmp ne i64 %return603, 0
  br i1 %116, label %true604, label %false605

true604:                                          ; preds = %false591
  %return609 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @76, i64 0, i64 0), i8* %return84)
  %return610 = call <2 x double> @"chu@US"(i8* %return609)
  %tmp611 = load %gemPrm, %gemPrm* %this
  %tmp612 = extractvalue %gemPrm %tmp611, 18
  %return613 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp612, <2 x double> %return610, i64 %i.0)
  %output615 = extractvalue { <2 x double>, <2 x double>* } %return613, 1
  %117 = insertvalue %gemPrm %tmp611, <2 x double>* %output615, 18
  %return618 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @77, i64 0, i64 0), i8* %return84)
  %return619 = call <2 x double> @"chu@US"(i8* %return618)
  %cast620 = call <3 x double> @"set@VU"(<2 x double> %return619)
  %tmp622 = extractvalue %gemPrm %117, 11
  %return623 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp622, <3 x double> %cast620, i64 %i.0)
  %output625 = extractvalue { <3 x double>, <3 x double>* } %return623, 1
  %118 = insertvalue %gemPrm %117, <3 x double>* %output625, 11
  store %gemPrm %118, %gemPrm* %this
  br label %iter

false605:                                         ; preds = %false591
  %return627 = call i64 @"eq@III"(i64 %return81, i64 66)
  %119 = icmp ne i64 %return627, 0
  br i1 %119, label %true628, label %false629

true628:                                          ; preds = %false605
  %return633 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @78, i64 0, i64 0), i8* %return84)
  %return634 = call <2 x double> @"chu@US"(i8* %return633)
  %tmp635 = load %gemPrm, %gemPrm* %this
  %tmp636 = extractvalue %gemPrm %tmp635, 19
  %return637 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp636, <2 x double> %return634, i64 %i.0)
  %output639 = extractvalue { <2 x double>, <2 x double>* } %return637, 1
  %120 = insertvalue %gemPrm %tmp635, <2 x double>* %output639, 19
  store %gemPrm %120, %gemPrm* %this
  br label %iter

false629:                                         ; preds = %false605
  %return641 = call i64 @"eq@III"(i64 %return81, i64 67)
  %121 = icmp ne i64 %return641, 0
  br i1 %121, label %true642, label %false643

true642:                                          ; preds = %false629
  %return647 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @79, i64 0, i64 0), i8* %return84)
  %return648 = call <4 x double> @"chp@PS"(i8* %return647)
  %tmp649 = load %gemPrm, %gemPrm* %this
  %tmp650 = extractvalue %gemPrm %tmp649, 44
  %return651 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp650, <4 x double> %return648, i64 %i.0)
  %output653 = extractvalue { <4 x double>, <4 x double>* } %return651, 1
  %122 = insertvalue %gemPrm %tmp649, <4 x double>* %output653, 44
  store %gemPrm %122, %gemPrm* %this
  br label %iter

false643:                                         ; preds = %false629
  %return655 = call i64 @"eq@III"(i64 %return81, i64 69)
  %123 = icmp ne i64 %return655, 0
  br i1 %123, label %true656, label %false657

true656:                                          ; preds = %false643
  %return661 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @80, i64 0, i64 0), i8* %return84)
  %return662 = call <2 x double> @"chu@US"(i8* %return661)
  %tmp663 = load %gemPrm, %gemPrm* %this
  %tmp664 = extractvalue %gemPrm %tmp663, 20
  %return665 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp664, <2 x double> %return662, i64 %i.0)
  %output667 = extractvalue { <2 x double>, <2 x double>* } %return665, 1
  %124 = insertvalue %gemPrm %tmp663, <2 x double>* %output667, 20
  %return670 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @81, i64 0, i64 0), i8* %return84)
  %return671 = call double @"chf@FS"(i8* %return670)
  %tmp673 = extractvalue %gemPrm %124, 4
  %return674 = call { double, double* } @"setcomp@F[FFI"(double* %tmp673, double %return671, i64 %i.0)
  %output676 = extractvalue { double, double* } %return674, 1
  %125 = insertvalue %gemPrm %124, double* %output676, 4
  store %gemPrm %125, %gemPrm* %this
  br label %iter

false657:                                         ; preds = %false643
  %return678 = call i64 @"eq@III"(i64 %return81, i64 71)
  %126 = icmp ne i64 %return678, 0
  br i1 %126, label %true679, label %false680

true679:                                          ; preds = %false657
  %return684 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @82, i64 0, i64 0), i8* %return84)
  %return685 = call <2 x double> @"chu@US"(i8* %return684)
  %tmp686 = load %gemPrm, %gemPrm* %this
  %tmp687 = extractvalue %gemPrm %tmp686, 21
  %return688 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp687, <2 x double> %return685, i64 %i.0)
  %output690 = extractvalue { <2 x double>, <2 x double>* } %return688, 1
  %127 = insertvalue %gemPrm %tmp686, <2 x double>* %output690, 21
  %return693 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @83, i64 0, i64 0), i8* %return84)
  %return694 = call <2 x double> @"chu@US"(i8* %return693)
  %tmp696 = extractvalue %gemPrm %127, 22
  %return697 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp696, <2 x double> %return694, i64 %i.0)
  %output699 = extractvalue { <2 x double>, <2 x double>* } %return697, 1
  %128 = insertvalue %gemPrm %127, <2 x double>* %output699, 22
  store %gemPrm %128, %gemPrm* %this
  br label %iter

false680:                                         ; preds = %false657
  %return701 = call i64 @"eq@III"(i64 %return81, i64 72)
  %129 = icmp ne i64 %return701, 0
  br i1 %129, label %true702, label %false703

true702:                                          ; preds = %false680
  %return707 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @84, i64 0, i64 0), i8* %return84)
  %return708 = call <2 x double> @"chu@US"(i8* %return707)
  %tmp709 = load %gemPrm, %gemPrm* %this
  %tmp710 = extractvalue %gemPrm %tmp709, 23
  %return711 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp710, <2 x double> %return708, i64 %i.0)
  %output713 = extractvalue { <2 x double>, <2 x double>* } %return711, 1
  %130 = insertvalue %gemPrm %tmp709, <2 x double>* %output713, 23
  store %gemPrm %130, %gemPrm* %this
  br label %iter

false703:                                         ; preds = %false680
  %return715 = call i64 @"eq@III"(i64 %return81, i64 73)
  %131 = icmp ne i64 %return715, 0
  br i1 %131, label %true716, label %false717

true716:                                          ; preds = %false703
  %return721 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @85, i64 0, i64 0), i8* %return84)
  %return722 = call <2 x double> @"chu@US"(i8* %return721)
  %tmp723 = load %gemPrm, %gemPrm* %this
  %tmp724 = extractvalue %gemPrm %tmp723, 24
  %return725 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp724, <2 x double> %return722, i64 %i.0)
  %output727 = extractvalue { <2 x double>, <2 x double>* } %return725, 1
  %132 = insertvalue %gemPrm %tmp723, <2 x double>* %output727, 24
  store %gemPrm %132, %gemPrm* %this
  br label %iter

false717:                                         ; preds = %false703
  %return729 = call i64 @"eq@III"(i64 %return81, i64 74)
  %133 = icmp ne i64 %return729, 0
  br i1 %133, label %true730, label %false731

true730:                                          ; preds = %false717
  %return735 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @86, i64 0, i64 0), i8* %return84)
  %return736 = call <2 x double> @"chu@US"(i8* %return735)
  %tmp737 = load %gemPrm, %gemPrm* %this
  %tmp738 = extractvalue %gemPrm %tmp737, 38
  %return739 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp738, <2 x double> %return736, i64 %i.0)
  %output741 = extractvalue { <2 x double>, <2 x double>* } %return739, 1
  %134 = insertvalue %gemPrm %tmp737, <2 x double>* %output741, 38
  store %gemPrm %134, %gemPrm* %this
  br label %iter

false731:                                         ; preds = %false717
  %return743 = call i64 @"eq@III"(i64 %return81, i64 75)
  %135 = icmp ne i64 %return743, 0
  br i1 %135, label %true744, label %false745

true744:                                          ; preds = %false731
  %return749 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @87, i64 0, i64 0), i8* %return84)
  %return750 = call <4 x double> @"chp@PS"(i8* %return749)
  %tmp751 = load %gemPrm, %gemPrm* %this
  %tmp752 = extractvalue %gemPrm %tmp751, 45
  %return753 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp752, <4 x double> %return750, i64 %i.0)
  %output755 = extractvalue { <4 x double>, <4 x double>* } %return753, 1
  %136 = insertvalue %gemPrm %tmp751, <4 x double>* %output755, 45
  store %gemPrm %136, %gemPrm* %this
  br label %iter

false745:                                         ; preds = %false731
  %return757 = call i64 @"eq@III"(i64 %return81, i64 76)
  %137 = icmp ne i64 %return757, 0
  br i1 %137, label %true758, label %iter

true758:                                          ; preds = %false745
  %return762 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @88, i64 0, i64 0), i8* %return84)
  %return763 = call <4 x double> @"chp@PS"(i8* %return762)
  %tmp764 = load %gemPrm, %gemPrm* %this
  %tmp765 = extractvalue %gemPrm %tmp764, 46
  %return766 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp765, <4 x double> %return763, i64 %i.0)
  %output768 = extractvalue { <4 x double>, <4 x double>* } %return766, 1
  %138 = insertvalue %gemPrm %tmp764, <4 x double>* %output768, 46
  store %gemPrm %138, %gemPrm* %this
  br label %iter

true771:                                          ; preds = %false586
  %return776 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @89, i64 0, i64 0), i8* %return84)
  %return777 = call <4 x double> @"chp@PS"(i8* %return776)
  %tmp778 = load %gemPrm, %gemPrm* %this
  %tmp779 = extractvalue %gemPrm %tmp778, 47
  %return780 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp779, <4 x double> %return777, i64 %i.0)
  %output782 = extractvalue { <4 x double>, <4 x double>* } %return780, 1
  %139 = insertvalue %gemPrm %tmp778, <4 x double>* %output782, 47
  store %gemPrm %139, %gemPrm* %this
  br label %iter

false772:                                         ; preds = %false586
  %return784 = call i64 @"eq@III"(i64 %return81, i64 78)
  %140 = icmp ne i64 %return784, 0
  br i1 %140, label %true785, label %false786

true785:                                          ; preds = %false772
  %return790 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @90, i64 0, i64 0), i8* %return84)
  %return791 = call <2 x double> @"chu@US"(i8* %return790)
  %tmp792 = load %gemPrm, %gemPrm* %this
  %tmp793 = extractvalue %gemPrm %tmp792, 39
  %return794 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp793, <2 x double> %return791, i64 %i.0)
  %output796 = extractvalue { <2 x double>, <2 x double>* } %return794, 1
  %141 = insertvalue %gemPrm %tmp792, <2 x double>* %output796, 39
  store %gemPrm %141, %gemPrm* %this
  br label %iter

false786:                                         ; preds = %false772
  %return798 = call i64 @"eq@III"(i64 %return81, i64 79)
  %142 = icmp ne i64 %return798, 0
  br i1 %142, label %true799, label %false800

true799:                                          ; preds = %false786
  %return804 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @91, i64 0, i64 0), i8* %return84)
  %return805 = call <2 x double> @"chu@US"(i8* %return804)
  %tmp806 = load %gemPrm, %gemPrm* %this
  %tmp807 = extractvalue %gemPrm %tmp806, 25
  %return808 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp807, <2 x double> %return805, i64 %i.0)
  %output810 = extractvalue { <2 x double>, <2 x double>* } %return808, 1
  %143 = insertvalue %gemPrm %tmp806, <2 x double>* %output810, 25
  %return813 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @92, i64 0, i64 0), i8* %return84)
  %return814 = call <2 x double> @"chu@US"(i8* %return813)
  %tmp816 = extractvalue %gemPrm %143, 26
  %return817 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp816, <2 x double> %return814, i64 %i.0)
  %output819 = extractvalue { <2 x double>, <2 x double>* } %return817, 1
  %144 = insertvalue %gemPrm %143, <2 x double>* %output819, 26
  store %gemPrm %144, %gemPrm* %this
  br label %iter

false800:                                         ; preds = %false786
  %return821 = call i64 @"eq@III"(i64 %return81, i64 94)
  %145 = icmp ne i64 %return821, 0
  br i1 %145, label %true822, label %false823

true822:                                          ; preds = %false800
  %return827 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @93, i64 0, i64 0), i8* %return84)
  %return828 = call <4 x double> @"chp@PS"(i8* %return827)
  %tmp829 = load %gemPrm, %gemPrm* %this
  %tmp830 = extractvalue %gemPrm %tmp829, 48
  %return831 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp830, <4 x double> %return828, i64 %i.0)
  %output833 = extractvalue { <4 x double>, <4 x double>* } %return831, 1
  %146 = insertvalue %gemPrm %tmp829, <4 x double>* %output833, 48
  store %gemPrm %146, %gemPrm* %this
  br label %iter

false823:                                         ; preds = %false800
  %return835 = call i64 @"eq@III"(i64 %return81, i64 95)
  %147 = icmp ne i64 %return835, 0
  br i1 %147, label %true836, label %false837

true836:                                          ; preds = %false823
  %return841 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @94, i64 0, i64 0), i8* %return84)
  %return842 = call double @"chf@FS"(i8* %return841)
  %tmp843 = load %gemPrm, %gemPrm* %this
  %tmp844 = extractvalue %gemPrm %tmp843, 5
  %return845 = call { double, double* } @"setcomp@F[FFI"(double* %tmp844, double %return842, i64 %i.0)
  %output847 = extractvalue { double, double* } %return845, 1
  %148 = insertvalue %gemPrm %tmp843, double* %output847, 5
  store %gemPrm %148, %gemPrm* %this
  br label %iter

false837:                                         ; preds = %false823
  %return849 = call i64 @"eq@III"(i64 %return81, i64 96)
  %149 = icmp ne i64 %return849, 0
  br i1 %149, label %true850, label %false851

true850:                                          ; preds = %false837
  %return855 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @95, i64 0, i64 0), i8* %return84)
  %return856 = call <4 x double> @"chp@PS"(i8* %return855)
  %tmp857 = load %gemPrm, %gemPrm* %this
  %tmp858 = extractvalue %gemPrm %tmp857, 49
  %return859 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp858, <4 x double> %return856, i64 %i.0)
  %output861 = extractvalue { <4 x double>, <4 x double>* } %return859, 1
  %150 = insertvalue %gemPrm %tmp857, <4 x double>* %output861, 49
  %return864 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @96, i64 0, i64 0), i8* %return84)
  %return865 = call <4 x double> @"chp@PS"(i8* %return864)
  %tmp867 = extractvalue %gemPrm %150, 50
  %return868 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp867, <4 x double> %return865, i64 %i.0)
  %output870 = extractvalue { <4 x double>, <4 x double>* } %return868, 1
  %151 = insertvalue %gemPrm %150, <4 x double>* %output870, 50
  store %gemPrm %151, %gemPrm* %this
  br label %iter

false851:                                         ; preds = %false837
  %return872 = call i64 @"eq@III"(i64 %return81, i64 97)
  %152 = icmp ne i64 %return872, 0
  br i1 %152, label %true873, label %false874

true873:                                          ; preds = %false851
  %return878 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @97, i64 0, i64 0), i8* %return84)
  %return879 = call <2 x double> @"chu@US"(i8* %return878)
  %tmp880 = load %gemPrm, %gemPrm* %this
  %tmp881 = extractvalue %gemPrm %tmp880, 27
  %return882 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp881, <2 x double> %return879, i64 %i.0)
  %output884 = extractvalue { <2 x double>, <2 x double>* } %return882, 1
  %153 = insertvalue %gemPrm %tmp880, <2 x double>* %output884, 27
  %return887 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @98, i64 0, i64 0), i8* %return84)
  %return888 = call <2 x double> @"chu@US"(i8* %return887)
  %tmp890 = extractvalue %gemPrm %153, 28
  %return891 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp890, <2 x double> %return888, i64 %i.0)
  %output893 = extractvalue { <2 x double>, <2 x double>* } %return891, 1
  %154 = insertvalue %gemPrm %153, <2 x double>* %output893, 28
  store %gemPrm %154, %gemPrm* %this
  br label %iter

false874:                                         ; preds = %false851
  %return895 = call i64 @"eq@III"(i64 %return81, i64 98)
  %155 = icmp ne i64 %return895, 0
  br i1 %155, label %true896, label %false897

true896:                                          ; preds = %false874
  %return901 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @99, i64 0, i64 0), i8* %return84)
  %return902 = call <2 x double> @"chu@US"(i8* %return901)
  %tmp903 = load %gemPrm, %gemPrm* %this
  %tmp904 = extractvalue %gemPrm %tmp903, 40
  %return905 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp904, <2 x double> %return902, i64 %i.0)
  %output907 = extractvalue { <2 x double>, <2 x double>* } %return905, 1
  %156 = insertvalue %gemPrm %tmp903, <2 x double>* %output907, 40
  store %gemPrm %156, %gemPrm* %this
  br label %iter

false897:                                         ; preds = %false874
  %return909 = call i64 @"eq@III"(i64 %return81, i64 99)
  %157 = icmp ne i64 %return909, 0
  br i1 %157, label %true910, label %false911

true910:                                          ; preds = %false897
  %return915 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @100, i64 0, i64 0), i8* %return84)
  %return916 = call <3 x double> @"chv@VS"(i8* %return915)
  %tmp917 = load %gemPrm, %gemPrm* %this
  %tmp918 = extractvalue %gemPrm %tmp917, 12
  %return919 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp918, <3 x double> %return916, i64 %i.0)
  %output921 = extractvalue { <3 x double>, <3 x double>* } %return919, 1
  %158 = insertvalue %gemPrm %tmp917, <3 x double>* %output921, 12
  %return924 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @101, i64 0, i64 0), i8* %return84)
  %return925 = call <2 x double> @"chu@US"(i8* %return924)
  %tmp927 = extractvalue %gemPrm %158, 41
  %return928 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp927, <2 x double> %return925, i64 %i.0)
  %output930 = extractvalue { <2 x double>, <2 x double>* } %return928, 1
  %159 = insertvalue %gemPrm %158, <2 x double>* %output930, 41
  store %gemPrm %159, %gemPrm* %this
  br label %iter

false911:                                         ; preds = %false897
  %return932 = call i64 @"eq@III"(i64 %return81, i64 101)
  %160 = icmp ne i64 %return932, 0
  br i1 %160, label %true933, label %iter

true933:                                          ; preds = %false911
  %return937 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @102, i64 0, i64 0), i8* %return84)
  %return938 = call <2 x double> @"chu@US"(i8* %return937)
  %tmp939 = load %gemPrm, %gemPrm* %this
  %tmp940 = extractvalue %gemPrm %tmp939, 29
  %return941 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp940, <2 x double> %return938, i64 %i.0)
  %output943 = extractvalue { <2 x double>, <2 x double>* } %return941, 1
  %161 = insertvalue %gemPrm %tmp939, <2 x double>* %output943, 29
  %return946 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @103, i64 0, i64 0), i8* %return84)
  %return947 = call <2 x double> @"chu@US"(i8* %return946)
  %tmp949 = extractvalue %gemPrm %161, 30
  %return950 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp949, <2 x double> %return947, i64 %i.0)
  %output952 = extractvalue { <2 x double>, <2 x double>* } %return950, 1
  %162 = insertvalue %gemPrm %161, <2 x double>* %output952, 30
  %return955 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @104, i64 0, i64 0), i8* %return84)
  %return956 = call <2 x double> @"chu@US"(i8* %return955)
  %tmp958 = extractvalue %gemPrm %162, 31
  %return959 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp958, <2 x double> %return956, i64 %i.0)
  %output961 = extractvalue { <2 x double>, <2 x double>* } %return959, 1
  %163 = insertvalue %gemPrm %162, <2 x double>* %output961, 31
  store %gemPrm %163, %gemPrm* %this
  br label %iter
}

; Function Attrs: nounwind
declare i64 @"max@I[I"(i64*) #2

; Function Attrs: nounwind readnone
declare i64 @"gt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"resize@[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double>* @"resize@[PI"(<4 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare i64 @"find@I[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare i64 @"ge@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>*, <2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"chp@PS"(i8*) #1

; Function Attrs: nounwind readnone
declare { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>*, <4 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"getcomp@U[UI"(<2 x double>*, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #3 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: alwaysinline nounwind
define private %gemPrm @"gemPrm@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U[F[F[F[F[F[F[V[V[V[V[V[V[V[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[P[P[P[P[P[P[P[P[P[V[U"(double** %rings2_val, double** %bipolar_shift, double** %cell_size, double** %escher_beta, double** %popcorn2_c, double** %flux_spread, <3 x double>** %blob, <3 x double>** %pie, <3 x double>** %supershape, <3 x double>** %supershape_n, <3 x double>** %cpow, <3 x double>** %lazysusan, <3 x double>** %bwraps, <2 x double>** %curl_c, <2 x double>** %parabola, <2 x double>** %fan2, <2 x double>** %rectangles, <2 x double>** %bent2, <2 x double>** %lazysusanxyz, <2 x double>** %modulus, <2 x double>** %popcorn2, <2 x double>** %separation, <2 x double>** %separation_inside, <2 x double>** %split, <2 x double>** %splits, <2 x double>** %waves2_scale, <2 x double>** %waves2_freq, <2 x double>** %curve_lenght, <2 x double>** %curve_amp, <2 x double>** %polynomial_pow, <2 x double>** %polynomial_lc, <2 x double>** %polynomial_sc, <2 x double>** %julian, <2 x double>** %juliascope, <2 x double>** %radialblur, <2 x double>** %disc2, <2 x double>** %flower, <2 x double>** %conic, <2 x double>** %stripes, <2 x double>** %whorl, <2 x double>** %persp, <2 x double>** %bwrapstwist, <4 x double>** %ngon, <4 x double>** %pdj_w, <4 x double>** %oscope, <4 x double>** %wedge, <4 x double>** %wedgejulia, <4 x double>** %wedgesph, <4 x double>** %auger, <4 x double>** %mobius_re, <4 x double>** %mobius_im, <3 x double>** %disc2_precalc, <2 x double>** %supershape_precalc) #0 {
__llvm_entry:
  %rings2_val1 = load double*, double** %rings2_val
  %0 = insertvalue %gemPrm undef, double* %rings2_val1, 0
  %bipolar_shift2 = load double*, double** %bipolar_shift
  %1 = insertvalue %gemPrm %0, double* %bipolar_shift2, 1
  %cell_size4 = load double*, double** %cell_size
  %2 = insertvalue %gemPrm %1, double* %cell_size4, 2
  %escher_beta6 = load double*, double** %escher_beta
  %3 = insertvalue %gemPrm %2, double* %escher_beta6, 3
  %popcorn2_c8 = load double*, double** %popcorn2_c
  %4 = insertvalue %gemPrm %3, double* %popcorn2_c8, 4
  %flux_spread10 = load double*, double** %flux_spread
  %5 = insertvalue %gemPrm %4, double* %flux_spread10, 5
  %blob12 = load <3 x double>*, <3 x double>** %blob
  %6 = insertvalue %gemPrm %5, <3 x double>* %blob12, 6
  %pie14 = load <3 x double>*, <3 x double>** %pie
  %7 = insertvalue %gemPrm %6, <3 x double>* %pie14, 7
  %supershape16 = load <3 x double>*, <3 x double>** %supershape
  %8 = insertvalue %gemPrm %7, <3 x double>* %supershape16, 8
  %supershape_n18 = load <3 x double>*, <3 x double>** %supershape_n
  %9 = insertvalue %gemPrm %8, <3 x double>* %supershape_n18, 9
  %cpow20 = load <3 x double>*, <3 x double>** %cpow
  %10 = insertvalue %gemPrm %9, <3 x double>* %cpow20, 10
  %lazysusan22 = load <3 x double>*, <3 x double>** %lazysusan
  %11 = insertvalue %gemPrm %10, <3 x double>* %lazysusan22, 11
  %bwraps24 = load <3 x double>*, <3 x double>** %bwraps
  %12 = insertvalue %gemPrm %11, <3 x double>* %bwraps24, 12
  %curl_c26 = load <2 x double>*, <2 x double>** %curl_c
  %13 = insertvalue %gemPrm %12, <2 x double>* %curl_c26, 13
  %parabola28 = load <2 x double>*, <2 x double>** %parabola
  %14 = insertvalue %gemPrm %13, <2 x double>* %parabola28, 14
  %fan230 = load <2 x double>*, <2 x double>** %fan2
  %15 = insertvalue %gemPrm %14, <2 x double>* %fan230, 15
  %rectangles32 = load <2 x double>*, <2 x double>** %rectangles
  %16 = insertvalue %gemPrm %15, <2 x double>* %rectangles32, 16
  %bent234 = load <2 x double>*, <2 x double>** %bent2
  %17 = insertvalue %gemPrm %16, <2 x double>* %bent234, 17
  %lazysusanxyz36 = load <2 x double>*, <2 x double>** %lazysusanxyz
  %18 = insertvalue %gemPrm %17, <2 x double>* %lazysusanxyz36, 18
  %modulus38 = load <2 x double>*, <2 x double>** %modulus
  %19 = insertvalue %gemPrm %18, <2 x double>* %modulus38, 19
  %popcorn240 = load <2 x double>*, <2 x double>** %popcorn2
  %20 = insertvalue %gemPrm %19, <2 x double>* %popcorn240, 20
  %separation42 = load <2 x double>*, <2 x double>** %separation
  %21 = insertvalue %gemPrm %20, <2 x double>* %separation42, 21
  %separation_inside44 = load <2 x double>*, <2 x double>** %separation_inside
  %22 = insertvalue %gemPrm %21, <2 x double>* %separation_inside44, 22
  %split46 = load <2 x double>*, <2 x double>** %split
  %23 = insertvalue %gemPrm %22, <2 x double>* %split46, 23
  %splits48 = load <2 x double>*, <2 x double>** %splits
  %24 = insertvalue %gemPrm %23, <2 x double>* %splits48, 24
  %waves2_scale50 = load <2 x double>*, <2 x double>** %waves2_scale
  %25 = insertvalue %gemPrm %24, <2 x double>* %waves2_scale50, 25
  %waves2_freq52 = load <2 x double>*, <2 x double>** %waves2_freq
  %26 = insertvalue %gemPrm %25, <2 x double>* %waves2_freq52, 26
  %curve_lenght54 = load <2 x double>*, <2 x double>** %curve_lenght
  %27 = insertvalue %gemPrm %26, <2 x double>* %curve_lenght54, 27
  %curve_amp56 = load <2 x double>*, <2 x double>** %curve_amp
  %28 = insertvalue %gemPrm %27, <2 x double>* %curve_amp56, 28
  %polynomial_pow58 = load <2 x double>*, <2 x double>** %polynomial_pow
  %29 = insertvalue %gemPrm %28, <2 x double>* %polynomial_pow58, 29
  %polynomial_lc60 = load <2 x double>*, <2 x double>** %polynomial_lc
  %30 = insertvalue %gemPrm %29, <2 x double>* %polynomial_lc60, 30
  %polynomial_sc62 = load <2 x double>*, <2 x double>** %polynomial_sc
  %31 = insertvalue %gemPrm %30, <2 x double>* %polynomial_sc62, 31
  %julian64 = load <2 x double>*, <2 x double>** %julian
  %32 = insertvalue %gemPrm %31, <2 x double>* %julian64, 32
  %juliascope66 = load <2 x double>*, <2 x double>** %juliascope
  %33 = insertvalue %gemPrm %32, <2 x double>* %juliascope66, 33
  %radialblur68 = load <2 x double>*, <2 x double>** %radialblur
  %34 = insertvalue %gemPrm %33, <2 x double>* %radialblur68, 34
  %disc270 = load <2 x double>*, <2 x double>** %disc2
  %35 = insertvalue %gemPrm %34, <2 x double>* %disc270, 35
  %flower72 = load <2 x double>*, <2 x double>** %flower
  %36 = insertvalue %gemPrm %35, <2 x double>* %flower72, 36
  %conic74 = load <2 x double>*, <2 x double>** %conic
  %37 = insertvalue %gemPrm %36, <2 x double>* %conic74, 37
  %stripes76 = load <2 x double>*, <2 x double>** %stripes
  %38 = insertvalue %gemPrm %37, <2 x double>* %stripes76, 38
  %whorl78 = load <2 x double>*, <2 x double>** %whorl
  %39 = insertvalue %gemPrm %38, <2 x double>* %whorl78, 39
  %persp80 = load <2 x double>*, <2 x double>** %persp
  %40 = insertvalue %gemPrm %39, <2 x double>* %persp80, 40
  %bwrapstwist82 = load <2 x double>*, <2 x double>** %bwrapstwist
  %41 = insertvalue %gemPrm %40, <2 x double>* %bwrapstwist82, 41
  %ngon84 = load <4 x double>*, <4 x double>** %ngon
  %42 = insertvalue %gemPrm %41, <4 x double>* %ngon84, 42
  %pdj_w86 = load <4 x double>*, <4 x double>** %pdj_w
  %43 = insertvalue %gemPrm %42, <4 x double>* %pdj_w86, 43
  %oscope88 = load <4 x double>*, <4 x double>** %oscope
  %44 = insertvalue %gemPrm %43, <4 x double>* %oscope88, 44
  %wedge90 = load <4 x double>*, <4 x double>** %wedge
  %45 = insertvalue %gemPrm %44, <4 x double>* %wedge90, 45
  %wedgejulia92 = load <4 x double>*, <4 x double>** %wedgejulia
  %46 = insertvalue %gemPrm %45, <4 x double>* %wedgejulia92, 46
  %wedgesph94 = load <4 x double>*, <4 x double>** %wedgesph
  %47 = insertvalue %gemPrm %46, <4 x double>* %wedgesph94, 47
  %auger96 = load <4 x double>*, <4 x double>** %auger
  %48 = insertvalue %gemPrm %47, <4 x double>* %auger96, 48
  %mobius_re98 = load <4 x double>*, <4 x double>** %mobius_re
  %49 = insertvalue %gemPrm %48, <4 x double>* %mobius_re98, 49
  %mobius_im100 = load <4 x double>*, <4 x double>** %mobius_im
  %50 = insertvalue %gemPrm %49, <4 x double>* %mobius_im100, 50
  %disc2_precalc102 = load <3 x double>*, <3 x double>** %disc2_precalc
  %51 = insertvalue %gemPrm %50, <3 x double>* %disc2_precalc102, 51
  %supershape_precalc104 = load <2 x double>*, <2 x double>** %supershape_precalc
  %52 = insertvalue %gemPrm %51, <2 x double>* %supershape_precalc104, 52
  ret %gemPrm %52
}

; Function Attrs: alwaysinline nounwind
define private %gemPrm @"gemPrm@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U"() #0 {
__llvm_entry:
  %0 = alloca double*
  %1 = alloca double*
  %2 = alloca double*
  %3 = alloca double*
  %4 = alloca double*
  %5 = alloca <3 x double>*
  %6 = alloca <3 x double>*
  %7 = alloca <3 x double>*
  %8 = alloca <3 x double>*
  %9 = alloca <3 x double>*
  %10 = alloca <3 x double>*
  %11 = alloca <3 x double>*
  %12 = alloca <2 x double>*
  %13 = alloca <2 x double>*
  %14 = alloca <2 x double>*
  %15 = alloca <2 x double>*
  %16 = alloca <2 x double>*
  %17 = alloca <2 x double>*
  %18 = alloca <2 x double>*
  %19 = alloca <2 x double>*
  %20 = alloca <2 x double>*
  %21 = alloca <2 x double>*
  %22 = alloca <2 x double>*
  %23 = alloca <2 x double>*
  %24 = alloca <2 x double>*
  %25 = alloca <2 x double>*
  %26 = alloca <2 x double>*
  %27 = alloca <2 x double>*
  %28 = alloca <2 x double>*
  %29 = alloca <2 x double>*
  %30 = alloca <2 x double>*
  %31 = alloca <2 x double>*
  %32 = alloca <2 x double>*
  %33 = alloca <2 x double>*
  %34 = alloca <2 x double>*
  %35 = alloca <2 x double>*
  %36 = alloca <2 x double>*
  %37 = alloca <2 x double>*
  %38 = alloca <2 x double>*
  %39 = alloca <2 x double>*
  %40 = alloca <2 x double>*
  %41 = alloca <4 x double>*
  %42 = alloca <4 x double>*
  %43 = alloca <4 x double>*
  %44 = alloca <4 x double>*
  %45 = alloca <4 x double>*
  %46 = alloca <4 x double>*
  %47 = alloca <4 x double>*
  %48 = alloca <4 x double>*
  %49 = alloca <4 x double>*
  %50 = alloca <3 x double>*
  %51 = alloca <2 x double>*
  %52 = alloca double*
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %52
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %0
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %1
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %2
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %3
  store double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double** %4
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %5
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %6
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %7
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %8
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %9
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %10
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %11
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %12
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %13
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %14
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %15
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %16
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %17
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %18
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %19
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %20
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %21
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %22
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %23
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %24
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %25
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %26
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %27
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %28
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %29
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %30
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %31
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %32
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %33
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %34
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %35
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %36
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %37
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %38
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %39
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %40
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %41
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %42
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %43
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %44
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %45
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %46
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %47
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %48
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>], [0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %49
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %50
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %51
  %gemPrm = call %gemPrm @"gemPrm@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U[F[F[F[F[F[F[V[V[V[V[V[V[V[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[P[P[P[P[P[P[P[P[P[V[U"(double** %52, double** %0, double** %1, double** %2, double** %3, double** %4, <3 x double>** %5, <3 x double>** %6, <3 x double>** %7, <3 x double>** %8, <3 x double>** %9, <3 x double>** %10, <3 x double>** %11, <2 x double>** %12, <2 x double>** %13, <2 x double>** %14, <2 x double>** %15, <2 x double>** %16, <2 x double>** %17, <2 x double>** %18, <2 x double>** %19, <2 x double>** %20, <2 x double>** %21, <2 x double>** %22, <2 x double>** %23, <2 x double>** %24, <2 x double>** %25, <2 x double>** %26, <2 x double>** %27, <2 x double>** %28, <2 x double>** %29, <2 x double>** %30, <2 x double>** %31, <2 x double>** %32, <2 x double>** %33, <2 x double>** %34, <2 x double>** %35, <2 x double>** %36, <2 x double>** %37, <2 x double>** %38, <2 x double>** %39, <2 x double>** %40, <4 x double>** %41, <4 x double>** %42, <4 x double>** %43, <4 x double>** %44, <4 x double>** %45, <4 x double>** %46, <4 x double>** %47, <4 x double>** %48, <4 x double>** %49, <3 x double>** %50, <2 x double>** %51)
  ret %gemPrm %gemPrm
}

; Function Attrs: alwaysinline nounwind
define private <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %GMP, i64* %ftype, i64* %idx, i64* %type, <2 x double>* %pos, <2 x double>* %x, <2 x double>* %y, <2 x double>* %o, double* %w) #0 {
__llvm_entry:
  %_p = alloca <2 x double>
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca <2 x double>
  %3 = alloca <2 x double>
  %4 = alloca double
  %5 = alloca <2 x double>
  %6 = alloca double
  %7 = alloca <2 x double>
  %8 = alloca double
  %9 = alloca <2 x double>
  %10 = alloca double
  %11 = alloca <2 x double>
  %12 = alloca double
  %13 = alloca <2 x double>
  %14 = alloca double
  %15 = alloca <2 x double>
  %16 = alloca double
  %17 = alloca <2 x double>
  %18 = alloca double
  %19 = alloca <2 x double>
  %20 = alloca double
  %21 = alloca <2 x double>
  %22 = alloca double
  %23 = alloca <2 x double>
  %24 = alloca double
  %25 = alloca <2 x double>
  %26 = alloca double
  %27 = alloca <2 x double>
  %28 = alloca double
  %29 = alloca <2 x double>
  %30 = alloca double
  %31 = alloca <2 x double>
  %32 = alloca double
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca <2 x double>
  %38 = alloca double
  %39 = alloca <2 x double>
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <2 x double>
  %44 = alloca double
  %45 = alloca <2 x double>
  %46 = alloca double
  %47 = alloca <2 x double>
  %48 = alloca double
  %49 = alloca <2 x double>
  %50 = alloca double
  %51 = alloca double
  %52 = alloca <2 x double>
  %53 = alloca double
  %54 = alloca double
  %55 = alloca <2 x double>
  %56 = alloca double
  %57 = alloca <2 x double>
  %58 = alloca double
  %59 = alloca <2 x double>
  %60 = alloca double
  %61 = alloca double
  %62 = alloca <2 x double>
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca <2 x double>
  %67 = alloca double
  %68 = alloca double
  %69 = alloca double
  %70 = alloca double
  %71 = alloca double
  %72 = alloca <2 x double>
  %73 = alloca double
  %74 = alloca <4 x double>
  %75 = alloca <2 x double>
  %76 = alloca double
  %77 = alloca double
  %78 = alloca double
  %79 = alloca double
  %80 = alloca <2 x double>
  %81 = alloca double
  %82 = alloca double
  %83 = alloca double
  %84 = alloca <2 x double>
  %85 = alloca double
  %86 = alloca double
  %87 = alloca double
  %88 = alloca double
  %89 = alloca <2 x double>
  %90 = alloca double
  %91 = alloca <2 x double>
  %92 = alloca <2 x double>
  %93 = alloca double
  %94 = alloca double
  %95 = alloca <2 x double>
  %96 = alloca double
  %97 = alloca <2 x double>
  %98 = alloca <2 x double>
  %99 = alloca double
  %100 = alloca double
  %101 = alloca double
  %102 = alloca double
  %103 = alloca double
  %104 = alloca double
  %105 = alloca double
  %106 = alloca <2 x double>
  %107 = alloca double
  %108 = alloca <2 x double>
  %109 = alloca double
  %110 = alloca <2 x double>
  %111 = alloca double
  %112 = alloca <2 x double>
  %113 = alloca double
  %114 = alloca <2 x double>
  %115 = alloca double
  %116 = alloca <2 x double>
  %117 = alloca double
  %118 = alloca <2 x double>
  %119 = alloca double
  %120 = alloca <2 x double>
  %121 = alloca double
  %122 = alloca <2 x double>
  %123 = alloca double
  %124 = alloca double
  %125 = alloca double
  %126 = alloca double
  %127 = alloca double
  %128 = alloca double
  %129 = alloca <2 x double>
  %130 = alloca double
  %131 = alloca double
  %132 = alloca double
  %133 = alloca double
  %134 = alloca double
  %135 = alloca double
  %136 = alloca <3 x double>
  %137 = alloca <2 x double>
  %138 = alloca double
  %139 = alloca double
  %140 = alloca double
  %141 = alloca <2 x double>
  %142 = alloca double
  %143 = alloca double
  %144 = alloca double
  %145 = alloca <2 x double>
  %146 = alloca double
  %147 = alloca double
  %148 = alloca double
  %149 = alloca <2 x double>
  %150 = alloca double
  %151 = alloca <2 x double>
  %152 = alloca <2 x double>
  %153 = alloca double
  %154 = alloca double
  %155 = alloca <2 x double>
  %156 = alloca double
  %157 = alloca <2 x double>
  %158 = alloca double
  %159 = alloca <2 x double>
  %160 = alloca double
  %161 = alloca double
  %162 = alloca <2 x double>
  %163 = alloca double
  %164 = alloca double
  %165 = alloca double
  %166 = alloca double
  %167 = alloca <2 x double>
  %168 = alloca double
  %169 = alloca <2 x double>
  %170 = alloca double
  %171 = alloca <2 x double>
  %172 = alloca double
  %173 = alloca <2 x double>
  %174 = alloca double
  %175 = alloca double
  %176 = alloca <2 x double>
  %177 = alloca double
  %178 = alloca <2 x double>
  %179 = alloca double
  %180 = alloca double
  %181 = alloca double
  %182 = alloca double
  %183 = alloca <2 x double>
  %184 = alloca <2 x double>
  %185 = alloca double
  %186 = alloca <2 x double>
  %187 = alloca double
  %188 = alloca <2 x double>
  %189 = alloca <2 x double>
  %190 = alloca double
  %191 = alloca double
  %192 = alloca double
  %193 = alloca double
  %194 = alloca double
  %195 = alloca <2 x double>
  %196 = alloca double
  %197 = alloca <2 x double>
  %198 = alloca double
  %199 = alloca double
  %200 = alloca <2 x double>
  %201 = alloca <2 x double>
  %202 = alloca double
  %203 = alloca <2 x double>
  %204 = alloca double
  %205 = alloca <2 x double>
  %206 = alloca <2 x double>
  %207 = alloca <2 x double>
  %208 = alloca double
  %209 = alloca <2 x double>
  %210 = alloca <2 x double>
  %211 = alloca double
  %212 = alloca <2 x double>
  %213 = alloca <2 x double>
  %214 = alloca double
  %215 = alloca double
  %216 = alloca double
  %217 = alloca <2 x double>
  %218 = alloca double
  %219 = alloca double
  %220 = alloca double
  %221 = alloca double
  %222 = alloca double
  %223 = alloca <2 x double>
  %224 = alloca double
  %225 = alloca double
  %226 = alloca double
  %227 = alloca double
  %228 = alloca double
  %229 = alloca <2 x double>
  %230 = alloca double
  %231 = alloca double
  %232 = alloca double
  %233 = alloca double
  %234 = alloca double
  %235 = alloca <2 x double>
  %236 = alloca double
  %237 = alloca double
  %238 = alloca double
  %239 = alloca <2 x double>
  %240 = alloca double
  %241 = alloca <2 x double>
  %242 = alloca <2 x double>
  %243 = alloca <2 x double>
  %244 = alloca double
  %245 = alloca <2 x double>
  %246 = alloca double
  %247 = alloca <2 x double>
  %248 = alloca double
  %249 = alloca <2 x double>
  %250 = alloca double
  %251 = alloca <2 x double>
  %252 = alloca double
  %253 = alloca <2 x double>
  %254 = alloca double
  %255 = alloca <2 x double>
  %256 = alloca double
  %257 = alloca <2 x double>
  %258 = alloca double
  %259 = alloca <2 x double>
  %260 = alloca double
  %261 = alloca <2 x double>
  %262 = alloca double
  %263 = alloca <2 x double>
  %264 = alloca double
  %265 = alloca <2 x double>
  %266 = alloca double
  %267 = alloca <2 x double>
  %268 = alloca double
  %269 = alloca <2 x double>
  %270 = alloca double
  %271 = alloca <2 x double>
  %272 = alloca double
  %273 = alloca double
  %274 = alloca double
  %275 = alloca double
  %276 = alloca double
  %277 = alloca <2 x double>
  %278 = alloca double
  %279 = alloca double
  %280 = alloca <2 x double>
  %281 = alloca double
  %282 = alloca <4 x double>
  %283 = alloca <4 x double>
  %284 = alloca <2 x double>
  %285 = alloca double
  %286 = alloca <2 x double>
  %287 = alloca <2 x double>
  %288 = alloca <2 x double>
  %289 = alloca double
  %290 = alloca double
  %291 = alloca double
  %292 = alloca <2 x double>
  %293 = alloca double
  %294 = alloca double
  %295 = alloca double
  %296 = alloca double
  %297 = alloca double
  %298 = alloca double
  %299 = alloca <2 x double>
  %300 = alloca double
  %301 = alloca <2 x double>
  %302 = alloca double
  %303 = alloca <2 x double>
  %304 = alloca <2 x double>
  %305 = alloca <2 x double>
  %p = alloca <2 x double>
  store <2 x double> zeroinitializer, <2 x double>* %p, !vex-initializer-store !3
  %pos1 = load <2 x double>, <2 x double>* %pos
  store <2 x double> %pos1, <2 x double>* %_p
  %x2 = load <2 x double>, <2 x double>* %x
  store <2 x double> %x2, <2 x double>* %0
  %y3 = load <2 x double>, <2 x double>* %y
  store <2 x double> %y3, <2 x double>* %1
  %o4 = load <2 x double>, <2 x double>* %o
  store <2 x double> %o4, <2 x double>* %2
  call void @"affine@UUUU"(<2 x double>* %_p, <2 x double>* %0, <2 x double>* %1, <2 x double>* %2)
  %type5 = load i64, i64* %type
  %return = call i64 @"not@II"(i64 %type5)
  %306 = icmp ne i64 %return, 0
  br i1 %306, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_p6 = load <2 x double>, <2 x double>* %_p
  %w7 = load double, double* %w
  %cast = call <2 x double> @"set@UF"(double %w7)
  %output = call <2 x double> @"mul@UU"(<2 x double> %_p6, <2 x double> %cast)
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return9 = call i64 @"lt@III"(i64 %type5, i64 35)
  %307 = icmp ne i64 %return9, 0
  br i1 %307, label %true10, label %false11

true10:                                           ; preds = %false
  %return14 = call i64 @"lt@III"(i64 %type5, i64 18)
  %308 = icmp ne i64 %return14, 0
  br i1 %308, label %true15, label %false16

false11:                                          ; preds = %false
  %return393 = call i64 @"lt@III"(i64 %type5, i64 70)
  %309 = icmp ne i64 %return393, 0
  br i1 %309, label %true394, label %false395

end12:                                            ; preds = %false1378, %false1160, %false395, %false885, %false572, %false371, %false149
  %_p1409 = load <2 x double>, <2 x double>* %_p
  br label %UnifiedReturnBlock

true15:                                           ; preds = %true10
  %return19 = call i64 @"eq@III"(i64 %type5, i64 1)
  %310 = icmp ne i64 %return19, 0
  br i1 %310, label %true20, label %false21

false16:                                          ; preds = %true10
  %return166 = call i64 @"eq@III"(i64 %type5, i64 18)
  %311 = icmp ne i64 %return166, 0
  br i1 %311, label %true167, label %false168

true20:                                           ; preds = %true15
  %_p23 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p23, <2 x double>* %3
  %w24 = load double, double* %w
  store double %w24, double* %4
  call void @"V_SINUSOIDAL@UUF"(<2 x double>* %p, <2 x double>* %3, double* %4)
  %p25 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false21:                                          ; preds = %true15
  %return27 = call i64 @"eq@III"(i64 %type5, i64 2)
  %312 = icmp ne i64 %return27, 0
  br i1 %312, label %true28, label %false29

true28:                                           ; preds = %false21
  %_p31 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p31, <2 x double>* %5
  %w32 = load double, double* %w
  store double %w32, double* %6
  call void @"V_SPHERICAL@UUF"(<2 x double>* %p, <2 x double>* %5, double* %6)
  %p33 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false29:                                          ; preds = %false21
  %return35 = call i64 @"eq@III"(i64 %type5, i64 3)
  %313 = icmp ne i64 %return35, 0
  br i1 %313, label %true36, label %false37

true36:                                           ; preds = %false29
  %_p39 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p39, <2 x double>* %7
  %w40 = load double, double* %w
  store double %w40, double* %8
  call void @"V_SWIRL@UUF"(<2 x double>* %p, <2 x double>* %7, double* %8)
  %p41 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false37:                                          ; preds = %false29
  %return43 = call i64 @"eq@III"(i64 %type5, i64 4)
  %314 = icmp ne i64 %return43, 0
  br i1 %314, label %true44, label %false45

true44:                                           ; preds = %false37
  %_p47 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p47, <2 x double>* %9
  %w48 = load double, double* %w
  store double %w48, double* %10
  call void @"V_HORSESHOE@UUF"(<2 x double>* %p, <2 x double>* %9, double* %10)
  %p49 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false45:                                          ; preds = %false37
  %return51 = call i64 @"eq@III"(i64 %type5, i64 5)
  %315 = icmp ne i64 %return51, 0
  br i1 %315, label %true52, label %false53

true52:                                           ; preds = %false45
  %_p55 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p55, <2 x double>* %11
  %w56 = load double, double* %w
  store double %w56, double* %12
  call void @"V_POLAR@UUF"(<2 x double>* %p, <2 x double>* %11, double* %12)
  %p57 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false53:                                          ; preds = %false45
  %return59 = call i64 @"eq@III"(i64 %type5, i64 6)
  %316 = icmp ne i64 %return59, 0
  br i1 %316, label %true60, label %false61

true60:                                           ; preds = %false53
  %_p63 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p63, <2 x double>* %13
  %w64 = load double, double* %w
  store double %w64, double* %14
  call void @"V_HANDKERCHIEF@UUF"(<2 x double>* %p, <2 x double>* %13, double* %14)
  %p65 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false61:                                          ; preds = %false53
  %return67 = call i64 @"eq@III"(i64 %type5, i64 7)
  %317 = icmp ne i64 %return67, 0
  br i1 %317, label %true68, label %false69

true68:                                           ; preds = %false61
  %_p71 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p71, <2 x double>* %15
  %w72 = load double, double* %w
  store double %w72, double* %16
  call void @"V_HEART@UUF"(<2 x double>* %p, <2 x double>* %15, double* %16)
  %p73 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false69:                                          ; preds = %false61
  %return75 = call i64 @"eq@III"(i64 %type5, i64 8)
  %318 = icmp ne i64 %return75, 0
  br i1 %318, label %true76, label %false77

true76:                                           ; preds = %false69
  %_p79 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p79, <2 x double>* %17
  %w80 = load double, double* %w
  store double %w80, double* %18
  call void @"V_DISC@UUF"(<2 x double>* %p, <2 x double>* %17, double* %18)
  %p81 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false77:                                          ; preds = %false69
  %return83 = call i64 @"eq@III"(i64 %type5, i64 9)
  %319 = icmp ne i64 %return83, 0
  br i1 %319, label %true84, label %false85

true84:                                           ; preds = %false77
  %_p87 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p87, <2 x double>* %19
  %w88 = load double, double* %w
  store double %w88, double* %20
  call void @"V_SPIRAL@UUF"(<2 x double>* %p, <2 x double>* %19, double* %20)
  %p89 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false85:                                          ; preds = %false77
  %return91 = call i64 @"eq@III"(i64 %type5, i64 10)
  %320 = icmp ne i64 %return91, 0
  br i1 %320, label %true92, label %false93

true92:                                           ; preds = %false85
  %_p95 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p95, <2 x double>* %21
  %w96 = load double, double* %w
  store double %w96, double* %22
  call void @"V_HIPERBOLIC@UUF"(<2 x double>* %p, <2 x double>* %21, double* %22)
  %p97 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false93:                                          ; preds = %false85
  %return99 = call i64 @"eq@III"(i64 %type5, i64 11)
  %321 = icmp ne i64 %return99, 0
  br i1 %321, label %true100, label %false101

true100:                                          ; preds = %false93
  %_p103 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p103, <2 x double>* %23
  %w104 = load double, double* %w
  store double %w104, double* %24
  call void @"V_DIAMOND@UUF"(<2 x double>* %p, <2 x double>* %23, double* %24)
  %p105 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false101:                                         ; preds = %false93
  %return107 = call i64 @"eq@III"(i64 %type5, i64 12)
  %322 = icmp ne i64 %return107, 0
  br i1 %322, label %true108, label %false109

true108:                                          ; preds = %false101
  %_p111 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p111, <2 x double>* %25
  %w112 = load double, double* %w
  store double %w112, double* %26
  call void @"V_EX@UUF"(<2 x double>* %p, <2 x double>* %25, double* %26)
  %p113 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false109:                                         ; preds = %false101
  %return115 = call i64 @"eq@III"(i64 %type5, i64 13)
  %323 = icmp ne i64 %return115, 0
  br i1 %323, label %true116, label %false117

true116:                                          ; preds = %false109
  %_p119 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p119, <2 x double>* %27
  %w120 = load double, double* %w
  store double %w120, double* %28
  call void @"V_JULIA@UUF"(<2 x double>* %p, <2 x double>* %27, double* %28)
  %p121 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false117:                                         ; preds = %false109
  %return123 = call i64 @"eq@III"(i64 %type5, i64 14)
  %324 = icmp ne i64 %return123, 0
  br i1 %324, label %true124, label %false125

true124:                                          ; preds = %false117
  %_p127 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p127, <2 x double>* %29
  %w128 = load double, double* %w
  store double %w128, double* %30
  call void @"V_BENT@UUF"(<2 x double>* %p, <2 x double>* %29, double* %30)
  %p129 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false125:                                         ; preds = %false117
  %return131 = call i64 @"eq@III"(i64 %type5, i64 15)
  %325 = icmp ne i64 %return131, 0
  br i1 %325, label %true132, label %false133

true132:                                          ; preds = %false125
  %_p135 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p135, <2 x double>* %31
  %w136 = load double, double* %w
  store double %w136, double* %32
  %o137 = load <2 x double>, <2 x double>* %o
  %return138 = call double @"getcomp@FUI"(<2 x double> %o137, i64 0)
  store double %return138, double* %33
  %x139 = load <2 x double>, <2 x double>* %x
  %return140 = call double @"getcomp@FUI"(<2 x double> %x139, i64 1)
  store double %return140, double* %34
  %y141 = load <2 x double>, <2 x double>* %y
  %return142 = call double @"getcomp@FUI"(<2 x double> %y141, i64 1)
  store double %return142, double* %35
  %o143 = load <2 x double>, <2 x double>* %o
  %return144 = call double @"getcomp@FUI"(<2 x double> %o143, i64 1)
  store double %return144, double* %36
  call void @"V_WAVES@UUFFFFF"(<2 x double>* %p, <2 x double>* %31, double* %32, double* %33, double* %34, double* %35, double* %36)
  %p145 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false133:                                         ; preds = %false125
  %return147 = call i64 @"eq@III"(i64 %type5, i64 16)
  %326 = icmp ne i64 %return147, 0
  br i1 %326, label %true148, label %false149

true148:                                          ; preds = %false133
  %_p151 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p151, <2 x double>* %37
  %w152 = load double, double* %w
  store double %w152, double* %38
  call void @"V_FISHEYE@UUF"(<2 x double>* %p, <2 x double>* %37, double* %38)
  %p153 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false149:                                         ; preds = %false133
  %return155 = call i64 @"eq@III"(i64 %type5, i64 17)
  %327 = icmp ne i64 %return155, 0
  br i1 %327, label %true156, label %end12

true156:                                          ; preds = %false149
  %_p158 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p158, <2 x double>* %39
  %w159 = load double, double* %w
  store double %w159, double* %40
  %o160 = load <2 x double>, <2 x double>* %o
  %return161 = call double @"getcomp@FUI"(<2 x double> %o160, i64 0)
  store double %return161, double* %41
  %o162 = load <2 x double>, <2 x double>* %o
  %return163 = call double @"getcomp@FUI"(<2 x double> %o162, i64 1)
  store double %return163, double* %42
  call void @"V_POPCORN@UUFFF"(<2 x double>* %p, <2 x double>* %39, double* %40, double* %41, double* %42)
  %p164 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true167:                                          ; preds = %false16
  %_p170 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p170, <2 x double>* %43
  %w171 = load double, double* %w
  store double %w171, double* %44
  call void @"V_EXPONENTIAL@UUF"(<2 x double>* %p, <2 x double>* %43, double* %44)
  %p172 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false168:                                         ; preds = %false16
  %return174 = call i64 @"eq@III"(i64 %type5, i64 19)
  %328 = icmp ne i64 %return174, 0
  br i1 %328, label %true175, label %false176

true175:                                          ; preds = %false168
  %_p178 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p178, <2 x double>* %45
  %w179 = load double, double* %w
  store double %w179, double* %46
  call void @"V_POWER@UUF"(<2 x double>* %p, <2 x double>* %45, double* %46)
  %p180 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false176:                                         ; preds = %false168
  %return182 = call i64 @"eq@III"(i64 %type5, i64 20)
  %329 = icmp ne i64 %return182, 0
  br i1 %329, label %true183, label %false184

true183:                                          ; preds = %false176
  %_p186 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p186, <2 x double>* %47
  %w187 = load double, double* %w
  store double %w187, double* %48
  call void @"V_COSINE@UUF"(<2 x double>* %p, <2 x double>* %47, double* %48)
  %p188 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false184:                                         ; preds = %false176
  %return190 = call i64 @"eq@III"(i64 %type5, i64 21)
  %330 = icmp ne i64 %return190, 0
  br i1 %330, label %true191, label %false192

true191:                                          ; preds = %false184
  %_p194 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p194, <2 x double>* %49
  %w195 = load double, double* %w
  store double %w195, double* %50
  %o196 = load <2 x double>, <2 x double>* %o
  %return197 = call double @"getcomp@FUI"(<2 x double> %o196, i64 0)
  store double %return197, double* %51
  call void @"V_RINGS@UUFF"(<2 x double>* %p, <2 x double>* %49, double* %50, double* %51)
  %p198 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false192:                                         ; preds = %false184
  %return200 = call i64 @"eq@III"(i64 %type5, i64 22)
  %331 = icmp ne i64 %return200, 0
  br i1 %331, label %true201, label %false202

true201:                                          ; preds = %false192
  %_p204 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p204, <2 x double>* %52
  %w205 = load double, double* %w
  store double %w205, double* %53
  %o206 = load <2 x double>, <2 x double>* %o
  %return207 = call double @"getcomp@FUI"(<2 x double> %o206, i64 0)
  store double %return207, double* %54
  call void @"V_FAN@UUFF"(<2 x double>* %p, <2 x double>* %52, double* %53, double* %54)
  %p208 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false202:                                         ; preds = %false192
  %return210 = call i64 @"eq@III"(i64 %type5, i64 23)
  %332 = icmp ne i64 %return210, 0
  br i1 %332, label %true211, label %false212

true211:                                          ; preds = %false202
  %_p214 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p214, <2 x double>* %55
  %w215 = load double, double* %w
  store double %w215, double* %56
  call void @"V_BUBBLE@UUF"(<2 x double>* %p, <2 x double>* %55, double* %56)
  %p216 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false212:                                         ; preds = %false202
  %return218 = call i64 @"eq@III"(i64 %type5, i64 24)
  %333 = icmp ne i64 %return218, 0
  br i1 %333, label %true219, label %false220

true219:                                          ; preds = %false212
  %_p222 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p222, <2 x double>* %57
  %w223 = load double, double* %w
  store double %w223, double* %58
  call void @"V_CYLINDER@UUF"(<2 x double>* %p, <2 x double>* %57, double* %58)
  %p224 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false220:                                         ; preds = %false212
  %return226 = call i64 @"eq@III"(i64 %type5, i64 25)
  %334 = icmp ne i64 %return226, 0
  br i1 %334, label %true227, label %false228

true227:                                          ; preds = %false220
  %_p230 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p230, <2 x double>* %59
  %w231 = load double, double* %w
  store double %w231, double* %60
  call void @"V_EYEFISH@UUF"(<2 x double>* %p, <2 x double>* %59, double* %60)
  %p232 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false228:                                         ; preds = %false220
  %return234 = call i64 @"eq@III"(i64 %type5, i64 26)
  %335 = icmp ne i64 %return234, 0
  br i1 %335, label %true235, label %false236

true235:                                          ; preds = %false228
  %w238 = load double, double* %w
  store double %w238, double* %61
  call void @"V_BLUR@UF"(<2 x double>* %p, double* %61)
  %p239 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false236:                                         ; preds = %false228
  %return241 = call i64 @"eq@III"(i64 %type5, i64 27)
  %336 = icmp ne i64 %return241, 0
  br i1 %336, label %true242, label %false243

true242:                                          ; preds = %false236
  %ftype245 = load i64, i64* %ftype
  %337 = icmp ne i64 %ftype245, 0
  br i1 %337, label %true246, label %false247

false243:                                         ; preds = %false236
  %return262 = call i64 @"eq@III"(i64 %type5, i64 28)
  %338 = icmp ne i64 %return262, 0
  br i1 %338, label %true263, label %false264

true246:                                          ; preds = %true242
  %GMP249 = load %gemPrm, %gemPrm* %GMP
  %curl_c250 = extractvalue %gemPrm %GMP249, 13
  %idx251 = load i64, i64* %idx
  %return252 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curl_c250, i64 %idx251)
  br label %end248

false247:                                         ; preds = %true242
  %return253 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @107, i64 0, i64 0))
  br label %end248

end248:                                           ; preds = %false247, %true246
  %curl_c.0 = phi <2 x double> [ %return252, %true246 ], [ %return253, %false247 ]
  %_p254 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p254, <2 x double>* %62
  %w255 = load double, double* %w
  store double %w255, double* %63
  %return257 = call double @"getcomp@FUI"(<2 x double> %curl_c.0, i64 0)
  store double %return257, double* %64
  %return259 = call double @"getcomp@FUI"(<2 x double> %curl_c.0, i64 1)
  store double %return259, double* %65
  call void @"V_CURL@UUFFF"(<2 x double>* %p, <2 x double>* %62, double* %63, double* %64, double* %65)
  %p260 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true263:                                          ; preds = %false243
  %ftype266 = load i64, i64* %ftype
  %339 = icmp ne i64 %ftype266, 0
  br i1 %339, label %true267, label %false268

false264:                                         ; preds = %false243
  %return287 = call i64 @"eq@III"(i64 %type5, i64 29)
  %340 = icmp ne i64 %return287, 0
  br i1 %340, label %true288, label %false289

true267:                                          ; preds = %true263
  %GMP270 = load %gemPrm, %gemPrm* %GMP
  %ngon271 = extractvalue %gemPrm %GMP270, 42
  %idx272 = load i64, i64* %idx
  %return273 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %ngon271, i64 %idx272)
  br label %end269

false268:                                         ; preds = %true263
  %return274 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @108, i64 0, i64 0))
  br label %end269

end269:                                           ; preds = %false268, %true267
  %ngon.0 = phi <4 x double> [ %return273, %true267 ], [ %return274, %false268 ]
  %_p275 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p275, <2 x double>* %66
  %w276 = load double, double* %w
  store double %w276, double* %67
  %return278 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 0)
  store double %return278, double* %68
  %return280 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 1)
  store double %return280, double* %69
  %return282 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 2)
  store double %return282, double* %70
  %return284 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 3)
  store double %return284, double* %71
  call void @"V_NGON@UUFFFFF"(<2 x double>* %p, <2 x double>* %66, double* %67, double* %68, double* %69, double* %70, double* %71)
  %p285 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true288:                                          ; preds = %false264
  %ftype291 = load i64, i64* %ftype
  %341 = icmp ne i64 %ftype291, 0
  br i1 %341, label %true292, label %false293

false289:                                         ; preds = %false264
  %return304 = call i64 @"eq@III"(i64 %type5, i64 30)
  %342 = icmp ne i64 %return304, 0
  br i1 %342, label %true305, label %false306

true292:                                          ; preds = %true288
  %GMP295 = load %gemPrm, %gemPrm* %GMP
  %pdj_w = extractvalue %gemPrm %GMP295, 43
  %idx296 = load i64, i64* %idx
  %return297 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %pdj_w, i64 %idx296)
  br label %end294

false293:                                         ; preds = %true288
  %return298 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @109, i64 0, i64 0))
  br label %end294

end294:                                           ; preds = %false293, %true292
  %pp.0 = phi <4 x double> [ %return297, %true292 ], [ %return298, %false293 ]
  %_p299 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p299, <2 x double>* %72
  %w300 = load double, double* %w
  store double %w300, double* %73
  store <4 x double> %pp.0, <4 x double>* %74
  call void @"V_PDJ@UUFP"(<2 x double>* %p, <2 x double>* %72, double* %73, <4 x double>* %74)
  %p302 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true305:                                          ; preds = %false289
  %ftype308 = load i64, i64* %ftype
  %343 = icmp ne i64 %ftype308, 0
  br i1 %343, label %true309, label %false310

false306:                                         ; preds = %false289
  %return327 = call i64 @"eq@III"(i64 %type5, i64 31)
  %344 = icmp ne i64 %return327, 0
  br i1 %344, label %true328, label %false329

true309:                                          ; preds = %true305
  %GMP312 = load %gemPrm, %gemPrm* %GMP
  %blob313 = extractvalue %gemPrm %GMP312, 6
  %idx314 = load i64, i64* %idx
  %return315 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %blob313, i64 %idx314)
  br label %end311

false310:                                         ; preds = %true305
  %return316 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @110, i64 0, i64 0))
  br label %end311

end311:                                           ; preds = %false310, %true309
  %blob.0 = phi <3 x double> [ %return315, %true309 ], [ %return316, %false310 ]
  %_p317 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p317, <2 x double>* %75
  %w318 = load double, double* %w
  store double %w318, double* %76
  %return320 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 1)
  store double %return320, double* %77
  %return322 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 0)
  store double %return322, double* %78
  %return324 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 2)
  store double %return324, double* %79
  call void @"V_BLOB@UUFFFF"(<2 x double>* %p, <2 x double>* %75, double* %76, double* %77, double* %78, double* %79)
  %p325 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true328:                                          ; preds = %false306
  %ftype331 = load i64, i64* %ftype
  %345 = icmp ne i64 %ftype331, 0
  br i1 %345, label %true332, label %false333

false329:                                         ; preds = %false306
  %return348 = call i64 @"eq@III"(i64 %type5, i64 32)
  %346 = icmp ne i64 %return348, 0
  br i1 %346, label %true349, label %false350

true332:                                          ; preds = %true328
  %GMP335 = load %gemPrm, %gemPrm* %GMP
  %julian336 = extractvalue %gemPrm %GMP335, 32
  %idx337 = load i64, i64* %idx
  %return338 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %julian336, i64 %idx337)
  br label %end334

false333:                                         ; preds = %true328
  %return339 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @111, i64 0, i64 0))
  br label %end334

end334:                                           ; preds = %false333, %true332
  %julian.0 = phi <2 x double> [ %return338, %true332 ], [ %return339, %false333 ]
  %_p340 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p340, <2 x double>* %80
  %w341 = load double, double* %w
  store double %w341, double* %81
  %return343 = call double @"getcomp@FUI"(<2 x double> %julian.0, i64 0)
  store double %return343, double* %82
  %return345 = call double @"getcomp@FUI"(<2 x double> %julian.0, i64 1)
  store double %return345, double* %83
  call void @"V_JULIAN@UUFFF"(<2 x double>* %p, <2 x double>* %80, double* %81, double* %82, double* %83)
  %p346 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true349:                                          ; preds = %false329
  %ftype352 = load i64, i64* %ftype
  %347 = icmp ne i64 %ftype352, 0
  br i1 %347, label %true353, label %false354

false350:                                         ; preds = %false329
  %return369 = call i64 @"eq@III"(i64 %type5, i64 33)
  %348 = icmp ne i64 %return369, 0
  br i1 %348, label %true370, label %false371

true353:                                          ; preds = %true349
  %GMP356 = load %gemPrm, %gemPrm* %GMP
  %juliascope357 = extractvalue %gemPrm %GMP356, 33
  %idx358 = load i64, i64* %idx
  %return359 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %juliascope357, i64 %idx358)
  br label %end355

false354:                                         ; preds = %true349
  %return360 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @112, i64 0, i64 0))
  br label %end355

end355:                                           ; preds = %false354, %true353
  %juliascope.0 = phi <2 x double> [ %return359, %true353 ], [ %return360, %false354 ]
  %_p361 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p361, <2 x double>* %84
  %w362 = load double, double* %w
  store double %w362, double* %85
  %return364 = call double @"getcomp@FUI"(<2 x double> %juliascope.0, i64 0)
  store double %return364, double* %86
  %return366 = call double @"getcomp@FUI"(<2 x double> %juliascope.0, i64 1)
  store double %return366, double* %87
  call void @"V_JULIASCOPE@UUFFF"(<2 x double>* %p, <2 x double>* %84, double* %85, double* %86, double* %87)
  %p367 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true370:                                          ; preds = %false350
  %w373 = load double, double* %w
  store double %w373, double* %88
  call void @"V_GAUSSIAN@UF"(<2 x double>* %p, double* %88)
  %p374 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false371:                                         ; preds = %false350
  %return376 = call i64 @"eq@III"(i64 %type5, i64 34)
  %349 = icmp ne i64 %return376, 0
  br i1 %349, label %true377, label %end12

true377:                                          ; preds = %false371
  %ftype379 = load i64, i64* %ftype
  %350 = icmp ne i64 %ftype379, 0
  br i1 %350, label %true380, label %false381

true380:                                          ; preds = %true377
  %GMP383 = load %gemPrm, %gemPrm* %GMP
  %fan2384 = extractvalue %gemPrm %GMP383, 15
  %idx385 = load i64, i64* %idx
  %return386 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %fan2384, i64 %idx385)
  br label %end382

false381:                                         ; preds = %true377
  %return387 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @113, i64 0, i64 0))
  br label %end382

end382:                                           ; preds = %false381, %true380
  %fan2.0 = phi <2 x double> [ %return386, %true380 ], [ %return387, %false381 ]
  %_p388 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p388, <2 x double>* %89
  %w389 = load double, double* %w
  store double %w389, double* %90
  store <2 x double> %fan2.0, <2 x double>* %91
  call void @"V_FAN2@UUFU"(<2 x double>* %p, <2 x double>* %89, double* %90, <2 x double>* %91)
  %p391 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true394:                                          ; preds = %false11
  %return398 = call i64 @"lt@III"(i64 %type5, i64 50)
  %351 = icmp ne i64 %return398, 0
  br i1 %351, label %true399, label %false400

false395:                                         ; preds = %false11
  %return912 = call i64 @"lt@III"(i64 %type5, i64 102)
  %352 = icmp ne i64 %return912, 0
  br i1 %352, label %true913, label %end12

true399:                                          ; preds = %true394
  %return403 = call i64 @"eq@III"(i64 %type5, i64 35)
  %353 = icmp ne i64 %return403, 0
  br i1 %353, label %true404, label %false405

false400:                                         ; preds = %true394
  %return623 = call i64 @"eq@III"(i64 %type5, i64 50)
  %354 = icmp ne i64 %return623, 0
  br i1 %354, label %true624, label %false625

true404:                                          ; preds = %true399
  %ftype407 = load i64, i64* %ftype
  %355 = icmp ne i64 %ftype407, 0
  br i1 %355, label %true408, label %false409

false405:                                         ; preds = %true399
  %return420 = call i64 @"eq@III"(i64 %type5, i64 36)
  %356 = icmp ne i64 %return420, 0
  br i1 %356, label %true421, label %false422

true408:                                          ; preds = %true404
  %GMP411 = load %gemPrm, %gemPrm* %GMP
  %rings2_val = extractvalue %gemPrm %GMP411, 0
  %idx412 = load i64, i64* %idx
  %return413 = call double @"getcomp@F[FI"(double* %rings2_val, i64 %idx412)
  br label %end410

false409:                                         ; preds = %true404
  %return414 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @114, i64 0, i64 0))
  br label %end410

end410:                                           ; preds = %false409, %true408
  %rings2val.0 = phi double [ %return413, %true408 ], [ %return414, %false409 ]
  %_p415 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p415, <2 x double>* %92
  %w416 = load double, double* %w
  store double %w416, double* %93
  store double %rings2val.0, double* %94
  call void @"V_RINGS2@UUFF"(<2 x double>* %p, <2 x double>* %92, double* %93, double* %94)
  %p418 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true421:                                          ; preds = %false405
  %ftype424 = load i64, i64* %ftype
  %357 = icmp ne i64 %ftype424, 0
  br i1 %357, label %true425, label %false426

false422:                                         ; preds = %false405
  %return437 = call i64 @"eq@III"(i64 %type5, i64 37)
  %358 = icmp ne i64 %return437, 0
  br i1 %358, label %true438, label %false439

true425:                                          ; preds = %true421
  %GMP428 = load %gemPrm, %gemPrm* %GMP
  %rectangles = extractvalue %gemPrm %GMP428, 16
  %idx429 = load i64, i64* %idx
  %return430 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %rectangles, i64 %idx429)
  br label %end427

false426:                                         ; preds = %true421
  %return431 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @115, i64 0, i64 0))
  br label %end427

end427:                                           ; preds = %false426, %true425
  %rect.0 = phi <2 x double> [ %return430, %true425 ], [ %return431, %false426 ]
  %_p432 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p432, <2 x double>* %95
  %w433 = load double, double* %w
  store double %w433, double* %96
  store <2 x double> %rect.0, <2 x double>* %97
  call void @"V_RECTANGLES@UUFU"(<2 x double>* %p, <2 x double>* %95, double* %96, <2 x double>* %97)
  %p435 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true438:                                          ; preds = %false422
  %ftype441 = load i64, i64* %ftype
  %359 = icmp ne i64 %ftype441, 0
  br i1 %359, label %true442, label %false443

false439:                                         ; preds = %false422
  %return458 = call i64 @"eq@III"(i64 %type5, i64 38)
  %360 = icmp ne i64 %return458, 0
  br i1 %360, label %true459, label %false460

true442:                                          ; preds = %true438
  %GMP445 = load %gemPrm, %gemPrm* %GMP
  %radialblur446 = extractvalue %gemPrm %GMP445, 34
  %idx447 = load i64, i64* %idx
  %return448 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %radialblur446, i64 %idx447)
  br label %end444

false443:                                         ; preds = %true438
  %return449 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @116, i64 0, i64 0))
  br label %end444

end444:                                           ; preds = %false443, %true442
  %radialblur.0 = phi <2 x double> [ %return448, %true442 ], [ %return449, %false443 ]
  %_p450 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p450, <2 x double>* %98
  %w451 = load double, double* %w
  store double %w451, double* %99
  %return453 = call double @"getcomp@FUI"(<2 x double> %radialblur.0, i64 0)
  store double %return453, double* %100
  %return455 = call double @"getcomp@FUI"(<2 x double> %radialblur.0, i64 1)
  store double %return455, double* %101
  call void @"V_RADIALBLUR@UUFFF"(<2 x double>* %p, <2 x double>* %98, double* %99, double* %100, double* %101)
  %p456 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true459:                                          ; preds = %false439
  %ftype462 = load i64, i64* %ftype
  %361 = icmp ne i64 %ftype462, 0
  br i1 %361, label %true463, label %false464

false460:                                         ; preds = %false439
  %return480 = call i64 @"eq@III"(i64 %type5, i64 39)
  %362 = icmp ne i64 %return480, 0
  br i1 %362, label %true481, label %false482

true463:                                          ; preds = %true459
  %GMP466 = load %gemPrm, %gemPrm* %GMP
  %pie467 = extractvalue %gemPrm %GMP466, 7
  %idx468 = load i64, i64* %idx
  %return469 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %pie467, i64 %idx468)
  br label %end465

false464:                                         ; preds = %true459
  %return470 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @117, i64 0, i64 0))
  br label %end465

end465:                                           ; preds = %false464, %true463
  %pie.0 = phi <3 x double> [ %return469, %true463 ], [ %return470, %false464 ]
  %w471 = load double, double* %w
  store double %w471, double* %102
  %return473 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 0)
  store double %return473, double* %103
  %return475 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 1)
  store double %return475, double* %104
  %return477 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 2)
  store double %return477, double* %105
  call void @"V_PIE@UFFFF"(<2 x double>* %p, double* %102, double* %103, double* %104, double* %105)
  %p478 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true481:                                          ; preds = %false460
  %_p484 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p484, <2 x double>* %106
  %w485 = load double, double* %w
  store double %w485, double* %107
  call void @"V_ARCH@UUF"(<2 x double>* %p, <2 x double>* %106, double* %107)
  %p486 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false482:                                         ; preds = %false460
  %return488 = call i64 @"eq@III"(i64 %type5, i64 40)
  %363 = icmp ne i64 %return488, 0
  br i1 %363, label %true489, label %false490

true489:                                          ; preds = %false482
  %_p492 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p492, <2 x double>* %108
  %w493 = load double, double* %w
  store double %w493, double* %109
  call void @"V_TANGENT@UUF"(<2 x double>* %p, <2 x double>* %108, double* %109)
  %p494 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false490:                                         ; preds = %false482
  %return496 = call i64 @"eq@III"(i64 %type5, i64 41)
  %364 = icmp ne i64 %return496, 0
  br i1 %364, label %true497, label %false498

true497:                                          ; preds = %false490
  %w500 = load double, double* %w
  store double %w500, double* %111
  call void @"V_SQUARE@UUF"(<2 x double>* %p, <2 x double>* %110, double* %111)
  %p501 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false498:                                         ; preds = %false490
  %return503 = call i64 @"eq@III"(i64 %type5, i64 42)
  %365 = icmp ne i64 %return503, 0
  br i1 %365, label %true504, label %false505

true504:                                          ; preds = %false498
  %_p507 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p507, <2 x double>* %112
  %w508 = load double, double* %w
  store double %w508, double* %113
  call void @"V_RAYS@UUF"(<2 x double>* %p, <2 x double>* %112, double* %113)
  %p509 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false505:                                         ; preds = %false498
  %return511 = call i64 @"eq@III"(i64 %type5, i64 43)
  %366 = icmp ne i64 %return511, 0
  br i1 %366, label %true512, label %false513

true512:                                          ; preds = %false505
  %_p515 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p515, <2 x double>* %114
  %w516 = load double, double* %w
  store double %w516, double* %115
  call void @"V_BLADE@UUF"(<2 x double>* %p, <2 x double>* %114, double* %115)
  %p517 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false513:                                         ; preds = %false505
  %return519 = call i64 @"eq@III"(i64 %type5, i64 44)
  %367 = icmp ne i64 %return519, 0
  br i1 %367, label %true520, label %false521

true520:                                          ; preds = %false513
  %_p523 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p523, <2 x double>* %116
  %w524 = load double, double* %w
  store double %w524, double* %117
  call void @"V_SECANT2@UUF"(<2 x double>* %p, <2 x double>* %116, double* %117)
  %p525 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false521:                                         ; preds = %false513
  %return527 = call i64 @"eq@III"(i64 %type5, i64 45)
  %368 = icmp ne i64 %return527, 0
  br i1 %368, label %true528, label %false529

true528:                                          ; preds = %false521
  %_p531 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p531, <2 x double>* %118
  %w532 = load double, double* %w
  store double %w532, double* %119
  call void @"V_TWINTRIAN@UUF"(<2 x double>* %p, <2 x double>* %118, double* %119)
  %p533 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false529:                                         ; preds = %false521
  %return535 = call i64 @"eq@III"(i64 %type5, i64 46)
  %369 = icmp ne i64 %return535, 0
  br i1 %369, label %true536, label %false537

true536:                                          ; preds = %false529
  %_p539 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p539, <2 x double>* %120
  %w540 = load double, double* %w
  store double %w540, double* %121
  call void @"V_CROSS@UUF"(<2 x double>* %p, <2 x double>* %120, double* %121)
  %p541 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false537:                                         ; preds = %false529
  %return543 = call i64 @"eq@III"(i64 %type5, i64 47)
  %370 = icmp ne i64 %return543, 0
  br i1 %370, label %true544, label %false545

true544:                                          ; preds = %false537
  %ftype547 = load i64, i64* %ftype
  %371 = icmp ne i64 %ftype547, 0
  br i1 %371, label %true548, label %false549

false545:                                         ; preds = %false537
  %return570 = call i64 @"eq@III"(i64 %type5, i64 48)
  %372 = icmp ne i64 %return570, 0
  br i1 %372, label %true571, label %false572

true548:                                          ; preds = %true544
  %GMP551 = load %gemPrm, %gemPrm* %GMP
  %idx553 = load i64, i64* %idx
  %disc2_precalc556 = extractvalue %gemPrm %GMP551, 51
  %return558 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %disc2_precalc556, i64 %idx553)
  br label %end550

false549:                                         ; preds = %true544
  br label %end550

end550:                                           ; preds = %false549, %true548
  %disc2_precalc.0 = phi <3 x double> [ %return558, %true548 ], [ zeroinitializer, %false549 ]
  %_p560 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p560, <2 x double>* %122
  %w561 = load double, double* %w
  store double %w561, double* %123
  %return563 = call double @"getcomp@FVI"(<3 x double> %disc2_precalc.0, i64 0)
  store double %return563, double* %126
  %return565 = call double @"getcomp@FVI"(<3 x double> %disc2_precalc.0, i64 1)
  store double %return565, double* %127
  %return567 = call double @"getcomp@FVI"(<3 x double> %disc2_precalc.0, i64 2)
  store double %return567, double* %128
  call void @"V_DISC2@UUFFFFFF"(<2 x double>* %p, <2 x double>* %122, double* %123, double* %124, double* %125, double* %126, double* %127, double* %128)
  %p568 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true571:                                          ; preds = %false545
  %ftype574 = load i64, i64* %ftype
  %373 = icmp ne i64 %ftype574, 0
  br i1 %373, label %true575, label %false576

false572:                                         ; preds = %false545
  %return603 = call i64 @"eq@III"(i64 %type5, i64 49)
  %374 = icmp ne i64 %return603, 0
  br i1 %374, label %true604, label %end12

true575:                                          ; preds = %true571
  %GMP578 = load %gemPrm, %gemPrm* %GMP
  %supershape = extractvalue %gemPrm %GMP578, 8
  %idx579 = load i64, i64* %idx
  %return580 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %supershape, i64 %idx579)
  %supershape_n = extractvalue %gemPrm %GMP578, 9
  %return583 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %supershape_n, i64 %idx579)
  %supershape_precalc585 = extractvalue %gemPrm %GMP578, 52
  %return587 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %supershape_precalc585, i64 %idx579)
  br label %end577

false576:                                         ; preds = %true571
  %return588 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @118, i64 0, i64 0))
  %return589 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @119, i64 0, i64 0))
  br label %end577

end577:                                           ; preds = %false576, %true575
  %ss.0 = phi <3 x double> [ %return580, %true575 ], [ %return588, %false576 ]
  %ss_n.0 = phi <3 x double> [ %return583, %true575 ], [ %return589, %false576 ]
  %supershape_precalc.0 = phi <2 x double> [ %return587, %true575 ], [ zeroinitializer, %false576 ]
  %_p590 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p590, <2 x double>* %129
  %w591 = load double, double* %w
  store double %w591, double* %130
  %return593 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 1)
  store double %return593, double* %131
  %return595 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 2)
  store double %return595, double* %133
  %return597 = call double @"getcomp@FUI"(<2 x double> %supershape_precalc.0, i64 0)
  store double %return597, double* %134
  %return599 = call double @"getcomp@FUI"(<2 x double> %supershape_precalc.0, i64 1)
  store double %return599, double* %135
  store <3 x double> %ss_n.0, <3 x double>* %136
  call void @"V_SUPERSHAPE@UUFFFFFFV"(<2 x double>* %p, <2 x double>* %129, double* %130, double* %131, double* %132, double* %133, double* %134, double* %135, <3 x double>* %136)
  %p601 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true604:                                          ; preds = %false572
  %ftype606 = load i64, i64* %ftype
  %375 = icmp ne i64 %ftype606, 0
  br i1 %375, label %true607, label %false608

true607:                                          ; preds = %true604
  %GMP610 = load %gemPrm, %gemPrm* %GMP
  %flower611 = extractvalue %gemPrm %GMP610, 36
  %idx612 = load i64, i64* %idx
  %return613 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %flower611, i64 %idx612)
  br label %end609

false608:                                         ; preds = %true604
  %return614 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @120, i64 0, i64 0))
  br label %end609

end609:                                           ; preds = %false608, %true607
  %flower.0 = phi <2 x double> [ %return613, %true607 ], [ %return614, %false608 ]
  %_p615 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p615, <2 x double>* %137
  %w616 = load double, double* %w
  store double %w616, double* %138
  %return618 = call double @"getcomp@FUI"(<2 x double> %flower.0, i64 0)
  store double %return618, double* %139
  %return620 = call double @"getcomp@FUI"(<2 x double> %flower.0, i64 1)
  store double %return620, double* %140
  call void @"V_FLOWER@UUFFF"(<2 x double>* %p, <2 x double>* %137, double* %138, double* %139, double* %140)
  %p621 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true624:                                          ; preds = %false400
  %ftype627 = load i64, i64* %ftype
  %376 = icmp ne i64 %ftype627, 0
  br i1 %376, label %true628, label %false629

false625:                                         ; preds = %false400
  %return644 = call i64 @"eq@III"(i64 %type5, i64 51)
  %377 = icmp ne i64 %return644, 0
  br i1 %377, label %true645, label %false646

true628:                                          ; preds = %true624
  %GMP631 = load %gemPrm, %gemPrm* %GMP
  %conic632 = extractvalue %gemPrm %GMP631, 37
  %idx633 = load i64, i64* %idx
  %return634 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %conic632, i64 %idx633)
  br label %end630

false629:                                         ; preds = %true624
  %return635 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @121, i64 0, i64 0))
  br label %end630

end630:                                           ; preds = %false629, %true628
  %conic.0 = phi <2 x double> [ %return634, %true628 ], [ %return635, %false629 ]
  %_p636 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p636, <2 x double>* %141
  %w637 = load double, double* %w
  store double %w637, double* %142
  %return639 = call double @"getcomp@FUI"(<2 x double> %conic.0, i64 0)
  store double %return639, double* %143
  %return641 = call double @"getcomp@FUI"(<2 x double> %conic.0, i64 1)
  store double %return641, double* %144
  call void @"V_CONIC@UUFFF"(<2 x double>* %p, <2 x double>* %141, double* %142, double* %143, double* %144)
  %p642 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true645:                                          ; preds = %false625
  %ftype648 = load i64, i64* %ftype
  %378 = icmp ne i64 %ftype648, 0
  br i1 %378, label %true649, label %false650

false646:                                         ; preds = %false625
  %return665 = call i64 @"eq@III"(i64 %type5, i64 52)
  %379 = icmp ne i64 %return665, 0
  br i1 %379, label %true666, label %false667

true649:                                          ; preds = %true645
  %GMP652 = load %gemPrm, %gemPrm* %GMP
  %parabola653 = extractvalue %gemPrm %GMP652, 14
  %idx654 = load i64, i64* %idx
  %return655 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %parabola653, i64 %idx654)
  br label %end651

false650:                                         ; preds = %true645
  %return656 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @122, i64 0, i64 0))
  br label %end651

end651:                                           ; preds = %false650, %true649
  %parabola.0 = phi <2 x double> [ %return655, %true649 ], [ %return656, %false650 ]
  %_p657 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p657, <2 x double>* %145
  %w658 = load double, double* %w
  store double %w658, double* %146
  %return660 = call double @"getcomp@FUI"(<2 x double> %parabola.0, i64 0)
  store double %return660, double* %147
  %return662 = call double @"getcomp@FUI"(<2 x double> %parabola.0, i64 1)
  store double %return662, double* %148
  call void @"V_PARABOLA@UUFFF"(<2 x double>* %p, <2 x double>* %145, double* %146, double* %147, double* %148)
  %p663 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true666:                                          ; preds = %false646
  %ftype669 = load i64, i64* %ftype
  %380 = icmp ne i64 %ftype669, 0
  br i1 %380, label %true670, label %false671

false667:                                         ; preds = %false646
  %return683 = call i64 @"eq@III"(i64 %type5, i64 53)
  %381 = icmp ne i64 %return683, 0
  br i1 %381, label %true684, label %false685

true670:                                          ; preds = %true666
  %GMP673 = load %gemPrm, %gemPrm* %GMP
  %bent2674 = extractvalue %gemPrm %GMP673, 17
  %idx675 = load i64, i64* %idx
  %return676 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %bent2674, i64 %idx675)
  br label %end672

false671:                                         ; preds = %true666
  %return677 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @123, i64 0, i64 0))
  br label %end672

end672:                                           ; preds = %false671, %true670
  %bent2.0 = phi <2 x double> [ %return676, %true670 ], [ %return677, %false671 ]
  %_p678 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p678, <2 x double>* %149
  %w679 = load double, double* %w
  store double %w679, double* %150
  store <2 x double> %bent2.0, <2 x double>* %151
  call void @"V_BENT2@UUFU"(<2 x double>* %p, <2 x double>* %149, double* %150, <2 x double>* %151)
  %p681 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true684:                                          ; preds = %false667
  %ftype687 = load i64, i64* %ftype
  %382 = icmp ne i64 %ftype687, 0
  br i1 %382, label %true688, label %false689

false685:                                         ; preds = %false667
  %return700 = call i64 @"eq@III"(i64 %type5, i64 54)
  %383 = icmp ne i64 %return700, 0
  br i1 %383, label %true701, label %false702

true688:                                          ; preds = %true684
  %GMP691 = load %gemPrm, %gemPrm* %GMP
  %bipolar_shift = extractvalue %gemPrm %GMP691, 1
  %idx692 = load i64, i64* %idx
  %return693 = call double @"getcomp@F[FI"(double* %bipolar_shift, i64 %idx692)
  br label %end690

false689:                                         ; preds = %true684
  %return694 = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @124, i64 0, i64 0))
  br label %end690

end690:                                           ; preds = %false689, %true688
  %shift.0 = phi double [ %return693, %true688 ], [ %return694, %false689 ]
  %_p695 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p695, <2 x double>* %152
  %w696 = load double, double* %w
  store double %w696, double* %153
  store double %shift.0, double* %154
  call void @"V_BIPOLAR@UUFF"(<2 x double>* %p, <2 x double>* %152, double* %153, double* %154)
  %p698 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true701:                                          ; preds = %false685
  %_p704 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p704, <2 x double>* %155
  %w705 = load double, double* %w
  store double %w705, double* %156
  call void @"V_BOARDERS@UUF"(<2 x double>* %p, <2 x double>* %155, double* %156)
  %p706 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false702:                                         ; preds = %false685
  %return708 = call i64 @"eq@III"(i64 %type5, i64 55)
  %384 = icmp ne i64 %return708, 0
  br i1 %384, label %true709, label %false710

true709:                                          ; preds = %false702
  %_p712 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p712, <2 x double>* %157
  %w713 = load double, double* %w
  store double %w713, double* %158
  call void @"V_BUTTERFLY@UUF"(<2 x double>* %p, <2 x double>* %157, double* %158)
  %p714 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false710:                                         ; preds = %false702
  %return716 = call i64 @"eq@III"(i64 %type5, i64 56)
  %385 = icmp ne i64 %return716, 0
  br i1 %385, label %true717, label %false718

true717:                                          ; preds = %false710
  %ftype720 = load i64, i64* %ftype
  %386 = icmp ne i64 %ftype720, 0
  br i1 %386, label %true721, label %false722

false718:                                         ; preds = %false710
  %return732 = call i64 @"eq@III"(i64 %type5, i64 57)
  %387 = icmp ne i64 %return732, 0
  br i1 %387, label %true733, label %false734

true721:                                          ; preds = %true717
  %GMP724 = load %gemPrm, %gemPrm* %GMP
  %cell_size = extractvalue %gemPrm %GMP724, 2
  %idx725 = load i64, i64* %idx
  %return726 = call double @"getcomp@F[FI"(double* %cell_size, i64 %idx725)
  br label %end723

false722:                                         ; preds = %true717
  %return727 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @125, i64 0, i64 0))
  br label %end723

end723:                                           ; preds = %false722, %true721
  %size.0 = phi double [ %return726, %true721 ], [ %return727, %false722 ]
  %_p728 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p728, <2 x double>* %159
  store double %size.0, double* %161
  call void @"V_CELL@UUFF"(<2 x double>* %p, <2 x double>* %159, double* %160, double* %161)
  %p730 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true733:                                          ; preds = %false718
  %ftype736 = load i64, i64* %ftype
  %388 = icmp ne i64 %ftype736, 0
  br i1 %388, label %true737, label %false738

false734:                                         ; preds = %false718
  %return755 = call i64 @"eq@III"(i64 %type5, i64 58)
  %389 = icmp ne i64 %return755, 0
  br i1 %389, label %true756, label %false757

true737:                                          ; preds = %true733
  %GMP740 = load %gemPrm, %gemPrm* %GMP
  %cpow741 = extractvalue %gemPrm %GMP740, 10
  %idx742 = load i64, i64* %idx
  %return743 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %cpow741, i64 %idx742)
  br label %end739

false738:                                         ; preds = %true733
  %return744 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @126, i64 0, i64 0))
  br label %end739

end739:                                           ; preds = %false738, %true737
  %cpow.0 = phi <3 x double> [ %return743, %true737 ], [ %return744, %false738 ]
  %_p745 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p745, <2 x double>* %162
  %w746 = load double, double* %w
  store double %w746, double* %163
  %return748 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 0)
  store double %return748, double* %164
  %return750 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 1)
  store double %return750, double* %165
  %return752 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 2)
  store double %return752, double* %166
  call void @"V_CPOW@UUFFFF"(<2 x double>* %p, <2 x double>* %162, double* %163, double* %164, double* %165, double* %166)
  %p753 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true756:                                          ; preds = %false734
  %_p759 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p759, <2 x double>* %167
  %w760 = load double, double* %w
  store double %w760, double* %168
  call void @"V_EDISC@UUF"(<2 x double>* %p, <2 x double>* %167, double* %168)
  %p761 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false757:                                         ; preds = %false734
  %return763 = call i64 @"eq@III"(i64 %type5, i64 59)
  %390 = icmp ne i64 %return763, 0
  br i1 %390, label %true764, label %false765

true764:                                          ; preds = %false757
  %_p767 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p767, <2 x double>* %169
  %w768 = load double, double* %w
  store double %w768, double* %170
  call void @"V_ELLIPTIC@UUF"(<2 x double>* %p, <2 x double>* %169, double* %170)
  %p769 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false765:                                         ; preds = %false757
  %return771 = call i64 @"eq@III"(i64 %type5, i64 60)
  %391 = icmp ne i64 %return771, 0
  br i1 %391, label %true772, label %false773

true772:                                          ; preds = %false765
  %_p775 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p775, <2 x double>* %171
  %w776 = load double, double* %w
  store double %w776, double* %172
  call void @"V_NOISE@UUF"(<2 x double>* %p, <2 x double>* %171, double* %172)
  %p777 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false773:                                         ; preds = %false765
  %return779 = call i64 @"eq@III"(i64 %type5, i64 61)
  %392 = icmp ne i64 %return779, 0
  br i1 %392, label %true780, label %false781

true780:                                          ; preds = %false773
  %ftype783 = load i64, i64* %ftype
  %393 = icmp ne i64 %ftype783, 0
  br i1 %393, label %true784, label %false785

false781:                                         ; preds = %false773
  %return796 = call i64 @"eq@III"(i64 %type5, i64 62)
  %394 = icmp ne i64 %return796, 0
  br i1 %394, label %true797, label %false798

true784:                                          ; preds = %true780
  %GMP787 = load %gemPrm, %gemPrm* %GMP
  %escher_beta = extractvalue %gemPrm %GMP787, 3
  %idx788 = load i64, i64* %idx
  %return789 = call double @"getcomp@F[FI"(double* %escher_beta, i64 %idx788)
  br label %end786

false785:                                         ; preds = %true780
  %return790 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @127, i64 0, i64 0))
  br label %end786

end786:                                           ; preds = %false785, %true784
  %beta.0 = phi double [ %return789, %true784 ], [ %return790, %false785 ]
  %_p791 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p791, <2 x double>* %173
  %w792 = load double, double* %w
  store double %w792, double* %174
  store double %beta.0, double* %175
  call void @"V_ESCHER@UUFF"(<2 x double>* %p, <2 x double>* %173, double* %174, double* %175)
  %p794 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true797:                                          ; preds = %false781
  %_p800 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p800, <2 x double>* %176
  %w801 = load double, double* %w
  store double %w801, double* %177
  call void @"V_FOCI@UUF"(<2 x double>* %p, <2 x double>* %176, double* %177)
  %p802 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false798:                                         ; preds = %false781
  %return804 = call i64 @"eq@III"(i64 %type5, i64 63)
  %395 = icmp ne i64 %return804, 0
  br i1 %395, label %true805, label %false806

true805:                                          ; preds = %false798
  %ftype808 = load i64, i64* %ftype
  %396 = icmp ne i64 %ftype808, 0
  br i1 %396, label %true809, label %false810

false806:                                         ; preds = %false798
  %return833 = call i64 @"eq@III"(i64 %type5, i64 64)
  %397 = icmp ne i64 %return833, 0
  br i1 %397, label %true834, label %false835

true809:                                          ; preds = %true805
  %GMP812 = load %gemPrm, %gemPrm* %GMP
  %lazysusanxyz813 = extractvalue %gemPrm %GMP812, 18
  %idx814 = load i64, i64* %idx
  %return815 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %lazysusanxyz813, i64 %idx814)
  %lazysusan817 = extractvalue %gemPrm %GMP812, 11
  %return819 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %lazysusan817, i64 %idx814)
  br label %end811

false810:                                         ; preds = %true805
  %return820 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @128, i64 0, i64 0))
  %return821 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @129, i64 0, i64 0))
  br label %end811

end811:                                           ; preds = %false810, %true809
  %lazysusan.0 = phi <3 x double> [ %return819, %true809 ], [ %return821, %false810 ]
  %lazysusanxyz.0 = phi <2 x double> [ %return815, %true809 ], [ %return820, %false810 ]
  %_p822 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p822, <2 x double>* %178
  %w823 = load double, double* %w
  store double %w823, double* %179
  %return825 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 0)
  store double %return825, double* %180
  %return827 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 1)
  store double %return827, double* %181
  %return829 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 2)
  store double %return829, double* %182
  store <2 x double> %lazysusanxyz.0, <2 x double>* %183
  call void @"V_LAZYSUSAN@UUFFFFU"(<2 x double>* %p, <2 x double>* %178, double* %179, double* %180, double* %181, double* %182, <2 x double>* %183)
  %p831 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true834:                                          ; preds = %false806
  %_p837 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p837, <2 x double>* %184
  %w838 = load double, double* %w
  store double %w838, double* %185
  call void @"V_LOONIE@UUF"(<2 x double>* %p, <2 x double>* %184, double* %185)
  %p839 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false835:                                         ; preds = %false806
  %return841 = call i64 @"eq@III"(i64 %type5, i64 66)
  %398 = icmp ne i64 %return841, 0
  br i1 %398, label %true842, label %false843

true842:                                          ; preds = %false835
  %ftype845 = load i64, i64* %ftype
  %399 = icmp ne i64 %ftype845, 0
  br i1 %399, label %true846, label %false847

false843:                                         ; preds = %false835
  %return858 = call i64 @"eq@III"(i64 %type5, i64 67)
  %400 = icmp ne i64 %return858, 0
  br i1 %400, label %true859, label %false860

true846:                                          ; preds = %true842
  %GMP849 = load %gemPrm, %gemPrm* %GMP
  %modulus = extractvalue %gemPrm %GMP849, 19
  %idx850 = load i64, i64* %idx
  %return851 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %modulus, i64 %idx850)
  br label %end848

false847:                                         ; preds = %true842
  %return852 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @130, i64 0, i64 0))
  br label %end848

end848:                                           ; preds = %false847, %true846
  %mod.0 = phi <2 x double> [ %return851, %true846 ], [ %return852, %false847 ]
  %_p853 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p853, <2 x double>* %186
  %w854 = load double, double* %w
  store double %w854, double* %187
  store <2 x double> %mod.0, <2 x double>* %188
  call void @"V_MODULUS@UUFU"(<2 x double>* %p, <2 x double>* %186, double* %187, <2 x double>* %188)
  %p856 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true859:                                          ; preds = %false843
  %ftype862 = load i64, i64* %ftype
  %401 = icmp ne i64 %ftype862, 0
  br i1 %401, label %true863, label %false864

false860:                                         ; preds = %false843
  %return883 = call i64 @"eq@III"(i64 %type5, i64 68)
  %402 = icmp ne i64 %return883, 0
  br i1 %402, label %true884, label %false885

true863:                                          ; preds = %true859
  %GMP866 = load %gemPrm, %gemPrm* %GMP
  %oscope867 = extractvalue %gemPrm %GMP866, 44
  %idx868 = load i64, i64* %idx
  %return869 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %oscope867, i64 %idx868)
  br label %end865

false864:                                         ; preds = %true859
  %return870 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @131, i64 0, i64 0))
  br label %end865

end865:                                           ; preds = %false864, %true863
  %oscope.0 = phi <4 x double> [ %return869, %true863 ], [ %return870, %false864 ]
  %_p871 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p871, <2 x double>* %189
  %w872 = load double, double* %w
  store double %w872, double* %190
  %return874 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 0)
  store double %return874, double* %191
  %return876 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 1)
  store double %return876, double* %192
  %return878 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 2)
  store double %return878, double* %193
  %return880 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 3)
  store double %return880, double* %194
  call void @"V_OSCOPE@UUFFFFF"(<2 x double>* %p, <2 x double>* %189, double* %190, double* %191, double* %192, double* %193, double* %194)
  %p881 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true884:                                          ; preds = %false860
  %_p887 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p887, <2 x double>* %195
  %w888 = load double, double* %w
  store double %w888, double* %196
  call void @"V_POLAR2@UUF"(<2 x double>* %p, <2 x double>* %195, double* %196)
  %p889 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false885:                                         ; preds = %false860
  %return891 = call i64 @"eq@III"(i64 %type5, i64 69)
  %403 = icmp ne i64 %return891, 0
  br i1 %403, label %true892, label %end12

true892:                                          ; preds = %false885
  %ftype894 = load i64, i64* %ftype
  %404 = icmp ne i64 %ftype894, 0
  br i1 %404, label %true895, label %false896

true895:                                          ; preds = %true892
  %GMP898 = load %gemPrm, %gemPrm* %GMP
  %popcorn2 = extractvalue %gemPrm %GMP898, 20
  %idx899 = load i64, i64* %idx
  %return900 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %popcorn2, i64 %idx899)
  %popcorn2_c = extractvalue %gemPrm %GMP898, 4
  %return903 = call double @"getcomp@F[FI"(double* %popcorn2_c, i64 %idx899)
  br label %end897

false896:                                         ; preds = %true892
  %return904 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @132, i64 0, i64 0))
  %return905 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @133, i64 0, i64 0))
  br label %end897

end897:                                           ; preds = %false896, %true895
  %pop2c.0 = phi double [ %return903, %true895 ], [ %return905, %false896 ]
  %pop2.0 = phi <2 x double> [ %return900, %true895 ], [ %return904, %false896 ]
  %_p906 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p906, <2 x double>* %197
  %w907 = load double, double* %w
  store double %w907, double* %198
  store double %pop2c.0, double* %199
  store <2 x double> %pop2.0, <2 x double>* %200
  call void @"V_POPCORN2@UUFFU"(<2 x double>* %p, <2 x double>* %197, double* %198, double* %199, <2 x double>* %200)
  %p910 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true913:                                          ; preds = %false395
  %return916 = call i64 @"lt@III"(i64 %type5, i64 86)
  %405 = icmp ne i64 %return916, 0
  br i1 %405, label %true917, label %false918

true917:                                          ; preds = %true913
  %return921 = call i64 @"eq@III"(i64 %type5, i64 70)
  %406 = icmp ne i64 %return921, 0
  br i1 %406, label %true922, label %false923

false918:                                         ; preds = %true913
  %return1173 = call i64 @"eq@III"(i64 %type5, i64 86)
  %407 = icmp ne i64 %return1173, 0
  br i1 %407, label %true1174, label %false1175

true922:                                          ; preds = %true917
  %_p925 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p925, <2 x double>* %201
  %w926 = load double, double* %w
  store double %w926, double* %202
  call void @"V_SCRY@UUF"(<2 x double>* %p, <2 x double>* %201, double* %202)
  %p927 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false923:                                         ; preds = %true917
  %return929 = call i64 @"eq@III"(i64 %type5, i64 71)
  %408 = icmp ne i64 %return929, 0
  br i1 %408, label %true930, label %false931

true930:                                          ; preds = %false923
  %ftype933 = load i64, i64* %ftype
  %409 = icmp ne i64 %ftype933, 0
  br i1 %409, label %true934, label %false935

false931:                                         ; preds = %false923
  %return951 = call i64 @"eq@III"(i64 %type5, i64 72)
  %410 = icmp ne i64 %return951, 0
  br i1 %410, label %true952, label %false953

true934:                                          ; preds = %true930
  %GMP937 = load %gemPrm, %gemPrm* %GMP
  %separation = extractvalue %gemPrm %GMP937, 21
  %idx938 = load i64, i64* %idx
  %return939 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %separation, i64 %idx938)
  %separation_inside = extractvalue %gemPrm %GMP937, 22
  %return942 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %separation_inside, i64 %idx938)
  br label %end936

false935:                                         ; preds = %true930
  %return943 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @134, i64 0, i64 0))
  %return944 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @135, i64 0, i64 0))
  br label %end936

end936:                                           ; preds = %false935, %true934
  %sep.0 = phi <2 x double> [ %return939, %true934 ], [ %return943, %false935 ]
  %ins.0 = phi <2 x double> [ %return942, %true934 ], [ %return944, %false935 ]
  %_p945 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p945, <2 x double>* %203
  %w946 = load double, double* %w
  store double %w946, double* %204
  store <2 x double> %sep.0, <2 x double>* %205
  store <2 x double> %ins.0, <2 x double>* %206
  call void @"V_SEPARATION@UUFUU"(<2 x double>* %p, <2 x double>* %203, double* %204, <2 x double>* %205, <2 x double>* %206)
  %p949 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true952:                                          ; preds = %false931
  %ftype955 = load i64, i64* %ftype
  %411 = icmp ne i64 %ftype955, 0
  br i1 %411, label %true956, label %false957

false953:                                         ; preds = %false931
  %return969 = call i64 @"eq@III"(i64 %type5, i64 73)
  %412 = icmp ne i64 %return969, 0
  br i1 %412, label %true970, label %false971

true956:                                          ; preds = %true952
  %GMP959 = load %gemPrm, %gemPrm* %GMP
  %split960 = extractvalue %gemPrm %GMP959, 23
  %idx961 = load i64, i64* %idx
  %return962 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %split960, i64 %idx961)
  br label %end958

false957:                                         ; preds = %true952
  %return963 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @136, i64 0, i64 0))
  br label %end958

end958:                                           ; preds = %false957, %true956
  %split.0 = phi <2 x double> [ %return962, %true956 ], [ %return963, %false957 ]
  %_p964 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p964, <2 x double>* %207
  %w965 = load double, double* %w
  store double %w965, double* %208
  store <2 x double> %split.0, <2 x double>* %209
  call void @"V_SPLIT@UUFU"(<2 x double>* %p, <2 x double>* %207, double* %208, <2 x double>* %209)
  %p967 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true970:                                          ; preds = %false953
  %ftype973 = load i64, i64* %ftype
  %413 = icmp ne i64 %ftype973, 0
  br i1 %413, label %true974, label %false975

false971:                                         ; preds = %false953
  %return987 = call i64 @"eq@III"(i64 %type5, i64 74)
  %414 = icmp ne i64 %return987, 0
  br i1 %414, label %true988, label %false989

true974:                                          ; preds = %true970
  %GMP977 = load %gemPrm, %gemPrm* %GMP
  %splits978 = extractvalue %gemPrm %GMP977, 24
  %idx979 = load i64, i64* %idx
  %return980 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %splits978, i64 %idx979)
  br label %end976

false975:                                         ; preds = %true970
  %return981 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @137, i64 0, i64 0))
  br label %end976

end976:                                           ; preds = %false975, %true974
  %splits.0 = phi <2 x double> [ %return980, %true974 ], [ %return981, %false975 ]
  %_p982 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p982, <2 x double>* %210
  %w983 = load double, double* %w
  store double %w983, double* %211
  store <2 x double> %splits.0, <2 x double>* %212
  call void @"V_SPLITS@UUFU"(<2 x double>* %p, <2 x double>* %210, double* %211, <2 x double>* %212)
  %p985 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true988:                                          ; preds = %false971
  %ftype991 = load i64, i64* %ftype
  %415 = icmp ne i64 %ftype991, 0
  br i1 %415, label %true992, label %false993

false989:                                         ; preds = %false971
  %return1008 = call i64 @"eq@III"(i64 %type5, i64 75)
  %416 = icmp ne i64 %return1008, 0
  br i1 %416, label %true1009, label %false1010

true992:                                          ; preds = %true988
  %GMP995 = load %gemPrm, %gemPrm* %GMP
  %stripes996 = extractvalue %gemPrm %GMP995, 38
  %idx997 = load i64, i64* %idx
  %return998 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %stripes996, i64 %idx997)
  br label %end994

false993:                                         ; preds = %true988
  %return999 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @138, i64 0, i64 0))
  br label %end994

end994:                                           ; preds = %false993, %true992
  %stripes.0 = phi <2 x double> [ %return998, %true992 ], [ %return999, %false993 ]
  %_p1000 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1000, <2 x double>* %213
  %w1001 = load double, double* %w
  store double %w1001, double* %214
  %return1003 = call double @"getcomp@FUI"(<2 x double> %stripes.0, i64 0)
  store double %return1003, double* %215
  %return1005 = call double @"getcomp@FUI"(<2 x double> %stripes.0, i64 1)
  store double %return1005, double* %216
  call void @"V_STRIPES@UUFFF"(<2 x double>* %p, <2 x double>* %213, double* %214, double* %215, double* %216)
  %p1006 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1009:                                         ; preds = %false989
  %ftype1012 = load i64, i64* %ftype
  %417 = icmp ne i64 %ftype1012, 0
  br i1 %417, label %true1013, label %false1014

false1010:                                        ; preds = %false989
  %return1033 = call i64 @"eq@III"(i64 %type5, i64 76)
  %418 = icmp ne i64 %return1033, 0
  br i1 %418, label %true1034, label %false1035

true1013:                                         ; preds = %true1009
  %GMP1016 = load %gemPrm, %gemPrm* %GMP
  %wedge1017 = extractvalue %gemPrm %GMP1016, 45
  %idx1018 = load i64, i64* %idx
  %return1019 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedge1017, i64 %idx1018)
  br label %end1015

false1014:                                        ; preds = %true1009
  %return1020 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @139, i64 0, i64 0))
  br label %end1015

end1015:                                          ; preds = %false1014, %true1013
  %wedge.0 = phi <4 x double> [ %return1019, %true1013 ], [ %return1020, %false1014 ]
  %_p1021 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1021, <2 x double>* %217
  %w1022 = load double, double* %w
  store double %w1022, double* %218
  %return1024 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 0)
  store double %return1024, double* %219
  %return1026 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 1)
  store double %return1026, double* %220
  %return1028 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 2)
  store double %return1028, double* %221
  %return1030 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 3)
  store double %return1030, double* %222
  call void @"V_WEDGE@UUFFFFF"(<2 x double>* %p, <2 x double>* %217, double* %218, double* %219, double* %220, double* %221, double* %222)
  %p1031 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1034:                                         ; preds = %false1010
  %ftype1037 = load i64, i64* %ftype
  %419 = icmp ne i64 %ftype1037, 0
  br i1 %419, label %true1038, label %false1039

false1035:                                        ; preds = %false1010
  %return1058 = call i64 @"eq@III"(i64 %type5, i64 77)
  %420 = icmp ne i64 %return1058, 0
  br i1 %420, label %true1059, label %false1060

true1038:                                         ; preds = %true1034
  %GMP1041 = load %gemPrm, %gemPrm* %GMP
  %wedgejulia1042 = extractvalue %gemPrm %GMP1041, 46
  %idx1043 = load i64, i64* %idx
  %return1044 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedgejulia1042, i64 %idx1043)
  br label %end1040

false1039:                                        ; preds = %true1034
  %return1045 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @140, i64 0, i64 0))
  br label %end1040

end1040:                                          ; preds = %false1039, %true1038
  %wedgejulia.0 = phi <4 x double> [ %return1044, %true1038 ], [ %return1045, %false1039 ]
  %_p1046 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1046, <2 x double>* %223
  %w1047 = load double, double* %w
  store double %w1047, double* %224
  %return1049 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 0)
  store double %return1049, double* %225
  %return1051 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 1)
  store double %return1051, double* %226
  %return1053 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 2)
  store double %return1053, double* %227
  %return1055 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 3)
  store double %return1055, double* %228
  call void @"V_WEDGEJULIA@UUFFFFF"(<2 x double>* %p, <2 x double>* %223, double* %224, double* %225, double* %226, double* %227, double* %228)
  %p1056 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1059:                                         ; preds = %false1035
  %ftype1062 = load i64, i64* %ftype
  %421 = icmp ne i64 %ftype1062, 0
  br i1 %421, label %true1063, label %false1064

false1060:                                        ; preds = %false1035
  %return1083 = call i64 @"eq@III"(i64 %type5, i64 78)
  %422 = icmp ne i64 %return1083, 0
  br i1 %422, label %true1084, label %false1085

true1063:                                         ; preds = %true1059
  %GMP1066 = load %gemPrm, %gemPrm* %GMP
  %wedgesph1067 = extractvalue %gemPrm %GMP1066, 47
  %idx1068 = load i64, i64* %idx
  %return1069 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedgesph1067, i64 %idx1068)
  br label %end1065

false1064:                                        ; preds = %true1059
  %return1070 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @141, i64 0, i64 0))
  br label %end1065

end1065:                                          ; preds = %false1064, %true1063
  %wedgesph.0 = phi <4 x double> [ %return1069, %true1063 ], [ %return1070, %false1064 ]
  %_p1071 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1071, <2 x double>* %229
  %w1072 = load double, double* %w
  store double %w1072, double* %230
  %return1074 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 0)
  store double %return1074, double* %231
  %return1076 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 1)
  store double %return1076, double* %232
  %return1078 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 2)
  store double %return1078, double* %233
  %return1080 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 3)
  store double %return1080, double* %234
  call void @"V_WEDGESPH@UUFFFFF"(<2 x double>* %p, <2 x double>* %229, double* %230, double* %231, double* %232, double* %233, double* %234)
  %p1081 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1084:                                         ; preds = %false1060
  %ftype1087 = load i64, i64* %ftype
  %423 = icmp ne i64 %ftype1087, 0
  br i1 %423, label %true1088, label %false1089

false1085:                                        ; preds = %false1060
  %return1104 = call i64 @"eq@III"(i64 %type5, i64 79)
  %424 = icmp ne i64 %return1104, 0
  br i1 %424, label %true1105, label %false1106

true1088:                                         ; preds = %true1084
  %GMP1091 = load %gemPrm, %gemPrm* %GMP
  %whorl1092 = extractvalue %gemPrm %GMP1091, 39
  %idx1093 = load i64, i64* %idx
  %return1094 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %whorl1092, i64 %idx1093)
  br label %end1090

false1089:                                        ; preds = %true1084
  %return1095 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @142, i64 0, i64 0))
  br label %end1090

end1090:                                          ; preds = %false1089, %true1088
  %whorl.0 = phi <2 x double> [ %return1094, %true1088 ], [ %return1095, %false1089 ]
  %_p1096 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1096, <2 x double>* %235
  %w1097 = load double, double* %w
  store double %w1097, double* %236
  %return1099 = call double @"getcomp@FUI"(<2 x double> %whorl.0, i64 0)
  store double %return1099, double* %237
  %return1101 = call double @"getcomp@FUI"(<2 x double> %whorl.0, i64 1)
  store double %return1101, double* %238
  call void @"V_WHORL@UUFFF"(<2 x double>* %p, <2 x double>* %235, double* %236, double* %237, double* %238)
  %p1102 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1105:                                         ; preds = %false1085
  %ftype1108 = load i64, i64* %ftype
  %425 = icmp ne i64 %ftype1108, 0
  br i1 %425, label %true1109, label %false1110

false1106:                                        ; preds = %false1085
  %return1126 = call i64 @"eq@III"(i64 %type5, i64 80)
  %426 = icmp ne i64 %return1126, 0
  br i1 %426, label %true1127, label %false1128

true1109:                                         ; preds = %true1105
  %GMP1112 = load %gemPrm, %gemPrm* %GMP
  %waves2_scale = extractvalue %gemPrm %GMP1112, 25
  %idx1113 = load i64, i64* %idx
  %return1114 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %waves2_scale, i64 %idx1113)
  %waves2_freq = extractvalue %gemPrm %GMP1112, 26
  %return1117 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %waves2_freq, i64 %idx1113)
  br label %end1111

false1110:                                        ; preds = %true1105
  %return1118 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @143, i64 0, i64 0))
  %return1119 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @144, i64 0, i64 0))
  br label %end1111

end1111:                                          ; preds = %false1110, %true1109
  %scl.0 = phi <2 x double> [ %return1114, %true1109 ], [ %return1118, %false1110 ]
  %freq.0 = phi <2 x double> [ %return1117, %true1109 ], [ %return1119, %false1110 ]
  %_p1120 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1120, <2 x double>* %239
  %w1121 = load double, double* %w
  store double %w1121, double* %240
  store <2 x double> %scl.0, <2 x double>* %241
  store <2 x double> %freq.0, <2 x double>* %242
  call void @"V_WAVES2@UUFUU"(<2 x double>* %p, <2 x double>* %239, double* %240, <2 x double>* %241, <2 x double>* %242)
  %p1124 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1127:                                         ; preds = %false1106
  %_p1130 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1130, <2 x double>* %243
  %w1131 = load double, double* %w
  store double %w1131, double* %244
  call void @"V_COTHEEXP@UUF"(<2 x double>* %p, <2 x double>* %243, double* %244)
  %p1132 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1128:                                        ; preds = %false1106
  %return1134 = call i64 @"eq@III"(i64 %type5, i64 81)
  %427 = icmp ne i64 %return1134, 0
  br i1 %427, label %true1135, label %false1136

true1135:                                         ; preds = %false1128
  %_p1138 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1138, <2 x double>* %245
  %w1139 = load double, double* %w
  store double %w1139, double* %246
  call void @"V_COTHELOG@UUF"(<2 x double>* %p, <2 x double>* %245, double* %246)
  %p1140 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1136:                                        ; preds = %false1128
  %return1142 = call i64 @"eq@III"(i64 %type5, i64 82)
  %428 = icmp ne i64 %return1142, 0
  br i1 %428, label %true1143, label %false1144

true1143:                                         ; preds = %false1136
  %_p1146 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1146, <2 x double>* %247
  %w1147 = load double, double* %w
  store double %w1147, double* %248
  call void @"V_COTHESIN@UUF"(<2 x double>* %p, <2 x double>* %247, double* %248)
  %p1148 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1144:                                        ; preds = %false1136
  %return1150 = call i64 @"eq@III"(i64 %type5, i64 83)
  %429 = icmp ne i64 %return1150, 0
  br i1 %429, label %true1151, label %false1152

true1151:                                         ; preds = %false1144
  %_p1154 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1154, <2 x double>* %249
  %w1155 = load double, double* %w
  store double %w1155, double* %250
  call void @"V_COTHECOS@UUF"(<2 x double>* %p, <2 x double>* %249, double* %250)
  %p1156 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1152:                                        ; preds = %false1144
  %return1158 = call i64 @"eq@III"(i64 %type5, i64 84)
  %430 = icmp ne i64 %return1158, 0
  br i1 %430, label %true1159, label %false1160

true1159:                                         ; preds = %false1152
  %_p1162 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1162, <2 x double>* %251
  %w1163 = load double, double* %w
  store double %w1163, double* %252
  call void @"V_COTHETAN@UUF"(<2 x double>* %p, <2 x double>* %251, double* %252)
  %p1164 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1160:                                        ; preds = %false1152
  %return1166 = call i64 @"eq@III"(i64 %type5, i64 85)
  %431 = icmp ne i64 %return1166, 0
  br i1 %431, label %true1167, label %end12

true1167:                                         ; preds = %false1160
  %_p1169 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1169, <2 x double>* %253
  %w1170 = load double, double* %w
  store double %w1170, double* %254
  call void @"V_COTHESEC@UUF"(<2 x double>* %p, <2 x double>* %253, double* %254)
  %p1171 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1174:                                         ; preds = %false918
  %_p1177 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1177, <2 x double>* %255
  %w1178 = load double, double* %w
  store double %w1178, double* %256
  call void @"V_COTHECSC@UUF"(<2 x double>* %p, <2 x double>* %255, double* %256)
  %p1179 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1175:                                        ; preds = %false918
  %return1181 = call i64 @"eq@III"(i64 %type5, i64 87)
  %432 = icmp ne i64 %return1181, 0
  br i1 %432, label %true1182, label %false1183

true1182:                                         ; preds = %false1175
  %_p1185 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1185, <2 x double>* %257
  %w1186 = load double, double* %w
  store double %w1186, double* %258
  call void @"V_COTHECOT@UUF"(<2 x double>* %p, <2 x double>* %257, double* %258)
  %p1187 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1183:                                        ; preds = %false1175
  %return1189 = call i64 @"eq@III"(i64 %type5, i64 88)
  %433 = icmp ne i64 %return1189, 0
  br i1 %433, label %true1190, label %false1191

true1190:                                         ; preds = %false1183
  %_p1193 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1193, <2 x double>* %259
  %w1194 = load double, double* %w
  store double %w1194, double* %260
  call void @"V_COTHESINH@UUF"(<2 x double>* %p, <2 x double>* %259, double* %260)
  %p1195 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1191:                                        ; preds = %false1183
  %return1197 = call i64 @"eq@III"(i64 %type5, i64 89)
  %434 = icmp ne i64 %return1197, 0
  br i1 %434, label %true1198, label %false1199

true1198:                                         ; preds = %false1191
  %_p1201 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1201, <2 x double>* %261
  %w1202 = load double, double* %w
  store double %w1202, double* %262
  call void @"V_COTHECOSH@UUF"(<2 x double>* %p, <2 x double>* %261, double* %262)
  %p1203 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1199:                                        ; preds = %false1191
  %return1205 = call i64 @"eq@III"(i64 %type5, i64 90)
  %435 = icmp ne i64 %return1205, 0
  br i1 %435, label %true1206, label %false1207

true1206:                                         ; preds = %false1199
  %_p1209 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1209, <2 x double>* %263
  %w1210 = load double, double* %w
  store double %w1210, double* %264
  call void @"V_COTHETANH@UUF"(<2 x double>* %p, <2 x double>* %263, double* %264)
  %p1211 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1207:                                        ; preds = %false1199
  %return1213 = call i64 @"eq@III"(i64 %type5, i64 91)
  %436 = icmp ne i64 %return1213, 0
  br i1 %436, label %true1214, label %false1215

true1214:                                         ; preds = %false1207
  %_p1217 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1217, <2 x double>* %265
  %w1218 = load double, double* %w
  store double %w1218, double* %266
  call void @"V_COTHESECH@UUF"(<2 x double>* %p, <2 x double>* %265, double* %266)
  %p1219 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1215:                                        ; preds = %false1207
  %return1221 = call i64 @"eq@III"(i64 %type5, i64 92)
  %437 = icmp ne i64 %return1221, 0
  br i1 %437, label %true1222, label %false1223

true1222:                                         ; preds = %false1215
  %_p1225 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1225, <2 x double>* %267
  %w1226 = load double, double* %w
  store double %w1226, double* %268
  call void @"V_COTHECSCH@UUF"(<2 x double>* %p, <2 x double>* %267, double* %268)
  %p1227 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1223:                                        ; preds = %false1215
  %return1229 = call i64 @"eq@III"(i64 %type5, i64 93)
  %438 = icmp ne i64 %return1229, 0
  br i1 %438, label %true1230, label %false1231

true1230:                                         ; preds = %false1223
  %_p1233 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1233, <2 x double>* %269
  %w1234 = load double, double* %w
  store double %w1234, double* %270
  call void @"V_COTHECOTH@UUF"(<2 x double>* %p, <2 x double>* %269, double* %270)
  %p1235 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1231:                                        ; preds = %false1223
  %return1237 = call i64 @"eq@III"(i64 %type5, i64 94)
  %439 = icmp ne i64 %return1237, 0
  br i1 %439, label %true1238, label %false1239

true1238:                                         ; preds = %false1231
  %ftype1241 = load i64, i64* %ftype
  %440 = icmp ne i64 %ftype1241, 0
  br i1 %440, label %true1242, label %false1243

false1239:                                        ; preds = %false1231
  %return1262 = call i64 @"eq@III"(i64 %type5, i64 95)
  %441 = icmp ne i64 %return1262, 0
  br i1 %441, label %true1263, label %false1264

true1242:                                         ; preds = %true1238
  %GMP1245 = load %gemPrm, %gemPrm* %GMP
  %auger1246 = extractvalue %gemPrm %GMP1245, 48
  %idx1247 = load i64, i64* %idx
  %return1248 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %auger1246, i64 %idx1247)
  br label %end1244

false1243:                                        ; preds = %true1238
  %return1249 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @145, i64 0, i64 0))
  br label %end1244

end1244:                                          ; preds = %false1243, %true1242
  %auger.0 = phi <4 x double> [ %return1248, %true1242 ], [ %return1249, %false1243 ]
  %_p1250 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1250, <2 x double>* %271
  %w1251 = load double, double* %w
  store double %w1251, double* %272
  %return1253 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 0)
  store double %return1253, double* %273
  %return1255 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 1)
  store double %return1255, double* %274
  %return1257 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 2)
  store double %return1257, double* %275
  %return1259 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 3)
  store double %return1259, double* %276
  call void @"V_AUGER@UUFFFFF"(<2 x double>* %p, <2 x double>* %271, double* %272, double* %273, double* %274, double* %275, double* %276)
  %p1260 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1263:                                         ; preds = %false1239
  %ftype1266 = load i64, i64* %ftype
  %442 = icmp ne i64 %ftype1266, 0
  br i1 %442, label %true1267, label %false1268

false1264:                                        ; preds = %false1239
  %return1279 = call i64 @"eq@III"(i64 %type5, i64 96)
  %443 = icmp ne i64 %return1279, 0
  br i1 %443, label %true1280, label %false1281

true1267:                                         ; preds = %true1263
  %GMP1270 = load %gemPrm, %gemPrm* %GMP
  %flux_spread = extractvalue %gemPrm %GMP1270, 5
  %idx1271 = load i64, i64* %idx
  %return1272 = call double @"getcomp@F[FI"(double* %flux_spread, i64 %idx1271)
  br label %end1269

false1268:                                        ; preds = %true1263
  %return1273 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @146, i64 0, i64 0))
  br label %end1269

end1269:                                          ; preds = %false1268, %true1267
  %spread.0 = phi double [ %return1272, %true1267 ], [ %return1273, %false1268 ]
  %_p1274 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1274, <2 x double>* %277
  %w1275 = load double, double* %w
  store double %w1275, double* %278
  store double %spread.0, double* %279
  call void @"V_FLUX@UUFF"(<2 x double>* %p, <2 x double>* %277, double* %278, double* %279)
  %p1277 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1280:                                         ; preds = %false1264
  %ftype1283 = load i64, i64* %ftype
  %444 = icmp ne i64 %ftype1283, 0
  br i1 %444, label %true1284, label %false1285

false1281:                                        ; preds = %false1264
  %return1301 = call i64 @"eq@III"(i64 %type5, i64 97)
  %445 = icmp ne i64 %return1301, 0
  br i1 %445, label %true1302, label %false1303

true1284:                                         ; preds = %true1280
  %GMP1287 = load %gemPrm, %gemPrm* %GMP
  %mobius_re = extractvalue %gemPrm %GMP1287, 49
  %idx1288 = load i64, i64* %idx
  %return1289 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %mobius_re, i64 %idx1288)
  %mobius_im = extractvalue %gemPrm %GMP1287, 50
  %return1292 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %mobius_im, i64 %idx1288)
  br label %end1286

false1285:                                        ; preds = %true1280
  %return1293 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @147, i64 0, i64 0))
  %return1294 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @148, i64 0, i64 0))
  br label %end1286

end1286:                                          ; preds = %false1285, %true1284
  %re.0 = phi <4 x double> [ %return1289, %true1284 ], [ %return1293, %false1285 ]
  %im.0 = phi <4 x double> [ %return1292, %true1284 ], [ %return1294, %false1285 ]
  %_p1295 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1295, <2 x double>* %280
  %w1296 = load double, double* %w
  store double %w1296, double* %281
  store <4 x double> %re.0, <4 x double>* %282
  store <4 x double> %im.0, <4 x double>* %283
  call void @"V_MOBIUS@UUFPP"(<2 x double>* %p, <2 x double>* %280, double* %281, <4 x double>* %282, <4 x double>* %283)
  %p1299 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1302:                                         ; preds = %false1281
  %ftype1305 = load i64, i64* %ftype
  %446 = icmp ne i64 %ftype1305, 0
  br i1 %446, label %true1306, label %false1307

false1303:                                        ; preds = %false1281
  %return1323 = call i64 @"eq@III"(i64 %type5, i64 98)
  %447 = icmp ne i64 %return1323, 0
  br i1 %447, label %true1324, label %false1325

true1306:                                         ; preds = %true1302
  %GMP1309 = load %gemPrm, %gemPrm* %GMP
  %curve_lenght = extractvalue %gemPrm %GMP1309, 27
  %idx1310 = load i64, i64* %idx
  %return1311 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curve_lenght, i64 %idx1310)
  %curve_amp = extractvalue %gemPrm %GMP1309, 28
  %return1314 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curve_amp, i64 %idx1310)
  br label %end1308

false1307:                                        ; preds = %true1302
  %return1315 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @149, i64 0, i64 0))
  %return1316 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @150, i64 0, i64 0))
  br label %end1308

end1308:                                          ; preds = %false1307, %true1306
  %lgt.0 = phi <2 x double> [ %return1311, %true1306 ], [ %return1315, %false1307 ]
  %amp.0 = phi <2 x double> [ %return1314, %true1306 ], [ %return1316, %false1307 ]
  %_p1317 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1317, <2 x double>* %284
  %w1318 = load double, double* %w
  store double %w1318, double* %285
  store <2 x double> %lgt.0, <2 x double>* %286
  store <2 x double> %amp.0, <2 x double>* %287
  call void @"V_CURVE@UUFUU"(<2 x double>* %p, <2 x double>* %284, double* %285, <2 x double>* %286, <2 x double>* %287)
  %p1321 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1324:                                         ; preds = %false1303
  %ftype1327 = load i64, i64* %ftype
  %448 = icmp ne i64 %ftype1327, 0
  br i1 %448, label %true1328, label %false1329

false1325:                                        ; preds = %false1303
  %return1344 = call i64 @"eq@III"(i64 %type5, i64 99)
  %449 = icmp ne i64 %return1344, 0
  br i1 %449, label %true1345, label %false1346

true1328:                                         ; preds = %true1324
  %GMP1331 = load %gemPrm, %gemPrm* %GMP
  %persp1332 = extractvalue %gemPrm %GMP1331, 40
  %idx1333 = load i64, i64* %idx
  %return1334 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %persp1332, i64 %idx1333)
  br label %end1330

false1329:                                        ; preds = %true1324
  %return1335 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @151, i64 0, i64 0))
  br label %end1330

end1330:                                          ; preds = %false1329, %true1328
  %persp.0 = phi <2 x double> [ %return1334, %true1328 ], [ %return1335, %false1329 ]
  %_p1336 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1336, <2 x double>* %288
  %w1337 = load double, double* %w
  store double %w1337, double* %289
  %return1339 = call double @"getcomp@FUI"(<2 x double> %persp.0, i64 0)
  store double %return1339, double* %290
  %return1341 = call double @"getcomp@FUI"(<2 x double> %persp.0, i64 1)
  store double %return1341, double* %291
  call void @"V_PERSPECTIVE@UUFFF"(<2 x double>* %p, <2 x double>* %288, double* %289, double* %290, double* %291)
  %p1342 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1345:                                         ; preds = %false1325
  %ftype1348 = load i64, i64* %ftype
  %450 = icmp ne i64 %ftype1348, 0
  br i1 %450, label %true1349, label %false1350

false1346:                                        ; preds = %false1325
  %return1376 = call i64 @"eq@III"(i64 %type5, i64 100)
  %451 = icmp ne i64 %return1376, 0
  br i1 %451, label %true1377, label %false1378

true1349:                                         ; preds = %true1345
  %GMP1352 = load %gemPrm, %gemPrm* %GMP
  %bwraps1353 = extractvalue %gemPrm %GMP1352, 12
  %idx1354 = load i64, i64* %idx
  %return1355 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %bwraps1353, i64 %idx1354)
  %bwrapstwist1357 = extractvalue %gemPrm %GMP1352, 41
  %return1359 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %bwrapstwist1357, i64 %idx1354)
  br label %end1351

false1350:                                        ; preds = %true1345
  %return1360 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @152, i64 0, i64 0))
  %return1361 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @153, i64 0, i64 0))
  br label %end1351

end1351:                                          ; preds = %false1350, %true1349
  %bwraps.0 = phi <3 x double> [ %return1355, %true1349 ], [ %return1360, %false1350 ]
  %bwrapstwist.0 = phi <2 x double> [ %return1359, %true1349 ], [ %return1361, %false1350 ]
  %_p1362 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1362, <2 x double>* %292
  %w1363 = load double, double* %w
  store double %w1363, double* %293
  %return1365 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 0)
  store double %return1365, double* %294
  %return1367 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 1)
  store double %return1367, double* %295
  %return1369 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 2)
  store double %return1369, double* %296
  %return1371 = call double @"getcomp@FUI"(<2 x double> %bwrapstwist.0, i64 0)
  store double %return1371, double* %297
  %return1373 = call double @"getcomp@FUI"(<2 x double> %bwrapstwist.0, i64 1)
  store double %return1373, double* %298
  call void @"V_BWRAPS@UUFFFFFF"(<2 x double>* %p, <2 x double>* %292, double* %293, double* %294, double* %295, double* %296, double* %297, double* %298)
  %p1374 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

true1377:                                         ; preds = %false1346
  %_p1380 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1380, <2 x double>* %299
  %w1381 = load double, double* %w
  store double %w1381, double* %300
  call void @"V_HEMISPHERE@UUF"(<2 x double>* %p, <2 x double>* %299, double* %300)
  %p1382 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

false1378:                                        ; preds = %false1346
  %return1384 = call i64 @"eq@III"(i64 %type5, i64 101)
  %452 = icmp ne i64 %return1384, 0
  br i1 %452, label %true1385, label %end12

true1385:                                         ; preds = %false1378
  %ftype1387 = load i64, i64* %ftype
  %453 = icmp ne i64 %ftype1387, 0
  br i1 %453, label %true1388, label %false1389

true1388:                                         ; preds = %true1385
  %GMP1391 = load %gemPrm, %gemPrm* %GMP
  %polynomial_pow = extractvalue %gemPrm %GMP1391, 29
  %idx1392 = load i64, i64* %idx
  %return1393 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_pow, i64 %idx1392)
  %polynomial_lc = extractvalue %gemPrm %GMP1391, 30
  %return1396 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_lc, i64 %idx1392)
  %polynomial_sc = extractvalue %gemPrm %GMP1391, 31
  %return1399 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_sc, i64 %idx1392)
  br label %end1390

false1389:                                        ; preds = %true1385
  %return1400 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @154, i64 0, i64 0))
  %return1401 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @155, i64 0, i64 0))
  %return1402 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @156, i64 0, i64 0))
  br label %end1390

end1390:                                          ; preds = %false1389, %true1388
  %pow.0 = phi <2 x double> [ %return1393, %true1388 ], [ %return1400, %false1389 ]
  %lc.0 = phi <2 x double> [ %return1396, %true1388 ], [ %return1401, %false1389 ]
  %sc.0 = phi <2 x double> [ %return1399, %true1388 ], [ %return1402, %false1389 ]
  %_p1403 = load <2 x double>, <2 x double>* %_p
  store <2 x double> %_p1403, <2 x double>* %301
  %w1404 = load double, double* %w
  store double %w1404, double* %302
  store <2 x double> %pow.0, <2 x double>* %303
  store <2 x double> %lc.0, <2 x double>* %304
  store <2 x double> %sc.0, <2 x double>* %305
  call void @"V_POLYNOMIAL@UUFUUU"(<2 x double>* %p, <2 x double>* %301, double* %302, <2 x double>* %303, <2 x double>* %304, <2 x double>* %305)
  %p1408 = load <2 x double>, <2 x double>* %p
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end1390, %true1377, %end1351, %end1330, %end1308, %end1286, %end1269, %end1244, %true1230, %true1222, %true1214, %true1206, %true1198, %true1190, %true1182, %true1174, %true1167, %true1159, %true1151, %true1143, %true1135, %true1127, %end1111, %end1090, %end1065, %end1040, %end1015, %end994, %end976, %end958, %end936, %true922, %end897, %true884, %end865, %end848, %true834, %end811, %true797, %end786, %true772, %true764, %true756, %end739, %end723, %true709, %true701, %end690, %end672, %end651, %end630, %end609, %end577, %end550, %true536, %true528, %true520, %true512, %true504, %true497, %true489, %true481, %end465, %end444, %end427, %end410, %end382, %true370, %end355, %end334, %end311, %end294, %end269, %end248, %true235, %true227, %true219, %true211, %true201, %true191, %true183, %true175, %true167, %true156, %true148, %true132, %true124, %true116, %true108, %true100, %true92, %true84, %true76, %true68, %true60, %true52, %true44, %true36, %true28, %true20, %end12, %true
  %UnifiedRetVal = phi <2 x double> [ %output, %true ], [ %_p1409, %end12 ], [ %p25, %true20 ], [ %p33, %true28 ], [ %p41, %true36 ], [ %p49, %true44 ], [ %p57, %true52 ], [ %p65, %true60 ], [ %p73, %true68 ], [ %p81, %true76 ], [ %p89, %true84 ], [ %p97, %true92 ], [ %p105, %true100 ], [ %p113, %true108 ], [ %p121, %true116 ], [ %p129, %true124 ], [ %p145, %true132 ], [ %p153, %true148 ], [ %p164, %true156 ], [ %p172, %true167 ], [ %p180, %true175 ], [ %p188, %true183 ], [ %p198, %true191 ], [ %p208, %true201 ], [ %p216, %true211 ], [ %p224, %true219 ], [ %p232, %true227 ], [ %p239, %true235 ], [ %p260, %end248 ], [ %p285, %end269 ], [ %p302, %end294 ], [ %p325, %end311 ], [ %p346, %end334 ], [ %p367, %end355 ], [ %p374, %true370 ], [ %p391, %end382 ], [ %p418, %end410 ], [ %p435, %end427 ], [ %p456, %end444 ], [ %p478, %end465 ], [ %p486, %true481 ], [ %p494, %true489 ], [ %p501, %true497 ], [ %p509, %true504 ], [ %p517, %true512 ], [ %p525, %true520 ], [ %p533, %true528 ], [ %p541, %true536 ], [ %p568, %end550 ], [ %p601, %end577 ], [ %p621, %end609 ], [ %p642, %end630 ], [ %p663, %end651 ], [ %p681, %end672 ], [ %p698, %end690 ], [ %p706, %true701 ], [ %p714, %true709 ], [ %p730, %end723 ], [ %p753, %end739 ], [ %p761, %true756 ], [ %p769, %true764 ], [ %p777, %true772 ], [ %p794, %end786 ], [ %p802, %true797 ], [ %p831, %end811 ], [ %p839, %true834 ], [ %p856, %end848 ], [ %p881, %end865 ], [ %p889, %true884 ], [ %p910, %end897 ], [ %p927, %true922 ], [ %p949, %end936 ], [ %p967, %end958 ], [ %p985, %end976 ], [ %p1006, %end994 ], [ %p1031, %end1015 ], [ %p1056, %end1040 ], [ %p1081, %end1065 ], [ %p1102, %end1090 ], [ %p1124, %end1111 ], [ %p1132, %true1127 ], [ %p1140, %true1135 ], [ %p1148, %true1143 ], [ %p1156, %true1151 ], [ %p1164, %true1159 ], [ %p1171, %true1167 ], [ %p1179, %true1174 ], [ %p1187, %true1182 ], [ %p1195, %true1190 ], [ %p1203, %true1198 ], [ %p1211, %true1206 ], [ %p1219, %true1214 ], [ %p1227, %true1222 ], [ %p1235, %true1230 ], [ %p1260, %end1244 ], [ %p1277, %end1269 ], [ %p1299, %end1286 ], [ %p1321, %end1308 ], [ %p1342, %end1330 ], [ %p1374, %end1351 ], [ %p1382, %true1377 ], [ %p1408, %end1390 ]
  ret <2 x double> %UnifiedRetVal
}

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TheFractalFlameAlgorithm@I[I[FFFV"(i64* %_bound_ptnum, i64** %_bound_VACTIVE, double** %_bound_CDF, double* %_bound_pscale, double* %_bound_COORD, <3 x double>* %_bound_P) #0 {
__llvm_entry:
  %__tmp = alloca <2 x double>
  %SYS = alloca %gemSYS
  %GEM = alloca %gem
  %0 = alloca i64*
  %1 = alloca %gemSYS
  %v1GMP = alloca %gemPrm
  %v2GMP = alloca %gemPrm
  %v3GMP = alloca %gemPrm
  %v4GMP = alloca %gemPrm
  %2 = alloca i8**
  %3 = alloca i64*
  %4 = alloca i8**
  %5 = alloca i64*
  %6 = alloca i8**
  %7 = alloca i64*
  %8 = alloca i8**
  %9 = alloca i64*
  %__mem = alloca <2 x double>
  %10 = alloca double
  %11 = alloca %gemPrm
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca <2 x double>
  %16 = alloca <2 x double>
  %17 = alloca <2 x double>
  %18 = alloca <2 x double>
  %19 = alloca double
  %20 = alloca %gemPrm
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca <2 x double>
  %25 = alloca <2 x double>
  %26 = alloca <2 x double>
  %27 = alloca <2 x double>
  %28 = alloca double
  %29 = alloca %gemPrm
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca <2 x double>
  %34 = alloca <2 x double>
  %35 = alloca <2 x double>
  %36 = alloca <2 x double>
  %37 = alloca double
  %38 = alloca %gemPrm
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca <2 x double>
  %43 = alloca <2 x double>
  %44 = alloca <2 x double>
  %45 = alloca <2 x double>
  %46 = alloca double
  %47 = alloca <2 x double>
  %48 = alloca <2 x double>
  %49 = alloca <2 x double>
  %50 = alloca i64
  %51 = alloca <2 x double>
  %52 = alloca %gemPrm
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca <2 x double>
  %57 = alloca <2 x double>
  %58 = alloca <2 x double>
  %59 = alloca <2 x double>
  %60 = alloca double
  %61 = alloca %gemPrm
  %62 = alloca i64
  %63 = alloca i64
  %64 = alloca i64
  %65 = alloca <2 x double>
  %66 = alloca <2 x double>
  %67 = alloca <2 x double>
  %68 = alloca <2 x double>
  %69 = alloca double
  %70 = alloca %gemPrm
  %71 = alloca i64
  %72 = alloca i64
  %73 = alloca i64
  %74 = alloca <2 x double>
  %75 = alloca <2 x double>
  %76 = alloca <2 x double>
  %77 = alloca <2 x double>
  %78 = alloca double
  %79 = alloca <2 x double>
  %80 = alloca <2 x double>
  %81 = alloca <2 x double>
  %82 = alloca %gemPrm
  %83 = alloca i64
  %84 = alloca i64
  %85 = alloca i64
  %86 = alloca <2 x double>
  %87 = alloca <2 x double>
  %88 = alloca <2 x double>
  %89 = alloca <2 x double>
  %90 = alloca double
  %91 = alloca <2 x double>
  %92 = alloca i64
  store <2 x double> zeroinitializer, <2 x double>* %__tmp, !vex-initializer-store !3
  %SYS1 = call %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modF"()
  %SYS1.fca.0.extract = extractvalue %gemSYS %SYS1, 0
  %SYS1.fca.0.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 0
  store i64 %SYS1.fca.0.extract, i64* %SYS1.fca.0.gep
  %SYS1.fca.1.extract = extractvalue %gemSYS %SYS1, 1
  %SYS1.fca.1.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 1
  store i64 %SYS1.fca.1.extract, i64* %SYS1.fca.1.gep
  %SYS1.fca.2.extract = extractvalue %gemSYS %SYS1, 2
  %SYS1.fca.2.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 2
  store i64 %SYS1.fca.2.extract, i64* %SYS1.fca.2.gep
  %SYS1.fca.3.extract = extractvalue %gemSYS %SYS1, 3
  %SYS1.fca.3.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 3
  store i64 %SYS1.fca.3.extract, i64* %SYS1.fca.3.gep
  %SYS1.fca.4.extract = extractvalue %gemSYS %SYS1, 4
  %SYS1.fca.4.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 4
  store i64 %SYS1.fca.4.extract, i64* %SYS1.fca.4.gep
  %SYS1.fca.5.extract = extractvalue %gemSYS %SYS1, 5
  %SYS1.fca.5.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 5
  store i64 %SYS1.fca.5.extract, i64* %SYS1.fca.5.gep
  %SYS1.fca.6.extract = extractvalue %gemSYS %SYS1, 6
  %SYS1.fca.6.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 6
  store i64 %SYS1.fca.6.extract, i64* %SYS1.fca.6.gep
  %SYS1.fca.7.extract = extractvalue %gemSYS %SYS1, 7
  %SYS1.fca.7.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 7
  store i64 %SYS1.fca.7.extract, i64* %SYS1.fca.7.gep
  %SYS1.fca.8.extract = extractvalue %gemSYS %SYS1, 8
  %SYS1.fca.8.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 8
  store i64 %SYS1.fca.8.extract, i64* %SYS1.fca.8.gep
  %SYS1.fca.9.extract = extractvalue %gemSYS %SYS1, 9
  %SYS1.fca.9.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 9
  store i64 %SYS1.fca.9.extract, i64* %SYS1.fca.9.gep
  %SYS1.fca.10.extract = extractvalue %gemSYS %SYS1, 10
  %SYS1.fca.10.gep = getelementptr inbounds %gemSYS, %gemSYS* %SYS, i32 0, i32 10
  store double %SYS1.fca.10.extract, double* %SYS1.fca.10.gep
  call void @"gemSYSBuild@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modF"(%gemSYS* %SYS)
  %GEM2 = call %gem @"gem@Z3gemM35N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S"()
  %GEM2.fca.0.extract = extractvalue %gem %GEM2, 0
  %GEM2.fca.0.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 0
  store i64* %GEM2.fca.0.extract, i64** %GEM2.fca.0.gep
  %GEM2.fca.1.extract = extractvalue %gem %GEM2, 1
  %GEM2.fca.1.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 1
  store i64* %GEM2.fca.1.extract, i64** %GEM2.fca.1.gep
  %GEM2.fca.2.extract = extractvalue %gem %GEM2, 2
  %GEM2.fca.2.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 2
  store i64* %GEM2.fca.2.extract, i64** %GEM2.fca.2.gep
  %GEM2.fca.3.extract = extractvalue %gem %GEM2, 3
  %GEM2.fca.3.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 3
  store i64* %GEM2.fca.3.extract, i64** %GEM2.fca.3.gep
  %GEM2.fca.4.extract = extractvalue %gem %GEM2, 4
  %GEM2.fca.4.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 4
  store i64* %GEM2.fca.4.extract, i64** %GEM2.fca.4.gep
  %GEM2.fca.5.extract = extractvalue %gem %GEM2, 5
  %GEM2.fca.5.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 5
  store i64 %GEM2.fca.5.extract, i64* %GEM2.fca.5.gep
  %GEM2.fca.6.extract = extractvalue %gem %GEM2, 6
  %GEM2.fca.6.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 6
  store i64 %GEM2.fca.6.extract, i64* %GEM2.fca.6.gep
  %GEM2.fca.7.extract = extractvalue %gem %GEM2, 7
  %GEM2.fca.7.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 7
  store i64 %GEM2.fca.7.extract, i64* %GEM2.fca.7.gep
  %GEM2.fca.8.extract = extractvalue %gem %GEM2, 8
  %GEM2.fca.8.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 8
  store i64 %GEM2.fca.8.extract, i64* %GEM2.fca.8.gep
  %GEM2.fca.9.extract = extractvalue %gem %GEM2, 9
  %GEM2.fca.9.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 9
  store double* %GEM2.fca.9.extract, double** %GEM2.fca.9.gep
  %GEM2.fca.10.extract = extractvalue %gem %GEM2, 10
  %GEM2.fca.10.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 10
  store double* %GEM2.fca.10.extract, double** %GEM2.fca.10.gep
  %GEM2.fca.11.extract = extractvalue %gem %GEM2, 11
  %GEM2.fca.11.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 11
  store double* %GEM2.fca.11.extract, double** %GEM2.fca.11.gep
  %GEM2.fca.12.extract = extractvalue %gem %GEM2, 12
  %GEM2.fca.12.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 12
  store double* %GEM2.fca.12.extract, double** %GEM2.fca.12.gep
  %GEM2.fca.13.extract = extractvalue %gem %GEM2, 13
  %GEM2.fca.13.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 13
  store double* %GEM2.fca.13.extract, double** %GEM2.fca.13.gep
  %GEM2.fca.14.extract = extractvalue %gem %GEM2, 14
  %GEM2.fca.14.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 14
  store double* %GEM2.fca.14.extract, double** %GEM2.fca.14.gep
  %GEM2.fca.15.extract = extractvalue %gem %GEM2, 15
  %GEM2.fca.15.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 15
  store double* %GEM2.fca.15.extract, double** %GEM2.fca.15.gep
  %GEM2.fca.16.extract = extractvalue %gem %GEM2, 16
  %GEM2.fca.16.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 16
  store double %GEM2.fca.16.extract, double* %GEM2.fca.16.gep
  %GEM2.fca.17.extract = extractvalue %gem %GEM2, 17
  %GEM2.fca.17.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 17
  store double %GEM2.fca.17.extract, double* %GEM2.fca.17.gep
  %GEM2.fca.18.extract = extractvalue %gem %GEM2, 18
  %GEM2.fca.18.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 18
  store double %GEM2.fca.18.extract, double* %GEM2.fca.18.gep
  %GEM2.fca.19.extract = extractvalue %gem %GEM2, 19
  %GEM2.fca.19.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 19
  store double %GEM2.fca.19.extract, double* %GEM2.fca.19.gep
  %GEM2.fca.20.extract = extractvalue %gem %GEM2, 20
  %GEM2.fca.20.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 20
  store double %GEM2.fca.20.extract, double* %GEM2.fca.20.gep
  %GEM2.fca.21.extract = extractvalue %gem %GEM2, 21
  %GEM2.fca.21.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 21
  store <2 x double> %GEM2.fca.21.extract, <2 x double>* %GEM2.fca.21.gep
  %GEM2.fca.22.extract = extractvalue %gem %GEM2, 22
  %GEM2.fca.22.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 22
  store <2 x double>* %GEM2.fca.22.extract, <2 x double>** %GEM2.fca.22.gep
  %GEM2.fca.23.extract = extractvalue %gem %GEM2, 23
  %GEM2.fca.23.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 23
  store <2 x double>* %GEM2.fca.23.extract, <2 x double>** %GEM2.fca.23.gep
  %GEM2.fca.24.extract = extractvalue %gem %GEM2, 24
  %GEM2.fca.24.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 24
  store <2 x double>* %GEM2.fca.24.extract, <2 x double>** %GEM2.fca.24.gep
  %GEM2.fca.25.extract = extractvalue %gem %GEM2, 25
  %GEM2.fca.25.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 25
  store <2 x double>* %GEM2.fca.25.extract, <2 x double>** %GEM2.fca.25.gep
  %GEM2.fca.26.extract = extractvalue %gem %GEM2, 26
  %GEM2.fca.26.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 26
  store <2 x double>* %GEM2.fca.26.extract, <2 x double>** %GEM2.fca.26.gep
  %GEM2.fca.27.extract = extractvalue %gem %GEM2, 27
  %GEM2.fca.27.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 27
  store <2 x double>* %GEM2.fca.27.extract, <2 x double>** %GEM2.fca.27.gep
  %GEM2.fca.28.extract = extractvalue %gem %GEM2, 28
  %GEM2.fca.28.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 28
  store <2 x double> %GEM2.fca.28.extract, <2 x double>* %GEM2.fca.28.gep
  %GEM2.fca.29.extract = extractvalue %gem %GEM2, 29
  %GEM2.fca.29.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 29
  store <2 x double> %GEM2.fca.29.extract, <2 x double>* %GEM2.fca.29.gep
  %GEM2.fca.30.extract = extractvalue %gem %GEM2, 30
  %GEM2.fca.30.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 30
  store <2 x double> %GEM2.fca.30.extract, <2 x double>* %GEM2.fca.30.gep
  %GEM2.fca.31.extract = extractvalue %gem %GEM2, 31
  %GEM2.fca.31.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 31
  store <2 x double> %GEM2.fca.31.extract, <2 x double>* %GEM2.fca.31.gep
  %GEM2.fca.32.extract = extractvalue %gem %GEM2, 32
  %GEM2.fca.32.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 32
  store <2 x double> %GEM2.fca.32.extract, <2 x double>* %GEM2.fca.32.gep
  %GEM2.fca.33.extract = extractvalue %gem %GEM2, 33
  %GEM2.fca.33.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 33
  store <2 x double> %GEM2.fca.33.extract, <2 x double>* %GEM2.fca.33.gep
  %GEM2.fca.34.extract = extractvalue %gem %GEM2, 34
  %GEM2.fca.34.gep = getelementptr inbounds %gem, %gem* %GEM, i32 0, i32 34
  store i8** %GEM2.fca.34.extract, i8*** %GEM2.fca.34.gep
  %_bound_VACTIVE3 = load i64*, i64** %_bound_VACTIVE
  store i64* %_bound_VACTIVE3, i64** %0
  %SYS4.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS4.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS4.fca.0.load, 0
  %SYS4.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS4.fca.1.insert = insertvalue %gemSYS %SYS4.fca.0.insert, i64 %SYS4.fca.1.load, 1
  %SYS4.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS4.fca.2.insert = insertvalue %gemSYS %SYS4.fca.1.insert, i64 %SYS4.fca.2.load, 2
  %SYS4.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS4.fca.3.insert = insertvalue %gemSYS %SYS4.fca.2.insert, i64 %SYS4.fca.3.load, 3
  %SYS4.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS4.fca.4.insert = insertvalue %gemSYS %SYS4.fca.3.insert, i64 %SYS4.fca.4.load, 4
  %SYS4.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS4.fca.5.insert = insertvalue %gemSYS %SYS4.fca.4.insert, i64 %SYS4.fca.5.load, 5
  %SYS4.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS4.fca.6.insert = insertvalue %gemSYS %SYS4.fca.5.insert, i64 %SYS4.fca.6.load, 6
  %SYS4.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS4.fca.7.insert = insertvalue %gemSYS %SYS4.fca.6.insert, i64 %SYS4.fca.7.load, 7
  %SYS4.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS4.fca.8.insert = insertvalue %gemSYS %SYS4.fca.7.insert, i64 %SYS4.fca.8.load, 8
  %SYS4.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS4.fca.9.insert = insertvalue %gemSYS %SYS4.fca.8.insert, i64 %SYS4.fca.9.load, 9
  %SYS4.fca.10.load = load double, double* %SYS1.fca.10.gep
  %SYS4.fca.0.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 0
  store i64 %SYS4.fca.0.load, i64* %SYS4.fca.0.gep
  %SYS4.fca.1.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 1
  store i64 %SYS4.fca.1.load, i64* %SYS4.fca.1.gep
  %SYS4.fca.2.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 2
  store i64 %SYS4.fca.2.load, i64* %SYS4.fca.2.gep
  %SYS4.fca.3.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 3
  store i64 %SYS4.fca.3.load, i64* %SYS4.fca.3.gep
  %SYS4.fca.4.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 4
  store i64 %SYS4.fca.4.load, i64* %SYS4.fca.4.gep
  %SYS4.fca.5.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 5
  store i64 %SYS4.fca.5.load, i64* %SYS4.fca.5.gep
  %SYS4.fca.6.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 6
  store i64 %SYS4.fca.6.load, i64* %SYS4.fca.6.gep
  %SYS4.fca.7.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 7
  store i64 %SYS4.fca.7.load, i64* %SYS4.fca.7.gep
  %SYS4.fca.8.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 8
  store i64 %SYS4.fca.8.load, i64* %SYS4.fca.8.gep
  %SYS4.fca.9.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 9
  store i64 %SYS4.fca.9.load, i64* %SYS4.fca.9.gep
  %SYS4.fca.10.gep = getelementptr inbounds %gemSYS, %gemSYS* %1, i32 0, i32 10
  store double %SYS4.fca.10.load, double* %SYS4.fca.10.gep
  call void @"gemBuild@Z3gemM35N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[IZ6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN6mb_modF"(%gem* %GEM, i64** %0, %gemSYS* %1)
  %v1GMP5 = call %gemPrm @"gemPrm@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U"()
  %v1GMP5.fca.0.extract = extractvalue %gemPrm %v1GMP5, 0
  %v1GMP5.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 0
  store double* %v1GMP5.fca.0.extract, double** %v1GMP5.fca.0.gep
  %v1GMP5.fca.1.extract = extractvalue %gemPrm %v1GMP5, 1
  %v1GMP5.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 1
  store double* %v1GMP5.fca.1.extract, double** %v1GMP5.fca.1.gep
  %v1GMP5.fca.2.extract = extractvalue %gemPrm %v1GMP5, 2
  %v1GMP5.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 2
  store double* %v1GMP5.fca.2.extract, double** %v1GMP5.fca.2.gep
  %v1GMP5.fca.3.extract = extractvalue %gemPrm %v1GMP5, 3
  %v1GMP5.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 3
  store double* %v1GMP5.fca.3.extract, double** %v1GMP5.fca.3.gep
  %v1GMP5.fca.4.extract = extractvalue %gemPrm %v1GMP5, 4
  %v1GMP5.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 4
  store double* %v1GMP5.fca.4.extract, double** %v1GMP5.fca.4.gep
  %v1GMP5.fca.5.extract = extractvalue %gemPrm %v1GMP5, 5
  %v1GMP5.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 5
  store double* %v1GMP5.fca.5.extract, double** %v1GMP5.fca.5.gep
  %v1GMP5.fca.6.extract = extractvalue %gemPrm %v1GMP5, 6
  %v1GMP5.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 6
  store <3 x double>* %v1GMP5.fca.6.extract, <3 x double>** %v1GMP5.fca.6.gep
  %v1GMP5.fca.7.extract = extractvalue %gemPrm %v1GMP5, 7
  %v1GMP5.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 7
  store <3 x double>* %v1GMP5.fca.7.extract, <3 x double>** %v1GMP5.fca.7.gep
  %v1GMP5.fca.8.extract = extractvalue %gemPrm %v1GMP5, 8
  %v1GMP5.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 8
  store <3 x double>* %v1GMP5.fca.8.extract, <3 x double>** %v1GMP5.fca.8.gep
  %v1GMP5.fca.9.extract = extractvalue %gemPrm %v1GMP5, 9
  %v1GMP5.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 9
  store <3 x double>* %v1GMP5.fca.9.extract, <3 x double>** %v1GMP5.fca.9.gep
  %v1GMP5.fca.10.extract = extractvalue %gemPrm %v1GMP5, 10
  %v1GMP5.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 10
  store <3 x double>* %v1GMP5.fca.10.extract, <3 x double>** %v1GMP5.fca.10.gep
  %v1GMP5.fca.11.extract = extractvalue %gemPrm %v1GMP5, 11
  %v1GMP5.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 11
  store <3 x double>* %v1GMP5.fca.11.extract, <3 x double>** %v1GMP5.fca.11.gep
  %v1GMP5.fca.12.extract = extractvalue %gemPrm %v1GMP5, 12
  %v1GMP5.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 12
  store <3 x double>* %v1GMP5.fca.12.extract, <3 x double>** %v1GMP5.fca.12.gep
  %v1GMP5.fca.13.extract = extractvalue %gemPrm %v1GMP5, 13
  %v1GMP5.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 13
  store <2 x double>* %v1GMP5.fca.13.extract, <2 x double>** %v1GMP5.fca.13.gep
  %v1GMP5.fca.14.extract = extractvalue %gemPrm %v1GMP5, 14
  %v1GMP5.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 14
  store <2 x double>* %v1GMP5.fca.14.extract, <2 x double>** %v1GMP5.fca.14.gep
  %v1GMP5.fca.15.extract = extractvalue %gemPrm %v1GMP5, 15
  %v1GMP5.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 15
  store <2 x double>* %v1GMP5.fca.15.extract, <2 x double>** %v1GMP5.fca.15.gep
  %v1GMP5.fca.16.extract = extractvalue %gemPrm %v1GMP5, 16
  %v1GMP5.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 16
  store <2 x double>* %v1GMP5.fca.16.extract, <2 x double>** %v1GMP5.fca.16.gep
  %v1GMP5.fca.17.extract = extractvalue %gemPrm %v1GMP5, 17
  %v1GMP5.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 17
  store <2 x double>* %v1GMP5.fca.17.extract, <2 x double>** %v1GMP5.fca.17.gep
  %v1GMP5.fca.18.extract = extractvalue %gemPrm %v1GMP5, 18
  %v1GMP5.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 18
  store <2 x double>* %v1GMP5.fca.18.extract, <2 x double>** %v1GMP5.fca.18.gep
  %v1GMP5.fca.19.extract = extractvalue %gemPrm %v1GMP5, 19
  %v1GMP5.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 19
  store <2 x double>* %v1GMP5.fca.19.extract, <2 x double>** %v1GMP5.fca.19.gep
  %v1GMP5.fca.20.extract = extractvalue %gemPrm %v1GMP5, 20
  %v1GMP5.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 20
  store <2 x double>* %v1GMP5.fca.20.extract, <2 x double>** %v1GMP5.fca.20.gep
  %v1GMP5.fca.21.extract = extractvalue %gemPrm %v1GMP5, 21
  %v1GMP5.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 21
  store <2 x double>* %v1GMP5.fca.21.extract, <2 x double>** %v1GMP5.fca.21.gep
  %v1GMP5.fca.22.extract = extractvalue %gemPrm %v1GMP5, 22
  %v1GMP5.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 22
  store <2 x double>* %v1GMP5.fca.22.extract, <2 x double>** %v1GMP5.fca.22.gep
  %v1GMP5.fca.23.extract = extractvalue %gemPrm %v1GMP5, 23
  %v1GMP5.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 23
  store <2 x double>* %v1GMP5.fca.23.extract, <2 x double>** %v1GMP5.fca.23.gep
  %v1GMP5.fca.24.extract = extractvalue %gemPrm %v1GMP5, 24
  %v1GMP5.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 24
  store <2 x double>* %v1GMP5.fca.24.extract, <2 x double>** %v1GMP5.fca.24.gep
  %v1GMP5.fca.25.extract = extractvalue %gemPrm %v1GMP5, 25
  %v1GMP5.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 25
  store <2 x double>* %v1GMP5.fca.25.extract, <2 x double>** %v1GMP5.fca.25.gep
  %v1GMP5.fca.26.extract = extractvalue %gemPrm %v1GMP5, 26
  %v1GMP5.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 26
  store <2 x double>* %v1GMP5.fca.26.extract, <2 x double>** %v1GMP5.fca.26.gep
  %v1GMP5.fca.27.extract = extractvalue %gemPrm %v1GMP5, 27
  %v1GMP5.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 27
  store <2 x double>* %v1GMP5.fca.27.extract, <2 x double>** %v1GMP5.fca.27.gep
  %v1GMP5.fca.28.extract = extractvalue %gemPrm %v1GMP5, 28
  %v1GMP5.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 28
  store <2 x double>* %v1GMP5.fca.28.extract, <2 x double>** %v1GMP5.fca.28.gep
  %v1GMP5.fca.29.extract = extractvalue %gemPrm %v1GMP5, 29
  %v1GMP5.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 29
  store <2 x double>* %v1GMP5.fca.29.extract, <2 x double>** %v1GMP5.fca.29.gep
  %v1GMP5.fca.30.extract = extractvalue %gemPrm %v1GMP5, 30
  %v1GMP5.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 30
  store <2 x double>* %v1GMP5.fca.30.extract, <2 x double>** %v1GMP5.fca.30.gep
  %v1GMP5.fca.31.extract = extractvalue %gemPrm %v1GMP5, 31
  %v1GMP5.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 31
  store <2 x double>* %v1GMP5.fca.31.extract, <2 x double>** %v1GMP5.fca.31.gep
  %v1GMP5.fca.32.extract = extractvalue %gemPrm %v1GMP5, 32
  %v1GMP5.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 32
  store <2 x double>* %v1GMP5.fca.32.extract, <2 x double>** %v1GMP5.fca.32.gep
  %v1GMP5.fca.33.extract = extractvalue %gemPrm %v1GMP5, 33
  %v1GMP5.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 33
  store <2 x double>* %v1GMP5.fca.33.extract, <2 x double>** %v1GMP5.fca.33.gep
  %v1GMP5.fca.34.extract = extractvalue %gemPrm %v1GMP5, 34
  %v1GMP5.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 34
  store <2 x double>* %v1GMP5.fca.34.extract, <2 x double>** %v1GMP5.fca.34.gep
  %v1GMP5.fca.35.extract = extractvalue %gemPrm %v1GMP5, 35
  %v1GMP5.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 35
  store <2 x double>* %v1GMP5.fca.35.extract, <2 x double>** %v1GMP5.fca.35.gep
  %v1GMP5.fca.36.extract = extractvalue %gemPrm %v1GMP5, 36
  %v1GMP5.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 36
  store <2 x double>* %v1GMP5.fca.36.extract, <2 x double>** %v1GMP5.fca.36.gep
  %v1GMP5.fca.37.extract = extractvalue %gemPrm %v1GMP5, 37
  %v1GMP5.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 37
  store <2 x double>* %v1GMP5.fca.37.extract, <2 x double>** %v1GMP5.fca.37.gep
  %v1GMP5.fca.38.extract = extractvalue %gemPrm %v1GMP5, 38
  %v1GMP5.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 38
  store <2 x double>* %v1GMP5.fca.38.extract, <2 x double>** %v1GMP5.fca.38.gep
  %v1GMP5.fca.39.extract = extractvalue %gemPrm %v1GMP5, 39
  %v1GMP5.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 39
  store <2 x double>* %v1GMP5.fca.39.extract, <2 x double>** %v1GMP5.fca.39.gep
  %v1GMP5.fca.40.extract = extractvalue %gemPrm %v1GMP5, 40
  %v1GMP5.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 40
  store <2 x double>* %v1GMP5.fca.40.extract, <2 x double>** %v1GMP5.fca.40.gep
  %v1GMP5.fca.41.extract = extractvalue %gemPrm %v1GMP5, 41
  %v1GMP5.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 41
  store <2 x double>* %v1GMP5.fca.41.extract, <2 x double>** %v1GMP5.fca.41.gep
  %v1GMP5.fca.42.extract = extractvalue %gemPrm %v1GMP5, 42
  %v1GMP5.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 42
  store <4 x double>* %v1GMP5.fca.42.extract, <4 x double>** %v1GMP5.fca.42.gep
  %v1GMP5.fca.43.extract = extractvalue %gemPrm %v1GMP5, 43
  %v1GMP5.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 43
  store <4 x double>* %v1GMP5.fca.43.extract, <4 x double>** %v1GMP5.fca.43.gep
  %v1GMP5.fca.44.extract = extractvalue %gemPrm %v1GMP5, 44
  %v1GMP5.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 44
  store <4 x double>* %v1GMP5.fca.44.extract, <4 x double>** %v1GMP5.fca.44.gep
  %v1GMP5.fca.45.extract = extractvalue %gemPrm %v1GMP5, 45
  %v1GMP5.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 45
  store <4 x double>* %v1GMP5.fca.45.extract, <4 x double>** %v1GMP5.fca.45.gep
  %v1GMP5.fca.46.extract = extractvalue %gemPrm %v1GMP5, 46
  %v1GMP5.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 46
  store <4 x double>* %v1GMP5.fca.46.extract, <4 x double>** %v1GMP5.fca.46.gep
  %v1GMP5.fca.47.extract = extractvalue %gemPrm %v1GMP5, 47
  %v1GMP5.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 47
  store <4 x double>* %v1GMP5.fca.47.extract, <4 x double>** %v1GMP5.fca.47.gep
  %v1GMP5.fca.48.extract = extractvalue %gemPrm %v1GMP5, 48
  %v1GMP5.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 48
  store <4 x double>* %v1GMP5.fca.48.extract, <4 x double>** %v1GMP5.fca.48.gep
  %v1GMP5.fca.49.extract = extractvalue %gemPrm %v1GMP5, 49
  %v1GMP5.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 49
  store <4 x double>* %v1GMP5.fca.49.extract, <4 x double>** %v1GMP5.fca.49.gep
  %v1GMP5.fca.50.extract = extractvalue %gemPrm %v1GMP5, 50
  %v1GMP5.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 50
  store <4 x double>* %v1GMP5.fca.50.extract, <4 x double>** %v1GMP5.fca.50.gep
  %v1GMP5.fca.51.extract = extractvalue %gemPrm %v1GMP5, 51
  %v1GMP5.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 51
  store <3 x double>* %v1GMP5.fca.51.extract, <3 x double>** %v1GMP5.fca.51.gep
  %v1GMP5.fca.52.extract = extractvalue %gemPrm %v1GMP5, 52
  %v1GMP5.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %v1GMP, i32 0, i32 52
  store <2 x double>* %v1GMP5.fca.52.extract, <2 x double>** %v1GMP5.fca.52.gep
  %v2GMP6 = call %gemPrm @"gemPrm@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U"()
  %v2GMP6.fca.0.extract = extractvalue %gemPrm %v2GMP6, 0
  %v2GMP6.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 0
  store double* %v2GMP6.fca.0.extract, double** %v2GMP6.fca.0.gep
  %v2GMP6.fca.1.extract = extractvalue %gemPrm %v2GMP6, 1
  %v2GMP6.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 1
  store double* %v2GMP6.fca.1.extract, double** %v2GMP6.fca.1.gep
  %v2GMP6.fca.2.extract = extractvalue %gemPrm %v2GMP6, 2
  %v2GMP6.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 2
  store double* %v2GMP6.fca.2.extract, double** %v2GMP6.fca.2.gep
  %v2GMP6.fca.3.extract = extractvalue %gemPrm %v2GMP6, 3
  %v2GMP6.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 3
  store double* %v2GMP6.fca.3.extract, double** %v2GMP6.fca.3.gep
  %v2GMP6.fca.4.extract = extractvalue %gemPrm %v2GMP6, 4
  %v2GMP6.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 4
  store double* %v2GMP6.fca.4.extract, double** %v2GMP6.fca.4.gep
  %v2GMP6.fca.5.extract = extractvalue %gemPrm %v2GMP6, 5
  %v2GMP6.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 5
  store double* %v2GMP6.fca.5.extract, double** %v2GMP6.fca.5.gep
  %v2GMP6.fca.6.extract = extractvalue %gemPrm %v2GMP6, 6
  %v2GMP6.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 6
  store <3 x double>* %v2GMP6.fca.6.extract, <3 x double>** %v2GMP6.fca.6.gep
  %v2GMP6.fca.7.extract = extractvalue %gemPrm %v2GMP6, 7
  %v2GMP6.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 7
  store <3 x double>* %v2GMP6.fca.7.extract, <3 x double>** %v2GMP6.fca.7.gep
  %v2GMP6.fca.8.extract = extractvalue %gemPrm %v2GMP6, 8
  %v2GMP6.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 8
  store <3 x double>* %v2GMP6.fca.8.extract, <3 x double>** %v2GMP6.fca.8.gep
  %v2GMP6.fca.9.extract = extractvalue %gemPrm %v2GMP6, 9
  %v2GMP6.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 9
  store <3 x double>* %v2GMP6.fca.9.extract, <3 x double>** %v2GMP6.fca.9.gep
  %v2GMP6.fca.10.extract = extractvalue %gemPrm %v2GMP6, 10
  %v2GMP6.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 10
  store <3 x double>* %v2GMP6.fca.10.extract, <3 x double>** %v2GMP6.fca.10.gep
  %v2GMP6.fca.11.extract = extractvalue %gemPrm %v2GMP6, 11
  %v2GMP6.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 11
  store <3 x double>* %v2GMP6.fca.11.extract, <3 x double>** %v2GMP6.fca.11.gep
  %v2GMP6.fca.12.extract = extractvalue %gemPrm %v2GMP6, 12
  %v2GMP6.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 12
  store <3 x double>* %v2GMP6.fca.12.extract, <3 x double>** %v2GMP6.fca.12.gep
  %v2GMP6.fca.13.extract = extractvalue %gemPrm %v2GMP6, 13
  %v2GMP6.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 13
  store <2 x double>* %v2GMP6.fca.13.extract, <2 x double>** %v2GMP6.fca.13.gep
  %v2GMP6.fca.14.extract = extractvalue %gemPrm %v2GMP6, 14
  %v2GMP6.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 14
  store <2 x double>* %v2GMP6.fca.14.extract, <2 x double>** %v2GMP6.fca.14.gep
  %v2GMP6.fca.15.extract = extractvalue %gemPrm %v2GMP6, 15
  %v2GMP6.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 15
  store <2 x double>* %v2GMP6.fca.15.extract, <2 x double>** %v2GMP6.fca.15.gep
  %v2GMP6.fca.16.extract = extractvalue %gemPrm %v2GMP6, 16
  %v2GMP6.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 16
  store <2 x double>* %v2GMP6.fca.16.extract, <2 x double>** %v2GMP6.fca.16.gep
  %v2GMP6.fca.17.extract = extractvalue %gemPrm %v2GMP6, 17
  %v2GMP6.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 17
  store <2 x double>* %v2GMP6.fca.17.extract, <2 x double>** %v2GMP6.fca.17.gep
  %v2GMP6.fca.18.extract = extractvalue %gemPrm %v2GMP6, 18
  %v2GMP6.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 18
  store <2 x double>* %v2GMP6.fca.18.extract, <2 x double>** %v2GMP6.fca.18.gep
  %v2GMP6.fca.19.extract = extractvalue %gemPrm %v2GMP6, 19
  %v2GMP6.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 19
  store <2 x double>* %v2GMP6.fca.19.extract, <2 x double>** %v2GMP6.fca.19.gep
  %v2GMP6.fca.20.extract = extractvalue %gemPrm %v2GMP6, 20
  %v2GMP6.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 20
  store <2 x double>* %v2GMP6.fca.20.extract, <2 x double>** %v2GMP6.fca.20.gep
  %v2GMP6.fca.21.extract = extractvalue %gemPrm %v2GMP6, 21
  %v2GMP6.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 21
  store <2 x double>* %v2GMP6.fca.21.extract, <2 x double>** %v2GMP6.fca.21.gep
  %v2GMP6.fca.22.extract = extractvalue %gemPrm %v2GMP6, 22
  %v2GMP6.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 22
  store <2 x double>* %v2GMP6.fca.22.extract, <2 x double>** %v2GMP6.fca.22.gep
  %v2GMP6.fca.23.extract = extractvalue %gemPrm %v2GMP6, 23
  %v2GMP6.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 23
  store <2 x double>* %v2GMP6.fca.23.extract, <2 x double>** %v2GMP6.fca.23.gep
  %v2GMP6.fca.24.extract = extractvalue %gemPrm %v2GMP6, 24
  %v2GMP6.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 24
  store <2 x double>* %v2GMP6.fca.24.extract, <2 x double>** %v2GMP6.fca.24.gep
  %v2GMP6.fca.25.extract = extractvalue %gemPrm %v2GMP6, 25
  %v2GMP6.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 25
  store <2 x double>* %v2GMP6.fca.25.extract, <2 x double>** %v2GMP6.fca.25.gep
  %v2GMP6.fca.26.extract = extractvalue %gemPrm %v2GMP6, 26
  %v2GMP6.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 26
  store <2 x double>* %v2GMP6.fca.26.extract, <2 x double>** %v2GMP6.fca.26.gep
  %v2GMP6.fca.27.extract = extractvalue %gemPrm %v2GMP6, 27
  %v2GMP6.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 27
  store <2 x double>* %v2GMP6.fca.27.extract, <2 x double>** %v2GMP6.fca.27.gep
  %v2GMP6.fca.28.extract = extractvalue %gemPrm %v2GMP6, 28
  %v2GMP6.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 28
  store <2 x double>* %v2GMP6.fca.28.extract, <2 x double>** %v2GMP6.fca.28.gep
  %v2GMP6.fca.29.extract = extractvalue %gemPrm %v2GMP6, 29
  %v2GMP6.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 29
  store <2 x double>* %v2GMP6.fca.29.extract, <2 x double>** %v2GMP6.fca.29.gep
  %v2GMP6.fca.30.extract = extractvalue %gemPrm %v2GMP6, 30
  %v2GMP6.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 30
  store <2 x double>* %v2GMP6.fca.30.extract, <2 x double>** %v2GMP6.fca.30.gep
  %v2GMP6.fca.31.extract = extractvalue %gemPrm %v2GMP6, 31
  %v2GMP6.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 31
  store <2 x double>* %v2GMP6.fca.31.extract, <2 x double>** %v2GMP6.fca.31.gep
  %v2GMP6.fca.32.extract = extractvalue %gemPrm %v2GMP6, 32
  %v2GMP6.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 32
  store <2 x double>* %v2GMP6.fca.32.extract, <2 x double>** %v2GMP6.fca.32.gep
  %v2GMP6.fca.33.extract = extractvalue %gemPrm %v2GMP6, 33
  %v2GMP6.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 33
  store <2 x double>* %v2GMP6.fca.33.extract, <2 x double>** %v2GMP6.fca.33.gep
  %v2GMP6.fca.34.extract = extractvalue %gemPrm %v2GMP6, 34
  %v2GMP6.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 34
  store <2 x double>* %v2GMP6.fca.34.extract, <2 x double>** %v2GMP6.fca.34.gep
  %v2GMP6.fca.35.extract = extractvalue %gemPrm %v2GMP6, 35
  %v2GMP6.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 35
  store <2 x double>* %v2GMP6.fca.35.extract, <2 x double>** %v2GMP6.fca.35.gep
  %v2GMP6.fca.36.extract = extractvalue %gemPrm %v2GMP6, 36
  %v2GMP6.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 36
  store <2 x double>* %v2GMP6.fca.36.extract, <2 x double>** %v2GMP6.fca.36.gep
  %v2GMP6.fca.37.extract = extractvalue %gemPrm %v2GMP6, 37
  %v2GMP6.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 37
  store <2 x double>* %v2GMP6.fca.37.extract, <2 x double>** %v2GMP6.fca.37.gep
  %v2GMP6.fca.38.extract = extractvalue %gemPrm %v2GMP6, 38
  %v2GMP6.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 38
  store <2 x double>* %v2GMP6.fca.38.extract, <2 x double>** %v2GMP6.fca.38.gep
  %v2GMP6.fca.39.extract = extractvalue %gemPrm %v2GMP6, 39
  %v2GMP6.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 39
  store <2 x double>* %v2GMP6.fca.39.extract, <2 x double>** %v2GMP6.fca.39.gep
  %v2GMP6.fca.40.extract = extractvalue %gemPrm %v2GMP6, 40
  %v2GMP6.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 40
  store <2 x double>* %v2GMP6.fca.40.extract, <2 x double>** %v2GMP6.fca.40.gep
  %v2GMP6.fca.41.extract = extractvalue %gemPrm %v2GMP6, 41
  %v2GMP6.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 41
  store <2 x double>* %v2GMP6.fca.41.extract, <2 x double>** %v2GMP6.fca.41.gep
  %v2GMP6.fca.42.extract = extractvalue %gemPrm %v2GMP6, 42
  %v2GMP6.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 42
  store <4 x double>* %v2GMP6.fca.42.extract, <4 x double>** %v2GMP6.fca.42.gep
  %v2GMP6.fca.43.extract = extractvalue %gemPrm %v2GMP6, 43
  %v2GMP6.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 43
  store <4 x double>* %v2GMP6.fca.43.extract, <4 x double>** %v2GMP6.fca.43.gep
  %v2GMP6.fca.44.extract = extractvalue %gemPrm %v2GMP6, 44
  %v2GMP6.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 44
  store <4 x double>* %v2GMP6.fca.44.extract, <4 x double>** %v2GMP6.fca.44.gep
  %v2GMP6.fca.45.extract = extractvalue %gemPrm %v2GMP6, 45
  %v2GMP6.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 45
  store <4 x double>* %v2GMP6.fca.45.extract, <4 x double>** %v2GMP6.fca.45.gep
  %v2GMP6.fca.46.extract = extractvalue %gemPrm %v2GMP6, 46
  %v2GMP6.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 46
  store <4 x double>* %v2GMP6.fca.46.extract, <4 x double>** %v2GMP6.fca.46.gep
  %v2GMP6.fca.47.extract = extractvalue %gemPrm %v2GMP6, 47
  %v2GMP6.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 47
  store <4 x double>* %v2GMP6.fca.47.extract, <4 x double>** %v2GMP6.fca.47.gep
  %v2GMP6.fca.48.extract = extractvalue %gemPrm %v2GMP6, 48
  %v2GMP6.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 48
  store <4 x double>* %v2GMP6.fca.48.extract, <4 x double>** %v2GMP6.fca.48.gep
  %v2GMP6.fca.49.extract = extractvalue %gemPrm %v2GMP6, 49
  %v2GMP6.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 49
  store <4 x double>* %v2GMP6.fca.49.extract, <4 x double>** %v2GMP6.fca.49.gep
  %v2GMP6.fca.50.extract = extractvalue %gemPrm %v2GMP6, 50
  %v2GMP6.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 50
  store <4 x double>* %v2GMP6.fca.50.extract, <4 x double>** %v2GMP6.fca.50.gep
  %v2GMP6.fca.51.extract = extractvalue %gemPrm %v2GMP6, 51
  %v2GMP6.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 51
  store <3 x double>* %v2GMP6.fca.51.extract, <3 x double>** %v2GMP6.fca.51.gep
  %v2GMP6.fca.52.extract = extractvalue %gemPrm %v2GMP6, 52
  %v2GMP6.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %v2GMP, i32 0, i32 52
  store <2 x double>* %v2GMP6.fca.52.extract, <2 x double>** %v2GMP6.fca.52.gep
  %v3GMP7 = call %gemPrm @"gemPrm@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U"()
  %v3GMP7.fca.0.extract = extractvalue %gemPrm %v3GMP7, 0
  %v3GMP7.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 0
  store double* %v3GMP7.fca.0.extract, double** %v3GMP7.fca.0.gep
  %v3GMP7.fca.1.extract = extractvalue %gemPrm %v3GMP7, 1
  %v3GMP7.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 1
  store double* %v3GMP7.fca.1.extract, double** %v3GMP7.fca.1.gep
  %v3GMP7.fca.2.extract = extractvalue %gemPrm %v3GMP7, 2
  %v3GMP7.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 2
  store double* %v3GMP7.fca.2.extract, double** %v3GMP7.fca.2.gep
  %v3GMP7.fca.3.extract = extractvalue %gemPrm %v3GMP7, 3
  %v3GMP7.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 3
  store double* %v3GMP7.fca.3.extract, double** %v3GMP7.fca.3.gep
  %v3GMP7.fca.4.extract = extractvalue %gemPrm %v3GMP7, 4
  %v3GMP7.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 4
  store double* %v3GMP7.fca.4.extract, double** %v3GMP7.fca.4.gep
  %v3GMP7.fca.5.extract = extractvalue %gemPrm %v3GMP7, 5
  %v3GMP7.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 5
  store double* %v3GMP7.fca.5.extract, double** %v3GMP7.fca.5.gep
  %v3GMP7.fca.6.extract = extractvalue %gemPrm %v3GMP7, 6
  %v3GMP7.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 6
  store <3 x double>* %v3GMP7.fca.6.extract, <3 x double>** %v3GMP7.fca.6.gep
  %v3GMP7.fca.7.extract = extractvalue %gemPrm %v3GMP7, 7
  %v3GMP7.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 7
  store <3 x double>* %v3GMP7.fca.7.extract, <3 x double>** %v3GMP7.fca.7.gep
  %v3GMP7.fca.8.extract = extractvalue %gemPrm %v3GMP7, 8
  %v3GMP7.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 8
  store <3 x double>* %v3GMP7.fca.8.extract, <3 x double>** %v3GMP7.fca.8.gep
  %v3GMP7.fca.9.extract = extractvalue %gemPrm %v3GMP7, 9
  %v3GMP7.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 9
  store <3 x double>* %v3GMP7.fca.9.extract, <3 x double>** %v3GMP7.fca.9.gep
  %v3GMP7.fca.10.extract = extractvalue %gemPrm %v3GMP7, 10
  %v3GMP7.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 10
  store <3 x double>* %v3GMP7.fca.10.extract, <3 x double>** %v3GMP7.fca.10.gep
  %v3GMP7.fca.11.extract = extractvalue %gemPrm %v3GMP7, 11
  %v3GMP7.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 11
  store <3 x double>* %v3GMP7.fca.11.extract, <3 x double>** %v3GMP7.fca.11.gep
  %v3GMP7.fca.12.extract = extractvalue %gemPrm %v3GMP7, 12
  %v3GMP7.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 12
  store <3 x double>* %v3GMP7.fca.12.extract, <3 x double>** %v3GMP7.fca.12.gep
  %v3GMP7.fca.13.extract = extractvalue %gemPrm %v3GMP7, 13
  %v3GMP7.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 13
  store <2 x double>* %v3GMP7.fca.13.extract, <2 x double>** %v3GMP7.fca.13.gep
  %v3GMP7.fca.14.extract = extractvalue %gemPrm %v3GMP7, 14
  %v3GMP7.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 14
  store <2 x double>* %v3GMP7.fca.14.extract, <2 x double>** %v3GMP7.fca.14.gep
  %v3GMP7.fca.15.extract = extractvalue %gemPrm %v3GMP7, 15
  %v3GMP7.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 15
  store <2 x double>* %v3GMP7.fca.15.extract, <2 x double>** %v3GMP7.fca.15.gep
  %v3GMP7.fca.16.extract = extractvalue %gemPrm %v3GMP7, 16
  %v3GMP7.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 16
  store <2 x double>* %v3GMP7.fca.16.extract, <2 x double>** %v3GMP7.fca.16.gep
  %v3GMP7.fca.17.extract = extractvalue %gemPrm %v3GMP7, 17
  %v3GMP7.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 17
  store <2 x double>* %v3GMP7.fca.17.extract, <2 x double>** %v3GMP7.fca.17.gep
  %v3GMP7.fca.18.extract = extractvalue %gemPrm %v3GMP7, 18
  %v3GMP7.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 18
  store <2 x double>* %v3GMP7.fca.18.extract, <2 x double>** %v3GMP7.fca.18.gep
  %v3GMP7.fca.19.extract = extractvalue %gemPrm %v3GMP7, 19
  %v3GMP7.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 19
  store <2 x double>* %v3GMP7.fca.19.extract, <2 x double>** %v3GMP7.fca.19.gep
  %v3GMP7.fca.20.extract = extractvalue %gemPrm %v3GMP7, 20
  %v3GMP7.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 20
  store <2 x double>* %v3GMP7.fca.20.extract, <2 x double>** %v3GMP7.fca.20.gep
  %v3GMP7.fca.21.extract = extractvalue %gemPrm %v3GMP7, 21
  %v3GMP7.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 21
  store <2 x double>* %v3GMP7.fca.21.extract, <2 x double>** %v3GMP7.fca.21.gep
  %v3GMP7.fca.22.extract = extractvalue %gemPrm %v3GMP7, 22
  %v3GMP7.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 22
  store <2 x double>* %v3GMP7.fca.22.extract, <2 x double>** %v3GMP7.fca.22.gep
  %v3GMP7.fca.23.extract = extractvalue %gemPrm %v3GMP7, 23
  %v3GMP7.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 23
  store <2 x double>* %v3GMP7.fca.23.extract, <2 x double>** %v3GMP7.fca.23.gep
  %v3GMP7.fca.24.extract = extractvalue %gemPrm %v3GMP7, 24
  %v3GMP7.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 24
  store <2 x double>* %v3GMP7.fca.24.extract, <2 x double>** %v3GMP7.fca.24.gep
  %v3GMP7.fca.25.extract = extractvalue %gemPrm %v3GMP7, 25
  %v3GMP7.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 25
  store <2 x double>* %v3GMP7.fca.25.extract, <2 x double>** %v3GMP7.fca.25.gep
  %v3GMP7.fca.26.extract = extractvalue %gemPrm %v3GMP7, 26
  %v3GMP7.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 26
  store <2 x double>* %v3GMP7.fca.26.extract, <2 x double>** %v3GMP7.fca.26.gep
  %v3GMP7.fca.27.extract = extractvalue %gemPrm %v3GMP7, 27
  %v3GMP7.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 27
  store <2 x double>* %v3GMP7.fca.27.extract, <2 x double>** %v3GMP7.fca.27.gep
  %v3GMP7.fca.28.extract = extractvalue %gemPrm %v3GMP7, 28
  %v3GMP7.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 28
  store <2 x double>* %v3GMP7.fca.28.extract, <2 x double>** %v3GMP7.fca.28.gep
  %v3GMP7.fca.29.extract = extractvalue %gemPrm %v3GMP7, 29
  %v3GMP7.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 29
  store <2 x double>* %v3GMP7.fca.29.extract, <2 x double>** %v3GMP7.fca.29.gep
  %v3GMP7.fca.30.extract = extractvalue %gemPrm %v3GMP7, 30
  %v3GMP7.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 30
  store <2 x double>* %v3GMP7.fca.30.extract, <2 x double>** %v3GMP7.fca.30.gep
  %v3GMP7.fca.31.extract = extractvalue %gemPrm %v3GMP7, 31
  %v3GMP7.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 31
  store <2 x double>* %v3GMP7.fca.31.extract, <2 x double>** %v3GMP7.fca.31.gep
  %v3GMP7.fca.32.extract = extractvalue %gemPrm %v3GMP7, 32
  %v3GMP7.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 32
  store <2 x double>* %v3GMP7.fca.32.extract, <2 x double>** %v3GMP7.fca.32.gep
  %v3GMP7.fca.33.extract = extractvalue %gemPrm %v3GMP7, 33
  %v3GMP7.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 33
  store <2 x double>* %v3GMP7.fca.33.extract, <2 x double>** %v3GMP7.fca.33.gep
  %v3GMP7.fca.34.extract = extractvalue %gemPrm %v3GMP7, 34
  %v3GMP7.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 34
  store <2 x double>* %v3GMP7.fca.34.extract, <2 x double>** %v3GMP7.fca.34.gep
  %v3GMP7.fca.35.extract = extractvalue %gemPrm %v3GMP7, 35
  %v3GMP7.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 35
  store <2 x double>* %v3GMP7.fca.35.extract, <2 x double>** %v3GMP7.fca.35.gep
  %v3GMP7.fca.36.extract = extractvalue %gemPrm %v3GMP7, 36
  %v3GMP7.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 36
  store <2 x double>* %v3GMP7.fca.36.extract, <2 x double>** %v3GMP7.fca.36.gep
  %v3GMP7.fca.37.extract = extractvalue %gemPrm %v3GMP7, 37
  %v3GMP7.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 37
  store <2 x double>* %v3GMP7.fca.37.extract, <2 x double>** %v3GMP7.fca.37.gep
  %v3GMP7.fca.38.extract = extractvalue %gemPrm %v3GMP7, 38
  %v3GMP7.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 38
  store <2 x double>* %v3GMP7.fca.38.extract, <2 x double>** %v3GMP7.fca.38.gep
  %v3GMP7.fca.39.extract = extractvalue %gemPrm %v3GMP7, 39
  %v3GMP7.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 39
  store <2 x double>* %v3GMP7.fca.39.extract, <2 x double>** %v3GMP7.fca.39.gep
  %v3GMP7.fca.40.extract = extractvalue %gemPrm %v3GMP7, 40
  %v3GMP7.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 40
  store <2 x double>* %v3GMP7.fca.40.extract, <2 x double>** %v3GMP7.fca.40.gep
  %v3GMP7.fca.41.extract = extractvalue %gemPrm %v3GMP7, 41
  %v3GMP7.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 41
  store <2 x double>* %v3GMP7.fca.41.extract, <2 x double>** %v3GMP7.fca.41.gep
  %v3GMP7.fca.42.extract = extractvalue %gemPrm %v3GMP7, 42
  %v3GMP7.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 42
  store <4 x double>* %v3GMP7.fca.42.extract, <4 x double>** %v3GMP7.fca.42.gep
  %v3GMP7.fca.43.extract = extractvalue %gemPrm %v3GMP7, 43
  %v3GMP7.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 43
  store <4 x double>* %v3GMP7.fca.43.extract, <4 x double>** %v3GMP7.fca.43.gep
  %v3GMP7.fca.44.extract = extractvalue %gemPrm %v3GMP7, 44
  %v3GMP7.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 44
  store <4 x double>* %v3GMP7.fca.44.extract, <4 x double>** %v3GMP7.fca.44.gep
  %v3GMP7.fca.45.extract = extractvalue %gemPrm %v3GMP7, 45
  %v3GMP7.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 45
  store <4 x double>* %v3GMP7.fca.45.extract, <4 x double>** %v3GMP7.fca.45.gep
  %v3GMP7.fca.46.extract = extractvalue %gemPrm %v3GMP7, 46
  %v3GMP7.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 46
  store <4 x double>* %v3GMP7.fca.46.extract, <4 x double>** %v3GMP7.fca.46.gep
  %v3GMP7.fca.47.extract = extractvalue %gemPrm %v3GMP7, 47
  %v3GMP7.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 47
  store <4 x double>* %v3GMP7.fca.47.extract, <4 x double>** %v3GMP7.fca.47.gep
  %v3GMP7.fca.48.extract = extractvalue %gemPrm %v3GMP7, 48
  %v3GMP7.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 48
  store <4 x double>* %v3GMP7.fca.48.extract, <4 x double>** %v3GMP7.fca.48.gep
  %v3GMP7.fca.49.extract = extractvalue %gemPrm %v3GMP7, 49
  %v3GMP7.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 49
  store <4 x double>* %v3GMP7.fca.49.extract, <4 x double>** %v3GMP7.fca.49.gep
  %v3GMP7.fca.50.extract = extractvalue %gemPrm %v3GMP7, 50
  %v3GMP7.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 50
  store <4 x double>* %v3GMP7.fca.50.extract, <4 x double>** %v3GMP7.fca.50.gep
  %v3GMP7.fca.51.extract = extractvalue %gemPrm %v3GMP7, 51
  %v3GMP7.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 51
  store <3 x double>* %v3GMP7.fca.51.extract, <3 x double>** %v3GMP7.fca.51.gep
  %v3GMP7.fca.52.extract = extractvalue %gemPrm %v3GMP7, 52
  %v3GMP7.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %v3GMP, i32 0, i32 52
  store <2 x double>* %v3GMP7.fca.52.extract, <2 x double>** %v3GMP7.fca.52.gep
  %v4GMP8 = call %gemPrm @"gemPrm@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U"()
  %v4GMP8.fca.0.extract = extractvalue %gemPrm %v4GMP8, 0
  %v4GMP8.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 0
  store double* %v4GMP8.fca.0.extract, double** %v4GMP8.fca.0.gep
  %v4GMP8.fca.1.extract = extractvalue %gemPrm %v4GMP8, 1
  %v4GMP8.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 1
  store double* %v4GMP8.fca.1.extract, double** %v4GMP8.fca.1.gep
  %v4GMP8.fca.2.extract = extractvalue %gemPrm %v4GMP8, 2
  %v4GMP8.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 2
  store double* %v4GMP8.fca.2.extract, double** %v4GMP8.fca.2.gep
  %v4GMP8.fca.3.extract = extractvalue %gemPrm %v4GMP8, 3
  %v4GMP8.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 3
  store double* %v4GMP8.fca.3.extract, double** %v4GMP8.fca.3.gep
  %v4GMP8.fca.4.extract = extractvalue %gemPrm %v4GMP8, 4
  %v4GMP8.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 4
  store double* %v4GMP8.fca.4.extract, double** %v4GMP8.fca.4.gep
  %v4GMP8.fca.5.extract = extractvalue %gemPrm %v4GMP8, 5
  %v4GMP8.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 5
  store double* %v4GMP8.fca.5.extract, double** %v4GMP8.fca.5.gep
  %v4GMP8.fca.6.extract = extractvalue %gemPrm %v4GMP8, 6
  %v4GMP8.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 6
  store <3 x double>* %v4GMP8.fca.6.extract, <3 x double>** %v4GMP8.fca.6.gep
  %v4GMP8.fca.7.extract = extractvalue %gemPrm %v4GMP8, 7
  %v4GMP8.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 7
  store <3 x double>* %v4GMP8.fca.7.extract, <3 x double>** %v4GMP8.fca.7.gep
  %v4GMP8.fca.8.extract = extractvalue %gemPrm %v4GMP8, 8
  %v4GMP8.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 8
  store <3 x double>* %v4GMP8.fca.8.extract, <3 x double>** %v4GMP8.fca.8.gep
  %v4GMP8.fca.9.extract = extractvalue %gemPrm %v4GMP8, 9
  %v4GMP8.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 9
  store <3 x double>* %v4GMP8.fca.9.extract, <3 x double>** %v4GMP8.fca.9.gep
  %v4GMP8.fca.10.extract = extractvalue %gemPrm %v4GMP8, 10
  %v4GMP8.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 10
  store <3 x double>* %v4GMP8.fca.10.extract, <3 x double>** %v4GMP8.fca.10.gep
  %v4GMP8.fca.11.extract = extractvalue %gemPrm %v4GMP8, 11
  %v4GMP8.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 11
  store <3 x double>* %v4GMP8.fca.11.extract, <3 x double>** %v4GMP8.fca.11.gep
  %v4GMP8.fca.12.extract = extractvalue %gemPrm %v4GMP8, 12
  %v4GMP8.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 12
  store <3 x double>* %v4GMP8.fca.12.extract, <3 x double>** %v4GMP8.fca.12.gep
  %v4GMP8.fca.13.extract = extractvalue %gemPrm %v4GMP8, 13
  %v4GMP8.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 13
  store <2 x double>* %v4GMP8.fca.13.extract, <2 x double>** %v4GMP8.fca.13.gep
  %v4GMP8.fca.14.extract = extractvalue %gemPrm %v4GMP8, 14
  %v4GMP8.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 14
  store <2 x double>* %v4GMP8.fca.14.extract, <2 x double>** %v4GMP8.fca.14.gep
  %v4GMP8.fca.15.extract = extractvalue %gemPrm %v4GMP8, 15
  %v4GMP8.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 15
  store <2 x double>* %v4GMP8.fca.15.extract, <2 x double>** %v4GMP8.fca.15.gep
  %v4GMP8.fca.16.extract = extractvalue %gemPrm %v4GMP8, 16
  %v4GMP8.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 16
  store <2 x double>* %v4GMP8.fca.16.extract, <2 x double>** %v4GMP8.fca.16.gep
  %v4GMP8.fca.17.extract = extractvalue %gemPrm %v4GMP8, 17
  %v4GMP8.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 17
  store <2 x double>* %v4GMP8.fca.17.extract, <2 x double>** %v4GMP8.fca.17.gep
  %v4GMP8.fca.18.extract = extractvalue %gemPrm %v4GMP8, 18
  %v4GMP8.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 18
  store <2 x double>* %v4GMP8.fca.18.extract, <2 x double>** %v4GMP8.fca.18.gep
  %v4GMP8.fca.19.extract = extractvalue %gemPrm %v4GMP8, 19
  %v4GMP8.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 19
  store <2 x double>* %v4GMP8.fca.19.extract, <2 x double>** %v4GMP8.fca.19.gep
  %v4GMP8.fca.20.extract = extractvalue %gemPrm %v4GMP8, 20
  %v4GMP8.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 20
  store <2 x double>* %v4GMP8.fca.20.extract, <2 x double>** %v4GMP8.fca.20.gep
  %v4GMP8.fca.21.extract = extractvalue %gemPrm %v4GMP8, 21
  %v4GMP8.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 21
  store <2 x double>* %v4GMP8.fca.21.extract, <2 x double>** %v4GMP8.fca.21.gep
  %v4GMP8.fca.22.extract = extractvalue %gemPrm %v4GMP8, 22
  %v4GMP8.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 22
  store <2 x double>* %v4GMP8.fca.22.extract, <2 x double>** %v4GMP8.fca.22.gep
  %v4GMP8.fca.23.extract = extractvalue %gemPrm %v4GMP8, 23
  %v4GMP8.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 23
  store <2 x double>* %v4GMP8.fca.23.extract, <2 x double>** %v4GMP8.fca.23.gep
  %v4GMP8.fca.24.extract = extractvalue %gemPrm %v4GMP8, 24
  %v4GMP8.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 24
  store <2 x double>* %v4GMP8.fca.24.extract, <2 x double>** %v4GMP8.fca.24.gep
  %v4GMP8.fca.25.extract = extractvalue %gemPrm %v4GMP8, 25
  %v4GMP8.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 25
  store <2 x double>* %v4GMP8.fca.25.extract, <2 x double>** %v4GMP8.fca.25.gep
  %v4GMP8.fca.26.extract = extractvalue %gemPrm %v4GMP8, 26
  %v4GMP8.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 26
  store <2 x double>* %v4GMP8.fca.26.extract, <2 x double>** %v4GMP8.fca.26.gep
  %v4GMP8.fca.27.extract = extractvalue %gemPrm %v4GMP8, 27
  %v4GMP8.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 27
  store <2 x double>* %v4GMP8.fca.27.extract, <2 x double>** %v4GMP8.fca.27.gep
  %v4GMP8.fca.28.extract = extractvalue %gemPrm %v4GMP8, 28
  %v4GMP8.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 28
  store <2 x double>* %v4GMP8.fca.28.extract, <2 x double>** %v4GMP8.fca.28.gep
  %v4GMP8.fca.29.extract = extractvalue %gemPrm %v4GMP8, 29
  %v4GMP8.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 29
  store <2 x double>* %v4GMP8.fca.29.extract, <2 x double>** %v4GMP8.fca.29.gep
  %v4GMP8.fca.30.extract = extractvalue %gemPrm %v4GMP8, 30
  %v4GMP8.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 30
  store <2 x double>* %v4GMP8.fca.30.extract, <2 x double>** %v4GMP8.fca.30.gep
  %v4GMP8.fca.31.extract = extractvalue %gemPrm %v4GMP8, 31
  %v4GMP8.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 31
  store <2 x double>* %v4GMP8.fca.31.extract, <2 x double>** %v4GMP8.fca.31.gep
  %v4GMP8.fca.32.extract = extractvalue %gemPrm %v4GMP8, 32
  %v4GMP8.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 32
  store <2 x double>* %v4GMP8.fca.32.extract, <2 x double>** %v4GMP8.fca.32.gep
  %v4GMP8.fca.33.extract = extractvalue %gemPrm %v4GMP8, 33
  %v4GMP8.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 33
  store <2 x double>* %v4GMP8.fca.33.extract, <2 x double>** %v4GMP8.fca.33.gep
  %v4GMP8.fca.34.extract = extractvalue %gemPrm %v4GMP8, 34
  %v4GMP8.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 34
  store <2 x double>* %v4GMP8.fca.34.extract, <2 x double>** %v4GMP8.fca.34.gep
  %v4GMP8.fca.35.extract = extractvalue %gemPrm %v4GMP8, 35
  %v4GMP8.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 35
  store <2 x double>* %v4GMP8.fca.35.extract, <2 x double>** %v4GMP8.fca.35.gep
  %v4GMP8.fca.36.extract = extractvalue %gemPrm %v4GMP8, 36
  %v4GMP8.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 36
  store <2 x double>* %v4GMP8.fca.36.extract, <2 x double>** %v4GMP8.fca.36.gep
  %v4GMP8.fca.37.extract = extractvalue %gemPrm %v4GMP8, 37
  %v4GMP8.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 37
  store <2 x double>* %v4GMP8.fca.37.extract, <2 x double>** %v4GMP8.fca.37.gep
  %v4GMP8.fca.38.extract = extractvalue %gemPrm %v4GMP8, 38
  %v4GMP8.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 38
  store <2 x double>* %v4GMP8.fca.38.extract, <2 x double>** %v4GMP8.fca.38.gep
  %v4GMP8.fca.39.extract = extractvalue %gemPrm %v4GMP8, 39
  %v4GMP8.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 39
  store <2 x double>* %v4GMP8.fca.39.extract, <2 x double>** %v4GMP8.fca.39.gep
  %v4GMP8.fca.40.extract = extractvalue %gemPrm %v4GMP8, 40
  %v4GMP8.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 40
  store <2 x double>* %v4GMP8.fca.40.extract, <2 x double>** %v4GMP8.fca.40.gep
  %v4GMP8.fca.41.extract = extractvalue %gemPrm %v4GMP8, 41
  %v4GMP8.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 41
  store <2 x double>* %v4GMP8.fca.41.extract, <2 x double>** %v4GMP8.fca.41.gep
  %v4GMP8.fca.42.extract = extractvalue %gemPrm %v4GMP8, 42
  %v4GMP8.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 42
  store <4 x double>* %v4GMP8.fca.42.extract, <4 x double>** %v4GMP8.fca.42.gep
  %v4GMP8.fca.43.extract = extractvalue %gemPrm %v4GMP8, 43
  %v4GMP8.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 43
  store <4 x double>* %v4GMP8.fca.43.extract, <4 x double>** %v4GMP8.fca.43.gep
  %v4GMP8.fca.44.extract = extractvalue %gemPrm %v4GMP8, 44
  %v4GMP8.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 44
  store <4 x double>* %v4GMP8.fca.44.extract, <4 x double>** %v4GMP8.fca.44.gep
  %v4GMP8.fca.45.extract = extractvalue %gemPrm %v4GMP8, 45
  %v4GMP8.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 45
  store <4 x double>* %v4GMP8.fca.45.extract, <4 x double>** %v4GMP8.fca.45.gep
  %v4GMP8.fca.46.extract = extractvalue %gemPrm %v4GMP8, 46
  %v4GMP8.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 46
  store <4 x double>* %v4GMP8.fca.46.extract, <4 x double>** %v4GMP8.fca.46.gep
  %v4GMP8.fca.47.extract = extractvalue %gemPrm %v4GMP8, 47
  %v4GMP8.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 47
  store <4 x double>* %v4GMP8.fca.47.extract, <4 x double>** %v4GMP8.fca.47.gep
  %v4GMP8.fca.48.extract = extractvalue %gemPrm %v4GMP8, 48
  %v4GMP8.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 48
  store <4 x double>* %v4GMP8.fca.48.extract, <4 x double>** %v4GMP8.fca.48.gep
  %v4GMP8.fca.49.extract = extractvalue %gemPrm %v4GMP8, 49
  %v4GMP8.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 49
  store <4 x double>* %v4GMP8.fca.49.extract, <4 x double>** %v4GMP8.fca.49.gep
  %v4GMP8.fca.50.extract = extractvalue %gemPrm %v4GMP8, 50
  %v4GMP8.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 50
  store <4 x double>* %v4GMP8.fca.50.extract, <4 x double>** %v4GMP8.fca.50.gep
  %v4GMP8.fca.51.extract = extractvalue %gemPrm %v4GMP8, 51
  %v4GMP8.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 51
  store <3 x double>* %v4GMP8.fca.51.extract, <3 x double>** %v4GMP8.fca.51.gep
  %v4GMP8.fca.52.extract = extractvalue %gemPrm %v4GMP8, 52
  %v4GMP8.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %v4GMP, i32 0, i32 52
  store <2 x double>* %v4GMP8.fca.52.extract, <2 x double>** %v4GMP8.fca.52.gep
  %GEM9.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM9.fca.0.insert = insertvalue %gem undef, i64* %GEM9.fca.0.load, 0
  %GEM9.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM9.fca.1.insert = insertvalue %gem %GEM9.fca.0.insert, i64* %GEM9.fca.1.load, 1
  %GEM9.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM9.fca.2.insert = insertvalue %gem %GEM9.fca.1.insert, i64* %GEM9.fca.2.load, 2
  %GEM9.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM9.fca.3.insert = insertvalue %gem %GEM9.fca.2.insert, i64* %GEM9.fca.3.load, 3
  %GEM9.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM9.fca.4.insert = insertvalue %gem %GEM9.fca.3.insert, i64* %GEM9.fca.4.load, 4
  %GEM9.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM9.fca.5.insert = insertvalue %gem %GEM9.fca.4.insert, i64 %GEM9.fca.5.load, 5
  %GEM9.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM9.fca.6.insert = insertvalue %gem %GEM9.fca.5.insert, i64 %GEM9.fca.6.load, 6
  %GEM9.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM9.fca.7.insert = insertvalue %gem %GEM9.fca.6.insert, i64 %GEM9.fca.7.load, 7
  %GEM9.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM9.fca.8.insert = insertvalue %gem %GEM9.fca.7.insert, i64 %GEM9.fca.8.load, 8
  %GEM9.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM9.fca.9.insert = insertvalue %gem %GEM9.fca.8.insert, double* %GEM9.fca.9.load, 9
  %GEM9.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM9.fca.10.insert = insertvalue %gem %GEM9.fca.9.insert, double* %GEM9.fca.10.load, 10
  %GEM9.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM9.fca.11.insert = insertvalue %gem %GEM9.fca.10.insert, double* %GEM9.fca.11.load, 11
  %GEM9.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM9.fca.12.insert = insertvalue %gem %GEM9.fca.11.insert, double* %GEM9.fca.12.load, 12
  %GEM9.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM9.fca.13.insert = insertvalue %gem %GEM9.fca.12.insert, double* %GEM9.fca.13.load, 13
  %GEM9.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM9.fca.14.insert = insertvalue %gem %GEM9.fca.13.insert, double* %GEM9.fca.14.load, 14
  %GEM9.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM9.fca.15.insert = insertvalue %gem %GEM9.fca.14.insert, double* %GEM9.fca.15.load, 15
  %GEM9.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM9.fca.16.insert = insertvalue %gem %GEM9.fca.15.insert, double %GEM9.fca.16.load, 16
  %GEM9.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM9.fca.17.insert = insertvalue %gem %GEM9.fca.16.insert, double %GEM9.fca.17.load, 17
  %GEM9.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM9.fca.18.insert = insertvalue %gem %GEM9.fca.17.insert, double %GEM9.fca.18.load, 18
  %GEM9.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM9.fca.19.insert = insertvalue %gem %GEM9.fca.18.insert, double %GEM9.fca.19.load, 19
  %GEM9.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM9.fca.20.insert = insertvalue %gem %GEM9.fca.19.insert, double %GEM9.fca.20.load, 20
  %GEM9.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM9.fca.21.insert = insertvalue %gem %GEM9.fca.20.insert, <2 x double> %GEM9.fca.21.load, 21
  %GEM9.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM9.fca.22.insert = insertvalue %gem %GEM9.fca.21.insert, <2 x double>* %GEM9.fca.22.load, 22
  %GEM9.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM9.fca.23.insert = insertvalue %gem %GEM9.fca.22.insert, <2 x double>* %GEM9.fca.23.load, 23
  %GEM9.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM9.fca.24.insert = insertvalue %gem %GEM9.fca.23.insert, <2 x double>* %GEM9.fca.24.load, 24
  %GEM9.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM9.fca.25.insert = insertvalue %gem %GEM9.fca.24.insert, <2 x double>* %GEM9.fca.25.load, 25
  %GEM9.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM9.fca.26.insert = insertvalue %gem %GEM9.fca.25.insert, <2 x double>* %GEM9.fca.26.load, 26
  %GEM9.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM9.fca.27.insert = insertvalue %gem %GEM9.fca.26.insert, <2 x double>* %GEM9.fca.27.load, 27
  %GEM9.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM9.fca.28.insert = insertvalue %gem %GEM9.fca.27.insert, <2 x double> %GEM9.fca.28.load, 28
  %GEM9.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM9.fca.29.insert = insertvalue %gem %GEM9.fca.28.insert, <2 x double> %GEM9.fca.29.load, 29
  %GEM9.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM9.fca.30.insert = insertvalue %gem %GEM9.fca.29.insert, <2 x double> %GEM9.fca.30.load, 30
  %GEM9.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM9.fca.31.insert = insertvalue %gem %GEM9.fca.30.insert, <2 x double> %GEM9.fca.31.load, 31
  %GEM9.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM9.fca.32.insert = insertvalue %gem %GEM9.fca.31.insert, <2 x double> %GEM9.fca.32.load, 32
  %GEM9.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM9.fca.33.insert = insertvalue %gem %GEM9.fca.32.insert, <2 x double> %GEM9.fca.33.load, 33
  %GEM9.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i8** %GEM9.fca.34.load, i8*** %2
  %GEM10.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM10.fca.0.insert = insertvalue %gem undef, i64* %GEM10.fca.0.load, 0
  %GEM10.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM10.fca.1.insert = insertvalue %gem %GEM10.fca.0.insert, i64* %GEM10.fca.1.load, 1
  %GEM10.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM10.fca.2.insert = insertvalue %gem %GEM10.fca.1.insert, i64* %GEM10.fca.2.load, 2
  %GEM10.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM10.fca.3.insert = insertvalue %gem %GEM10.fca.2.insert, i64* %GEM10.fca.3.load, 3
  %GEM10.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM10.fca.4.insert = insertvalue %gem %GEM10.fca.3.insert, i64* %GEM10.fca.4.load, 4
  %GEM10.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM10.fca.5.insert = insertvalue %gem %GEM10.fca.4.insert, i64 %GEM10.fca.5.load, 5
  %GEM10.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM10.fca.6.insert = insertvalue %gem %GEM10.fca.5.insert, i64 %GEM10.fca.6.load, 6
  %GEM10.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM10.fca.7.insert = insertvalue %gem %GEM10.fca.6.insert, i64 %GEM10.fca.7.load, 7
  %GEM10.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM10.fca.8.insert = insertvalue %gem %GEM10.fca.7.insert, i64 %GEM10.fca.8.load, 8
  %GEM10.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM10.fca.9.insert = insertvalue %gem %GEM10.fca.8.insert, double* %GEM10.fca.9.load, 9
  %GEM10.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM10.fca.10.insert = insertvalue %gem %GEM10.fca.9.insert, double* %GEM10.fca.10.load, 10
  %GEM10.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM10.fca.11.insert = insertvalue %gem %GEM10.fca.10.insert, double* %GEM10.fca.11.load, 11
  %GEM10.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM10.fca.12.insert = insertvalue %gem %GEM10.fca.11.insert, double* %GEM10.fca.12.load, 12
  %GEM10.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM10.fca.13.insert = insertvalue %gem %GEM10.fca.12.insert, double* %GEM10.fca.13.load, 13
  %GEM10.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM10.fca.14.insert = insertvalue %gem %GEM10.fca.13.insert, double* %GEM10.fca.14.load, 14
  %GEM10.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM10.fca.15.insert = insertvalue %gem %GEM10.fca.14.insert, double* %GEM10.fca.15.load, 15
  %GEM10.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM10.fca.16.insert = insertvalue %gem %GEM10.fca.15.insert, double %GEM10.fca.16.load, 16
  %GEM10.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM10.fca.17.insert = insertvalue %gem %GEM10.fca.16.insert, double %GEM10.fca.17.load, 17
  %GEM10.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM10.fca.18.insert = insertvalue %gem %GEM10.fca.17.insert, double %GEM10.fca.18.load, 18
  %GEM10.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM10.fca.19.insert = insertvalue %gem %GEM10.fca.18.insert, double %GEM10.fca.19.load, 19
  %GEM10.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM10.fca.20.insert = insertvalue %gem %GEM10.fca.19.insert, double %GEM10.fca.20.load, 20
  %GEM10.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM10.fca.21.insert = insertvalue %gem %GEM10.fca.20.insert, <2 x double> %GEM10.fca.21.load, 21
  %GEM10.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM10.fca.22.insert = insertvalue %gem %GEM10.fca.21.insert, <2 x double>* %GEM10.fca.22.load, 22
  %GEM10.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM10.fca.23.insert = insertvalue %gem %GEM10.fca.22.insert, <2 x double>* %GEM10.fca.23.load, 23
  %GEM10.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM10.fca.24.insert = insertvalue %gem %GEM10.fca.23.insert, <2 x double>* %GEM10.fca.24.load, 24
  %GEM10.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM10.fca.25.insert = insertvalue %gem %GEM10.fca.24.insert, <2 x double>* %GEM10.fca.25.load, 25
  %GEM10.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM10.fca.26.insert = insertvalue %gem %GEM10.fca.25.insert, <2 x double>* %GEM10.fca.26.load, 26
  %GEM10.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM10.fca.27.insert = insertvalue %gem %GEM10.fca.26.insert, <2 x double>* %GEM10.fca.27.load, 27
  %GEM10.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM10.fca.28.insert = insertvalue %gem %GEM10.fca.27.insert, <2 x double> %GEM10.fca.28.load, 28
  %GEM10.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM10.fca.29.insert = insertvalue %gem %GEM10.fca.28.insert, <2 x double> %GEM10.fca.29.load, 29
  %GEM10.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM10.fca.30.insert = insertvalue %gem %GEM10.fca.29.insert, <2 x double> %GEM10.fca.30.load, 30
  %GEM10.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM10.fca.31.insert = insertvalue %gem %GEM10.fca.30.insert, <2 x double> %GEM10.fca.31.load, 31
  %GEM10.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM10.fca.32.insert = insertvalue %gem %GEM10.fca.31.insert, <2 x double> %GEM10.fca.32.load, 32
  %GEM10.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM10.fca.33.insert = insertvalue %gem %GEM10.fca.32.insert, <2 x double> %GEM10.fca.33.load, 33
  %GEM10.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64* %GEM10.fca.0.load, i64** %3
  call void @"gemPrmBuild@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U[S[I"(%gemPrm* %v1GMP, i8*** %2, i64** %3)
  %GEM11.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM11.fca.0.insert = insertvalue %gem undef, i64* %GEM11.fca.0.load, 0
  %GEM11.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM11.fca.1.insert = insertvalue %gem %GEM11.fca.0.insert, i64* %GEM11.fca.1.load, 1
  %GEM11.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM11.fca.2.insert = insertvalue %gem %GEM11.fca.1.insert, i64* %GEM11.fca.2.load, 2
  %GEM11.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM11.fca.3.insert = insertvalue %gem %GEM11.fca.2.insert, i64* %GEM11.fca.3.load, 3
  %GEM11.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM11.fca.4.insert = insertvalue %gem %GEM11.fca.3.insert, i64* %GEM11.fca.4.load, 4
  %GEM11.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM11.fca.5.insert = insertvalue %gem %GEM11.fca.4.insert, i64 %GEM11.fca.5.load, 5
  %GEM11.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM11.fca.6.insert = insertvalue %gem %GEM11.fca.5.insert, i64 %GEM11.fca.6.load, 6
  %GEM11.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM11.fca.7.insert = insertvalue %gem %GEM11.fca.6.insert, i64 %GEM11.fca.7.load, 7
  %GEM11.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM11.fca.8.insert = insertvalue %gem %GEM11.fca.7.insert, i64 %GEM11.fca.8.load, 8
  %GEM11.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM11.fca.9.insert = insertvalue %gem %GEM11.fca.8.insert, double* %GEM11.fca.9.load, 9
  %GEM11.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM11.fca.10.insert = insertvalue %gem %GEM11.fca.9.insert, double* %GEM11.fca.10.load, 10
  %GEM11.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM11.fca.11.insert = insertvalue %gem %GEM11.fca.10.insert, double* %GEM11.fca.11.load, 11
  %GEM11.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM11.fca.12.insert = insertvalue %gem %GEM11.fca.11.insert, double* %GEM11.fca.12.load, 12
  %GEM11.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM11.fca.13.insert = insertvalue %gem %GEM11.fca.12.insert, double* %GEM11.fca.13.load, 13
  %GEM11.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM11.fca.14.insert = insertvalue %gem %GEM11.fca.13.insert, double* %GEM11.fca.14.load, 14
  %GEM11.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM11.fca.15.insert = insertvalue %gem %GEM11.fca.14.insert, double* %GEM11.fca.15.load, 15
  %GEM11.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM11.fca.16.insert = insertvalue %gem %GEM11.fca.15.insert, double %GEM11.fca.16.load, 16
  %GEM11.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM11.fca.17.insert = insertvalue %gem %GEM11.fca.16.insert, double %GEM11.fca.17.load, 17
  %GEM11.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM11.fca.18.insert = insertvalue %gem %GEM11.fca.17.insert, double %GEM11.fca.18.load, 18
  %GEM11.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM11.fca.19.insert = insertvalue %gem %GEM11.fca.18.insert, double %GEM11.fca.19.load, 19
  %GEM11.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM11.fca.20.insert = insertvalue %gem %GEM11.fca.19.insert, double %GEM11.fca.20.load, 20
  %GEM11.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM11.fca.21.insert = insertvalue %gem %GEM11.fca.20.insert, <2 x double> %GEM11.fca.21.load, 21
  %GEM11.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM11.fca.22.insert = insertvalue %gem %GEM11.fca.21.insert, <2 x double>* %GEM11.fca.22.load, 22
  %GEM11.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM11.fca.23.insert = insertvalue %gem %GEM11.fca.22.insert, <2 x double>* %GEM11.fca.23.load, 23
  %GEM11.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM11.fca.24.insert = insertvalue %gem %GEM11.fca.23.insert, <2 x double>* %GEM11.fca.24.load, 24
  %GEM11.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM11.fca.25.insert = insertvalue %gem %GEM11.fca.24.insert, <2 x double>* %GEM11.fca.25.load, 25
  %GEM11.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM11.fca.26.insert = insertvalue %gem %GEM11.fca.25.insert, <2 x double>* %GEM11.fca.26.load, 26
  %GEM11.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM11.fca.27.insert = insertvalue %gem %GEM11.fca.26.insert, <2 x double>* %GEM11.fca.27.load, 27
  %GEM11.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM11.fca.28.insert = insertvalue %gem %GEM11.fca.27.insert, <2 x double> %GEM11.fca.28.load, 28
  %GEM11.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM11.fca.29.insert = insertvalue %gem %GEM11.fca.28.insert, <2 x double> %GEM11.fca.29.load, 29
  %GEM11.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM11.fca.30.insert = insertvalue %gem %GEM11.fca.29.insert, <2 x double> %GEM11.fca.30.load, 30
  %GEM11.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM11.fca.31.insert = insertvalue %gem %GEM11.fca.30.insert, <2 x double> %GEM11.fca.31.load, 31
  %GEM11.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM11.fca.32.insert = insertvalue %gem %GEM11.fca.31.insert, <2 x double> %GEM11.fca.32.load, 32
  %GEM11.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM11.fca.33.insert = insertvalue %gem %GEM11.fca.32.insert, <2 x double> %GEM11.fca.33.load, 33
  %GEM11.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i8** %GEM11.fca.34.load, i8*** %4
  %GEM13.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM13.fca.0.insert = insertvalue %gem undef, i64* %GEM13.fca.0.load, 0
  %GEM13.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM13.fca.1.insert = insertvalue %gem %GEM13.fca.0.insert, i64* %GEM13.fca.1.load, 1
  %GEM13.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM13.fca.2.insert = insertvalue %gem %GEM13.fca.1.insert, i64* %GEM13.fca.2.load, 2
  %GEM13.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM13.fca.3.insert = insertvalue %gem %GEM13.fca.2.insert, i64* %GEM13.fca.3.load, 3
  %GEM13.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM13.fca.4.insert = insertvalue %gem %GEM13.fca.3.insert, i64* %GEM13.fca.4.load, 4
  %GEM13.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM13.fca.5.insert = insertvalue %gem %GEM13.fca.4.insert, i64 %GEM13.fca.5.load, 5
  %GEM13.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM13.fca.6.insert = insertvalue %gem %GEM13.fca.5.insert, i64 %GEM13.fca.6.load, 6
  %GEM13.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM13.fca.7.insert = insertvalue %gem %GEM13.fca.6.insert, i64 %GEM13.fca.7.load, 7
  %GEM13.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM13.fca.8.insert = insertvalue %gem %GEM13.fca.7.insert, i64 %GEM13.fca.8.load, 8
  %GEM13.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM13.fca.9.insert = insertvalue %gem %GEM13.fca.8.insert, double* %GEM13.fca.9.load, 9
  %GEM13.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM13.fca.10.insert = insertvalue %gem %GEM13.fca.9.insert, double* %GEM13.fca.10.load, 10
  %GEM13.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM13.fca.11.insert = insertvalue %gem %GEM13.fca.10.insert, double* %GEM13.fca.11.load, 11
  %GEM13.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM13.fca.12.insert = insertvalue %gem %GEM13.fca.11.insert, double* %GEM13.fca.12.load, 12
  %GEM13.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM13.fca.13.insert = insertvalue %gem %GEM13.fca.12.insert, double* %GEM13.fca.13.load, 13
  %GEM13.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM13.fca.14.insert = insertvalue %gem %GEM13.fca.13.insert, double* %GEM13.fca.14.load, 14
  %GEM13.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM13.fca.15.insert = insertvalue %gem %GEM13.fca.14.insert, double* %GEM13.fca.15.load, 15
  %GEM13.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM13.fca.16.insert = insertvalue %gem %GEM13.fca.15.insert, double %GEM13.fca.16.load, 16
  %GEM13.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM13.fca.17.insert = insertvalue %gem %GEM13.fca.16.insert, double %GEM13.fca.17.load, 17
  %GEM13.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM13.fca.18.insert = insertvalue %gem %GEM13.fca.17.insert, double %GEM13.fca.18.load, 18
  %GEM13.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM13.fca.19.insert = insertvalue %gem %GEM13.fca.18.insert, double %GEM13.fca.19.load, 19
  %GEM13.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM13.fca.20.insert = insertvalue %gem %GEM13.fca.19.insert, double %GEM13.fca.20.load, 20
  %GEM13.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM13.fca.21.insert = insertvalue %gem %GEM13.fca.20.insert, <2 x double> %GEM13.fca.21.load, 21
  %GEM13.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM13.fca.22.insert = insertvalue %gem %GEM13.fca.21.insert, <2 x double>* %GEM13.fca.22.load, 22
  %GEM13.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM13.fca.23.insert = insertvalue %gem %GEM13.fca.22.insert, <2 x double>* %GEM13.fca.23.load, 23
  %GEM13.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM13.fca.24.insert = insertvalue %gem %GEM13.fca.23.insert, <2 x double>* %GEM13.fca.24.load, 24
  %GEM13.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM13.fca.25.insert = insertvalue %gem %GEM13.fca.24.insert, <2 x double>* %GEM13.fca.25.load, 25
  %GEM13.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM13.fca.26.insert = insertvalue %gem %GEM13.fca.25.insert, <2 x double>* %GEM13.fca.26.load, 26
  %GEM13.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM13.fca.27.insert = insertvalue %gem %GEM13.fca.26.insert, <2 x double>* %GEM13.fca.27.load, 27
  %GEM13.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM13.fca.28.insert = insertvalue %gem %GEM13.fca.27.insert, <2 x double> %GEM13.fca.28.load, 28
  %GEM13.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM13.fca.29.insert = insertvalue %gem %GEM13.fca.28.insert, <2 x double> %GEM13.fca.29.load, 29
  %GEM13.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM13.fca.30.insert = insertvalue %gem %GEM13.fca.29.insert, <2 x double> %GEM13.fca.30.load, 30
  %GEM13.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM13.fca.31.insert = insertvalue %gem %GEM13.fca.30.insert, <2 x double> %GEM13.fca.31.load, 31
  %GEM13.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM13.fca.32.insert = insertvalue %gem %GEM13.fca.31.insert, <2 x double> %GEM13.fca.32.load, 32
  %GEM13.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM13.fca.33.insert = insertvalue %gem %GEM13.fca.32.insert, <2 x double> %GEM13.fca.33.load, 33
  %GEM13.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64* %GEM13.fca.1.load, i64** %5
  call void @"gemPrmBuild@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U[S[I"(%gemPrm* %v2GMP, i8*** %4, i64** %5)
  %GEM14.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM14.fca.0.insert = insertvalue %gem undef, i64* %GEM14.fca.0.load, 0
  %GEM14.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM14.fca.1.insert = insertvalue %gem %GEM14.fca.0.insert, i64* %GEM14.fca.1.load, 1
  %GEM14.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM14.fca.2.insert = insertvalue %gem %GEM14.fca.1.insert, i64* %GEM14.fca.2.load, 2
  %GEM14.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM14.fca.3.insert = insertvalue %gem %GEM14.fca.2.insert, i64* %GEM14.fca.3.load, 3
  %GEM14.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM14.fca.4.insert = insertvalue %gem %GEM14.fca.3.insert, i64* %GEM14.fca.4.load, 4
  %GEM14.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM14.fca.5.insert = insertvalue %gem %GEM14.fca.4.insert, i64 %GEM14.fca.5.load, 5
  %GEM14.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM14.fca.6.insert = insertvalue %gem %GEM14.fca.5.insert, i64 %GEM14.fca.6.load, 6
  %GEM14.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM14.fca.7.insert = insertvalue %gem %GEM14.fca.6.insert, i64 %GEM14.fca.7.load, 7
  %GEM14.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM14.fca.8.insert = insertvalue %gem %GEM14.fca.7.insert, i64 %GEM14.fca.8.load, 8
  %GEM14.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM14.fca.9.insert = insertvalue %gem %GEM14.fca.8.insert, double* %GEM14.fca.9.load, 9
  %GEM14.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM14.fca.10.insert = insertvalue %gem %GEM14.fca.9.insert, double* %GEM14.fca.10.load, 10
  %GEM14.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM14.fca.11.insert = insertvalue %gem %GEM14.fca.10.insert, double* %GEM14.fca.11.load, 11
  %GEM14.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM14.fca.12.insert = insertvalue %gem %GEM14.fca.11.insert, double* %GEM14.fca.12.load, 12
  %GEM14.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM14.fca.13.insert = insertvalue %gem %GEM14.fca.12.insert, double* %GEM14.fca.13.load, 13
  %GEM14.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM14.fca.14.insert = insertvalue %gem %GEM14.fca.13.insert, double* %GEM14.fca.14.load, 14
  %GEM14.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM14.fca.15.insert = insertvalue %gem %GEM14.fca.14.insert, double* %GEM14.fca.15.load, 15
  %GEM14.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM14.fca.16.insert = insertvalue %gem %GEM14.fca.15.insert, double %GEM14.fca.16.load, 16
  %GEM14.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM14.fca.17.insert = insertvalue %gem %GEM14.fca.16.insert, double %GEM14.fca.17.load, 17
  %GEM14.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM14.fca.18.insert = insertvalue %gem %GEM14.fca.17.insert, double %GEM14.fca.18.load, 18
  %GEM14.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM14.fca.19.insert = insertvalue %gem %GEM14.fca.18.insert, double %GEM14.fca.19.load, 19
  %GEM14.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM14.fca.20.insert = insertvalue %gem %GEM14.fca.19.insert, double %GEM14.fca.20.load, 20
  %GEM14.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM14.fca.21.insert = insertvalue %gem %GEM14.fca.20.insert, <2 x double> %GEM14.fca.21.load, 21
  %GEM14.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM14.fca.22.insert = insertvalue %gem %GEM14.fca.21.insert, <2 x double>* %GEM14.fca.22.load, 22
  %GEM14.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM14.fca.23.insert = insertvalue %gem %GEM14.fca.22.insert, <2 x double>* %GEM14.fca.23.load, 23
  %GEM14.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM14.fca.24.insert = insertvalue %gem %GEM14.fca.23.insert, <2 x double>* %GEM14.fca.24.load, 24
  %GEM14.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM14.fca.25.insert = insertvalue %gem %GEM14.fca.24.insert, <2 x double>* %GEM14.fca.25.load, 25
  %GEM14.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM14.fca.26.insert = insertvalue %gem %GEM14.fca.25.insert, <2 x double>* %GEM14.fca.26.load, 26
  %GEM14.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM14.fca.27.insert = insertvalue %gem %GEM14.fca.26.insert, <2 x double>* %GEM14.fca.27.load, 27
  %GEM14.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM14.fca.28.insert = insertvalue %gem %GEM14.fca.27.insert, <2 x double> %GEM14.fca.28.load, 28
  %GEM14.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM14.fca.29.insert = insertvalue %gem %GEM14.fca.28.insert, <2 x double> %GEM14.fca.29.load, 29
  %GEM14.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM14.fca.30.insert = insertvalue %gem %GEM14.fca.29.insert, <2 x double> %GEM14.fca.30.load, 30
  %GEM14.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM14.fca.31.insert = insertvalue %gem %GEM14.fca.30.insert, <2 x double> %GEM14.fca.31.load, 31
  %GEM14.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM14.fca.32.insert = insertvalue %gem %GEM14.fca.31.insert, <2 x double> %GEM14.fca.32.load, 32
  %GEM14.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM14.fca.33.insert = insertvalue %gem %GEM14.fca.32.insert, <2 x double> %GEM14.fca.33.load, 33
  %GEM14.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i8** %GEM14.fca.34.load, i8*** %6
  %GEM16.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM16.fca.0.insert = insertvalue %gem undef, i64* %GEM16.fca.0.load, 0
  %GEM16.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM16.fca.1.insert = insertvalue %gem %GEM16.fca.0.insert, i64* %GEM16.fca.1.load, 1
  %GEM16.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM16.fca.2.insert = insertvalue %gem %GEM16.fca.1.insert, i64* %GEM16.fca.2.load, 2
  %GEM16.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM16.fca.3.insert = insertvalue %gem %GEM16.fca.2.insert, i64* %GEM16.fca.3.load, 3
  %GEM16.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM16.fca.4.insert = insertvalue %gem %GEM16.fca.3.insert, i64* %GEM16.fca.4.load, 4
  %GEM16.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM16.fca.5.insert = insertvalue %gem %GEM16.fca.4.insert, i64 %GEM16.fca.5.load, 5
  %GEM16.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM16.fca.6.insert = insertvalue %gem %GEM16.fca.5.insert, i64 %GEM16.fca.6.load, 6
  %GEM16.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM16.fca.7.insert = insertvalue %gem %GEM16.fca.6.insert, i64 %GEM16.fca.7.load, 7
  %GEM16.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM16.fca.8.insert = insertvalue %gem %GEM16.fca.7.insert, i64 %GEM16.fca.8.load, 8
  %GEM16.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM16.fca.9.insert = insertvalue %gem %GEM16.fca.8.insert, double* %GEM16.fca.9.load, 9
  %GEM16.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM16.fca.10.insert = insertvalue %gem %GEM16.fca.9.insert, double* %GEM16.fca.10.load, 10
  %GEM16.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM16.fca.11.insert = insertvalue %gem %GEM16.fca.10.insert, double* %GEM16.fca.11.load, 11
  %GEM16.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM16.fca.12.insert = insertvalue %gem %GEM16.fca.11.insert, double* %GEM16.fca.12.load, 12
  %GEM16.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM16.fca.13.insert = insertvalue %gem %GEM16.fca.12.insert, double* %GEM16.fca.13.load, 13
  %GEM16.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM16.fca.14.insert = insertvalue %gem %GEM16.fca.13.insert, double* %GEM16.fca.14.load, 14
  %GEM16.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM16.fca.15.insert = insertvalue %gem %GEM16.fca.14.insert, double* %GEM16.fca.15.load, 15
  %GEM16.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM16.fca.16.insert = insertvalue %gem %GEM16.fca.15.insert, double %GEM16.fca.16.load, 16
  %GEM16.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM16.fca.17.insert = insertvalue %gem %GEM16.fca.16.insert, double %GEM16.fca.17.load, 17
  %GEM16.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM16.fca.18.insert = insertvalue %gem %GEM16.fca.17.insert, double %GEM16.fca.18.load, 18
  %GEM16.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM16.fca.19.insert = insertvalue %gem %GEM16.fca.18.insert, double %GEM16.fca.19.load, 19
  %GEM16.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM16.fca.20.insert = insertvalue %gem %GEM16.fca.19.insert, double %GEM16.fca.20.load, 20
  %GEM16.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM16.fca.21.insert = insertvalue %gem %GEM16.fca.20.insert, <2 x double> %GEM16.fca.21.load, 21
  %GEM16.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM16.fca.22.insert = insertvalue %gem %GEM16.fca.21.insert, <2 x double>* %GEM16.fca.22.load, 22
  %GEM16.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM16.fca.23.insert = insertvalue %gem %GEM16.fca.22.insert, <2 x double>* %GEM16.fca.23.load, 23
  %GEM16.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM16.fca.24.insert = insertvalue %gem %GEM16.fca.23.insert, <2 x double>* %GEM16.fca.24.load, 24
  %GEM16.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM16.fca.25.insert = insertvalue %gem %GEM16.fca.24.insert, <2 x double>* %GEM16.fca.25.load, 25
  %GEM16.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM16.fca.26.insert = insertvalue %gem %GEM16.fca.25.insert, <2 x double>* %GEM16.fca.26.load, 26
  %GEM16.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM16.fca.27.insert = insertvalue %gem %GEM16.fca.26.insert, <2 x double>* %GEM16.fca.27.load, 27
  %GEM16.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM16.fca.28.insert = insertvalue %gem %GEM16.fca.27.insert, <2 x double> %GEM16.fca.28.load, 28
  %GEM16.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM16.fca.29.insert = insertvalue %gem %GEM16.fca.28.insert, <2 x double> %GEM16.fca.29.load, 29
  %GEM16.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM16.fca.30.insert = insertvalue %gem %GEM16.fca.29.insert, <2 x double> %GEM16.fca.30.load, 30
  %GEM16.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM16.fca.31.insert = insertvalue %gem %GEM16.fca.30.insert, <2 x double> %GEM16.fca.31.load, 31
  %GEM16.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM16.fca.32.insert = insertvalue %gem %GEM16.fca.31.insert, <2 x double> %GEM16.fca.32.load, 32
  %GEM16.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM16.fca.33.insert = insertvalue %gem %GEM16.fca.32.insert, <2 x double> %GEM16.fca.33.load, 33
  %GEM16.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64* %GEM16.fca.2.load, i64** %7
  call void @"gemPrmBuild@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U[S[I"(%gemPrm* %v3GMP, i8*** %6, i64** %7)
  %GEM17.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM17.fca.0.insert = insertvalue %gem undef, i64* %GEM17.fca.0.load, 0
  %GEM17.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM17.fca.1.insert = insertvalue %gem %GEM17.fca.0.insert, i64* %GEM17.fca.1.load, 1
  %GEM17.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM17.fca.2.insert = insertvalue %gem %GEM17.fca.1.insert, i64* %GEM17.fca.2.load, 2
  %GEM17.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM17.fca.3.insert = insertvalue %gem %GEM17.fca.2.insert, i64* %GEM17.fca.3.load, 3
  %GEM17.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM17.fca.4.insert = insertvalue %gem %GEM17.fca.3.insert, i64* %GEM17.fca.4.load, 4
  %GEM17.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM17.fca.5.insert = insertvalue %gem %GEM17.fca.4.insert, i64 %GEM17.fca.5.load, 5
  %GEM17.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM17.fca.6.insert = insertvalue %gem %GEM17.fca.5.insert, i64 %GEM17.fca.6.load, 6
  %GEM17.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM17.fca.7.insert = insertvalue %gem %GEM17.fca.6.insert, i64 %GEM17.fca.7.load, 7
  %GEM17.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM17.fca.8.insert = insertvalue %gem %GEM17.fca.7.insert, i64 %GEM17.fca.8.load, 8
  %GEM17.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM17.fca.9.insert = insertvalue %gem %GEM17.fca.8.insert, double* %GEM17.fca.9.load, 9
  %GEM17.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM17.fca.10.insert = insertvalue %gem %GEM17.fca.9.insert, double* %GEM17.fca.10.load, 10
  %GEM17.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM17.fca.11.insert = insertvalue %gem %GEM17.fca.10.insert, double* %GEM17.fca.11.load, 11
  %GEM17.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM17.fca.12.insert = insertvalue %gem %GEM17.fca.11.insert, double* %GEM17.fca.12.load, 12
  %GEM17.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM17.fca.13.insert = insertvalue %gem %GEM17.fca.12.insert, double* %GEM17.fca.13.load, 13
  %GEM17.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM17.fca.14.insert = insertvalue %gem %GEM17.fca.13.insert, double* %GEM17.fca.14.load, 14
  %GEM17.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM17.fca.15.insert = insertvalue %gem %GEM17.fca.14.insert, double* %GEM17.fca.15.load, 15
  %GEM17.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM17.fca.16.insert = insertvalue %gem %GEM17.fca.15.insert, double %GEM17.fca.16.load, 16
  %GEM17.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM17.fca.17.insert = insertvalue %gem %GEM17.fca.16.insert, double %GEM17.fca.17.load, 17
  %GEM17.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM17.fca.18.insert = insertvalue %gem %GEM17.fca.17.insert, double %GEM17.fca.18.load, 18
  %GEM17.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM17.fca.19.insert = insertvalue %gem %GEM17.fca.18.insert, double %GEM17.fca.19.load, 19
  %GEM17.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM17.fca.20.insert = insertvalue %gem %GEM17.fca.19.insert, double %GEM17.fca.20.load, 20
  %GEM17.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM17.fca.21.insert = insertvalue %gem %GEM17.fca.20.insert, <2 x double> %GEM17.fca.21.load, 21
  %GEM17.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM17.fca.22.insert = insertvalue %gem %GEM17.fca.21.insert, <2 x double>* %GEM17.fca.22.load, 22
  %GEM17.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM17.fca.23.insert = insertvalue %gem %GEM17.fca.22.insert, <2 x double>* %GEM17.fca.23.load, 23
  %GEM17.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM17.fca.24.insert = insertvalue %gem %GEM17.fca.23.insert, <2 x double>* %GEM17.fca.24.load, 24
  %GEM17.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM17.fca.25.insert = insertvalue %gem %GEM17.fca.24.insert, <2 x double>* %GEM17.fca.25.load, 25
  %GEM17.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM17.fca.26.insert = insertvalue %gem %GEM17.fca.25.insert, <2 x double>* %GEM17.fca.26.load, 26
  %GEM17.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM17.fca.27.insert = insertvalue %gem %GEM17.fca.26.insert, <2 x double>* %GEM17.fca.27.load, 27
  %GEM17.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM17.fca.28.insert = insertvalue %gem %GEM17.fca.27.insert, <2 x double> %GEM17.fca.28.load, 28
  %GEM17.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM17.fca.29.insert = insertvalue %gem %GEM17.fca.28.insert, <2 x double> %GEM17.fca.29.load, 29
  %GEM17.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM17.fca.30.insert = insertvalue %gem %GEM17.fca.29.insert, <2 x double> %GEM17.fca.30.load, 30
  %GEM17.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM17.fca.31.insert = insertvalue %gem %GEM17.fca.30.insert, <2 x double> %GEM17.fca.31.load, 31
  %GEM17.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM17.fca.32.insert = insertvalue %gem %GEM17.fca.31.insert, <2 x double> %GEM17.fca.32.load, 32
  %GEM17.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM17.fca.33.insert = insertvalue %gem %GEM17.fca.32.insert, <2 x double> %GEM17.fca.33.load, 33
  %GEM17.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i8** %GEM17.fca.34.load, i8*** %8
  %GEM19.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM19.fca.0.insert = insertvalue %gem undef, i64* %GEM19.fca.0.load, 0
  %GEM19.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM19.fca.1.insert = insertvalue %gem %GEM19.fca.0.insert, i64* %GEM19.fca.1.load, 1
  %GEM19.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM19.fca.2.insert = insertvalue %gem %GEM19.fca.1.insert, i64* %GEM19.fca.2.load, 2
  %GEM19.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM19.fca.3.insert = insertvalue %gem %GEM19.fca.2.insert, i64* %GEM19.fca.3.load, 3
  %GEM19.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM19.fca.4.insert = insertvalue %gem %GEM19.fca.3.insert, i64* %GEM19.fca.4.load, 4
  %GEM19.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM19.fca.5.insert = insertvalue %gem %GEM19.fca.4.insert, i64 %GEM19.fca.5.load, 5
  %GEM19.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM19.fca.6.insert = insertvalue %gem %GEM19.fca.5.insert, i64 %GEM19.fca.6.load, 6
  %GEM19.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM19.fca.7.insert = insertvalue %gem %GEM19.fca.6.insert, i64 %GEM19.fca.7.load, 7
  %GEM19.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM19.fca.8.insert = insertvalue %gem %GEM19.fca.7.insert, i64 %GEM19.fca.8.load, 8
  %GEM19.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM19.fca.9.insert = insertvalue %gem %GEM19.fca.8.insert, double* %GEM19.fca.9.load, 9
  %GEM19.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM19.fca.10.insert = insertvalue %gem %GEM19.fca.9.insert, double* %GEM19.fca.10.load, 10
  %GEM19.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM19.fca.11.insert = insertvalue %gem %GEM19.fca.10.insert, double* %GEM19.fca.11.load, 11
  %GEM19.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM19.fca.12.insert = insertvalue %gem %GEM19.fca.11.insert, double* %GEM19.fca.12.load, 12
  %GEM19.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM19.fca.13.insert = insertvalue %gem %GEM19.fca.12.insert, double* %GEM19.fca.13.load, 13
  %GEM19.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM19.fca.14.insert = insertvalue %gem %GEM19.fca.13.insert, double* %GEM19.fca.14.load, 14
  %GEM19.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM19.fca.15.insert = insertvalue %gem %GEM19.fca.14.insert, double* %GEM19.fca.15.load, 15
  %GEM19.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM19.fca.16.insert = insertvalue %gem %GEM19.fca.15.insert, double %GEM19.fca.16.load, 16
  %GEM19.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM19.fca.17.insert = insertvalue %gem %GEM19.fca.16.insert, double %GEM19.fca.17.load, 17
  %GEM19.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM19.fca.18.insert = insertvalue %gem %GEM19.fca.17.insert, double %GEM19.fca.18.load, 18
  %GEM19.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM19.fca.19.insert = insertvalue %gem %GEM19.fca.18.insert, double %GEM19.fca.19.load, 19
  %GEM19.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM19.fca.20.insert = insertvalue %gem %GEM19.fca.19.insert, double %GEM19.fca.20.load, 20
  %GEM19.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM19.fca.21.insert = insertvalue %gem %GEM19.fca.20.insert, <2 x double> %GEM19.fca.21.load, 21
  %GEM19.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM19.fca.22.insert = insertvalue %gem %GEM19.fca.21.insert, <2 x double>* %GEM19.fca.22.load, 22
  %GEM19.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM19.fca.23.insert = insertvalue %gem %GEM19.fca.22.insert, <2 x double>* %GEM19.fca.23.load, 23
  %GEM19.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM19.fca.24.insert = insertvalue %gem %GEM19.fca.23.insert, <2 x double>* %GEM19.fca.24.load, 24
  %GEM19.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM19.fca.25.insert = insertvalue %gem %GEM19.fca.24.insert, <2 x double>* %GEM19.fca.25.load, 25
  %GEM19.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM19.fca.26.insert = insertvalue %gem %GEM19.fca.25.insert, <2 x double>* %GEM19.fca.26.load, 26
  %GEM19.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM19.fca.27.insert = insertvalue %gem %GEM19.fca.26.insert, <2 x double>* %GEM19.fca.27.load, 27
  %GEM19.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM19.fca.28.insert = insertvalue %gem %GEM19.fca.27.insert, <2 x double> %GEM19.fca.28.load, 28
  %GEM19.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM19.fca.29.insert = insertvalue %gem %GEM19.fca.28.insert, <2 x double> %GEM19.fca.29.load, 29
  %GEM19.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM19.fca.30.insert = insertvalue %gem %GEM19.fca.29.insert, <2 x double> %GEM19.fca.30.load, 30
  %GEM19.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM19.fca.31.insert = insertvalue %gem %GEM19.fca.30.insert, <2 x double> %GEM19.fca.31.load, 31
  %GEM19.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM19.fca.32.insert = insertvalue %gem %GEM19.fca.31.insert, <2 x double> %GEM19.fca.32.load, 32
  %GEM19.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM19.fca.33.insert = insertvalue %gem %GEM19.fca.32.insert, <2 x double> %GEM19.fca.33.load, 33
  %GEM19.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64* %GEM19.fca.3.load, i64** %9
  call void @"gemPrmBuild@Z6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[U[S[I"(%gemPrm* %v4GMP, i8*** %8, i64** %9)
  %_bound_CDF20 = load double*, double** %_bound_CDF
  %biunit = call <2 x double> @"biunit@U"()
  store <2 x double> %biunit, <2 x double>* %__mem
  br label %cond

cond:                                             ; preds = %end180, %__llvm_entry
  %CLR.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output201, %end180 ]
  %PREV_CLR.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output201, %end180 ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output204, %end180 ]
  %SYS22.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS22.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS22.fca.0.load, 0
  %SYS22.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS22.fca.1.insert = insertvalue %gemSYS %SYS22.fca.0.insert, i64 %SYS22.fca.1.load, 1
  %SYS22.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS22.fca.2.insert = insertvalue %gemSYS %SYS22.fca.1.insert, i64 %SYS22.fca.2.load, 2
  %SYS22.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS22.fca.3.insert = insertvalue %gemSYS %SYS22.fca.2.insert, i64 %SYS22.fca.3.load, 3
  %SYS22.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS22.fca.4.insert = insertvalue %gemSYS %SYS22.fca.3.insert, i64 %SYS22.fca.4.load, 4
  %SYS22.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS22.fca.5.insert = insertvalue %gemSYS %SYS22.fca.4.insert, i64 %SYS22.fca.5.load, 5
  %SYS22.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS22.fca.6.insert = insertvalue %gemSYS %SYS22.fca.5.insert, i64 %SYS22.fca.6.load, 6
  %SYS22.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS22.fca.7.insert = insertvalue %gemSYS %SYS22.fca.6.insert, i64 %SYS22.fca.7.load, 7
  %SYS22.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS22.fca.8.insert = insertvalue %gemSYS %SYS22.fca.7.insert, i64 %SYS22.fca.8.load, 8
  %SYS22.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS22.fca.9.insert = insertvalue %gemSYS %SYS22.fca.8.insert, i64 %SYS22.fca.9.load, 9
  %SYS22.fca.10.load = load double, double* %SYS1.fca.10.gep
  %return = call i64 @"lt@III"(i64 %i.0, i64 %SYS22.fca.7.load)
  %93 = icmp ne i64 %return, 0
  br i1 %93, label %body, label %end

body:                                             ; preds = %cond
  %cast = call <2 x double> @"set@UI"(i64 0)
  store <2 x double> %cast, <2 x double>* %__tmp
  %return25 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return26 = call i64 @"sample_cdf@[FFI"(double* %_bound_CDF20, double %return25)
  %GEM27.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM27.fca.0.insert = insertvalue %gem undef, i64* %GEM27.fca.0.load, 0
  %GEM27.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM27.fca.1.insert = insertvalue %gem %GEM27.fca.0.insert, i64* %GEM27.fca.1.load, 1
  %GEM27.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM27.fca.2.insert = insertvalue %gem %GEM27.fca.1.insert, i64* %GEM27.fca.2.load, 2
  %GEM27.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM27.fca.3.insert = insertvalue %gem %GEM27.fca.2.insert, i64* %GEM27.fca.3.load, 3
  %GEM27.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM27.fca.4.insert = insertvalue %gem %GEM27.fca.3.insert, i64* %GEM27.fca.4.load, 4
  %GEM27.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM27.fca.5.insert = insertvalue %gem %GEM27.fca.4.insert, i64 %GEM27.fca.5.load, 5
  %GEM27.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM27.fca.6.insert = insertvalue %gem %GEM27.fca.5.insert, i64 %GEM27.fca.6.load, 6
  %GEM27.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM27.fca.7.insert = insertvalue %gem %GEM27.fca.6.insert, i64 %GEM27.fca.7.load, 7
  %GEM27.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM27.fca.8.insert = insertvalue %gem %GEM27.fca.7.insert, i64 %GEM27.fca.8.load, 8
  %GEM27.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM27.fca.9.insert = insertvalue %gem %GEM27.fca.8.insert, double* %GEM27.fca.9.load, 9
  %GEM27.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM27.fca.10.insert = insertvalue %gem %GEM27.fca.9.insert, double* %GEM27.fca.10.load, 10
  %GEM27.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM27.fca.11.insert = insertvalue %gem %GEM27.fca.10.insert, double* %GEM27.fca.11.load, 11
  %GEM27.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM27.fca.12.insert = insertvalue %gem %GEM27.fca.11.insert, double* %GEM27.fca.12.load, 12
  %GEM27.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM27.fca.13.insert = insertvalue %gem %GEM27.fca.12.insert, double* %GEM27.fca.13.load, 13
  %GEM27.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM27.fca.14.insert = insertvalue %gem %GEM27.fca.13.insert, double* %GEM27.fca.14.load, 14
  %GEM27.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM27.fca.15.insert = insertvalue %gem %GEM27.fca.14.insert, double* %GEM27.fca.15.load, 15
  %GEM27.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM27.fca.16.insert = insertvalue %gem %GEM27.fca.15.insert, double %GEM27.fca.16.load, 16
  %GEM27.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM27.fca.17.insert = insertvalue %gem %GEM27.fca.16.insert, double %GEM27.fca.17.load, 17
  %GEM27.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM27.fca.18.insert = insertvalue %gem %GEM27.fca.17.insert, double %GEM27.fca.18.load, 18
  %GEM27.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM27.fca.19.insert = insertvalue %gem %GEM27.fca.18.insert, double %GEM27.fca.19.load, 19
  %GEM27.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM27.fca.20.insert = insertvalue %gem %GEM27.fca.19.insert, double %GEM27.fca.20.load, 20
  %GEM27.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM27.fca.21.insert = insertvalue %gem %GEM27.fca.20.insert, <2 x double> %GEM27.fca.21.load, 21
  %GEM27.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM27.fca.22.insert = insertvalue %gem %GEM27.fca.21.insert, <2 x double>* %GEM27.fca.22.load, 22
  %GEM27.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM27.fca.23.insert = insertvalue %gem %GEM27.fca.22.insert, <2 x double>* %GEM27.fca.23.load, 23
  %GEM27.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM27.fca.24.insert = insertvalue %gem %GEM27.fca.23.insert, <2 x double>* %GEM27.fca.24.load, 24
  %GEM27.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM27.fca.25.insert = insertvalue %gem %GEM27.fca.24.insert, <2 x double>* %GEM27.fca.25.load, 25
  %GEM27.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM27.fca.26.insert = insertvalue %gem %GEM27.fca.25.insert, <2 x double>* %GEM27.fca.26.load, 26
  %GEM27.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM27.fca.27.insert = insertvalue %gem %GEM27.fca.26.insert, <2 x double>* %GEM27.fca.27.load, 27
  %GEM27.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM27.fca.28.insert = insertvalue %gem %GEM27.fca.27.insert, <2 x double> %GEM27.fca.28.load, 28
  %GEM27.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM27.fca.29.insert = insertvalue %gem %GEM27.fca.28.insert, <2 x double> %GEM27.fca.29.load, 29
  %GEM27.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM27.fca.30.insert = insertvalue %gem %GEM27.fca.29.insert, <2 x double> %GEM27.fca.30.load, 30
  %GEM27.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM27.fca.31.insert = insertvalue %gem %GEM27.fca.30.insert, <2 x double> %GEM27.fca.31.load, 31
  %GEM27.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM27.fca.32.insert = insertvalue %gem %GEM27.fca.31.insert, <2 x double> %GEM27.fca.32.load, 32
  %GEM27.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM27.fca.33.insert = insertvalue %gem %GEM27.fca.32.insert, <2 x double> %GEM27.fca.33.load, 33
  %GEM27.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return29 = call double @"getcomp@F[FI"(double* %GEM27.fca.13.load, i64 %return26)
  %return30 = fcmp ogt double %return29, 0.000000e+00
  br i1 %return30, label %true, label %end32

end:                                              ; preds = %cond
  %94 = icmp ne i64 %SYS22.fca.3.load, 0
  br i1 %94, label %true206, label %end207

true:                                             ; preds = %body
  store double %return29, double* %10
  call void @"V_PREBLUR@UF"(<2 x double>* %__mem, double* %10)
  br label %end32

end32:                                            ; preds = %true, %body
  %GEM37.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM37.fca.0.insert = insertvalue %gem undef, i64* %GEM37.fca.0.load, 0
  %GEM37.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM37.fca.1.insert = insertvalue %gem %GEM37.fca.0.insert, i64* %GEM37.fca.1.load, 1
  %GEM37.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM37.fca.2.insert = insertvalue %gem %GEM37.fca.1.insert, i64* %GEM37.fca.2.load, 2
  %GEM37.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM37.fca.3.insert = insertvalue %gem %GEM37.fca.2.insert, i64* %GEM37.fca.3.load, 3
  %GEM37.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM37.fca.4.insert = insertvalue %gem %GEM37.fca.3.insert, i64* %GEM37.fca.4.load, 4
  %GEM37.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM37.fca.5.insert = insertvalue %gem %GEM37.fca.4.insert, i64 %GEM37.fca.5.load, 5
  %GEM37.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM37.fca.6.insert = insertvalue %gem %GEM37.fca.5.insert, i64 %GEM37.fca.6.load, 6
  %GEM37.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM37.fca.7.insert = insertvalue %gem %GEM37.fca.6.insert, i64 %GEM37.fca.7.load, 7
  %GEM37.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM37.fca.8.insert = insertvalue %gem %GEM37.fca.7.insert, i64 %GEM37.fca.8.load, 8
  %GEM37.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM37.fca.9.insert = insertvalue %gem %GEM37.fca.8.insert, double* %GEM37.fca.9.load, 9
  %GEM37.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM37.fca.10.insert = insertvalue %gem %GEM37.fca.9.insert, double* %GEM37.fca.10.load, 10
  %GEM37.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM37.fca.11.insert = insertvalue %gem %GEM37.fca.10.insert, double* %GEM37.fca.11.load, 11
  %GEM37.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM37.fca.12.insert = insertvalue %gem %GEM37.fca.11.insert, double* %GEM37.fca.12.load, 12
  %GEM37.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM37.fca.13.insert = insertvalue %gem %GEM37.fca.12.insert, double* %GEM37.fca.13.load, 13
  %GEM37.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM37.fca.14.insert = insertvalue %gem %GEM37.fca.13.insert, double* %GEM37.fca.14.load, 14
  %GEM37.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM37.fca.15.insert = insertvalue %gem %GEM37.fca.14.insert, double* %GEM37.fca.15.load, 15
  %GEM37.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM37.fca.16.insert = insertvalue %gem %GEM37.fca.15.insert, double %GEM37.fca.16.load, 16
  %GEM37.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM37.fca.17.insert = insertvalue %gem %GEM37.fca.16.insert, double %GEM37.fca.17.load, 17
  %GEM37.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM37.fca.18.insert = insertvalue %gem %GEM37.fca.17.insert, double %GEM37.fca.18.load, 18
  %GEM37.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM37.fca.19.insert = insertvalue %gem %GEM37.fca.18.insert, double %GEM37.fca.19.load, 19
  %GEM37.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM37.fca.20.insert = insertvalue %gem %GEM37.fca.19.insert, double %GEM37.fca.20.load, 20
  %GEM37.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM37.fca.21.insert = insertvalue %gem %GEM37.fca.20.insert, <2 x double> %GEM37.fca.21.load, 21
  %GEM37.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM37.fca.22.insert = insertvalue %gem %GEM37.fca.21.insert, <2 x double>* %GEM37.fca.22.load, 22
  %GEM37.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM37.fca.23.insert = insertvalue %gem %GEM37.fca.22.insert, <2 x double>* %GEM37.fca.23.load, 23
  %GEM37.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM37.fca.24.insert = insertvalue %gem %GEM37.fca.23.insert, <2 x double>* %GEM37.fca.24.load, 24
  %GEM37.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM37.fca.25.insert = insertvalue %gem %GEM37.fca.24.insert, <2 x double>* %GEM37.fca.25.load, 25
  %GEM37.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM37.fca.26.insert = insertvalue %gem %GEM37.fca.25.insert, <2 x double>* %GEM37.fca.26.load, 26
  %GEM37.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM37.fca.27.insert = insertvalue %gem %GEM37.fca.26.insert, <2 x double>* %GEM37.fca.27.load, 27
  %GEM37.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM37.fca.28.insert = insertvalue %gem %GEM37.fca.27.insert, <2 x double> %GEM37.fca.28.load, 28
  %GEM37.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM37.fca.29.insert = insertvalue %gem %GEM37.fca.28.insert, <2 x double> %GEM37.fca.29.load, 29
  %GEM37.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM37.fca.30.insert = insertvalue %gem %GEM37.fca.29.insert, <2 x double> %GEM37.fca.30.load, 30
  %GEM37.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM37.fca.31.insert = insertvalue %gem %GEM37.fca.30.insert, <2 x double> %GEM37.fca.31.load, 31
  %GEM37.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM37.fca.32.insert = insertvalue %gem %GEM37.fca.31.insert, <2 x double> %GEM37.fca.32.load, 32
  %GEM37.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM37.fca.33.insert = insertvalue %gem %GEM37.fca.32.insert, <2 x double> %GEM37.fca.33.load, 33
  %GEM37.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return39 = call double @"getcomp@F[FI"(double* %GEM37.fca.9.load, i64 %return26)
  %return40 = fcmp one double %return39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end32
  %__tmp44 = load <2 x double>, <2 x double>* %__tmp
  %v1GMP45.fca.0.load = load double*, double** %v1GMP5.fca.0.gep
  %v1GMP45.fca.0.insert = insertvalue %gemPrm undef, double* %v1GMP45.fca.0.load, 0
  %v1GMP45.fca.1.load = load double*, double** %v1GMP5.fca.1.gep
  %v1GMP45.fca.1.insert = insertvalue %gemPrm %v1GMP45.fca.0.insert, double* %v1GMP45.fca.1.load, 1
  %v1GMP45.fca.2.load = load double*, double** %v1GMP5.fca.2.gep
  %v1GMP45.fca.2.insert = insertvalue %gemPrm %v1GMP45.fca.1.insert, double* %v1GMP45.fca.2.load, 2
  %v1GMP45.fca.3.load = load double*, double** %v1GMP5.fca.3.gep
  %v1GMP45.fca.3.insert = insertvalue %gemPrm %v1GMP45.fca.2.insert, double* %v1GMP45.fca.3.load, 3
  %v1GMP45.fca.4.load = load double*, double** %v1GMP5.fca.4.gep
  %v1GMP45.fca.4.insert = insertvalue %gemPrm %v1GMP45.fca.3.insert, double* %v1GMP45.fca.4.load, 4
  %v1GMP45.fca.5.load = load double*, double** %v1GMP5.fca.5.gep
  %v1GMP45.fca.5.insert = insertvalue %gemPrm %v1GMP45.fca.4.insert, double* %v1GMP45.fca.5.load, 5
  %v1GMP45.fca.6.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.6.gep
  %v1GMP45.fca.6.insert = insertvalue %gemPrm %v1GMP45.fca.5.insert, <3 x double>* %v1GMP45.fca.6.load, 6
  %v1GMP45.fca.7.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.7.gep
  %v1GMP45.fca.7.insert = insertvalue %gemPrm %v1GMP45.fca.6.insert, <3 x double>* %v1GMP45.fca.7.load, 7
  %v1GMP45.fca.8.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.8.gep
  %v1GMP45.fca.8.insert = insertvalue %gemPrm %v1GMP45.fca.7.insert, <3 x double>* %v1GMP45.fca.8.load, 8
  %v1GMP45.fca.9.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.9.gep
  %v1GMP45.fca.9.insert = insertvalue %gemPrm %v1GMP45.fca.8.insert, <3 x double>* %v1GMP45.fca.9.load, 9
  %v1GMP45.fca.10.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.10.gep
  %v1GMP45.fca.10.insert = insertvalue %gemPrm %v1GMP45.fca.9.insert, <3 x double>* %v1GMP45.fca.10.load, 10
  %v1GMP45.fca.11.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.11.gep
  %v1GMP45.fca.11.insert = insertvalue %gemPrm %v1GMP45.fca.10.insert, <3 x double>* %v1GMP45.fca.11.load, 11
  %v1GMP45.fca.12.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.12.gep
  %v1GMP45.fca.12.insert = insertvalue %gemPrm %v1GMP45.fca.11.insert, <3 x double>* %v1GMP45.fca.12.load, 12
  %v1GMP45.fca.13.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.13.gep
  %v1GMP45.fca.13.insert = insertvalue %gemPrm %v1GMP45.fca.12.insert, <2 x double>* %v1GMP45.fca.13.load, 13
  %v1GMP45.fca.14.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.14.gep
  %v1GMP45.fca.14.insert = insertvalue %gemPrm %v1GMP45.fca.13.insert, <2 x double>* %v1GMP45.fca.14.load, 14
  %v1GMP45.fca.15.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.15.gep
  %v1GMP45.fca.15.insert = insertvalue %gemPrm %v1GMP45.fca.14.insert, <2 x double>* %v1GMP45.fca.15.load, 15
  %v1GMP45.fca.16.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.16.gep
  %v1GMP45.fca.16.insert = insertvalue %gemPrm %v1GMP45.fca.15.insert, <2 x double>* %v1GMP45.fca.16.load, 16
  %v1GMP45.fca.17.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.17.gep
  %v1GMP45.fca.17.insert = insertvalue %gemPrm %v1GMP45.fca.16.insert, <2 x double>* %v1GMP45.fca.17.load, 17
  %v1GMP45.fca.18.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.18.gep
  %v1GMP45.fca.18.insert = insertvalue %gemPrm %v1GMP45.fca.17.insert, <2 x double>* %v1GMP45.fca.18.load, 18
  %v1GMP45.fca.19.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.19.gep
  %v1GMP45.fca.19.insert = insertvalue %gemPrm %v1GMP45.fca.18.insert, <2 x double>* %v1GMP45.fca.19.load, 19
  %v1GMP45.fca.20.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.20.gep
  %v1GMP45.fca.20.insert = insertvalue %gemPrm %v1GMP45.fca.19.insert, <2 x double>* %v1GMP45.fca.20.load, 20
  %v1GMP45.fca.21.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.21.gep
  %v1GMP45.fca.21.insert = insertvalue %gemPrm %v1GMP45.fca.20.insert, <2 x double>* %v1GMP45.fca.21.load, 21
  %v1GMP45.fca.22.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.22.gep
  %v1GMP45.fca.22.insert = insertvalue %gemPrm %v1GMP45.fca.21.insert, <2 x double>* %v1GMP45.fca.22.load, 22
  %v1GMP45.fca.23.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.23.gep
  %v1GMP45.fca.23.insert = insertvalue %gemPrm %v1GMP45.fca.22.insert, <2 x double>* %v1GMP45.fca.23.load, 23
  %v1GMP45.fca.24.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.24.gep
  %v1GMP45.fca.24.insert = insertvalue %gemPrm %v1GMP45.fca.23.insert, <2 x double>* %v1GMP45.fca.24.load, 24
  %v1GMP45.fca.25.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.25.gep
  %v1GMP45.fca.25.insert = insertvalue %gemPrm %v1GMP45.fca.24.insert, <2 x double>* %v1GMP45.fca.25.load, 25
  %v1GMP45.fca.26.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.26.gep
  %v1GMP45.fca.26.insert = insertvalue %gemPrm %v1GMP45.fca.25.insert, <2 x double>* %v1GMP45.fca.26.load, 26
  %v1GMP45.fca.27.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.27.gep
  %v1GMP45.fca.27.insert = insertvalue %gemPrm %v1GMP45.fca.26.insert, <2 x double>* %v1GMP45.fca.27.load, 27
  %v1GMP45.fca.28.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.28.gep
  %v1GMP45.fca.28.insert = insertvalue %gemPrm %v1GMP45.fca.27.insert, <2 x double>* %v1GMP45.fca.28.load, 28
  %v1GMP45.fca.29.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.29.gep
  %v1GMP45.fca.29.insert = insertvalue %gemPrm %v1GMP45.fca.28.insert, <2 x double>* %v1GMP45.fca.29.load, 29
  %v1GMP45.fca.30.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.30.gep
  %v1GMP45.fca.30.insert = insertvalue %gemPrm %v1GMP45.fca.29.insert, <2 x double>* %v1GMP45.fca.30.load, 30
  %v1GMP45.fca.31.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.31.gep
  %v1GMP45.fca.31.insert = insertvalue %gemPrm %v1GMP45.fca.30.insert, <2 x double>* %v1GMP45.fca.31.load, 31
  %v1GMP45.fca.32.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.32.gep
  %v1GMP45.fca.32.insert = insertvalue %gemPrm %v1GMP45.fca.31.insert, <2 x double>* %v1GMP45.fca.32.load, 32
  %v1GMP45.fca.33.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.33.gep
  %v1GMP45.fca.33.insert = insertvalue %gemPrm %v1GMP45.fca.32.insert, <2 x double>* %v1GMP45.fca.33.load, 33
  %v1GMP45.fca.34.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.34.gep
  %v1GMP45.fca.34.insert = insertvalue %gemPrm %v1GMP45.fca.33.insert, <2 x double>* %v1GMP45.fca.34.load, 34
  %v1GMP45.fca.35.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.35.gep
  %v1GMP45.fca.35.insert = insertvalue %gemPrm %v1GMP45.fca.34.insert, <2 x double>* %v1GMP45.fca.35.load, 35
  %v1GMP45.fca.36.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.36.gep
  %v1GMP45.fca.36.insert = insertvalue %gemPrm %v1GMP45.fca.35.insert, <2 x double>* %v1GMP45.fca.36.load, 36
  %v1GMP45.fca.37.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.37.gep
  %v1GMP45.fca.37.insert = insertvalue %gemPrm %v1GMP45.fca.36.insert, <2 x double>* %v1GMP45.fca.37.load, 37
  %v1GMP45.fca.38.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.38.gep
  %v1GMP45.fca.38.insert = insertvalue %gemPrm %v1GMP45.fca.37.insert, <2 x double>* %v1GMP45.fca.38.load, 38
  %v1GMP45.fca.39.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.39.gep
  %v1GMP45.fca.39.insert = insertvalue %gemPrm %v1GMP45.fca.38.insert, <2 x double>* %v1GMP45.fca.39.load, 39
  %v1GMP45.fca.40.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.40.gep
  %v1GMP45.fca.40.insert = insertvalue %gemPrm %v1GMP45.fca.39.insert, <2 x double>* %v1GMP45.fca.40.load, 40
  %v1GMP45.fca.41.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.41.gep
  %v1GMP45.fca.41.insert = insertvalue %gemPrm %v1GMP45.fca.40.insert, <2 x double>* %v1GMP45.fca.41.load, 41
  %v1GMP45.fca.42.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.42.gep
  %v1GMP45.fca.42.insert = insertvalue %gemPrm %v1GMP45.fca.41.insert, <4 x double>* %v1GMP45.fca.42.load, 42
  %v1GMP45.fca.43.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.43.gep
  %v1GMP45.fca.43.insert = insertvalue %gemPrm %v1GMP45.fca.42.insert, <4 x double>* %v1GMP45.fca.43.load, 43
  %v1GMP45.fca.44.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.44.gep
  %v1GMP45.fca.44.insert = insertvalue %gemPrm %v1GMP45.fca.43.insert, <4 x double>* %v1GMP45.fca.44.load, 44
  %v1GMP45.fca.45.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.45.gep
  %v1GMP45.fca.45.insert = insertvalue %gemPrm %v1GMP45.fca.44.insert, <4 x double>* %v1GMP45.fca.45.load, 45
  %v1GMP45.fca.46.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.46.gep
  %v1GMP45.fca.46.insert = insertvalue %gemPrm %v1GMP45.fca.45.insert, <4 x double>* %v1GMP45.fca.46.load, 46
  %v1GMP45.fca.47.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.47.gep
  %v1GMP45.fca.47.insert = insertvalue %gemPrm %v1GMP45.fca.46.insert, <4 x double>* %v1GMP45.fca.47.load, 47
  %v1GMP45.fca.48.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.48.gep
  %v1GMP45.fca.48.insert = insertvalue %gemPrm %v1GMP45.fca.47.insert, <4 x double>* %v1GMP45.fca.48.load, 48
  %v1GMP45.fca.49.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.49.gep
  %v1GMP45.fca.49.insert = insertvalue %gemPrm %v1GMP45.fca.48.insert, <4 x double>* %v1GMP45.fca.49.load, 49
  %v1GMP45.fca.50.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.50.gep
  %v1GMP45.fca.50.insert = insertvalue %gemPrm %v1GMP45.fca.49.insert, <4 x double>* %v1GMP45.fca.50.load, 50
  %v1GMP45.fca.51.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.51.gep
  %v1GMP45.fca.51.insert = insertvalue %gemPrm %v1GMP45.fca.50.insert, <3 x double>* %v1GMP45.fca.51.load, 51
  %v1GMP45.fca.52.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.52.gep
  %v1GMP45.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 0
  store double* %v1GMP45.fca.0.load, double** %v1GMP45.fca.0.gep
  %v1GMP45.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 1
  store double* %v1GMP45.fca.1.load, double** %v1GMP45.fca.1.gep
  %v1GMP45.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 2
  store double* %v1GMP45.fca.2.load, double** %v1GMP45.fca.2.gep
  %v1GMP45.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 3
  store double* %v1GMP45.fca.3.load, double** %v1GMP45.fca.3.gep
  %v1GMP45.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 4
  store double* %v1GMP45.fca.4.load, double** %v1GMP45.fca.4.gep
  %v1GMP45.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 5
  store double* %v1GMP45.fca.5.load, double** %v1GMP45.fca.5.gep
  %v1GMP45.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 6
  store <3 x double>* %v1GMP45.fca.6.load, <3 x double>** %v1GMP45.fca.6.gep
  %v1GMP45.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 7
  store <3 x double>* %v1GMP45.fca.7.load, <3 x double>** %v1GMP45.fca.7.gep
  %v1GMP45.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 8
  store <3 x double>* %v1GMP45.fca.8.load, <3 x double>** %v1GMP45.fca.8.gep
  %v1GMP45.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 9
  store <3 x double>* %v1GMP45.fca.9.load, <3 x double>** %v1GMP45.fca.9.gep
  %v1GMP45.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 10
  store <3 x double>* %v1GMP45.fca.10.load, <3 x double>** %v1GMP45.fca.10.gep
  %v1GMP45.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 11
  store <3 x double>* %v1GMP45.fca.11.load, <3 x double>** %v1GMP45.fca.11.gep
  %v1GMP45.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 12
  store <3 x double>* %v1GMP45.fca.12.load, <3 x double>** %v1GMP45.fca.12.gep
  %v1GMP45.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 13
  store <2 x double>* %v1GMP45.fca.13.load, <2 x double>** %v1GMP45.fca.13.gep
  %v1GMP45.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 14
  store <2 x double>* %v1GMP45.fca.14.load, <2 x double>** %v1GMP45.fca.14.gep
  %v1GMP45.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 15
  store <2 x double>* %v1GMP45.fca.15.load, <2 x double>** %v1GMP45.fca.15.gep
  %v1GMP45.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 16
  store <2 x double>* %v1GMP45.fca.16.load, <2 x double>** %v1GMP45.fca.16.gep
  %v1GMP45.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 17
  store <2 x double>* %v1GMP45.fca.17.load, <2 x double>** %v1GMP45.fca.17.gep
  %v1GMP45.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 18
  store <2 x double>* %v1GMP45.fca.18.load, <2 x double>** %v1GMP45.fca.18.gep
  %v1GMP45.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 19
  store <2 x double>* %v1GMP45.fca.19.load, <2 x double>** %v1GMP45.fca.19.gep
  %v1GMP45.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 20
  store <2 x double>* %v1GMP45.fca.20.load, <2 x double>** %v1GMP45.fca.20.gep
  %v1GMP45.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 21
  store <2 x double>* %v1GMP45.fca.21.load, <2 x double>** %v1GMP45.fca.21.gep
  %v1GMP45.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 22
  store <2 x double>* %v1GMP45.fca.22.load, <2 x double>** %v1GMP45.fca.22.gep
  %v1GMP45.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 23
  store <2 x double>* %v1GMP45.fca.23.load, <2 x double>** %v1GMP45.fca.23.gep
  %v1GMP45.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 24
  store <2 x double>* %v1GMP45.fca.24.load, <2 x double>** %v1GMP45.fca.24.gep
  %v1GMP45.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 25
  store <2 x double>* %v1GMP45.fca.25.load, <2 x double>** %v1GMP45.fca.25.gep
  %v1GMP45.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 26
  store <2 x double>* %v1GMP45.fca.26.load, <2 x double>** %v1GMP45.fca.26.gep
  %v1GMP45.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 27
  store <2 x double>* %v1GMP45.fca.27.load, <2 x double>** %v1GMP45.fca.27.gep
  %v1GMP45.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 28
  store <2 x double>* %v1GMP45.fca.28.load, <2 x double>** %v1GMP45.fca.28.gep
  %v1GMP45.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 29
  store <2 x double>* %v1GMP45.fca.29.load, <2 x double>** %v1GMP45.fca.29.gep
  %v1GMP45.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 30
  store <2 x double>* %v1GMP45.fca.30.load, <2 x double>** %v1GMP45.fca.30.gep
  %v1GMP45.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 31
  store <2 x double>* %v1GMP45.fca.31.load, <2 x double>** %v1GMP45.fca.31.gep
  %v1GMP45.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 32
  store <2 x double>* %v1GMP45.fca.32.load, <2 x double>** %v1GMP45.fca.32.gep
  %v1GMP45.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 33
  store <2 x double>* %v1GMP45.fca.33.load, <2 x double>** %v1GMP45.fca.33.gep
  %v1GMP45.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 34
  store <2 x double>* %v1GMP45.fca.34.load, <2 x double>** %v1GMP45.fca.34.gep
  %v1GMP45.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 35
  store <2 x double>* %v1GMP45.fca.35.load, <2 x double>** %v1GMP45.fca.35.gep
  %v1GMP45.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 36
  store <2 x double>* %v1GMP45.fca.36.load, <2 x double>** %v1GMP45.fca.36.gep
  %v1GMP45.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 37
  store <2 x double>* %v1GMP45.fca.37.load, <2 x double>** %v1GMP45.fca.37.gep
  %v1GMP45.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 38
  store <2 x double>* %v1GMP45.fca.38.load, <2 x double>** %v1GMP45.fca.38.gep
  %v1GMP45.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 39
  store <2 x double>* %v1GMP45.fca.39.load, <2 x double>** %v1GMP45.fca.39.gep
  %v1GMP45.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 40
  store <2 x double>* %v1GMP45.fca.40.load, <2 x double>** %v1GMP45.fca.40.gep
  %v1GMP45.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 41
  store <2 x double>* %v1GMP45.fca.41.load, <2 x double>** %v1GMP45.fca.41.gep
  %v1GMP45.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 42
  store <4 x double>* %v1GMP45.fca.42.load, <4 x double>** %v1GMP45.fca.42.gep
  %v1GMP45.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 43
  store <4 x double>* %v1GMP45.fca.43.load, <4 x double>** %v1GMP45.fca.43.gep
  %v1GMP45.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 44
  store <4 x double>* %v1GMP45.fca.44.load, <4 x double>** %v1GMP45.fca.44.gep
  %v1GMP45.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 45
  store <4 x double>* %v1GMP45.fca.45.load, <4 x double>** %v1GMP45.fca.45.gep
  %v1GMP45.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 46
  store <4 x double>* %v1GMP45.fca.46.load, <4 x double>** %v1GMP45.fca.46.gep
  %v1GMP45.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 47
  store <4 x double>* %v1GMP45.fca.47.load, <4 x double>** %v1GMP45.fca.47.gep
  %v1GMP45.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 48
  store <4 x double>* %v1GMP45.fca.48.load, <4 x double>** %v1GMP45.fca.48.gep
  %v1GMP45.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 49
  store <4 x double>* %v1GMP45.fca.49.load, <4 x double>** %v1GMP45.fca.49.gep
  %v1GMP45.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 50
  store <4 x double>* %v1GMP45.fca.50.load, <4 x double>** %v1GMP45.fca.50.gep
  %v1GMP45.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 51
  store <3 x double>* %v1GMP45.fca.51.load, <3 x double>** %v1GMP45.fca.51.gep
  %v1GMP45.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %11, i32 0, i32 52
  store <2 x double>* %v1GMP45.fca.52.load, <2 x double>** %v1GMP45.fca.52.gep
  store i64 1, i64* %12
  store i64 %return26, i64* %13
  %GEM47.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM47.fca.0.insert = insertvalue %gem undef, i64* %GEM47.fca.0.load, 0
  %GEM47.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM47.fca.1.insert = insertvalue %gem %GEM47.fca.0.insert, i64* %GEM47.fca.1.load, 1
  %GEM47.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM47.fca.2.insert = insertvalue %gem %GEM47.fca.1.insert, i64* %GEM47.fca.2.load, 2
  %GEM47.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM47.fca.3.insert = insertvalue %gem %GEM47.fca.2.insert, i64* %GEM47.fca.3.load, 3
  %GEM47.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM47.fca.4.insert = insertvalue %gem %GEM47.fca.3.insert, i64* %GEM47.fca.4.load, 4
  %GEM47.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM47.fca.5.insert = insertvalue %gem %GEM47.fca.4.insert, i64 %GEM47.fca.5.load, 5
  %GEM47.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM47.fca.6.insert = insertvalue %gem %GEM47.fca.5.insert, i64 %GEM47.fca.6.load, 6
  %GEM47.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM47.fca.7.insert = insertvalue %gem %GEM47.fca.6.insert, i64 %GEM47.fca.7.load, 7
  %GEM47.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM47.fca.8.insert = insertvalue %gem %GEM47.fca.7.insert, i64 %GEM47.fca.8.load, 8
  %GEM47.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM47.fca.9.insert = insertvalue %gem %GEM47.fca.8.insert, double* %GEM47.fca.9.load, 9
  %GEM47.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM47.fca.10.insert = insertvalue %gem %GEM47.fca.9.insert, double* %GEM47.fca.10.load, 10
  %GEM47.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM47.fca.11.insert = insertvalue %gem %GEM47.fca.10.insert, double* %GEM47.fca.11.load, 11
  %GEM47.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM47.fca.12.insert = insertvalue %gem %GEM47.fca.11.insert, double* %GEM47.fca.12.load, 12
  %GEM47.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM47.fca.13.insert = insertvalue %gem %GEM47.fca.12.insert, double* %GEM47.fca.13.load, 13
  %GEM47.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM47.fca.14.insert = insertvalue %gem %GEM47.fca.13.insert, double* %GEM47.fca.14.load, 14
  %GEM47.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM47.fca.15.insert = insertvalue %gem %GEM47.fca.14.insert, double* %GEM47.fca.15.load, 15
  %GEM47.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM47.fca.16.insert = insertvalue %gem %GEM47.fca.15.insert, double %GEM47.fca.16.load, 16
  %GEM47.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM47.fca.17.insert = insertvalue %gem %GEM47.fca.16.insert, double %GEM47.fca.17.load, 17
  %GEM47.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM47.fca.18.insert = insertvalue %gem %GEM47.fca.17.insert, double %GEM47.fca.18.load, 18
  %GEM47.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM47.fca.19.insert = insertvalue %gem %GEM47.fca.18.insert, double %GEM47.fca.19.load, 19
  %GEM47.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM47.fca.20.insert = insertvalue %gem %GEM47.fca.19.insert, double %GEM47.fca.20.load, 20
  %GEM47.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM47.fca.21.insert = insertvalue %gem %GEM47.fca.20.insert, <2 x double> %GEM47.fca.21.load, 21
  %GEM47.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM47.fca.22.insert = insertvalue %gem %GEM47.fca.21.insert, <2 x double>* %GEM47.fca.22.load, 22
  %GEM47.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM47.fca.23.insert = insertvalue %gem %GEM47.fca.22.insert, <2 x double>* %GEM47.fca.23.load, 23
  %GEM47.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM47.fca.24.insert = insertvalue %gem %GEM47.fca.23.insert, <2 x double>* %GEM47.fca.24.load, 24
  %GEM47.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM47.fca.25.insert = insertvalue %gem %GEM47.fca.24.insert, <2 x double>* %GEM47.fca.25.load, 25
  %GEM47.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM47.fca.26.insert = insertvalue %gem %GEM47.fca.25.insert, <2 x double>* %GEM47.fca.26.load, 26
  %GEM47.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM47.fca.27.insert = insertvalue %gem %GEM47.fca.26.insert, <2 x double>* %GEM47.fca.27.load, 27
  %GEM47.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM47.fca.28.insert = insertvalue %gem %GEM47.fca.27.insert, <2 x double> %GEM47.fca.28.load, 28
  %GEM47.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM47.fca.29.insert = insertvalue %gem %GEM47.fca.28.insert, <2 x double> %GEM47.fca.29.load, 29
  %GEM47.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM47.fca.30.insert = insertvalue %gem %GEM47.fca.29.insert, <2 x double> %GEM47.fca.30.load, 30
  %GEM47.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM47.fca.31.insert = insertvalue %gem %GEM47.fca.30.insert, <2 x double> %GEM47.fca.31.load, 31
  %GEM47.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM47.fca.32.insert = insertvalue %gem %GEM47.fca.31.insert, <2 x double> %GEM47.fca.32.load, 32
  %GEM47.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM47.fca.33.insert = insertvalue %gem %GEM47.fca.32.insert, <2 x double> %GEM47.fca.33.load, 33
  %GEM47.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return50 = call i64 @"getcomp@I[II"(i64* %GEM47.fca.0.load, i64 %return26)
  store i64 %return50, i64* %14
  %__mem51 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem51, <2 x double>* %15
  %GEM52.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM52.fca.0.insert = insertvalue %gem undef, i64* %GEM52.fca.0.load, 0
  %GEM52.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM52.fca.1.insert = insertvalue %gem %GEM52.fca.0.insert, i64* %GEM52.fca.1.load, 1
  %GEM52.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM52.fca.2.insert = insertvalue %gem %GEM52.fca.1.insert, i64* %GEM52.fca.2.load, 2
  %GEM52.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM52.fca.3.insert = insertvalue %gem %GEM52.fca.2.insert, i64* %GEM52.fca.3.load, 3
  %GEM52.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM52.fca.4.insert = insertvalue %gem %GEM52.fca.3.insert, i64* %GEM52.fca.4.load, 4
  %GEM52.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM52.fca.5.insert = insertvalue %gem %GEM52.fca.4.insert, i64 %GEM52.fca.5.load, 5
  %GEM52.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM52.fca.6.insert = insertvalue %gem %GEM52.fca.5.insert, i64 %GEM52.fca.6.load, 6
  %GEM52.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM52.fca.7.insert = insertvalue %gem %GEM52.fca.6.insert, i64 %GEM52.fca.7.load, 7
  %GEM52.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM52.fca.8.insert = insertvalue %gem %GEM52.fca.7.insert, i64 %GEM52.fca.8.load, 8
  %GEM52.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM52.fca.9.insert = insertvalue %gem %GEM52.fca.8.insert, double* %GEM52.fca.9.load, 9
  %GEM52.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM52.fca.10.insert = insertvalue %gem %GEM52.fca.9.insert, double* %GEM52.fca.10.load, 10
  %GEM52.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM52.fca.11.insert = insertvalue %gem %GEM52.fca.10.insert, double* %GEM52.fca.11.load, 11
  %GEM52.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM52.fca.12.insert = insertvalue %gem %GEM52.fca.11.insert, double* %GEM52.fca.12.load, 12
  %GEM52.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM52.fca.13.insert = insertvalue %gem %GEM52.fca.12.insert, double* %GEM52.fca.13.load, 13
  %GEM52.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM52.fca.14.insert = insertvalue %gem %GEM52.fca.13.insert, double* %GEM52.fca.14.load, 14
  %GEM52.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM52.fca.15.insert = insertvalue %gem %GEM52.fca.14.insert, double* %GEM52.fca.15.load, 15
  %GEM52.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM52.fca.16.insert = insertvalue %gem %GEM52.fca.15.insert, double %GEM52.fca.16.load, 16
  %GEM52.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM52.fca.17.insert = insertvalue %gem %GEM52.fca.16.insert, double %GEM52.fca.17.load, 17
  %GEM52.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM52.fca.18.insert = insertvalue %gem %GEM52.fca.17.insert, double %GEM52.fca.18.load, 18
  %GEM52.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM52.fca.19.insert = insertvalue %gem %GEM52.fca.18.insert, double %GEM52.fca.19.load, 19
  %GEM52.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM52.fca.20.insert = insertvalue %gem %GEM52.fca.19.insert, double %GEM52.fca.20.load, 20
  %GEM52.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM52.fca.21.insert = insertvalue %gem %GEM52.fca.20.insert, <2 x double> %GEM52.fca.21.load, 21
  %GEM52.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM52.fca.22.insert = insertvalue %gem %GEM52.fca.21.insert, <2 x double>* %GEM52.fca.22.load, 22
  %GEM52.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM52.fca.23.insert = insertvalue %gem %GEM52.fca.22.insert, <2 x double>* %GEM52.fca.23.load, 23
  %GEM52.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM52.fca.24.insert = insertvalue %gem %GEM52.fca.23.insert, <2 x double>* %GEM52.fca.24.load, 24
  %GEM52.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM52.fca.25.insert = insertvalue %gem %GEM52.fca.24.insert, <2 x double>* %GEM52.fca.25.load, 25
  %GEM52.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM52.fca.26.insert = insertvalue %gem %GEM52.fca.25.insert, <2 x double>* %GEM52.fca.26.load, 26
  %GEM52.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM52.fca.27.insert = insertvalue %gem %GEM52.fca.26.insert, <2 x double>* %GEM52.fca.27.load, 27
  %GEM52.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM52.fca.28.insert = insertvalue %gem %GEM52.fca.27.insert, <2 x double> %GEM52.fca.28.load, 28
  %GEM52.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM52.fca.29.insert = insertvalue %gem %GEM52.fca.28.insert, <2 x double> %GEM52.fca.29.load, 29
  %GEM52.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM52.fca.30.insert = insertvalue %gem %GEM52.fca.29.insert, <2 x double> %GEM52.fca.30.load, 30
  %GEM52.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM52.fca.31.insert = insertvalue %gem %GEM52.fca.30.insert, <2 x double> %GEM52.fca.31.load, 31
  %GEM52.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM52.fca.32.insert = insertvalue %gem %GEM52.fca.31.insert, <2 x double> %GEM52.fca.32.load, 32
  %GEM52.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM52.fca.33.insert = insertvalue %gem %GEM52.fca.32.insert, <2 x double> %GEM52.fca.33.load, 33
  %GEM52.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return54 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM52.fca.22.load, i64 %return26)
  store <2 x double> %return54, <2 x double>* %16
  %GEM55.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM55.fca.0.insert = insertvalue %gem undef, i64* %GEM55.fca.0.load, 0
  %GEM55.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM55.fca.1.insert = insertvalue %gem %GEM55.fca.0.insert, i64* %GEM55.fca.1.load, 1
  %GEM55.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM55.fca.2.insert = insertvalue %gem %GEM55.fca.1.insert, i64* %GEM55.fca.2.load, 2
  %GEM55.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM55.fca.3.insert = insertvalue %gem %GEM55.fca.2.insert, i64* %GEM55.fca.3.load, 3
  %GEM55.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM55.fca.4.insert = insertvalue %gem %GEM55.fca.3.insert, i64* %GEM55.fca.4.load, 4
  %GEM55.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM55.fca.5.insert = insertvalue %gem %GEM55.fca.4.insert, i64 %GEM55.fca.5.load, 5
  %GEM55.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM55.fca.6.insert = insertvalue %gem %GEM55.fca.5.insert, i64 %GEM55.fca.6.load, 6
  %GEM55.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM55.fca.7.insert = insertvalue %gem %GEM55.fca.6.insert, i64 %GEM55.fca.7.load, 7
  %GEM55.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM55.fca.8.insert = insertvalue %gem %GEM55.fca.7.insert, i64 %GEM55.fca.8.load, 8
  %GEM55.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM55.fca.9.insert = insertvalue %gem %GEM55.fca.8.insert, double* %GEM55.fca.9.load, 9
  %GEM55.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM55.fca.10.insert = insertvalue %gem %GEM55.fca.9.insert, double* %GEM55.fca.10.load, 10
  %GEM55.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM55.fca.11.insert = insertvalue %gem %GEM55.fca.10.insert, double* %GEM55.fca.11.load, 11
  %GEM55.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM55.fca.12.insert = insertvalue %gem %GEM55.fca.11.insert, double* %GEM55.fca.12.load, 12
  %GEM55.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM55.fca.13.insert = insertvalue %gem %GEM55.fca.12.insert, double* %GEM55.fca.13.load, 13
  %GEM55.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM55.fca.14.insert = insertvalue %gem %GEM55.fca.13.insert, double* %GEM55.fca.14.load, 14
  %GEM55.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM55.fca.15.insert = insertvalue %gem %GEM55.fca.14.insert, double* %GEM55.fca.15.load, 15
  %GEM55.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM55.fca.16.insert = insertvalue %gem %GEM55.fca.15.insert, double %GEM55.fca.16.load, 16
  %GEM55.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM55.fca.17.insert = insertvalue %gem %GEM55.fca.16.insert, double %GEM55.fca.17.load, 17
  %GEM55.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM55.fca.18.insert = insertvalue %gem %GEM55.fca.17.insert, double %GEM55.fca.18.load, 18
  %GEM55.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM55.fca.19.insert = insertvalue %gem %GEM55.fca.18.insert, double %GEM55.fca.19.load, 19
  %GEM55.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM55.fca.20.insert = insertvalue %gem %GEM55.fca.19.insert, double %GEM55.fca.20.load, 20
  %GEM55.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM55.fca.21.insert = insertvalue %gem %GEM55.fca.20.insert, <2 x double> %GEM55.fca.21.load, 21
  %GEM55.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM55.fca.22.insert = insertvalue %gem %GEM55.fca.21.insert, <2 x double>* %GEM55.fca.22.load, 22
  %GEM55.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM55.fca.23.insert = insertvalue %gem %GEM55.fca.22.insert, <2 x double>* %GEM55.fca.23.load, 23
  %GEM55.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM55.fca.24.insert = insertvalue %gem %GEM55.fca.23.insert, <2 x double>* %GEM55.fca.24.load, 24
  %GEM55.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM55.fca.25.insert = insertvalue %gem %GEM55.fca.24.insert, <2 x double>* %GEM55.fca.25.load, 25
  %GEM55.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM55.fca.26.insert = insertvalue %gem %GEM55.fca.25.insert, <2 x double>* %GEM55.fca.26.load, 26
  %GEM55.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM55.fca.27.insert = insertvalue %gem %GEM55.fca.26.insert, <2 x double>* %GEM55.fca.27.load, 27
  %GEM55.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM55.fca.28.insert = insertvalue %gem %GEM55.fca.27.insert, <2 x double> %GEM55.fca.28.load, 28
  %GEM55.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM55.fca.29.insert = insertvalue %gem %GEM55.fca.28.insert, <2 x double> %GEM55.fca.29.load, 29
  %GEM55.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM55.fca.30.insert = insertvalue %gem %GEM55.fca.29.insert, <2 x double> %GEM55.fca.30.load, 30
  %GEM55.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM55.fca.31.insert = insertvalue %gem %GEM55.fca.30.insert, <2 x double> %GEM55.fca.31.load, 31
  %GEM55.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM55.fca.32.insert = insertvalue %gem %GEM55.fca.31.insert, <2 x double> %GEM55.fca.32.load, 32
  %GEM55.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM55.fca.33.insert = insertvalue %gem %GEM55.fca.32.insert, <2 x double> %GEM55.fca.33.load, 33
  %GEM55.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return57 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM55.fca.23.load, i64 %return26)
  store <2 x double> %return57, <2 x double>* %17
  %GEM58.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM58.fca.0.insert = insertvalue %gem undef, i64* %GEM58.fca.0.load, 0
  %GEM58.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM58.fca.1.insert = insertvalue %gem %GEM58.fca.0.insert, i64* %GEM58.fca.1.load, 1
  %GEM58.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM58.fca.2.insert = insertvalue %gem %GEM58.fca.1.insert, i64* %GEM58.fca.2.load, 2
  %GEM58.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM58.fca.3.insert = insertvalue %gem %GEM58.fca.2.insert, i64* %GEM58.fca.3.load, 3
  %GEM58.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM58.fca.4.insert = insertvalue %gem %GEM58.fca.3.insert, i64* %GEM58.fca.4.load, 4
  %GEM58.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM58.fca.5.insert = insertvalue %gem %GEM58.fca.4.insert, i64 %GEM58.fca.5.load, 5
  %GEM58.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM58.fca.6.insert = insertvalue %gem %GEM58.fca.5.insert, i64 %GEM58.fca.6.load, 6
  %GEM58.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM58.fca.7.insert = insertvalue %gem %GEM58.fca.6.insert, i64 %GEM58.fca.7.load, 7
  %GEM58.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM58.fca.8.insert = insertvalue %gem %GEM58.fca.7.insert, i64 %GEM58.fca.8.load, 8
  %GEM58.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM58.fca.9.insert = insertvalue %gem %GEM58.fca.8.insert, double* %GEM58.fca.9.load, 9
  %GEM58.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM58.fca.10.insert = insertvalue %gem %GEM58.fca.9.insert, double* %GEM58.fca.10.load, 10
  %GEM58.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM58.fca.11.insert = insertvalue %gem %GEM58.fca.10.insert, double* %GEM58.fca.11.load, 11
  %GEM58.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM58.fca.12.insert = insertvalue %gem %GEM58.fca.11.insert, double* %GEM58.fca.12.load, 12
  %GEM58.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM58.fca.13.insert = insertvalue %gem %GEM58.fca.12.insert, double* %GEM58.fca.13.load, 13
  %GEM58.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM58.fca.14.insert = insertvalue %gem %GEM58.fca.13.insert, double* %GEM58.fca.14.load, 14
  %GEM58.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM58.fca.15.insert = insertvalue %gem %GEM58.fca.14.insert, double* %GEM58.fca.15.load, 15
  %GEM58.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM58.fca.16.insert = insertvalue %gem %GEM58.fca.15.insert, double %GEM58.fca.16.load, 16
  %GEM58.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM58.fca.17.insert = insertvalue %gem %GEM58.fca.16.insert, double %GEM58.fca.17.load, 17
  %GEM58.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM58.fca.18.insert = insertvalue %gem %GEM58.fca.17.insert, double %GEM58.fca.18.load, 18
  %GEM58.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM58.fca.19.insert = insertvalue %gem %GEM58.fca.18.insert, double %GEM58.fca.19.load, 19
  %GEM58.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM58.fca.20.insert = insertvalue %gem %GEM58.fca.19.insert, double %GEM58.fca.20.load, 20
  %GEM58.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM58.fca.21.insert = insertvalue %gem %GEM58.fca.20.insert, <2 x double> %GEM58.fca.21.load, 21
  %GEM58.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM58.fca.22.insert = insertvalue %gem %GEM58.fca.21.insert, <2 x double>* %GEM58.fca.22.load, 22
  %GEM58.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM58.fca.23.insert = insertvalue %gem %GEM58.fca.22.insert, <2 x double>* %GEM58.fca.23.load, 23
  %GEM58.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM58.fca.24.insert = insertvalue %gem %GEM58.fca.23.insert, <2 x double>* %GEM58.fca.24.load, 24
  %GEM58.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM58.fca.25.insert = insertvalue %gem %GEM58.fca.24.insert, <2 x double>* %GEM58.fca.25.load, 25
  %GEM58.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM58.fca.26.insert = insertvalue %gem %GEM58.fca.25.insert, <2 x double>* %GEM58.fca.26.load, 26
  %GEM58.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM58.fca.27.insert = insertvalue %gem %GEM58.fca.26.insert, <2 x double>* %GEM58.fca.27.load, 27
  %GEM58.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM58.fca.28.insert = insertvalue %gem %GEM58.fca.27.insert, <2 x double> %GEM58.fca.28.load, 28
  %GEM58.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM58.fca.29.insert = insertvalue %gem %GEM58.fca.28.insert, <2 x double> %GEM58.fca.29.load, 29
  %GEM58.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM58.fca.30.insert = insertvalue %gem %GEM58.fca.29.insert, <2 x double> %GEM58.fca.30.load, 30
  %GEM58.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM58.fca.31.insert = insertvalue %gem %GEM58.fca.30.insert, <2 x double> %GEM58.fca.31.load, 31
  %GEM58.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM58.fca.32.insert = insertvalue %gem %GEM58.fca.31.insert, <2 x double> %GEM58.fca.32.load, 32
  %GEM58.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM58.fca.33.insert = insertvalue %gem %GEM58.fca.32.insert, <2 x double> %GEM58.fca.33.load, 33
  %GEM58.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return60 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM58.fca.24.load, i64 %return26)
  store <2 x double> %return60, <2 x double>* %18
  %GEM61.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM61.fca.0.insert = insertvalue %gem undef, i64* %GEM61.fca.0.load, 0
  %GEM61.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM61.fca.1.insert = insertvalue %gem %GEM61.fca.0.insert, i64* %GEM61.fca.1.load, 1
  %GEM61.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM61.fca.2.insert = insertvalue %gem %GEM61.fca.1.insert, i64* %GEM61.fca.2.load, 2
  %GEM61.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM61.fca.3.insert = insertvalue %gem %GEM61.fca.2.insert, i64* %GEM61.fca.3.load, 3
  %GEM61.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM61.fca.4.insert = insertvalue %gem %GEM61.fca.3.insert, i64* %GEM61.fca.4.load, 4
  %GEM61.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM61.fca.5.insert = insertvalue %gem %GEM61.fca.4.insert, i64 %GEM61.fca.5.load, 5
  %GEM61.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM61.fca.6.insert = insertvalue %gem %GEM61.fca.5.insert, i64 %GEM61.fca.6.load, 6
  %GEM61.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM61.fca.7.insert = insertvalue %gem %GEM61.fca.6.insert, i64 %GEM61.fca.7.load, 7
  %GEM61.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM61.fca.8.insert = insertvalue %gem %GEM61.fca.7.insert, i64 %GEM61.fca.8.load, 8
  %GEM61.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM61.fca.9.insert = insertvalue %gem %GEM61.fca.8.insert, double* %GEM61.fca.9.load, 9
  %GEM61.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM61.fca.10.insert = insertvalue %gem %GEM61.fca.9.insert, double* %GEM61.fca.10.load, 10
  %GEM61.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM61.fca.11.insert = insertvalue %gem %GEM61.fca.10.insert, double* %GEM61.fca.11.load, 11
  %GEM61.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM61.fca.12.insert = insertvalue %gem %GEM61.fca.11.insert, double* %GEM61.fca.12.load, 12
  %GEM61.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM61.fca.13.insert = insertvalue %gem %GEM61.fca.12.insert, double* %GEM61.fca.13.load, 13
  %GEM61.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM61.fca.14.insert = insertvalue %gem %GEM61.fca.13.insert, double* %GEM61.fca.14.load, 14
  %GEM61.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM61.fca.15.insert = insertvalue %gem %GEM61.fca.14.insert, double* %GEM61.fca.15.load, 15
  %GEM61.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM61.fca.16.insert = insertvalue %gem %GEM61.fca.15.insert, double %GEM61.fca.16.load, 16
  %GEM61.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM61.fca.17.insert = insertvalue %gem %GEM61.fca.16.insert, double %GEM61.fca.17.load, 17
  %GEM61.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM61.fca.18.insert = insertvalue %gem %GEM61.fca.17.insert, double %GEM61.fca.18.load, 18
  %GEM61.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM61.fca.19.insert = insertvalue %gem %GEM61.fca.18.insert, double %GEM61.fca.19.load, 19
  %GEM61.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM61.fca.20.insert = insertvalue %gem %GEM61.fca.19.insert, double %GEM61.fca.20.load, 20
  %GEM61.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM61.fca.21.insert = insertvalue %gem %GEM61.fca.20.insert, <2 x double> %GEM61.fca.21.load, 21
  %GEM61.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM61.fca.22.insert = insertvalue %gem %GEM61.fca.21.insert, <2 x double>* %GEM61.fca.22.load, 22
  %GEM61.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM61.fca.23.insert = insertvalue %gem %GEM61.fca.22.insert, <2 x double>* %GEM61.fca.23.load, 23
  %GEM61.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM61.fca.24.insert = insertvalue %gem %GEM61.fca.23.insert, <2 x double>* %GEM61.fca.24.load, 24
  %GEM61.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM61.fca.25.insert = insertvalue %gem %GEM61.fca.24.insert, <2 x double>* %GEM61.fca.25.load, 25
  %GEM61.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM61.fca.26.insert = insertvalue %gem %GEM61.fca.25.insert, <2 x double>* %GEM61.fca.26.load, 26
  %GEM61.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM61.fca.27.insert = insertvalue %gem %GEM61.fca.26.insert, <2 x double>* %GEM61.fca.27.load, 27
  %GEM61.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM61.fca.28.insert = insertvalue %gem %GEM61.fca.27.insert, <2 x double> %GEM61.fca.28.load, 28
  %GEM61.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM61.fca.29.insert = insertvalue %gem %GEM61.fca.28.insert, <2 x double> %GEM61.fca.29.load, 29
  %GEM61.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM61.fca.30.insert = insertvalue %gem %GEM61.fca.29.insert, <2 x double> %GEM61.fca.30.load, 30
  %GEM61.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM61.fca.31.insert = insertvalue %gem %GEM61.fca.30.insert, <2 x double> %GEM61.fca.31.load, 31
  %GEM61.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM61.fca.32.insert = insertvalue %gem %GEM61.fca.31.insert, <2 x double> %GEM61.fca.32.load, 32
  %GEM61.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM61.fca.33.insert = insertvalue %gem %GEM61.fca.32.insert, <2 x double> %GEM61.fca.33.load, 33
  %GEM61.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return64 = call double @"getcomp@F[FI"(double* %GEM61.fca.9.load, i64 %return26)
  store double %return64, double* %19
  %FLAME = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %11, i64* %12, i64* %13, i64* %14, <2 x double>* %15, <2 x double>* %16, <2 x double>* %17, <2 x double>* %18, double* %19)
  %output = call <2 x double> @"add@UU"(<2 x double> %__tmp44, <2 x double> %FLAME)
  store <2 x double> %output, <2 x double>* %__tmp
  br label %end43

end43:                                            ; preds = %true42, %end32
  %GEM65.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM65.fca.0.insert = insertvalue %gem undef, i64* %GEM65.fca.0.load, 0
  %GEM65.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM65.fca.1.insert = insertvalue %gem %GEM65.fca.0.insert, i64* %GEM65.fca.1.load, 1
  %GEM65.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM65.fca.2.insert = insertvalue %gem %GEM65.fca.1.insert, i64* %GEM65.fca.2.load, 2
  %GEM65.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM65.fca.3.insert = insertvalue %gem %GEM65.fca.2.insert, i64* %GEM65.fca.3.load, 3
  %GEM65.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM65.fca.4.insert = insertvalue %gem %GEM65.fca.3.insert, i64* %GEM65.fca.4.load, 4
  %GEM65.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM65.fca.5.insert = insertvalue %gem %GEM65.fca.4.insert, i64 %GEM65.fca.5.load, 5
  %GEM65.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM65.fca.6.insert = insertvalue %gem %GEM65.fca.5.insert, i64 %GEM65.fca.6.load, 6
  %GEM65.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM65.fca.7.insert = insertvalue %gem %GEM65.fca.6.insert, i64 %GEM65.fca.7.load, 7
  %GEM65.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM65.fca.8.insert = insertvalue %gem %GEM65.fca.7.insert, i64 %GEM65.fca.8.load, 8
  %GEM65.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM65.fca.9.insert = insertvalue %gem %GEM65.fca.8.insert, double* %GEM65.fca.9.load, 9
  %GEM65.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM65.fca.10.insert = insertvalue %gem %GEM65.fca.9.insert, double* %GEM65.fca.10.load, 10
  %GEM65.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM65.fca.11.insert = insertvalue %gem %GEM65.fca.10.insert, double* %GEM65.fca.11.load, 11
  %GEM65.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM65.fca.12.insert = insertvalue %gem %GEM65.fca.11.insert, double* %GEM65.fca.12.load, 12
  %GEM65.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM65.fca.13.insert = insertvalue %gem %GEM65.fca.12.insert, double* %GEM65.fca.13.load, 13
  %GEM65.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM65.fca.14.insert = insertvalue %gem %GEM65.fca.13.insert, double* %GEM65.fca.14.load, 14
  %GEM65.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM65.fca.15.insert = insertvalue %gem %GEM65.fca.14.insert, double* %GEM65.fca.15.load, 15
  %GEM65.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM65.fca.16.insert = insertvalue %gem %GEM65.fca.15.insert, double %GEM65.fca.16.load, 16
  %GEM65.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM65.fca.17.insert = insertvalue %gem %GEM65.fca.16.insert, double %GEM65.fca.17.load, 17
  %GEM65.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM65.fca.18.insert = insertvalue %gem %GEM65.fca.17.insert, double %GEM65.fca.18.load, 18
  %GEM65.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM65.fca.19.insert = insertvalue %gem %GEM65.fca.18.insert, double %GEM65.fca.19.load, 19
  %GEM65.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM65.fca.20.insert = insertvalue %gem %GEM65.fca.19.insert, double %GEM65.fca.20.load, 20
  %GEM65.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM65.fca.21.insert = insertvalue %gem %GEM65.fca.20.insert, <2 x double> %GEM65.fca.21.load, 21
  %GEM65.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM65.fca.22.insert = insertvalue %gem %GEM65.fca.21.insert, <2 x double>* %GEM65.fca.22.load, 22
  %GEM65.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM65.fca.23.insert = insertvalue %gem %GEM65.fca.22.insert, <2 x double>* %GEM65.fca.23.load, 23
  %GEM65.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM65.fca.24.insert = insertvalue %gem %GEM65.fca.23.insert, <2 x double>* %GEM65.fca.24.load, 24
  %GEM65.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM65.fca.25.insert = insertvalue %gem %GEM65.fca.24.insert, <2 x double>* %GEM65.fca.25.load, 25
  %GEM65.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM65.fca.26.insert = insertvalue %gem %GEM65.fca.25.insert, <2 x double>* %GEM65.fca.26.load, 26
  %GEM65.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM65.fca.27.insert = insertvalue %gem %GEM65.fca.26.insert, <2 x double>* %GEM65.fca.27.load, 27
  %GEM65.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM65.fca.28.insert = insertvalue %gem %GEM65.fca.27.insert, <2 x double> %GEM65.fca.28.load, 28
  %GEM65.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM65.fca.29.insert = insertvalue %gem %GEM65.fca.28.insert, <2 x double> %GEM65.fca.29.load, 29
  %GEM65.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM65.fca.30.insert = insertvalue %gem %GEM65.fca.29.insert, <2 x double> %GEM65.fca.30.load, 30
  %GEM65.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM65.fca.31.insert = insertvalue %gem %GEM65.fca.30.insert, <2 x double> %GEM65.fca.31.load, 31
  %GEM65.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM65.fca.32.insert = insertvalue %gem %GEM65.fca.31.insert, <2 x double> %GEM65.fca.32.load, 32
  %GEM65.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM65.fca.33.insert = insertvalue %gem %GEM65.fca.32.insert, <2 x double> %GEM65.fca.33.load, 33
  %GEM65.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return67 = call double @"getcomp@F[FI"(double* %GEM65.fca.10.load, i64 %return26)
  %return68 = fcmp one double %return67, 0.000000e+00
  br i1 %return68, label %true70, label %end71

true70:                                           ; preds = %end43
  %__tmp72 = load <2 x double>, <2 x double>* %__tmp
  %v2GMP73.fca.0.load = load double*, double** %v2GMP6.fca.0.gep
  %v2GMP73.fca.0.insert = insertvalue %gemPrm undef, double* %v2GMP73.fca.0.load, 0
  %v2GMP73.fca.1.load = load double*, double** %v2GMP6.fca.1.gep
  %v2GMP73.fca.1.insert = insertvalue %gemPrm %v2GMP73.fca.0.insert, double* %v2GMP73.fca.1.load, 1
  %v2GMP73.fca.2.load = load double*, double** %v2GMP6.fca.2.gep
  %v2GMP73.fca.2.insert = insertvalue %gemPrm %v2GMP73.fca.1.insert, double* %v2GMP73.fca.2.load, 2
  %v2GMP73.fca.3.load = load double*, double** %v2GMP6.fca.3.gep
  %v2GMP73.fca.3.insert = insertvalue %gemPrm %v2GMP73.fca.2.insert, double* %v2GMP73.fca.3.load, 3
  %v2GMP73.fca.4.load = load double*, double** %v2GMP6.fca.4.gep
  %v2GMP73.fca.4.insert = insertvalue %gemPrm %v2GMP73.fca.3.insert, double* %v2GMP73.fca.4.load, 4
  %v2GMP73.fca.5.load = load double*, double** %v2GMP6.fca.5.gep
  %v2GMP73.fca.5.insert = insertvalue %gemPrm %v2GMP73.fca.4.insert, double* %v2GMP73.fca.5.load, 5
  %v2GMP73.fca.6.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.6.gep
  %v2GMP73.fca.6.insert = insertvalue %gemPrm %v2GMP73.fca.5.insert, <3 x double>* %v2GMP73.fca.6.load, 6
  %v2GMP73.fca.7.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.7.gep
  %v2GMP73.fca.7.insert = insertvalue %gemPrm %v2GMP73.fca.6.insert, <3 x double>* %v2GMP73.fca.7.load, 7
  %v2GMP73.fca.8.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.8.gep
  %v2GMP73.fca.8.insert = insertvalue %gemPrm %v2GMP73.fca.7.insert, <3 x double>* %v2GMP73.fca.8.load, 8
  %v2GMP73.fca.9.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.9.gep
  %v2GMP73.fca.9.insert = insertvalue %gemPrm %v2GMP73.fca.8.insert, <3 x double>* %v2GMP73.fca.9.load, 9
  %v2GMP73.fca.10.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.10.gep
  %v2GMP73.fca.10.insert = insertvalue %gemPrm %v2GMP73.fca.9.insert, <3 x double>* %v2GMP73.fca.10.load, 10
  %v2GMP73.fca.11.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.11.gep
  %v2GMP73.fca.11.insert = insertvalue %gemPrm %v2GMP73.fca.10.insert, <3 x double>* %v2GMP73.fca.11.load, 11
  %v2GMP73.fca.12.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.12.gep
  %v2GMP73.fca.12.insert = insertvalue %gemPrm %v2GMP73.fca.11.insert, <3 x double>* %v2GMP73.fca.12.load, 12
  %v2GMP73.fca.13.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.13.gep
  %v2GMP73.fca.13.insert = insertvalue %gemPrm %v2GMP73.fca.12.insert, <2 x double>* %v2GMP73.fca.13.load, 13
  %v2GMP73.fca.14.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.14.gep
  %v2GMP73.fca.14.insert = insertvalue %gemPrm %v2GMP73.fca.13.insert, <2 x double>* %v2GMP73.fca.14.load, 14
  %v2GMP73.fca.15.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.15.gep
  %v2GMP73.fca.15.insert = insertvalue %gemPrm %v2GMP73.fca.14.insert, <2 x double>* %v2GMP73.fca.15.load, 15
  %v2GMP73.fca.16.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.16.gep
  %v2GMP73.fca.16.insert = insertvalue %gemPrm %v2GMP73.fca.15.insert, <2 x double>* %v2GMP73.fca.16.load, 16
  %v2GMP73.fca.17.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.17.gep
  %v2GMP73.fca.17.insert = insertvalue %gemPrm %v2GMP73.fca.16.insert, <2 x double>* %v2GMP73.fca.17.load, 17
  %v2GMP73.fca.18.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.18.gep
  %v2GMP73.fca.18.insert = insertvalue %gemPrm %v2GMP73.fca.17.insert, <2 x double>* %v2GMP73.fca.18.load, 18
  %v2GMP73.fca.19.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.19.gep
  %v2GMP73.fca.19.insert = insertvalue %gemPrm %v2GMP73.fca.18.insert, <2 x double>* %v2GMP73.fca.19.load, 19
  %v2GMP73.fca.20.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.20.gep
  %v2GMP73.fca.20.insert = insertvalue %gemPrm %v2GMP73.fca.19.insert, <2 x double>* %v2GMP73.fca.20.load, 20
  %v2GMP73.fca.21.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.21.gep
  %v2GMP73.fca.21.insert = insertvalue %gemPrm %v2GMP73.fca.20.insert, <2 x double>* %v2GMP73.fca.21.load, 21
  %v2GMP73.fca.22.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.22.gep
  %v2GMP73.fca.22.insert = insertvalue %gemPrm %v2GMP73.fca.21.insert, <2 x double>* %v2GMP73.fca.22.load, 22
  %v2GMP73.fca.23.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.23.gep
  %v2GMP73.fca.23.insert = insertvalue %gemPrm %v2GMP73.fca.22.insert, <2 x double>* %v2GMP73.fca.23.load, 23
  %v2GMP73.fca.24.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.24.gep
  %v2GMP73.fca.24.insert = insertvalue %gemPrm %v2GMP73.fca.23.insert, <2 x double>* %v2GMP73.fca.24.load, 24
  %v2GMP73.fca.25.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.25.gep
  %v2GMP73.fca.25.insert = insertvalue %gemPrm %v2GMP73.fca.24.insert, <2 x double>* %v2GMP73.fca.25.load, 25
  %v2GMP73.fca.26.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.26.gep
  %v2GMP73.fca.26.insert = insertvalue %gemPrm %v2GMP73.fca.25.insert, <2 x double>* %v2GMP73.fca.26.load, 26
  %v2GMP73.fca.27.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.27.gep
  %v2GMP73.fca.27.insert = insertvalue %gemPrm %v2GMP73.fca.26.insert, <2 x double>* %v2GMP73.fca.27.load, 27
  %v2GMP73.fca.28.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.28.gep
  %v2GMP73.fca.28.insert = insertvalue %gemPrm %v2GMP73.fca.27.insert, <2 x double>* %v2GMP73.fca.28.load, 28
  %v2GMP73.fca.29.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.29.gep
  %v2GMP73.fca.29.insert = insertvalue %gemPrm %v2GMP73.fca.28.insert, <2 x double>* %v2GMP73.fca.29.load, 29
  %v2GMP73.fca.30.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.30.gep
  %v2GMP73.fca.30.insert = insertvalue %gemPrm %v2GMP73.fca.29.insert, <2 x double>* %v2GMP73.fca.30.load, 30
  %v2GMP73.fca.31.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.31.gep
  %v2GMP73.fca.31.insert = insertvalue %gemPrm %v2GMP73.fca.30.insert, <2 x double>* %v2GMP73.fca.31.load, 31
  %v2GMP73.fca.32.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.32.gep
  %v2GMP73.fca.32.insert = insertvalue %gemPrm %v2GMP73.fca.31.insert, <2 x double>* %v2GMP73.fca.32.load, 32
  %v2GMP73.fca.33.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.33.gep
  %v2GMP73.fca.33.insert = insertvalue %gemPrm %v2GMP73.fca.32.insert, <2 x double>* %v2GMP73.fca.33.load, 33
  %v2GMP73.fca.34.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.34.gep
  %v2GMP73.fca.34.insert = insertvalue %gemPrm %v2GMP73.fca.33.insert, <2 x double>* %v2GMP73.fca.34.load, 34
  %v2GMP73.fca.35.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.35.gep
  %v2GMP73.fca.35.insert = insertvalue %gemPrm %v2GMP73.fca.34.insert, <2 x double>* %v2GMP73.fca.35.load, 35
  %v2GMP73.fca.36.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.36.gep
  %v2GMP73.fca.36.insert = insertvalue %gemPrm %v2GMP73.fca.35.insert, <2 x double>* %v2GMP73.fca.36.load, 36
  %v2GMP73.fca.37.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.37.gep
  %v2GMP73.fca.37.insert = insertvalue %gemPrm %v2GMP73.fca.36.insert, <2 x double>* %v2GMP73.fca.37.load, 37
  %v2GMP73.fca.38.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.38.gep
  %v2GMP73.fca.38.insert = insertvalue %gemPrm %v2GMP73.fca.37.insert, <2 x double>* %v2GMP73.fca.38.load, 38
  %v2GMP73.fca.39.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.39.gep
  %v2GMP73.fca.39.insert = insertvalue %gemPrm %v2GMP73.fca.38.insert, <2 x double>* %v2GMP73.fca.39.load, 39
  %v2GMP73.fca.40.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.40.gep
  %v2GMP73.fca.40.insert = insertvalue %gemPrm %v2GMP73.fca.39.insert, <2 x double>* %v2GMP73.fca.40.load, 40
  %v2GMP73.fca.41.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.41.gep
  %v2GMP73.fca.41.insert = insertvalue %gemPrm %v2GMP73.fca.40.insert, <2 x double>* %v2GMP73.fca.41.load, 41
  %v2GMP73.fca.42.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.42.gep
  %v2GMP73.fca.42.insert = insertvalue %gemPrm %v2GMP73.fca.41.insert, <4 x double>* %v2GMP73.fca.42.load, 42
  %v2GMP73.fca.43.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.43.gep
  %v2GMP73.fca.43.insert = insertvalue %gemPrm %v2GMP73.fca.42.insert, <4 x double>* %v2GMP73.fca.43.load, 43
  %v2GMP73.fca.44.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.44.gep
  %v2GMP73.fca.44.insert = insertvalue %gemPrm %v2GMP73.fca.43.insert, <4 x double>* %v2GMP73.fca.44.load, 44
  %v2GMP73.fca.45.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.45.gep
  %v2GMP73.fca.45.insert = insertvalue %gemPrm %v2GMP73.fca.44.insert, <4 x double>* %v2GMP73.fca.45.load, 45
  %v2GMP73.fca.46.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.46.gep
  %v2GMP73.fca.46.insert = insertvalue %gemPrm %v2GMP73.fca.45.insert, <4 x double>* %v2GMP73.fca.46.load, 46
  %v2GMP73.fca.47.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.47.gep
  %v2GMP73.fca.47.insert = insertvalue %gemPrm %v2GMP73.fca.46.insert, <4 x double>* %v2GMP73.fca.47.load, 47
  %v2GMP73.fca.48.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.48.gep
  %v2GMP73.fca.48.insert = insertvalue %gemPrm %v2GMP73.fca.47.insert, <4 x double>* %v2GMP73.fca.48.load, 48
  %v2GMP73.fca.49.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.49.gep
  %v2GMP73.fca.49.insert = insertvalue %gemPrm %v2GMP73.fca.48.insert, <4 x double>* %v2GMP73.fca.49.load, 49
  %v2GMP73.fca.50.load = load <4 x double>*, <4 x double>** %v2GMP6.fca.50.gep
  %v2GMP73.fca.50.insert = insertvalue %gemPrm %v2GMP73.fca.49.insert, <4 x double>* %v2GMP73.fca.50.load, 50
  %v2GMP73.fca.51.load = load <3 x double>*, <3 x double>** %v2GMP6.fca.51.gep
  %v2GMP73.fca.51.insert = insertvalue %gemPrm %v2GMP73.fca.50.insert, <3 x double>* %v2GMP73.fca.51.load, 51
  %v2GMP73.fca.52.load = load <2 x double>*, <2 x double>** %v2GMP6.fca.52.gep
  %v2GMP73.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 0
  store double* %v2GMP73.fca.0.load, double** %v2GMP73.fca.0.gep
  %v2GMP73.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 1
  store double* %v2GMP73.fca.1.load, double** %v2GMP73.fca.1.gep
  %v2GMP73.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 2
  store double* %v2GMP73.fca.2.load, double** %v2GMP73.fca.2.gep
  %v2GMP73.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 3
  store double* %v2GMP73.fca.3.load, double** %v2GMP73.fca.3.gep
  %v2GMP73.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 4
  store double* %v2GMP73.fca.4.load, double** %v2GMP73.fca.4.gep
  %v2GMP73.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 5
  store double* %v2GMP73.fca.5.load, double** %v2GMP73.fca.5.gep
  %v2GMP73.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 6
  store <3 x double>* %v2GMP73.fca.6.load, <3 x double>** %v2GMP73.fca.6.gep
  %v2GMP73.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 7
  store <3 x double>* %v2GMP73.fca.7.load, <3 x double>** %v2GMP73.fca.7.gep
  %v2GMP73.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 8
  store <3 x double>* %v2GMP73.fca.8.load, <3 x double>** %v2GMP73.fca.8.gep
  %v2GMP73.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 9
  store <3 x double>* %v2GMP73.fca.9.load, <3 x double>** %v2GMP73.fca.9.gep
  %v2GMP73.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 10
  store <3 x double>* %v2GMP73.fca.10.load, <3 x double>** %v2GMP73.fca.10.gep
  %v2GMP73.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 11
  store <3 x double>* %v2GMP73.fca.11.load, <3 x double>** %v2GMP73.fca.11.gep
  %v2GMP73.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 12
  store <3 x double>* %v2GMP73.fca.12.load, <3 x double>** %v2GMP73.fca.12.gep
  %v2GMP73.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 13
  store <2 x double>* %v2GMP73.fca.13.load, <2 x double>** %v2GMP73.fca.13.gep
  %v2GMP73.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 14
  store <2 x double>* %v2GMP73.fca.14.load, <2 x double>** %v2GMP73.fca.14.gep
  %v2GMP73.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 15
  store <2 x double>* %v2GMP73.fca.15.load, <2 x double>** %v2GMP73.fca.15.gep
  %v2GMP73.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 16
  store <2 x double>* %v2GMP73.fca.16.load, <2 x double>** %v2GMP73.fca.16.gep
  %v2GMP73.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 17
  store <2 x double>* %v2GMP73.fca.17.load, <2 x double>** %v2GMP73.fca.17.gep
  %v2GMP73.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 18
  store <2 x double>* %v2GMP73.fca.18.load, <2 x double>** %v2GMP73.fca.18.gep
  %v2GMP73.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 19
  store <2 x double>* %v2GMP73.fca.19.load, <2 x double>** %v2GMP73.fca.19.gep
  %v2GMP73.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 20
  store <2 x double>* %v2GMP73.fca.20.load, <2 x double>** %v2GMP73.fca.20.gep
  %v2GMP73.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 21
  store <2 x double>* %v2GMP73.fca.21.load, <2 x double>** %v2GMP73.fca.21.gep
  %v2GMP73.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 22
  store <2 x double>* %v2GMP73.fca.22.load, <2 x double>** %v2GMP73.fca.22.gep
  %v2GMP73.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 23
  store <2 x double>* %v2GMP73.fca.23.load, <2 x double>** %v2GMP73.fca.23.gep
  %v2GMP73.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 24
  store <2 x double>* %v2GMP73.fca.24.load, <2 x double>** %v2GMP73.fca.24.gep
  %v2GMP73.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 25
  store <2 x double>* %v2GMP73.fca.25.load, <2 x double>** %v2GMP73.fca.25.gep
  %v2GMP73.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 26
  store <2 x double>* %v2GMP73.fca.26.load, <2 x double>** %v2GMP73.fca.26.gep
  %v2GMP73.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 27
  store <2 x double>* %v2GMP73.fca.27.load, <2 x double>** %v2GMP73.fca.27.gep
  %v2GMP73.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 28
  store <2 x double>* %v2GMP73.fca.28.load, <2 x double>** %v2GMP73.fca.28.gep
  %v2GMP73.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 29
  store <2 x double>* %v2GMP73.fca.29.load, <2 x double>** %v2GMP73.fca.29.gep
  %v2GMP73.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 30
  store <2 x double>* %v2GMP73.fca.30.load, <2 x double>** %v2GMP73.fca.30.gep
  %v2GMP73.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 31
  store <2 x double>* %v2GMP73.fca.31.load, <2 x double>** %v2GMP73.fca.31.gep
  %v2GMP73.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 32
  store <2 x double>* %v2GMP73.fca.32.load, <2 x double>** %v2GMP73.fca.32.gep
  %v2GMP73.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 33
  store <2 x double>* %v2GMP73.fca.33.load, <2 x double>** %v2GMP73.fca.33.gep
  %v2GMP73.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 34
  store <2 x double>* %v2GMP73.fca.34.load, <2 x double>** %v2GMP73.fca.34.gep
  %v2GMP73.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 35
  store <2 x double>* %v2GMP73.fca.35.load, <2 x double>** %v2GMP73.fca.35.gep
  %v2GMP73.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 36
  store <2 x double>* %v2GMP73.fca.36.load, <2 x double>** %v2GMP73.fca.36.gep
  %v2GMP73.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 37
  store <2 x double>* %v2GMP73.fca.37.load, <2 x double>** %v2GMP73.fca.37.gep
  %v2GMP73.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 38
  store <2 x double>* %v2GMP73.fca.38.load, <2 x double>** %v2GMP73.fca.38.gep
  %v2GMP73.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 39
  store <2 x double>* %v2GMP73.fca.39.load, <2 x double>** %v2GMP73.fca.39.gep
  %v2GMP73.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 40
  store <2 x double>* %v2GMP73.fca.40.load, <2 x double>** %v2GMP73.fca.40.gep
  %v2GMP73.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 41
  store <2 x double>* %v2GMP73.fca.41.load, <2 x double>** %v2GMP73.fca.41.gep
  %v2GMP73.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 42
  store <4 x double>* %v2GMP73.fca.42.load, <4 x double>** %v2GMP73.fca.42.gep
  %v2GMP73.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 43
  store <4 x double>* %v2GMP73.fca.43.load, <4 x double>** %v2GMP73.fca.43.gep
  %v2GMP73.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 44
  store <4 x double>* %v2GMP73.fca.44.load, <4 x double>** %v2GMP73.fca.44.gep
  %v2GMP73.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 45
  store <4 x double>* %v2GMP73.fca.45.load, <4 x double>** %v2GMP73.fca.45.gep
  %v2GMP73.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 46
  store <4 x double>* %v2GMP73.fca.46.load, <4 x double>** %v2GMP73.fca.46.gep
  %v2GMP73.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 47
  store <4 x double>* %v2GMP73.fca.47.load, <4 x double>** %v2GMP73.fca.47.gep
  %v2GMP73.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 48
  store <4 x double>* %v2GMP73.fca.48.load, <4 x double>** %v2GMP73.fca.48.gep
  %v2GMP73.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 49
  store <4 x double>* %v2GMP73.fca.49.load, <4 x double>** %v2GMP73.fca.49.gep
  %v2GMP73.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 50
  store <4 x double>* %v2GMP73.fca.50.load, <4 x double>** %v2GMP73.fca.50.gep
  %v2GMP73.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 51
  store <3 x double>* %v2GMP73.fca.51.load, <3 x double>** %v2GMP73.fca.51.gep
  %v2GMP73.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %20, i32 0, i32 52
  store <2 x double>* %v2GMP73.fca.52.load, <2 x double>** %v2GMP73.fca.52.gep
  store i64 1, i64* %21
  store i64 %return26, i64* %22
  %GEM75.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM75.fca.0.insert = insertvalue %gem undef, i64* %GEM75.fca.0.load, 0
  %GEM75.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM75.fca.1.insert = insertvalue %gem %GEM75.fca.0.insert, i64* %GEM75.fca.1.load, 1
  %GEM75.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM75.fca.2.insert = insertvalue %gem %GEM75.fca.1.insert, i64* %GEM75.fca.2.load, 2
  %GEM75.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM75.fca.3.insert = insertvalue %gem %GEM75.fca.2.insert, i64* %GEM75.fca.3.load, 3
  %GEM75.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM75.fca.4.insert = insertvalue %gem %GEM75.fca.3.insert, i64* %GEM75.fca.4.load, 4
  %GEM75.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM75.fca.5.insert = insertvalue %gem %GEM75.fca.4.insert, i64 %GEM75.fca.5.load, 5
  %GEM75.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM75.fca.6.insert = insertvalue %gem %GEM75.fca.5.insert, i64 %GEM75.fca.6.load, 6
  %GEM75.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM75.fca.7.insert = insertvalue %gem %GEM75.fca.6.insert, i64 %GEM75.fca.7.load, 7
  %GEM75.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM75.fca.8.insert = insertvalue %gem %GEM75.fca.7.insert, i64 %GEM75.fca.8.load, 8
  %GEM75.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM75.fca.9.insert = insertvalue %gem %GEM75.fca.8.insert, double* %GEM75.fca.9.load, 9
  %GEM75.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM75.fca.10.insert = insertvalue %gem %GEM75.fca.9.insert, double* %GEM75.fca.10.load, 10
  %GEM75.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM75.fca.11.insert = insertvalue %gem %GEM75.fca.10.insert, double* %GEM75.fca.11.load, 11
  %GEM75.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM75.fca.12.insert = insertvalue %gem %GEM75.fca.11.insert, double* %GEM75.fca.12.load, 12
  %GEM75.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM75.fca.13.insert = insertvalue %gem %GEM75.fca.12.insert, double* %GEM75.fca.13.load, 13
  %GEM75.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM75.fca.14.insert = insertvalue %gem %GEM75.fca.13.insert, double* %GEM75.fca.14.load, 14
  %GEM75.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM75.fca.15.insert = insertvalue %gem %GEM75.fca.14.insert, double* %GEM75.fca.15.load, 15
  %GEM75.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM75.fca.16.insert = insertvalue %gem %GEM75.fca.15.insert, double %GEM75.fca.16.load, 16
  %GEM75.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM75.fca.17.insert = insertvalue %gem %GEM75.fca.16.insert, double %GEM75.fca.17.load, 17
  %GEM75.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM75.fca.18.insert = insertvalue %gem %GEM75.fca.17.insert, double %GEM75.fca.18.load, 18
  %GEM75.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM75.fca.19.insert = insertvalue %gem %GEM75.fca.18.insert, double %GEM75.fca.19.load, 19
  %GEM75.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM75.fca.20.insert = insertvalue %gem %GEM75.fca.19.insert, double %GEM75.fca.20.load, 20
  %GEM75.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM75.fca.21.insert = insertvalue %gem %GEM75.fca.20.insert, <2 x double> %GEM75.fca.21.load, 21
  %GEM75.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM75.fca.22.insert = insertvalue %gem %GEM75.fca.21.insert, <2 x double>* %GEM75.fca.22.load, 22
  %GEM75.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM75.fca.23.insert = insertvalue %gem %GEM75.fca.22.insert, <2 x double>* %GEM75.fca.23.load, 23
  %GEM75.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM75.fca.24.insert = insertvalue %gem %GEM75.fca.23.insert, <2 x double>* %GEM75.fca.24.load, 24
  %GEM75.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM75.fca.25.insert = insertvalue %gem %GEM75.fca.24.insert, <2 x double>* %GEM75.fca.25.load, 25
  %GEM75.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM75.fca.26.insert = insertvalue %gem %GEM75.fca.25.insert, <2 x double>* %GEM75.fca.26.load, 26
  %GEM75.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM75.fca.27.insert = insertvalue %gem %GEM75.fca.26.insert, <2 x double>* %GEM75.fca.27.load, 27
  %GEM75.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM75.fca.28.insert = insertvalue %gem %GEM75.fca.27.insert, <2 x double> %GEM75.fca.28.load, 28
  %GEM75.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM75.fca.29.insert = insertvalue %gem %GEM75.fca.28.insert, <2 x double> %GEM75.fca.29.load, 29
  %GEM75.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM75.fca.30.insert = insertvalue %gem %GEM75.fca.29.insert, <2 x double> %GEM75.fca.30.load, 30
  %GEM75.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM75.fca.31.insert = insertvalue %gem %GEM75.fca.30.insert, <2 x double> %GEM75.fca.31.load, 31
  %GEM75.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM75.fca.32.insert = insertvalue %gem %GEM75.fca.31.insert, <2 x double> %GEM75.fca.32.load, 32
  %GEM75.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM75.fca.33.insert = insertvalue %gem %GEM75.fca.32.insert, <2 x double> %GEM75.fca.33.load, 33
  %GEM75.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return78 = call i64 @"getcomp@I[II"(i64* %GEM75.fca.1.load, i64 %return26)
  store i64 %return78, i64* %23
  %__mem79 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem79, <2 x double>* %24
  %GEM80.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM80.fca.0.insert = insertvalue %gem undef, i64* %GEM80.fca.0.load, 0
  %GEM80.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM80.fca.1.insert = insertvalue %gem %GEM80.fca.0.insert, i64* %GEM80.fca.1.load, 1
  %GEM80.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM80.fca.2.insert = insertvalue %gem %GEM80.fca.1.insert, i64* %GEM80.fca.2.load, 2
  %GEM80.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM80.fca.3.insert = insertvalue %gem %GEM80.fca.2.insert, i64* %GEM80.fca.3.load, 3
  %GEM80.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM80.fca.4.insert = insertvalue %gem %GEM80.fca.3.insert, i64* %GEM80.fca.4.load, 4
  %GEM80.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM80.fca.5.insert = insertvalue %gem %GEM80.fca.4.insert, i64 %GEM80.fca.5.load, 5
  %GEM80.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM80.fca.6.insert = insertvalue %gem %GEM80.fca.5.insert, i64 %GEM80.fca.6.load, 6
  %GEM80.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM80.fca.7.insert = insertvalue %gem %GEM80.fca.6.insert, i64 %GEM80.fca.7.load, 7
  %GEM80.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM80.fca.8.insert = insertvalue %gem %GEM80.fca.7.insert, i64 %GEM80.fca.8.load, 8
  %GEM80.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM80.fca.9.insert = insertvalue %gem %GEM80.fca.8.insert, double* %GEM80.fca.9.load, 9
  %GEM80.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM80.fca.10.insert = insertvalue %gem %GEM80.fca.9.insert, double* %GEM80.fca.10.load, 10
  %GEM80.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM80.fca.11.insert = insertvalue %gem %GEM80.fca.10.insert, double* %GEM80.fca.11.load, 11
  %GEM80.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM80.fca.12.insert = insertvalue %gem %GEM80.fca.11.insert, double* %GEM80.fca.12.load, 12
  %GEM80.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM80.fca.13.insert = insertvalue %gem %GEM80.fca.12.insert, double* %GEM80.fca.13.load, 13
  %GEM80.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM80.fca.14.insert = insertvalue %gem %GEM80.fca.13.insert, double* %GEM80.fca.14.load, 14
  %GEM80.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM80.fca.15.insert = insertvalue %gem %GEM80.fca.14.insert, double* %GEM80.fca.15.load, 15
  %GEM80.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM80.fca.16.insert = insertvalue %gem %GEM80.fca.15.insert, double %GEM80.fca.16.load, 16
  %GEM80.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM80.fca.17.insert = insertvalue %gem %GEM80.fca.16.insert, double %GEM80.fca.17.load, 17
  %GEM80.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM80.fca.18.insert = insertvalue %gem %GEM80.fca.17.insert, double %GEM80.fca.18.load, 18
  %GEM80.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM80.fca.19.insert = insertvalue %gem %GEM80.fca.18.insert, double %GEM80.fca.19.load, 19
  %GEM80.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM80.fca.20.insert = insertvalue %gem %GEM80.fca.19.insert, double %GEM80.fca.20.load, 20
  %GEM80.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM80.fca.21.insert = insertvalue %gem %GEM80.fca.20.insert, <2 x double> %GEM80.fca.21.load, 21
  %GEM80.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM80.fca.22.insert = insertvalue %gem %GEM80.fca.21.insert, <2 x double>* %GEM80.fca.22.load, 22
  %GEM80.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM80.fca.23.insert = insertvalue %gem %GEM80.fca.22.insert, <2 x double>* %GEM80.fca.23.load, 23
  %GEM80.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM80.fca.24.insert = insertvalue %gem %GEM80.fca.23.insert, <2 x double>* %GEM80.fca.24.load, 24
  %GEM80.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM80.fca.25.insert = insertvalue %gem %GEM80.fca.24.insert, <2 x double>* %GEM80.fca.25.load, 25
  %GEM80.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM80.fca.26.insert = insertvalue %gem %GEM80.fca.25.insert, <2 x double>* %GEM80.fca.26.load, 26
  %GEM80.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM80.fca.27.insert = insertvalue %gem %GEM80.fca.26.insert, <2 x double>* %GEM80.fca.27.load, 27
  %GEM80.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM80.fca.28.insert = insertvalue %gem %GEM80.fca.27.insert, <2 x double> %GEM80.fca.28.load, 28
  %GEM80.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM80.fca.29.insert = insertvalue %gem %GEM80.fca.28.insert, <2 x double> %GEM80.fca.29.load, 29
  %GEM80.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM80.fca.30.insert = insertvalue %gem %GEM80.fca.29.insert, <2 x double> %GEM80.fca.30.load, 30
  %GEM80.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM80.fca.31.insert = insertvalue %gem %GEM80.fca.30.insert, <2 x double> %GEM80.fca.31.load, 31
  %GEM80.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM80.fca.32.insert = insertvalue %gem %GEM80.fca.31.insert, <2 x double> %GEM80.fca.32.load, 32
  %GEM80.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM80.fca.33.insert = insertvalue %gem %GEM80.fca.32.insert, <2 x double> %GEM80.fca.33.load, 33
  %GEM80.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return83 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM80.fca.22.load, i64 %return26)
  store <2 x double> %return83, <2 x double>* %25
  %GEM84.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM84.fca.0.insert = insertvalue %gem undef, i64* %GEM84.fca.0.load, 0
  %GEM84.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM84.fca.1.insert = insertvalue %gem %GEM84.fca.0.insert, i64* %GEM84.fca.1.load, 1
  %GEM84.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM84.fca.2.insert = insertvalue %gem %GEM84.fca.1.insert, i64* %GEM84.fca.2.load, 2
  %GEM84.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM84.fca.3.insert = insertvalue %gem %GEM84.fca.2.insert, i64* %GEM84.fca.3.load, 3
  %GEM84.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM84.fca.4.insert = insertvalue %gem %GEM84.fca.3.insert, i64* %GEM84.fca.4.load, 4
  %GEM84.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM84.fca.5.insert = insertvalue %gem %GEM84.fca.4.insert, i64 %GEM84.fca.5.load, 5
  %GEM84.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM84.fca.6.insert = insertvalue %gem %GEM84.fca.5.insert, i64 %GEM84.fca.6.load, 6
  %GEM84.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM84.fca.7.insert = insertvalue %gem %GEM84.fca.6.insert, i64 %GEM84.fca.7.load, 7
  %GEM84.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM84.fca.8.insert = insertvalue %gem %GEM84.fca.7.insert, i64 %GEM84.fca.8.load, 8
  %GEM84.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM84.fca.9.insert = insertvalue %gem %GEM84.fca.8.insert, double* %GEM84.fca.9.load, 9
  %GEM84.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM84.fca.10.insert = insertvalue %gem %GEM84.fca.9.insert, double* %GEM84.fca.10.load, 10
  %GEM84.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM84.fca.11.insert = insertvalue %gem %GEM84.fca.10.insert, double* %GEM84.fca.11.load, 11
  %GEM84.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM84.fca.12.insert = insertvalue %gem %GEM84.fca.11.insert, double* %GEM84.fca.12.load, 12
  %GEM84.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM84.fca.13.insert = insertvalue %gem %GEM84.fca.12.insert, double* %GEM84.fca.13.load, 13
  %GEM84.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM84.fca.14.insert = insertvalue %gem %GEM84.fca.13.insert, double* %GEM84.fca.14.load, 14
  %GEM84.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM84.fca.15.insert = insertvalue %gem %GEM84.fca.14.insert, double* %GEM84.fca.15.load, 15
  %GEM84.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM84.fca.16.insert = insertvalue %gem %GEM84.fca.15.insert, double %GEM84.fca.16.load, 16
  %GEM84.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM84.fca.17.insert = insertvalue %gem %GEM84.fca.16.insert, double %GEM84.fca.17.load, 17
  %GEM84.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM84.fca.18.insert = insertvalue %gem %GEM84.fca.17.insert, double %GEM84.fca.18.load, 18
  %GEM84.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM84.fca.19.insert = insertvalue %gem %GEM84.fca.18.insert, double %GEM84.fca.19.load, 19
  %GEM84.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM84.fca.20.insert = insertvalue %gem %GEM84.fca.19.insert, double %GEM84.fca.20.load, 20
  %GEM84.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM84.fca.21.insert = insertvalue %gem %GEM84.fca.20.insert, <2 x double> %GEM84.fca.21.load, 21
  %GEM84.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM84.fca.22.insert = insertvalue %gem %GEM84.fca.21.insert, <2 x double>* %GEM84.fca.22.load, 22
  %GEM84.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM84.fca.23.insert = insertvalue %gem %GEM84.fca.22.insert, <2 x double>* %GEM84.fca.23.load, 23
  %GEM84.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM84.fca.24.insert = insertvalue %gem %GEM84.fca.23.insert, <2 x double>* %GEM84.fca.24.load, 24
  %GEM84.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM84.fca.25.insert = insertvalue %gem %GEM84.fca.24.insert, <2 x double>* %GEM84.fca.25.load, 25
  %GEM84.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM84.fca.26.insert = insertvalue %gem %GEM84.fca.25.insert, <2 x double>* %GEM84.fca.26.load, 26
  %GEM84.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM84.fca.27.insert = insertvalue %gem %GEM84.fca.26.insert, <2 x double>* %GEM84.fca.27.load, 27
  %GEM84.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM84.fca.28.insert = insertvalue %gem %GEM84.fca.27.insert, <2 x double> %GEM84.fca.28.load, 28
  %GEM84.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM84.fca.29.insert = insertvalue %gem %GEM84.fca.28.insert, <2 x double> %GEM84.fca.29.load, 29
  %GEM84.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM84.fca.30.insert = insertvalue %gem %GEM84.fca.29.insert, <2 x double> %GEM84.fca.30.load, 30
  %GEM84.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM84.fca.31.insert = insertvalue %gem %GEM84.fca.30.insert, <2 x double> %GEM84.fca.31.load, 31
  %GEM84.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM84.fca.32.insert = insertvalue %gem %GEM84.fca.31.insert, <2 x double> %GEM84.fca.32.load, 32
  %GEM84.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM84.fca.33.insert = insertvalue %gem %GEM84.fca.32.insert, <2 x double> %GEM84.fca.33.load, 33
  %GEM84.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return87 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM84.fca.23.load, i64 %return26)
  store <2 x double> %return87, <2 x double>* %26
  %GEM88.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM88.fca.0.insert = insertvalue %gem undef, i64* %GEM88.fca.0.load, 0
  %GEM88.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM88.fca.1.insert = insertvalue %gem %GEM88.fca.0.insert, i64* %GEM88.fca.1.load, 1
  %GEM88.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM88.fca.2.insert = insertvalue %gem %GEM88.fca.1.insert, i64* %GEM88.fca.2.load, 2
  %GEM88.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM88.fca.3.insert = insertvalue %gem %GEM88.fca.2.insert, i64* %GEM88.fca.3.load, 3
  %GEM88.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM88.fca.4.insert = insertvalue %gem %GEM88.fca.3.insert, i64* %GEM88.fca.4.load, 4
  %GEM88.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM88.fca.5.insert = insertvalue %gem %GEM88.fca.4.insert, i64 %GEM88.fca.5.load, 5
  %GEM88.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM88.fca.6.insert = insertvalue %gem %GEM88.fca.5.insert, i64 %GEM88.fca.6.load, 6
  %GEM88.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM88.fca.7.insert = insertvalue %gem %GEM88.fca.6.insert, i64 %GEM88.fca.7.load, 7
  %GEM88.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM88.fca.8.insert = insertvalue %gem %GEM88.fca.7.insert, i64 %GEM88.fca.8.load, 8
  %GEM88.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM88.fca.9.insert = insertvalue %gem %GEM88.fca.8.insert, double* %GEM88.fca.9.load, 9
  %GEM88.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM88.fca.10.insert = insertvalue %gem %GEM88.fca.9.insert, double* %GEM88.fca.10.load, 10
  %GEM88.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM88.fca.11.insert = insertvalue %gem %GEM88.fca.10.insert, double* %GEM88.fca.11.load, 11
  %GEM88.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM88.fca.12.insert = insertvalue %gem %GEM88.fca.11.insert, double* %GEM88.fca.12.load, 12
  %GEM88.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM88.fca.13.insert = insertvalue %gem %GEM88.fca.12.insert, double* %GEM88.fca.13.load, 13
  %GEM88.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM88.fca.14.insert = insertvalue %gem %GEM88.fca.13.insert, double* %GEM88.fca.14.load, 14
  %GEM88.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM88.fca.15.insert = insertvalue %gem %GEM88.fca.14.insert, double* %GEM88.fca.15.load, 15
  %GEM88.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM88.fca.16.insert = insertvalue %gem %GEM88.fca.15.insert, double %GEM88.fca.16.load, 16
  %GEM88.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM88.fca.17.insert = insertvalue %gem %GEM88.fca.16.insert, double %GEM88.fca.17.load, 17
  %GEM88.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM88.fca.18.insert = insertvalue %gem %GEM88.fca.17.insert, double %GEM88.fca.18.load, 18
  %GEM88.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM88.fca.19.insert = insertvalue %gem %GEM88.fca.18.insert, double %GEM88.fca.19.load, 19
  %GEM88.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM88.fca.20.insert = insertvalue %gem %GEM88.fca.19.insert, double %GEM88.fca.20.load, 20
  %GEM88.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM88.fca.21.insert = insertvalue %gem %GEM88.fca.20.insert, <2 x double> %GEM88.fca.21.load, 21
  %GEM88.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM88.fca.22.insert = insertvalue %gem %GEM88.fca.21.insert, <2 x double>* %GEM88.fca.22.load, 22
  %GEM88.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM88.fca.23.insert = insertvalue %gem %GEM88.fca.22.insert, <2 x double>* %GEM88.fca.23.load, 23
  %GEM88.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM88.fca.24.insert = insertvalue %gem %GEM88.fca.23.insert, <2 x double>* %GEM88.fca.24.load, 24
  %GEM88.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM88.fca.25.insert = insertvalue %gem %GEM88.fca.24.insert, <2 x double>* %GEM88.fca.25.load, 25
  %GEM88.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM88.fca.26.insert = insertvalue %gem %GEM88.fca.25.insert, <2 x double>* %GEM88.fca.26.load, 26
  %GEM88.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM88.fca.27.insert = insertvalue %gem %GEM88.fca.26.insert, <2 x double>* %GEM88.fca.27.load, 27
  %GEM88.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM88.fca.28.insert = insertvalue %gem %GEM88.fca.27.insert, <2 x double> %GEM88.fca.28.load, 28
  %GEM88.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM88.fca.29.insert = insertvalue %gem %GEM88.fca.28.insert, <2 x double> %GEM88.fca.29.load, 29
  %GEM88.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM88.fca.30.insert = insertvalue %gem %GEM88.fca.29.insert, <2 x double> %GEM88.fca.30.load, 30
  %GEM88.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM88.fca.31.insert = insertvalue %gem %GEM88.fca.30.insert, <2 x double> %GEM88.fca.31.load, 31
  %GEM88.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM88.fca.32.insert = insertvalue %gem %GEM88.fca.31.insert, <2 x double> %GEM88.fca.32.load, 32
  %GEM88.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM88.fca.33.insert = insertvalue %gem %GEM88.fca.32.insert, <2 x double> %GEM88.fca.33.load, 33
  %GEM88.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return91 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM88.fca.24.load, i64 %return26)
  store <2 x double> %return91, <2 x double>* %27
  %GEM92.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM92.fca.0.insert = insertvalue %gem undef, i64* %GEM92.fca.0.load, 0
  %GEM92.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM92.fca.1.insert = insertvalue %gem %GEM92.fca.0.insert, i64* %GEM92.fca.1.load, 1
  %GEM92.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM92.fca.2.insert = insertvalue %gem %GEM92.fca.1.insert, i64* %GEM92.fca.2.load, 2
  %GEM92.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM92.fca.3.insert = insertvalue %gem %GEM92.fca.2.insert, i64* %GEM92.fca.3.load, 3
  %GEM92.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM92.fca.4.insert = insertvalue %gem %GEM92.fca.3.insert, i64* %GEM92.fca.4.load, 4
  %GEM92.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM92.fca.5.insert = insertvalue %gem %GEM92.fca.4.insert, i64 %GEM92.fca.5.load, 5
  %GEM92.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM92.fca.6.insert = insertvalue %gem %GEM92.fca.5.insert, i64 %GEM92.fca.6.load, 6
  %GEM92.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM92.fca.7.insert = insertvalue %gem %GEM92.fca.6.insert, i64 %GEM92.fca.7.load, 7
  %GEM92.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM92.fca.8.insert = insertvalue %gem %GEM92.fca.7.insert, i64 %GEM92.fca.8.load, 8
  %GEM92.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM92.fca.9.insert = insertvalue %gem %GEM92.fca.8.insert, double* %GEM92.fca.9.load, 9
  %GEM92.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM92.fca.10.insert = insertvalue %gem %GEM92.fca.9.insert, double* %GEM92.fca.10.load, 10
  %GEM92.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM92.fca.11.insert = insertvalue %gem %GEM92.fca.10.insert, double* %GEM92.fca.11.load, 11
  %GEM92.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM92.fca.12.insert = insertvalue %gem %GEM92.fca.11.insert, double* %GEM92.fca.12.load, 12
  %GEM92.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM92.fca.13.insert = insertvalue %gem %GEM92.fca.12.insert, double* %GEM92.fca.13.load, 13
  %GEM92.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM92.fca.14.insert = insertvalue %gem %GEM92.fca.13.insert, double* %GEM92.fca.14.load, 14
  %GEM92.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM92.fca.15.insert = insertvalue %gem %GEM92.fca.14.insert, double* %GEM92.fca.15.load, 15
  %GEM92.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM92.fca.16.insert = insertvalue %gem %GEM92.fca.15.insert, double %GEM92.fca.16.load, 16
  %GEM92.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM92.fca.17.insert = insertvalue %gem %GEM92.fca.16.insert, double %GEM92.fca.17.load, 17
  %GEM92.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM92.fca.18.insert = insertvalue %gem %GEM92.fca.17.insert, double %GEM92.fca.18.load, 18
  %GEM92.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM92.fca.19.insert = insertvalue %gem %GEM92.fca.18.insert, double %GEM92.fca.19.load, 19
  %GEM92.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM92.fca.20.insert = insertvalue %gem %GEM92.fca.19.insert, double %GEM92.fca.20.load, 20
  %GEM92.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM92.fca.21.insert = insertvalue %gem %GEM92.fca.20.insert, <2 x double> %GEM92.fca.21.load, 21
  %GEM92.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM92.fca.22.insert = insertvalue %gem %GEM92.fca.21.insert, <2 x double>* %GEM92.fca.22.load, 22
  %GEM92.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM92.fca.23.insert = insertvalue %gem %GEM92.fca.22.insert, <2 x double>* %GEM92.fca.23.load, 23
  %GEM92.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM92.fca.24.insert = insertvalue %gem %GEM92.fca.23.insert, <2 x double>* %GEM92.fca.24.load, 24
  %GEM92.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM92.fca.25.insert = insertvalue %gem %GEM92.fca.24.insert, <2 x double>* %GEM92.fca.25.load, 25
  %GEM92.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM92.fca.26.insert = insertvalue %gem %GEM92.fca.25.insert, <2 x double>* %GEM92.fca.26.load, 26
  %GEM92.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM92.fca.27.insert = insertvalue %gem %GEM92.fca.26.insert, <2 x double>* %GEM92.fca.27.load, 27
  %GEM92.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM92.fca.28.insert = insertvalue %gem %GEM92.fca.27.insert, <2 x double> %GEM92.fca.28.load, 28
  %GEM92.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM92.fca.29.insert = insertvalue %gem %GEM92.fca.28.insert, <2 x double> %GEM92.fca.29.load, 29
  %GEM92.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM92.fca.30.insert = insertvalue %gem %GEM92.fca.29.insert, <2 x double> %GEM92.fca.30.load, 30
  %GEM92.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM92.fca.31.insert = insertvalue %gem %GEM92.fca.30.insert, <2 x double> %GEM92.fca.31.load, 31
  %GEM92.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM92.fca.32.insert = insertvalue %gem %GEM92.fca.31.insert, <2 x double> %GEM92.fca.32.load, 32
  %GEM92.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM92.fca.33.insert = insertvalue %gem %GEM92.fca.32.insert, <2 x double> %GEM92.fca.33.load, 33
  %GEM92.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return95 = call double @"getcomp@F[FI"(double* %GEM92.fca.10.load, i64 %return26)
  store double %return95, double* %28
  %FLAME96 = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %20, i64* %21, i64* %22, i64* %23, <2 x double>* %24, <2 x double>* %25, <2 x double>* %26, <2 x double>* %27, double* %28)
  %output97 = call <2 x double> @"add@UU"(<2 x double> %__tmp72, <2 x double> %FLAME96)
  store <2 x double> %output97, <2 x double>* %__tmp
  br label %end71

end71:                                            ; preds = %true70, %end43
  %GEM98.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM98.fca.0.insert = insertvalue %gem undef, i64* %GEM98.fca.0.load, 0
  %GEM98.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM98.fca.1.insert = insertvalue %gem %GEM98.fca.0.insert, i64* %GEM98.fca.1.load, 1
  %GEM98.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM98.fca.2.insert = insertvalue %gem %GEM98.fca.1.insert, i64* %GEM98.fca.2.load, 2
  %GEM98.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM98.fca.3.insert = insertvalue %gem %GEM98.fca.2.insert, i64* %GEM98.fca.3.load, 3
  %GEM98.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM98.fca.4.insert = insertvalue %gem %GEM98.fca.3.insert, i64* %GEM98.fca.4.load, 4
  %GEM98.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM98.fca.5.insert = insertvalue %gem %GEM98.fca.4.insert, i64 %GEM98.fca.5.load, 5
  %GEM98.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM98.fca.6.insert = insertvalue %gem %GEM98.fca.5.insert, i64 %GEM98.fca.6.load, 6
  %GEM98.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM98.fca.7.insert = insertvalue %gem %GEM98.fca.6.insert, i64 %GEM98.fca.7.load, 7
  %GEM98.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM98.fca.8.insert = insertvalue %gem %GEM98.fca.7.insert, i64 %GEM98.fca.8.load, 8
  %GEM98.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM98.fca.9.insert = insertvalue %gem %GEM98.fca.8.insert, double* %GEM98.fca.9.load, 9
  %GEM98.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM98.fca.10.insert = insertvalue %gem %GEM98.fca.9.insert, double* %GEM98.fca.10.load, 10
  %GEM98.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM98.fca.11.insert = insertvalue %gem %GEM98.fca.10.insert, double* %GEM98.fca.11.load, 11
  %GEM98.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM98.fca.12.insert = insertvalue %gem %GEM98.fca.11.insert, double* %GEM98.fca.12.load, 12
  %GEM98.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM98.fca.13.insert = insertvalue %gem %GEM98.fca.12.insert, double* %GEM98.fca.13.load, 13
  %GEM98.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM98.fca.14.insert = insertvalue %gem %GEM98.fca.13.insert, double* %GEM98.fca.14.load, 14
  %GEM98.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM98.fca.15.insert = insertvalue %gem %GEM98.fca.14.insert, double* %GEM98.fca.15.load, 15
  %GEM98.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM98.fca.16.insert = insertvalue %gem %GEM98.fca.15.insert, double %GEM98.fca.16.load, 16
  %GEM98.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM98.fca.17.insert = insertvalue %gem %GEM98.fca.16.insert, double %GEM98.fca.17.load, 17
  %GEM98.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM98.fca.18.insert = insertvalue %gem %GEM98.fca.17.insert, double %GEM98.fca.18.load, 18
  %GEM98.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM98.fca.19.insert = insertvalue %gem %GEM98.fca.18.insert, double %GEM98.fca.19.load, 19
  %GEM98.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM98.fca.20.insert = insertvalue %gem %GEM98.fca.19.insert, double %GEM98.fca.20.load, 20
  %GEM98.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM98.fca.21.insert = insertvalue %gem %GEM98.fca.20.insert, <2 x double> %GEM98.fca.21.load, 21
  %GEM98.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM98.fca.22.insert = insertvalue %gem %GEM98.fca.21.insert, <2 x double>* %GEM98.fca.22.load, 22
  %GEM98.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM98.fca.23.insert = insertvalue %gem %GEM98.fca.22.insert, <2 x double>* %GEM98.fca.23.load, 23
  %GEM98.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM98.fca.24.insert = insertvalue %gem %GEM98.fca.23.insert, <2 x double>* %GEM98.fca.24.load, 24
  %GEM98.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM98.fca.25.insert = insertvalue %gem %GEM98.fca.24.insert, <2 x double>* %GEM98.fca.25.load, 25
  %GEM98.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM98.fca.26.insert = insertvalue %gem %GEM98.fca.25.insert, <2 x double>* %GEM98.fca.26.load, 26
  %GEM98.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM98.fca.27.insert = insertvalue %gem %GEM98.fca.26.insert, <2 x double>* %GEM98.fca.27.load, 27
  %GEM98.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM98.fca.28.insert = insertvalue %gem %GEM98.fca.27.insert, <2 x double> %GEM98.fca.28.load, 28
  %GEM98.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM98.fca.29.insert = insertvalue %gem %GEM98.fca.28.insert, <2 x double> %GEM98.fca.29.load, 29
  %GEM98.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM98.fca.30.insert = insertvalue %gem %GEM98.fca.29.insert, <2 x double> %GEM98.fca.30.load, 30
  %GEM98.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM98.fca.31.insert = insertvalue %gem %GEM98.fca.30.insert, <2 x double> %GEM98.fca.31.load, 31
  %GEM98.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM98.fca.32.insert = insertvalue %gem %GEM98.fca.31.insert, <2 x double> %GEM98.fca.32.load, 32
  %GEM98.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM98.fca.33.insert = insertvalue %gem %GEM98.fca.32.insert, <2 x double> %GEM98.fca.33.load, 33
  %GEM98.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return100 = call double @"getcomp@F[FI"(double* %GEM98.fca.11.load, i64 %return26)
  %return101 = fcmp one double %return100, 0.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end71
  %__tmp105 = load <2 x double>, <2 x double>* %__tmp
  %v3GMP106.fca.0.load = load double*, double** %v3GMP7.fca.0.gep
  %v3GMP106.fca.0.insert = insertvalue %gemPrm undef, double* %v3GMP106.fca.0.load, 0
  %v3GMP106.fca.1.load = load double*, double** %v3GMP7.fca.1.gep
  %v3GMP106.fca.1.insert = insertvalue %gemPrm %v3GMP106.fca.0.insert, double* %v3GMP106.fca.1.load, 1
  %v3GMP106.fca.2.load = load double*, double** %v3GMP7.fca.2.gep
  %v3GMP106.fca.2.insert = insertvalue %gemPrm %v3GMP106.fca.1.insert, double* %v3GMP106.fca.2.load, 2
  %v3GMP106.fca.3.load = load double*, double** %v3GMP7.fca.3.gep
  %v3GMP106.fca.3.insert = insertvalue %gemPrm %v3GMP106.fca.2.insert, double* %v3GMP106.fca.3.load, 3
  %v3GMP106.fca.4.load = load double*, double** %v3GMP7.fca.4.gep
  %v3GMP106.fca.4.insert = insertvalue %gemPrm %v3GMP106.fca.3.insert, double* %v3GMP106.fca.4.load, 4
  %v3GMP106.fca.5.load = load double*, double** %v3GMP7.fca.5.gep
  %v3GMP106.fca.5.insert = insertvalue %gemPrm %v3GMP106.fca.4.insert, double* %v3GMP106.fca.5.load, 5
  %v3GMP106.fca.6.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.6.gep
  %v3GMP106.fca.6.insert = insertvalue %gemPrm %v3GMP106.fca.5.insert, <3 x double>* %v3GMP106.fca.6.load, 6
  %v3GMP106.fca.7.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.7.gep
  %v3GMP106.fca.7.insert = insertvalue %gemPrm %v3GMP106.fca.6.insert, <3 x double>* %v3GMP106.fca.7.load, 7
  %v3GMP106.fca.8.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.8.gep
  %v3GMP106.fca.8.insert = insertvalue %gemPrm %v3GMP106.fca.7.insert, <3 x double>* %v3GMP106.fca.8.load, 8
  %v3GMP106.fca.9.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.9.gep
  %v3GMP106.fca.9.insert = insertvalue %gemPrm %v3GMP106.fca.8.insert, <3 x double>* %v3GMP106.fca.9.load, 9
  %v3GMP106.fca.10.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.10.gep
  %v3GMP106.fca.10.insert = insertvalue %gemPrm %v3GMP106.fca.9.insert, <3 x double>* %v3GMP106.fca.10.load, 10
  %v3GMP106.fca.11.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.11.gep
  %v3GMP106.fca.11.insert = insertvalue %gemPrm %v3GMP106.fca.10.insert, <3 x double>* %v3GMP106.fca.11.load, 11
  %v3GMP106.fca.12.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.12.gep
  %v3GMP106.fca.12.insert = insertvalue %gemPrm %v3GMP106.fca.11.insert, <3 x double>* %v3GMP106.fca.12.load, 12
  %v3GMP106.fca.13.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.13.gep
  %v3GMP106.fca.13.insert = insertvalue %gemPrm %v3GMP106.fca.12.insert, <2 x double>* %v3GMP106.fca.13.load, 13
  %v3GMP106.fca.14.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.14.gep
  %v3GMP106.fca.14.insert = insertvalue %gemPrm %v3GMP106.fca.13.insert, <2 x double>* %v3GMP106.fca.14.load, 14
  %v3GMP106.fca.15.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.15.gep
  %v3GMP106.fca.15.insert = insertvalue %gemPrm %v3GMP106.fca.14.insert, <2 x double>* %v3GMP106.fca.15.load, 15
  %v3GMP106.fca.16.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.16.gep
  %v3GMP106.fca.16.insert = insertvalue %gemPrm %v3GMP106.fca.15.insert, <2 x double>* %v3GMP106.fca.16.load, 16
  %v3GMP106.fca.17.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.17.gep
  %v3GMP106.fca.17.insert = insertvalue %gemPrm %v3GMP106.fca.16.insert, <2 x double>* %v3GMP106.fca.17.load, 17
  %v3GMP106.fca.18.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.18.gep
  %v3GMP106.fca.18.insert = insertvalue %gemPrm %v3GMP106.fca.17.insert, <2 x double>* %v3GMP106.fca.18.load, 18
  %v3GMP106.fca.19.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.19.gep
  %v3GMP106.fca.19.insert = insertvalue %gemPrm %v3GMP106.fca.18.insert, <2 x double>* %v3GMP106.fca.19.load, 19
  %v3GMP106.fca.20.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.20.gep
  %v3GMP106.fca.20.insert = insertvalue %gemPrm %v3GMP106.fca.19.insert, <2 x double>* %v3GMP106.fca.20.load, 20
  %v3GMP106.fca.21.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.21.gep
  %v3GMP106.fca.21.insert = insertvalue %gemPrm %v3GMP106.fca.20.insert, <2 x double>* %v3GMP106.fca.21.load, 21
  %v3GMP106.fca.22.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.22.gep
  %v3GMP106.fca.22.insert = insertvalue %gemPrm %v3GMP106.fca.21.insert, <2 x double>* %v3GMP106.fca.22.load, 22
  %v3GMP106.fca.23.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.23.gep
  %v3GMP106.fca.23.insert = insertvalue %gemPrm %v3GMP106.fca.22.insert, <2 x double>* %v3GMP106.fca.23.load, 23
  %v3GMP106.fca.24.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.24.gep
  %v3GMP106.fca.24.insert = insertvalue %gemPrm %v3GMP106.fca.23.insert, <2 x double>* %v3GMP106.fca.24.load, 24
  %v3GMP106.fca.25.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.25.gep
  %v3GMP106.fca.25.insert = insertvalue %gemPrm %v3GMP106.fca.24.insert, <2 x double>* %v3GMP106.fca.25.load, 25
  %v3GMP106.fca.26.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.26.gep
  %v3GMP106.fca.26.insert = insertvalue %gemPrm %v3GMP106.fca.25.insert, <2 x double>* %v3GMP106.fca.26.load, 26
  %v3GMP106.fca.27.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.27.gep
  %v3GMP106.fca.27.insert = insertvalue %gemPrm %v3GMP106.fca.26.insert, <2 x double>* %v3GMP106.fca.27.load, 27
  %v3GMP106.fca.28.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.28.gep
  %v3GMP106.fca.28.insert = insertvalue %gemPrm %v3GMP106.fca.27.insert, <2 x double>* %v3GMP106.fca.28.load, 28
  %v3GMP106.fca.29.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.29.gep
  %v3GMP106.fca.29.insert = insertvalue %gemPrm %v3GMP106.fca.28.insert, <2 x double>* %v3GMP106.fca.29.load, 29
  %v3GMP106.fca.30.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.30.gep
  %v3GMP106.fca.30.insert = insertvalue %gemPrm %v3GMP106.fca.29.insert, <2 x double>* %v3GMP106.fca.30.load, 30
  %v3GMP106.fca.31.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.31.gep
  %v3GMP106.fca.31.insert = insertvalue %gemPrm %v3GMP106.fca.30.insert, <2 x double>* %v3GMP106.fca.31.load, 31
  %v3GMP106.fca.32.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.32.gep
  %v3GMP106.fca.32.insert = insertvalue %gemPrm %v3GMP106.fca.31.insert, <2 x double>* %v3GMP106.fca.32.load, 32
  %v3GMP106.fca.33.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.33.gep
  %v3GMP106.fca.33.insert = insertvalue %gemPrm %v3GMP106.fca.32.insert, <2 x double>* %v3GMP106.fca.33.load, 33
  %v3GMP106.fca.34.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.34.gep
  %v3GMP106.fca.34.insert = insertvalue %gemPrm %v3GMP106.fca.33.insert, <2 x double>* %v3GMP106.fca.34.load, 34
  %v3GMP106.fca.35.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.35.gep
  %v3GMP106.fca.35.insert = insertvalue %gemPrm %v3GMP106.fca.34.insert, <2 x double>* %v3GMP106.fca.35.load, 35
  %v3GMP106.fca.36.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.36.gep
  %v3GMP106.fca.36.insert = insertvalue %gemPrm %v3GMP106.fca.35.insert, <2 x double>* %v3GMP106.fca.36.load, 36
  %v3GMP106.fca.37.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.37.gep
  %v3GMP106.fca.37.insert = insertvalue %gemPrm %v3GMP106.fca.36.insert, <2 x double>* %v3GMP106.fca.37.load, 37
  %v3GMP106.fca.38.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.38.gep
  %v3GMP106.fca.38.insert = insertvalue %gemPrm %v3GMP106.fca.37.insert, <2 x double>* %v3GMP106.fca.38.load, 38
  %v3GMP106.fca.39.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.39.gep
  %v3GMP106.fca.39.insert = insertvalue %gemPrm %v3GMP106.fca.38.insert, <2 x double>* %v3GMP106.fca.39.load, 39
  %v3GMP106.fca.40.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.40.gep
  %v3GMP106.fca.40.insert = insertvalue %gemPrm %v3GMP106.fca.39.insert, <2 x double>* %v3GMP106.fca.40.load, 40
  %v3GMP106.fca.41.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.41.gep
  %v3GMP106.fca.41.insert = insertvalue %gemPrm %v3GMP106.fca.40.insert, <2 x double>* %v3GMP106.fca.41.load, 41
  %v3GMP106.fca.42.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.42.gep
  %v3GMP106.fca.42.insert = insertvalue %gemPrm %v3GMP106.fca.41.insert, <4 x double>* %v3GMP106.fca.42.load, 42
  %v3GMP106.fca.43.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.43.gep
  %v3GMP106.fca.43.insert = insertvalue %gemPrm %v3GMP106.fca.42.insert, <4 x double>* %v3GMP106.fca.43.load, 43
  %v3GMP106.fca.44.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.44.gep
  %v3GMP106.fca.44.insert = insertvalue %gemPrm %v3GMP106.fca.43.insert, <4 x double>* %v3GMP106.fca.44.load, 44
  %v3GMP106.fca.45.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.45.gep
  %v3GMP106.fca.45.insert = insertvalue %gemPrm %v3GMP106.fca.44.insert, <4 x double>* %v3GMP106.fca.45.load, 45
  %v3GMP106.fca.46.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.46.gep
  %v3GMP106.fca.46.insert = insertvalue %gemPrm %v3GMP106.fca.45.insert, <4 x double>* %v3GMP106.fca.46.load, 46
  %v3GMP106.fca.47.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.47.gep
  %v3GMP106.fca.47.insert = insertvalue %gemPrm %v3GMP106.fca.46.insert, <4 x double>* %v3GMP106.fca.47.load, 47
  %v3GMP106.fca.48.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.48.gep
  %v3GMP106.fca.48.insert = insertvalue %gemPrm %v3GMP106.fca.47.insert, <4 x double>* %v3GMP106.fca.48.load, 48
  %v3GMP106.fca.49.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.49.gep
  %v3GMP106.fca.49.insert = insertvalue %gemPrm %v3GMP106.fca.48.insert, <4 x double>* %v3GMP106.fca.49.load, 49
  %v3GMP106.fca.50.load = load <4 x double>*, <4 x double>** %v3GMP7.fca.50.gep
  %v3GMP106.fca.50.insert = insertvalue %gemPrm %v3GMP106.fca.49.insert, <4 x double>* %v3GMP106.fca.50.load, 50
  %v3GMP106.fca.51.load = load <3 x double>*, <3 x double>** %v3GMP7.fca.51.gep
  %v3GMP106.fca.51.insert = insertvalue %gemPrm %v3GMP106.fca.50.insert, <3 x double>* %v3GMP106.fca.51.load, 51
  %v3GMP106.fca.52.load = load <2 x double>*, <2 x double>** %v3GMP7.fca.52.gep
  %v3GMP106.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 0
  store double* %v3GMP106.fca.0.load, double** %v3GMP106.fca.0.gep
  %v3GMP106.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 1
  store double* %v3GMP106.fca.1.load, double** %v3GMP106.fca.1.gep
  %v3GMP106.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 2
  store double* %v3GMP106.fca.2.load, double** %v3GMP106.fca.2.gep
  %v3GMP106.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 3
  store double* %v3GMP106.fca.3.load, double** %v3GMP106.fca.3.gep
  %v3GMP106.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 4
  store double* %v3GMP106.fca.4.load, double** %v3GMP106.fca.4.gep
  %v3GMP106.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 5
  store double* %v3GMP106.fca.5.load, double** %v3GMP106.fca.5.gep
  %v3GMP106.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 6
  store <3 x double>* %v3GMP106.fca.6.load, <3 x double>** %v3GMP106.fca.6.gep
  %v3GMP106.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 7
  store <3 x double>* %v3GMP106.fca.7.load, <3 x double>** %v3GMP106.fca.7.gep
  %v3GMP106.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 8
  store <3 x double>* %v3GMP106.fca.8.load, <3 x double>** %v3GMP106.fca.8.gep
  %v3GMP106.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 9
  store <3 x double>* %v3GMP106.fca.9.load, <3 x double>** %v3GMP106.fca.9.gep
  %v3GMP106.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 10
  store <3 x double>* %v3GMP106.fca.10.load, <3 x double>** %v3GMP106.fca.10.gep
  %v3GMP106.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 11
  store <3 x double>* %v3GMP106.fca.11.load, <3 x double>** %v3GMP106.fca.11.gep
  %v3GMP106.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 12
  store <3 x double>* %v3GMP106.fca.12.load, <3 x double>** %v3GMP106.fca.12.gep
  %v3GMP106.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 13
  store <2 x double>* %v3GMP106.fca.13.load, <2 x double>** %v3GMP106.fca.13.gep
  %v3GMP106.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 14
  store <2 x double>* %v3GMP106.fca.14.load, <2 x double>** %v3GMP106.fca.14.gep
  %v3GMP106.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 15
  store <2 x double>* %v3GMP106.fca.15.load, <2 x double>** %v3GMP106.fca.15.gep
  %v3GMP106.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 16
  store <2 x double>* %v3GMP106.fca.16.load, <2 x double>** %v3GMP106.fca.16.gep
  %v3GMP106.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 17
  store <2 x double>* %v3GMP106.fca.17.load, <2 x double>** %v3GMP106.fca.17.gep
  %v3GMP106.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 18
  store <2 x double>* %v3GMP106.fca.18.load, <2 x double>** %v3GMP106.fca.18.gep
  %v3GMP106.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 19
  store <2 x double>* %v3GMP106.fca.19.load, <2 x double>** %v3GMP106.fca.19.gep
  %v3GMP106.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 20
  store <2 x double>* %v3GMP106.fca.20.load, <2 x double>** %v3GMP106.fca.20.gep
  %v3GMP106.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 21
  store <2 x double>* %v3GMP106.fca.21.load, <2 x double>** %v3GMP106.fca.21.gep
  %v3GMP106.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 22
  store <2 x double>* %v3GMP106.fca.22.load, <2 x double>** %v3GMP106.fca.22.gep
  %v3GMP106.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 23
  store <2 x double>* %v3GMP106.fca.23.load, <2 x double>** %v3GMP106.fca.23.gep
  %v3GMP106.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 24
  store <2 x double>* %v3GMP106.fca.24.load, <2 x double>** %v3GMP106.fca.24.gep
  %v3GMP106.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 25
  store <2 x double>* %v3GMP106.fca.25.load, <2 x double>** %v3GMP106.fca.25.gep
  %v3GMP106.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 26
  store <2 x double>* %v3GMP106.fca.26.load, <2 x double>** %v3GMP106.fca.26.gep
  %v3GMP106.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 27
  store <2 x double>* %v3GMP106.fca.27.load, <2 x double>** %v3GMP106.fca.27.gep
  %v3GMP106.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 28
  store <2 x double>* %v3GMP106.fca.28.load, <2 x double>** %v3GMP106.fca.28.gep
  %v3GMP106.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 29
  store <2 x double>* %v3GMP106.fca.29.load, <2 x double>** %v3GMP106.fca.29.gep
  %v3GMP106.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 30
  store <2 x double>* %v3GMP106.fca.30.load, <2 x double>** %v3GMP106.fca.30.gep
  %v3GMP106.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 31
  store <2 x double>* %v3GMP106.fca.31.load, <2 x double>** %v3GMP106.fca.31.gep
  %v3GMP106.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 32
  store <2 x double>* %v3GMP106.fca.32.load, <2 x double>** %v3GMP106.fca.32.gep
  %v3GMP106.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 33
  store <2 x double>* %v3GMP106.fca.33.load, <2 x double>** %v3GMP106.fca.33.gep
  %v3GMP106.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 34
  store <2 x double>* %v3GMP106.fca.34.load, <2 x double>** %v3GMP106.fca.34.gep
  %v3GMP106.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 35
  store <2 x double>* %v3GMP106.fca.35.load, <2 x double>** %v3GMP106.fca.35.gep
  %v3GMP106.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 36
  store <2 x double>* %v3GMP106.fca.36.load, <2 x double>** %v3GMP106.fca.36.gep
  %v3GMP106.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 37
  store <2 x double>* %v3GMP106.fca.37.load, <2 x double>** %v3GMP106.fca.37.gep
  %v3GMP106.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 38
  store <2 x double>* %v3GMP106.fca.38.load, <2 x double>** %v3GMP106.fca.38.gep
  %v3GMP106.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 39
  store <2 x double>* %v3GMP106.fca.39.load, <2 x double>** %v3GMP106.fca.39.gep
  %v3GMP106.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 40
  store <2 x double>* %v3GMP106.fca.40.load, <2 x double>** %v3GMP106.fca.40.gep
  %v3GMP106.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 41
  store <2 x double>* %v3GMP106.fca.41.load, <2 x double>** %v3GMP106.fca.41.gep
  %v3GMP106.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 42
  store <4 x double>* %v3GMP106.fca.42.load, <4 x double>** %v3GMP106.fca.42.gep
  %v3GMP106.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 43
  store <4 x double>* %v3GMP106.fca.43.load, <4 x double>** %v3GMP106.fca.43.gep
  %v3GMP106.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 44
  store <4 x double>* %v3GMP106.fca.44.load, <4 x double>** %v3GMP106.fca.44.gep
  %v3GMP106.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 45
  store <4 x double>* %v3GMP106.fca.45.load, <4 x double>** %v3GMP106.fca.45.gep
  %v3GMP106.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 46
  store <4 x double>* %v3GMP106.fca.46.load, <4 x double>** %v3GMP106.fca.46.gep
  %v3GMP106.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 47
  store <4 x double>* %v3GMP106.fca.47.load, <4 x double>** %v3GMP106.fca.47.gep
  %v3GMP106.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 48
  store <4 x double>* %v3GMP106.fca.48.load, <4 x double>** %v3GMP106.fca.48.gep
  %v3GMP106.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 49
  store <4 x double>* %v3GMP106.fca.49.load, <4 x double>** %v3GMP106.fca.49.gep
  %v3GMP106.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 50
  store <4 x double>* %v3GMP106.fca.50.load, <4 x double>** %v3GMP106.fca.50.gep
  %v3GMP106.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 51
  store <3 x double>* %v3GMP106.fca.51.load, <3 x double>** %v3GMP106.fca.51.gep
  %v3GMP106.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %29, i32 0, i32 52
  store <2 x double>* %v3GMP106.fca.52.load, <2 x double>** %v3GMP106.fca.52.gep
  store i64 1, i64* %30
  store i64 %return26, i64* %31
  %GEM108.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM108.fca.0.insert = insertvalue %gem undef, i64* %GEM108.fca.0.load, 0
  %GEM108.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM108.fca.1.insert = insertvalue %gem %GEM108.fca.0.insert, i64* %GEM108.fca.1.load, 1
  %GEM108.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM108.fca.2.insert = insertvalue %gem %GEM108.fca.1.insert, i64* %GEM108.fca.2.load, 2
  %GEM108.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM108.fca.3.insert = insertvalue %gem %GEM108.fca.2.insert, i64* %GEM108.fca.3.load, 3
  %GEM108.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM108.fca.4.insert = insertvalue %gem %GEM108.fca.3.insert, i64* %GEM108.fca.4.load, 4
  %GEM108.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM108.fca.5.insert = insertvalue %gem %GEM108.fca.4.insert, i64 %GEM108.fca.5.load, 5
  %GEM108.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM108.fca.6.insert = insertvalue %gem %GEM108.fca.5.insert, i64 %GEM108.fca.6.load, 6
  %GEM108.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM108.fca.7.insert = insertvalue %gem %GEM108.fca.6.insert, i64 %GEM108.fca.7.load, 7
  %GEM108.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM108.fca.8.insert = insertvalue %gem %GEM108.fca.7.insert, i64 %GEM108.fca.8.load, 8
  %GEM108.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM108.fca.9.insert = insertvalue %gem %GEM108.fca.8.insert, double* %GEM108.fca.9.load, 9
  %GEM108.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM108.fca.10.insert = insertvalue %gem %GEM108.fca.9.insert, double* %GEM108.fca.10.load, 10
  %GEM108.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM108.fca.11.insert = insertvalue %gem %GEM108.fca.10.insert, double* %GEM108.fca.11.load, 11
  %GEM108.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM108.fca.12.insert = insertvalue %gem %GEM108.fca.11.insert, double* %GEM108.fca.12.load, 12
  %GEM108.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM108.fca.13.insert = insertvalue %gem %GEM108.fca.12.insert, double* %GEM108.fca.13.load, 13
  %GEM108.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM108.fca.14.insert = insertvalue %gem %GEM108.fca.13.insert, double* %GEM108.fca.14.load, 14
  %GEM108.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM108.fca.15.insert = insertvalue %gem %GEM108.fca.14.insert, double* %GEM108.fca.15.load, 15
  %GEM108.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM108.fca.16.insert = insertvalue %gem %GEM108.fca.15.insert, double %GEM108.fca.16.load, 16
  %GEM108.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM108.fca.17.insert = insertvalue %gem %GEM108.fca.16.insert, double %GEM108.fca.17.load, 17
  %GEM108.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM108.fca.18.insert = insertvalue %gem %GEM108.fca.17.insert, double %GEM108.fca.18.load, 18
  %GEM108.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM108.fca.19.insert = insertvalue %gem %GEM108.fca.18.insert, double %GEM108.fca.19.load, 19
  %GEM108.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM108.fca.20.insert = insertvalue %gem %GEM108.fca.19.insert, double %GEM108.fca.20.load, 20
  %GEM108.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM108.fca.21.insert = insertvalue %gem %GEM108.fca.20.insert, <2 x double> %GEM108.fca.21.load, 21
  %GEM108.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM108.fca.22.insert = insertvalue %gem %GEM108.fca.21.insert, <2 x double>* %GEM108.fca.22.load, 22
  %GEM108.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM108.fca.23.insert = insertvalue %gem %GEM108.fca.22.insert, <2 x double>* %GEM108.fca.23.load, 23
  %GEM108.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM108.fca.24.insert = insertvalue %gem %GEM108.fca.23.insert, <2 x double>* %GEM108.fca.24.load, 24
  %GEM108.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM108.fca.25.insert = insertvalue %gem %GEM108.fca.24.insert, <2 x double>* %GEM108.fca.25.load, 25
  %GEM108.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM108.fca.26.insert = insertvalue %gem %GEM108.fca.25.insert, <2 x double>* %GEM108.fca.26.load, 26
  %GEM108.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM108.fca.27.insert = insertvalue %gem %GEM108.fca.26.insert, <2 x double>* %GEM108.fca.27.load, 27
  %GEM108.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM108.fca.28.insert = insertvalue %gem %GEM108.fca.27.insert, <2 x double> %GEM108.fca.28.load, 28
  %GEM108.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM108.fca.29.insert = insertvalue %gem %GEM108.fca.28.insert, <2 x double> %GEM108.fca.29.load, 29
  %GEM108.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM108.fca.30.insert = insertvalue %gem %GEM108.fca.29.insert, <2 x double> %GEM108.fca.30.load, 30
  %GEM108.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM108.fca.31.insert = insertvalue %gem %GEM108.fca.30.insert, <2 x double> %GEM108.fca.31.load, 31
  %GEM108.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM108.fca.32.insert = insertvalue %gem %GEM108.fca.31.insert, <2 x double> %GEM108.fca.32.load, 32
  %GEM108.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM108.fca.33.insert = insertvalue %gem %GEM108.fca.32.insert, <2 x double> %GEM108.fca.33.load, 33
  %GEM108.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return111 = call i64 @"getcomp@I[II"(i64* %GEM108.fca.2.load, i64 %return26)
  store i64 %return111, i64* %32
  %__mem112 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem112, <2 x double>* %33
  %GEM113.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM113.fca.0.insert = insertvalue %gem undef, i64* %GEM113.fca.0.load, 0
  %GEM113.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM113.fca.1.insert = insertvalue %gem %GEM113.fca.0.insert, i64* %GEM113.fca.1.load, 1
  %GEM113.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM113.fca.2.insert = insertvalue %gem %GEM113.fca.1.insert, i64* %GEM113.fca.2.load, 2
  %GEM113.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM113.fca.3.insert = insertvalue %gem %GEM113.fca.2.insert, i64* %GEM113.fca.3.load, 3
  %GEM113.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM113.fca.4.insert = insertvalue %gem %GEM113.fca.3.insert, i64* %GEM113.fca.4.load, 4
  %GEM113.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM113.fca.5.insert = insertvalue %gem %GEM113.fca.4.insert, i64 %GEM113.fca.5.load, 5
  %GEM113.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM113.fca.6.insert = insertvalue %gem %GEM113.fca.5.insert, i64 %GEM113.fca.6.load, 6
  %GEM113.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM113.fca.7.insert = insertvalue %gem %GEM113.fca.6.insert, i64 %GEM113.fca.7.load, 7
  %GEM113.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM113.fca.8.insert = insertvalue %gem %GEM113.fca.7.insert, i64 %GEM113.fca.8.load, 8
  %GEM113.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM113.fca.9.insert = insertvalue %gem %GEM113.fca.8.insert, double* %GEM113.fca.9.load, 9
  %GEM113.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM113.fca.10.insert = insertvalue %gem %GEM113.fca.9.insert, double* %GEM113.fca.10.load, 10
  %GEM113.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM113.fca.11.insert = insertvalue %gem %GEM113.fca.10.insert, double* %GEM113.fca.11.load, 11
  %GEM113.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM113.fca.12.insert = insertvalue %gem %GEM113.fca.11.insert, double* %GEM113.fca.12.load, 12
  %GEM113.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM113.fca.13.insert = insertvalue %gem %GEM113.fca.12.insert, double* %GEM113.fca.13.load, 13
  %GEM113.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM113.fca.14.insert = insertvalue %gem %GEM113.fca.13.insert, double* %GEM113.fca.14.load, 14
  %GEM113.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM113.fca.15.insert = insertvalue %gem %GEM113.fca.14.insert, double* %GEM113.fca.15.load, 15
  %GEM113.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM113.fca.16.insert = insertvalue %gem %GEM113.fca.15.insert, double %GEM113.fca.16.load, 16
  %GEM113.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM113.fca.17.insert = insertvalue %gem %GEM113.fca.16.insert, double %GEM113.fca.17.load, 17
  %GEM113.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM113.fca.18.insert = insertvalue %gem %GEM113.fca.17.insert, double %GEM113.fca.18.load, 18
  %GEM113.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM113.fca.19.insert = insertvalue %gem %GEM113.fca.18.insert, double %GEM113.fca.19.load, 19
  %GEM113.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM113.fca.20.insert = insertvalue %gem %GEM113.fca.19.insert, double %GEM113.fca.20.load, 20
  %GEM113.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM113.fca.21.insert = insertvalue %gem %GEM113.fca.20.insert, <2 x double> %GEM113.fca.21.load, 21
  %GEM113.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM113.fca.22.insert = insertvalue %gem %GEM113.fca.21.insert, <2 x double>* %GEM113.fca.22.load, 22
  %GEM113.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM113.fca.23.insert = insertvalue %gem %GEM113.fca.22.insert, <2 x double>* %GEM113.fca.23.load, 23
  %GEM113.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM113.fca.24.insert = insertvalue %gem %GEM113.fca.23.insert, <2 x double>* %GEM113.fca.24.load, 24
  %GEM113.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM113.fca.25.insert = insertvalue %gem %GEM113.fca.24.insert, <2 x double>* %GEM113.fca.25.load, 25
  %GEM113.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM113.fca.26.insert = insertvalue %gem %GEM113.fca.25.insert, <2 x double>* %GEM113.fca.26.load, 26
  %GEM113.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM113.fca.27.insert = insertvalue %gem %GEM113.fca.26.insert, <2 x double>* %GEM113.fca.27.load, 27
  %GEM113.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM113.fca.28.insert = insertvalue %gem %GEM113.fca.27.insert, <2 x double> %GEM113.fca.28.load, 28
  %GEM113.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM113.fca.29.insert = insertvalue %gem %GEM113.fca.28.insert, <2 x double> %GEM113.fca.29.load, 29
  %GEM113.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM113.fca.30.insert = insertvalue %gem %GEM113.fca.29.insert, <2 x double> %GEM113.fca.30.load, 30
  %GEM113.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM113.fca.31.insert = insertvalue %gem %GEM113.fca.30.insert, <2 x double> %GEM113.fca.31.load, 31
  %GEM113.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM113.fca.32.insert = insertvalue %gem %GEM113.fca.31.insert, <2 x double> %GEM113.fca.32.load, 32
  %GEM113.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM113.fca.33.insert = insertvalue %gem %GEM113.fca.32.insert, <2 x double> %GEM113.fca.33.load, 33
  %GEM113.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return116 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM113.fca.22.load, i64 %return26)
  store <2 x double> %return116, <2 x double>* %34
  %GEM117.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM117.fca.0.insert = insertvalue %gem undef, i64* %GEM117.fca.0.load, 0
  %GEM117.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM117.fca.1.insert = insertvalue %gem %GEM117.fca.0.insert, i64* %GEM117.fca.1.load, 1
  %GEM117.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM117.fca.2.insert = insertvalue %gem %GEM117.fca.1.insert, i64* %GEM117.fca.2.load, 2
  %GEM117.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM117.fca.3.insert = insertvalue %gem %GEM117.fca.2.insert, i64* %GEM117.fca.3.load, 3
  %GEM117.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM117.fca.4.insert = insertvalue %gem %GEM117.fca.3.insert, i64* %GEM117.fca.4.load, 4
  %GEM117.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM117.fca.5.insert = insertvalue %gem %GEM117.fca.4.insert, i64 %GEM117.fca.5.load, 5
  %GEM117.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM117.fca.6.insert = insertvalue %gem %GEM117.fca.5.insert, i64 %GEM117.fca.6.load, 6
  %GEM117.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM117.fca.7.insert = insertvalue %gem %GEM117.fca.6.insert, i64 %GEM117.fca.7.load, 7
  %GEM117.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM117.fca.8.insert = insertvalue %gem %GEM117.fca.7.insert, i64 %GEM117.fca.8.load, 8
  %GEM117.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM117.fca.9.insert = insertvalue %gem %GEM117.fca.8.insert, double* %GEM117.fca.9.load, 9
  %GEM117.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM117.fca.10.insert = insertvalue %gem %GEM117.fca.9.insert, double* %GEM117.fca.10.load, 10
  %GEM117.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM117.fca.11.insert = insertvalue %gem %GEM117.fca.10.insert, double* %GEM117.fca.11.load, 11
  %GEM117.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM117.fca.12.insert = insertvalue %gem %GEM117.fca.11.insert, double* %GEM117.fca.12.load, 12
  %GEM117.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM117.fca.13.insert = insertvalue %gem %GEM117.fca.12.insert, double* %GEM117.fca.13.load, 13
  %GEM117.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM117.fca.14.insert = insertvalue %gem %GEM117.fca.13.insert, double* %GEM117.fca.14.load, 14
  %GEM117.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM117.fca.15.insert = insertvalue %gem %GEM117.fca.14.insert, double* %GEM117.fca.15.load, 15
  %GEM117.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM117.fca.16.insert = insertvalue %gem %GEM117.fca.15.insert, double %GEM117.fca.16.load, 16
  %GEM117.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM117.fca.17.insert = insertvalue %gem %GEM117.fca.16.insert, double %GEM117.fca.17.load, 17
  %GEM117.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM117.fca.18.insert = insertvalue %gem %GEM117.fca.17.insert, double %GEM117.fca.18.load, 18
  %GEM117.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM117.fca.19.insert = insertvalue %gem %GEM117.fca.18.insert, double %GEM117.fca.19.load, 19
  %GEM117.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM117.fca.20.insert = insertvalue %gem %GEM117.fca.19.insert, double %GEM117.fca.20.load, 20
  %GEM117.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM117.fca.21.insert = insertvalue %gem %GEM117.fca.20.insert, <2 x double> %GEM117.fca.21.load, 21
  %GEM117.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM117.fca.22.insert = insertvalue %gem %GEM117.fca.21.insert, <2 x double>* %GEM117.fca.22.load, 22
  %GEM117.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM117.fca.23.insert = insertvalue %gem %GEM117.fca.22.insert, <2 x double>* %GEM117.fca.23.load, 23
  %GEM117.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM117.fca.24.insert = insertvalue %gem %GEM117.fca.23.insert, <2 x double>* %GEM117.fca.24.load, 24
  %GEM117.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM117.fca.25.insert = insertvalue %gem %GEM117.fca.24.insert, <2 x double>* %GEM117.fca.25.load, 25
  %GEM117.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM117.fca.26.insert = insertvalue %gem %GEM117.fca.25.insert, <2 x double>* %GEM117.fca.26.load, 26
  %GEM117.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM117.fca.27.insert = insertvalue %gem %GEM117.fca.26.insert, <2 x double>* %GEM117.fca.27.load, 27
  %GEM117.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM117.fca.28.insert = insertvalue %gem %GEM117.fca.27.insert, <2 x double> %GEM117.fca.28.load, 28
  %GEM117.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM117.fca.29.insert = insertvalue %gem %GEM117.fca.28.insert, <2 x double> %GEM117.fca.29.load, 29
  %GEM117.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM117.fca.30.insert = insertvalue %gem %GEM117.fca.29.insert, <2 x double> %GEM117.fca.30.load, 30
  %GEM117.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM117.fca.31.insert = insertvalue %gem %GEM117.fca.30.insert, <2 x double> %GEM117.fca.31.load, 31
  %GEM117.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM117.fca.32.insert = insertvalue %gem %GEM117.fca.31.insert, <2 x double> %GEM117.fca.32.load, 32
  %GEM117.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM117.fca.33.insert = insertvalue %gem %GEM117.fca.32.insert, <2 x double> %GEM117.fca.33.load, 33
  %GEM117.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return120 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM117.fca.23.load, i64 %return26)
  store <2 x double> %return120, <2 x double>* %35
  %GEM121.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM121.fca.0.insert = insertvalue %gem undef, i64* %GEM121.fca.0.load, 0
  %GEM121.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM121.fca.1.insert = insertvalue %gem %GEM121.fca.0.insert, i64* %GEM121.fca.1.load, 1
  %GEM121.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM121.fca.2.insert = insertvalue %gem %GEM121.fca.1.insert, i64* %GEM121.fca.2.load, 2
  %GEM121.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM121.fca.3.insert = insertvalue %gem %GEM121.fca.2.insert, i64* %GEM121.fca.3.load, 3
  %GEM121.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM121.fca.4.insert = insertvalue %gem %GEM121.fca.3.insert, i64* %GEM121.fca.4.load, 4
  %GEM121.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM121.fca.5.insert = insertvalue %gem %GEM121.fca.4.insert, i64 %GEM121.fca.5.load, 5
  %GEM121.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM121.fca.6.insert = insertvalue %gem %GEM121.fca.5.insert, i64 %GEM121.fca.6.load, 6
  %GEM121.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM121.fca.7.insert = insertvalue %gem %GEM121.fca.6.insert, i64 %GEM121.fca.7.load, 7
  %GEM121.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM121.fca.8.insert = insertvalue %gem %GEM121.fca.7.insert, i64 %GEM121.fca.8.load, 8
  %GEM121.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM121.fca.9.insert = insertvalue %gem %GEM121.fca.8.insert, double* %GEM121.fca.9.load, 9
  %GEM121.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM121.fca.10.insert = insertvalue %gem %GEM121.fca.9.insert, double* %GEM121.fca.10.load, 10
  %GEM121.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM121.fca.11.insert = insertvalue %gem %GEM121.fca.10.insert, double* %GEM121.fca.11.load, 11
  %GEM121.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM121.fca.12.insert = insertvalue %gem %GEM121.fca.11.insert, double* %GEM121.fca.12.load, 12
  %GEM121.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM121.fca.13.insert = insertvalue %gem %GEM121.fca.12.insert, double* %GEM121.fca.13.load, 13
  %GEM121.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM121.fca.14.insert = insertvalue %gem %GEM121.fca.13.insert, double* %GEM121.fca.14.load, 14
  %GEM121.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM121.fca.15.insert = insertvalue %gem %GEM121.fca.14.insert, double* %GEM121.fca.15.load, 15
  %GEM121.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM121.fca.16.insert = insertvalue %gem %GEM121.fca.15.insert, double %GEM121.fca.16.load, 16
  %GEM121.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM121.fca.17.insert = insertvalue %gem %GEM121.fca.16.insert, double %GEM121.fca.17.load, 17
  %GEM121.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM121.fca.18.insert = insertvalue %gem %GEM121.fca.17.insert, double %GEM121.fca.18.load, 18
  %GEM121.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM121.fca.19.insert = insertvalue %gem %GEM121.fca.18.insert, double %GEM121.fca.19.load, 19
  %GEM121.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM121.fca.20.insert = insertvalue %gem %GEM121.fca.19.insert, double %GEM121.fca.20.load, 20
  %GEM121.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM121.fca.21.insert = insertvalue %gem %GEM121.fca.20.insert, <2 x double> %GEM121.fca.21.load, 21
  %GEM121.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM121.fca.22.insert = insertvalue %gem %GEM121.fca.21.insert, <2 x double>* %GEM121.fca.22.load, 22
  %GEM121.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM121.fca.23.insert = insertvalue %gem %GEM121.fca.22.insert, <2 x double>* %GEM121.fca.23.load, 23
  %GEM121.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM121.fca.24.insert = insertvalue %gem %GEM121.fca.23.insert, <2 x double>* %GEM121.fca.24.load, 24
  %GEM121.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM121.fca.25.insert = insertvalue %gem %GEM121.fca.24.insert, <2 x double>* %GEM121.fca.25.load, 25
  %GEM121.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM121.fca.26.insert = insertvalue %gem %GEM121.fca.25.insert, <2 x double>* %GEM121.fca.26.load, 26
  %GEM121.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM121.fca.27.insert = insertvalue %gem %GEM121.fca.26.insert, <2 x double>* %GEM121.fca.27.load, 27
  %GEM121.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM121.fca.28.insert = insertvalue %gem %GEM121.fca.27.insert, <2 x double> %GEM121.fca.28.load, 28
  %GEM121.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM121.fca.29.insert = insertvalue %gem %GEM121.fca.28.insert, <2 x double> %GEM121.fca.29.load, 29
  %GEM121.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM121.fca.30.insert = insertvalue %gem %GEM121.fca.29.insert, <2 x double> %GEM121.fca.30.load, 30
  %GEM121.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM121.fca.31.insert = insertvalue %gem %GEM121.fca.30.insert, <2 x double> %GEM121.fca.31.load, 31
  %GEM121.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM121.fca.32.insert = insertvalue %gem %GEM121.fca.31.insert, <2 x double> %GEM121.fca.32.load, 32
  %GEM121.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM121.fca.33.insert = insertvalue %gem %GEM121.fca.32.insert, <2 x double> %GEM121.fca.33.load, 33
  %GEM121.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return124 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM121.fca.24.load, i64 %return26)
  store <2 x double> %return124, <2 x double>* %36
  %GEM125.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM125.fca.0.insert = insertvalue %gem undef, i64* %GEM125.fca.0.load, 0
  %GEM125.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM125.fca.1.insert = insertvalue %gem %GEM125.fca.0.insert, i64* %GEM125.fca.1.load, 1
  %GEM125.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM125.fca.2.insert = insertvalue %gem %GEM125.fca.1.insert, i64* %GEM125.fca.2.load, 2
  %GEM125.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM125.fca.3.insert = insertvalue %gem %GEM125.fca.2.insert, i64* %GEM125.fca.3.load, 3
  %GEM125.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM125.fca.4.insert = insertvalue %gem %GEM125.fca.3.insert, i64* %GEM125.fca.4.load, 4
  %GEM125.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM125.fca.5.insert = insertvalue %gem %GEM125.fca.4.insert, i64 %GEM125.fca.5.load, 5
  %GEM125.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM125.fca.6.insert = insertvalue %gem %GEM125.fca.5.insert, i64 %GEM125.fca.6.load, 6
  %GEM125.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM125.fca.7.insert = insertvalue %gem %GEM125.fca.6.insert, i64 %GEM125.fca.7.load, 7
  %GEM125.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM125.fca.8.insert = insertvalue %gem %GEM125.fca.7.insert, i64 %GEM125.fca.8.load, 8
  %GEM125.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM125.fca.9.insert = insertvalue %gem %GEM125.fca.8.insert, double* %GEM125.fca.9.load, 9
  %GEM125.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM125.fca.10.insert = insertvalue %gem %GEM125.fca.9.insert, double* %GEM125.fca.10.load, 10
  %GEM125.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM125.fca.11.insert = insertvalue %gem %GEM125.fca.10.insert, double* %GEM125.fca.11.load, 11
  %GEM125.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM125.fca.12.insert = insertvalue %gem %GEM125.fca.11.insert, double* %GEM125.fca.12.load, 12
  %GEM125.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM125.fca.13.insert = insertvalue %gem %GEM125.fca.12.insert, double* %GEM125.fca.13.load, 13
  %GEM125.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM125.fca.14.insert = insertvalue %gem %GEM125.fca.13.insert, double* %GEM125.fca.14.load, 14
  %GEM125.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM125.fca.15.insert = insertvalue %gem %GEM125.fca.14.insert, double* %GEM125.fca.15.load, 15
  %GEM125.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM125.fca.16.insert = insertvalue %gem %GEM125.fca.15.insert, double %GEM125.fca.16.load, 16
  %GEM125.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM125.fca.17.insert = insertvalue %gem %GEM125.fca.16.insert, double %GEM125.fca.17.load, 17
  %GEM125.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM125.fca.18.insert = insertvalue %gem %GEM125.fca.17.insert, double %GEM125.fca.18.load, 18
  %GEM125.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM125.fca.19.insert = insertvalue %gem %GEM125.fca.18.insert, double %GEM125.fca.19.load, 19
  %GEM125.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM125.fca.20.insert = insertvalue %gem %GEM125.fca.19.insert, double %GEM125.fca.20.load, 20
  %GEM125.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM125.fca.21.insert = insertvalue %gem %GEM125.fca.20.insert, <2 x double> %GEM125.fca.21.load, 21
  %GEM125.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM125.fca.22.insert = insertvalue %gem %GEM125.fca.21.insert, <2 x double>* %GEM125.fca.22.load, 22
  %GEM125.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM125.fca.23.insert = insertvalue %gem %GEM125.fca.22.insert, <2 x double>* %GEM125.fca.23.load, 23
  %GEM125.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM125.fca.24.insert = insertvalue %gem %GEM125.fca.23.insert, <2 x double>* %GEM125.fca.24.load, 24
  %GEM125.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM125.fca.25.insert = insertvalue %gem %GEM125.fca.24.insert, <2 x double>* %GEM125.fca.25.load, 25
  %GEM125.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM125.fca.26.insert = insertvalue %gem %GEM125.fca.25.insert, <2 x double>* %GEM125.fca.26.load, 26
  %GEM125.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM125.fca.27.insert = insertvalue %gem %GEM125.fca.26.insert, <2 x double>* %GEM125.fca.27.load, 27
  %GEM125.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM125.fca.28.insert = insertvalue %gem %GEM125.fca.27.insert, <2 x double> %GEM125.fca.28.load, 28
  %GEM125.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM125.fca.29.insert = insertvalue %gem %GEM125.fca.28.insert, <2 x double> %GEM125.fca.29.load, 29
  %GEM125.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM125.fca.30.insert = insertvalue %gem %GEM125.fca.29.insert, <2 x double> %GEM125.fca.30.load, 30
  %GEM125.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM125.fca.31.insert = insertvalue %gem %GEM125.fca.30.insert, <2 x double> %GEM125.fca.31.load, 31
  %GEM125.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM125.fca.32.insert = insertvalue %gem %GEM125.fca.31.insert, <2 x double> %GEM125.fca.32.load, 32
  %GEM125.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM125.fca.33.insert = insertvalue %gem %GEM125.fca.32.insert, <2 x double> %GEM125.fca.33.load, 33
  %GEM125.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return128 = call double @"getcomp@F[FI"(double* %GEM125.fca.11.load, i64 %return26)
  store double %return128, double* %37
  %FLAME129 = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %29, i64* %30, i64* %31, i64* %32, <2 x double>* %33, <2 x double>* %34, <2 x double>* %35, <2 x double>* %36, double* %37)
  %output130 = call <2 x double> @"add@UU"(<2 x double> %__tmp105, <2 x double> %FLAME129)
  store <2 x double> %output130, <2 x double>* %__tmp
  br label %end104

end104:                                           ; preds = %true103, %end71
  %GEM131.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM131.fca.0.insert = insertvalue %gem undef, i64* %GEM131.fca.0.load, 0
  %GEM131.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM131.fca.1.insert = insertvalue %gem %GEM131.fca.0.insert, i64* %GEM131.fca.1.load, 1
  %GEM131.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM131.fca.2.insert = insertvalue %gem %GEM131.fca.1.insert, i64* %GEM131.fca.2.load, 2
  %GEM131.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM131.fca.3.insert = insertvalue %gem %GEM131.fca.2.insert, i64* %GEM131.fca.3.load, 3
  %GEM131.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM131.fca.4.insert = insertvalue %gem %GEM131.fca.3.insert, i64* %GEM131.fca.4.load, 4
  %GEM131.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM131.fca.5.insert = insertvalue %gem %GEM131.fca.4.insert, i64 %GEM131.fca.5.load, 5
  %GEM131.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM131.fca.6.insert = insertvalue %gem %GEM131.fca.5.insert, i64 %GEM131.fca.6.load, 6
  %GEM131.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM131.fca.7.insert = insertvalue %gem %GEM131.fca.6.insert, i64 %GEM131.fca.7.load, 7
  %GEM131.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM131.fca.8.insert = insertvalue %gem %GEM131.fca.7.insert, i64 %GEM131.fca.8.load, 8
  %GEM131.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM131.fca.9.insert = insertvalue %gem %GEM131.fca.8.insert, double* %GEM131.fca.9.load, 9
  %GEM131.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM131.fca.10.insert = insertvalue %gem %GEM131.fca.9.insert, double* %GEM131.fca.10.load, 10
  %GEM131.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM131.fca.11.insert = insertvalue %gem %GEM131.fca.10.insert, double* %GEM131.fca.11.load, 11
  %GEM131.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM131.fca.12.insert = insertvalue %gem %GEM131.fca.11.insert, double* %GEM131.fca.12.load, 12
  %GEM131.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM131.fca.13.insert = insertvalue %gem %GEM131.fca.12.insert, double* %GEM131.fca.13.load, 13
  %GEM131.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM131.fca.14.insert = insertvalue %gem %GEM131.fca.13.insert, double* %GEM131.fca.14.load, 14
  %GEM131.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM131.fca.15.insert = insertvalue %gem %GEM131.fca.14.insert, double* %GEM131.fca.15.load, 15
  %GEM131.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM131.fca.16.insert = insertvalue %gem %GEM131.fca.15.insert, double %GEM131.fca.16.load, 16
  %GEM131.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM131.fca.17.insert = insertvalue %gem %GEM131.fca.16.insert, double %GEM131.fca.17.load, 17
  %GEM131.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM131.fca.18.insert = insertvalue %gem %GEM131.fca.17.insert, double %GEM131.fca.18.load, 18
  %GEM131.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM131.fca.19.insert = insertvalue %gem %GEM131.fca.18.insert, double %GEM131.fca.19.load, 19
  %GEM131.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM131.fca.20.insert = insertvalue %gem %GEM131.fca.19.insert, double %GEM131.fca.20.load, 20
  %GEM131.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM131.fca.21.insert = insertvalue %gem %GEM131.fca.20.insert, <2 x double> %GEM131.fca.21.load, 21
  %GEM131.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM131.fca.22.insert = insertvalue %gem %GEM131.fca.21.insert, <2 x double>* %GEM131.fca.22.load, 22
  %GEM131.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM131.fca.23.insert = insertvalue %gem %GEM131.fca.22.insert, <2 x double>* %GEM131.fca.23.load, 23
  %GEM131.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM131.fca.24.insert = insertvalue %gem %GEM131.fca.23.insert, <2 x double>* %GEM131.fca.24.load, 24
  %GEM131.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM131.fca.25.insert = insertvalue %gem %GEM131.fca.24.insert, <2 x double>* %GEM131.fca.25.load, 25
  %GEM131.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM131.fca.26.insert = insertvalue %gem %GEM131.fca.25.insert, <2 x double>* %GEM131.fca.26.load, 26
  %GEM131.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM131.fca.27.insert = insertvalue %gem %GEM131.fca.26.insert, <2 x double>* %GEM131.fca.27.load, 27
  %GEM131.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM131.fca.28.insert = insertvalue %gem %GEM131.fca.27.insert, <2 x double> %GEM131.fca.28.load, 28
  %GEM131.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM131.fca.29.insert = insertvalue %gem %GEM131.fca.28.insert, <2 x double> %GEM131.fca.29.load, 29
  %GEM131.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM131.fca.30.insert = insertvalue %gem %GEM131.fca.29.insert, <2 x double> %GEM131.fca.30.load, 30
  %GEM131.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM131.fca.31.insert = insertvalue %gem %GEM131.fca.30.insert, <2 x double> %GEM131.fca.31.load, 31
  %GEM131.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM131.fca.32.insert = insertvalue %gem %GEM131.fca.31.insert, <2 x double> %GEM131.fca.32.load, 32
  %GEM131.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM131.fca.33.insert = insertvalue %gem %GEM131.fca.32.insert, <2 x double> %GEM131.fca.33.load, 33
  %GEM131.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return133 = call double @"getcomp@F[FI"(double* %GEM131.fca.12.load, i64 %return26)
  %return134 = fcmp one double %return133, 0.000000e+00
  br i1 %return134, label %true136, label %end137

true136:                                          ; preds = %end104
  %__tmp138 = load <2 x double>, <2 x double>* %__tmp
  %v4GMP139.fca.0.load = load double*, double** %v4GMP8.fca.0.gep
  %v4GMP139.fca.0.insert = insertvalue %gemPrm undef, double* %v4GMP139.fca.0.load, 0
  %v4GMP139.fca.1.load = load double*, double** %v4GMP8.fca.1.gep
  %v4GMP139.fca.1.insert = insertvalue %gemPrm %v4GMP139.fca.0.insert, double* %v4GMP139.fca.1.load, 1
  %v4GMP139.fca.2.load = load double*, double** %v4GMP8.fca.2.gep
  %v4GMP139.fca.2.insert = insertvalue %gemPrm %v4GMP139.fca.1.insert, double* %v4GMP139.fca.2.load, 2
  %v4GMP139.fca.3.load = load double*, double** %v4GMP8.fca.3.gep
  %v4GMP139.fca.3.insert = insertvalue %gemPrm %v4GMP139.fca.2.insert, double* %v4GMP139.fca.3.load, 3
  %v4GMP139.fca.4.load = load double*, double** %v4GMP8.fca.4.gep
  %v4GMP139.fca.4.insert = insertvalue %gemPrm %v4GMP139.fca.3.insert, double* %v4GMP139.fca.4.load, 4
  %v4GMP139.fca.5.load = load double*, double** %v4GMP8.fca.5.gep
  %v4GMP139.fca.5.insert = insertvalue %gemPrm %v4GMP139.fca.4.insert, double* %v4GMP139.fca.5.load, 5
  %v4GMP139.fca.6.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.6.gep
  %v4GMP139.fca.6.insert = insertvalue %gemPrm %v4GMP139.fca.5.insert, <3 x double>* %v4GMP139.fca.6.load, 6
  %v4GMP139.fca.7.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.7.gep
  %v4GMP139.fca.7.insert = insertvalue %gemPrm %v4GMP139.fca.6.insert, <3 x double>* %v4GMP139.fca.7.load, 7
  %v4GMP139.fca.8.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.8.gep
  %v4GMP139.fca.8.insert = insertvalue %gemPrm %v4GMP139.fca.7.insert, <3 x double>* %v4GMP139.fca.8.load, 8
  %v4GMP139.fca.9.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.9.gep
  %v4GMP139.fca.9.insert = insertvalue %gemPrm %v4GMP139.fca.8.insert, <3 x double>* %v4GMP139.fca.9.load, 9
  %v4GMP139.fca.10.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.10.gep
  %v4GMP139.fca.10.insert = insertvalue %gemPrm %v4GMP139.fca.9.insert, <3 x double>* %v4GMP139.fca.10.load, 10
  %v4GMP139.fca.11.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.11.gep
  %v4GMP139.fca.11.insert = insertvalue %gemPrm %v4GMP139.fca.10.insert, <3 x double>* %v4GMP139.fca.11.load, 11
  %v4GMP139.fca.12.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.12.gep
  %v4GMP139.fca.12.insert = insertvalue %gemPrm %v4GMP139.fca.11.insert, <3 x double>* %v4GMP139.fca.12.load, 12
  %v4GMP139.fca.13.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.13.gep
  %v4GMP139.fca.13.insert = insertvalue %gemPrm %v4GMP139.fca.12.insert, <2 x double>* %v4GMP139.fca.13.load, 13
  %v4GMP139.fca.14.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.14.gep
  %v4GMP139.fca.14.insert = insertvalue %gemPrm %v4GMP139.fca.13.insert, <2 x double>* %v4GMP139.fca.14.load, 14
  %v4GMP139.fca.15.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.15.gep
  %v4GMP139.fca.15.insert = insertvalue %gemPrm %v4GMP139.fca.14.insert, <2 x double>* %v4GMP139.fca.15.load, 15
  %v4GMP139.fca.16.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.16.gep
  %v4GMP139.fca.16.insert = insertvalue %gemPrm %v4GMP139.fca.15.insert, <2 x double>* %v4GMP139.fca.16.load, 16
  %v4GMP139.fca.17.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.17.gep
  %v4GMP139.fca.17.insert = insertvalue %gemPrm %v4GMP139.fca.16.insert, <2 x double>* %v4GMP139.fca.17.load, 17
  %v4GMP139.fca.18.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.18.gep
  %v4GMP139.fca.18.insert = insertvalue %gemPrm %v4GMP139.fca.17.insert, <2 x double>* %v4GMP139.fca.18.load, 18
  %v4GMP139.fca.19.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.19.gep
  %v4GMP139.fca.19.insert = insertvalue %gemPrm %v4GMP139.fca.18.insert, <2 x double>* %v4GMP139.fca.19.load, 19
  %v4GMP139.fca.20.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.20.gep
  %v4GMP139.fca.20.insert = insertvalue %gemPrm %v4GMP139.fca.19.insert, <2 x double>* %v4GMP139.fca.20.load, 20
  %v4GMP139.fca.21.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.21.gep
  %v4GMP139.fca.21.insert = insertvalue %gemPrm %v4GMP139.fca.20.insert, <2 x double>* %v4GMP139.fca.21.load, 21
  %v4GMP139.fca.22.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.22.gep
  %v4GMP139.fca.22.insert = insertvalue %gemPrm %v4GMP139.fca.21.insert, <2 x double>* %v4GMP139.fca.22.load, 22
  %v4GMP139.fca.23.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.23.gep
  %v4GMP139.fca.23.insert = insertvalue %gemPrm %v4GMP139.fca.22.insert, <2 x double>* %v4GMP139.fca.23.load, 23
  %v4GMP139.fca.24.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.24.gep
  %v4GMP139.fca.24.insert = insertvalue %gemPrm %v4GMP139.fca.23.insert, <2 x double>* %v4GMP139.fca.24.load, 24
  %v4GMP139.fca.25.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.25.gep
  %v4GMP139.fca.25.insert = insertvalue %gemPrm %v4GMP139.fca.24.insert, <2 x double>* %v4GMP139.fca.25.load, 25
  %v4GMP139.fca.26.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.26.gep
  %v4GMP139.fca.26.insert = insertvalue %gemPrm %v4GMP139.fca.25.insert, <2 x double>* %v4GMP139.fca.26.load, 26
  %v4GMP139.fca.27.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.27.gep
  %v4GMP139.fca.27.insert = insertvalue %gemPrm %v4GMP139.fca.26.insert, <2 x double>* %v4GMP139.fca.27.load, 27
  %v4GMP139.fca.28.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.28.gep
  %v4GMP139.fca.28.insert = insertvalue %gemPrm %v4GMP139.fca.27.insert, <2 x double>* %v4GMP139.fca.28.load, 28
  %v4GMP139.fca.29.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.29.gep
  %v4GMP139.fca.29.insert = insertvalue %gemPrm %v4GMP139.fca.28.insert, <2 x double>* %v4GMP139.fca.29.load, 29
  %v4GMP139.fca.30.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.30.gep
  %v4GMP139.fca.30.insert = insertvalue %gemPrm %v4GMP139.fca.29.insert, <2 x double>* %v4GMP139.fca.30.load, 30
  %v4GMP139.fca.31.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.31.gep
  %v4GMP139.fca.31.insert = insertvalue %gemPrm %v4GMP139.fca.30.insert, <2 x double>* %v4GMP139.fca.31.load, 31
  %v4GMP139.fca.32.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.32.gep
  %v4GMP139.fca.32.insert = insertvalue %gemPrm %v4GMP139.fca.31.insert, <2 x double>* %v4GMP139.fca.32.load, 32
  %v4GMP139.fca.33.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.33.gep
  %v4GMP139.fca.33.insert = insertvalue %gemPrm %v4GMP139.fca.32.insert, <2 x double>* %v4GMP139.fca.33.load, 33
  %v4GMP139.fca.34.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.34.gep
  %v4GMP139.fca.34.insert = insertvalue %gemPrm %v4GMP139.fca.33.insert, <2 x double>* %v4GMP139.fca.34.load, 34
  %v4GMP139.fca.35.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.35.gep
  %v4GMP139.fca.35.insert = insertvalue %gemPrm %v4GMP139.fca.34.insert, <2 x double>* %v4GMP139.fca.35.load, 35
  %v4GMP139.fca.36.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.36.gep
  %v4GMP139.fca.36.insert = insertvalue %gemPrm %v4GMP139.fca.35.insert, <2 x double>* %v4GMP139.fca.36.load, 36
  %v4GMP139.fca.37.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.37.gep
  %v4GMP139.fca.37.insert = insertvalue %gemPrm %v4GMP139.fca.36.insert, <2 x double>* %v4GMP139.fca.37.load, 37
  %v4GMP139.fca.38.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.38.gep
  %v4GMP139.fca.38.insert = insertvalue %gemPrm %v4GMP139.fca.37.insert, <2 x double>* %v4GMP139.fca.38.load, 38
  %v4GMP139.fca.39.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.39.gep
  %v4GMP139.fca.39.insert = insertvalue %gemPrm %v4GMP139.fca.38.insert, <2 x double>* %v4GMP139.fca.39.load, 39
  %v4GMP139.fca.40.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.40.gep
  %v4GMP139.fca.40.insert = insertvalue %gemPrm %v4GMP139.fca.39.insert, <2 x double>* %v4GMP139.fca.40.load, 40
  %v4GMP139.fca.41.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.41.gep
  %v4GMP139.fca.41.insert = insertvalue %gemPrm %v4GMP139.fca.40.insert, <2 x double>* %v4GMP139.fca.41.load, 41
  %v4GMP139.fca.42.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.42.gep
  %v4GMP139.fca.42.insert = insertvalue %gemPrm %v4GMP139.fca.41.insert, <4 x double>* %v4GMP139.fca.42.load, 42
  %v4GMP139.fca.43.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.43.gep
  %v4GMP139.fca.43.insert = insertvalue %gemPrm %v4GMP139.fca.42.insert, <4 x double>* %v4GMP139.fca.43.load, 43
  %v4GMP139.fca.44.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.44.gep
  %v4GMP139.fca.44.insert = insertvalue %gemPrm %v4GMP139.fca.43.insert, <4 x double>* %v4GMP139.fca.44.load, 44
  %v4GMP139.fca.45.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.45.gep
  %v4GMP139.fca.45.insert = insertvalue %gemPrm %v4GMP139.fca.44.insert, <4 x double>* %v4GMP139.fca.45.load, 45
  %v4GMP139.fca.46.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.46.gep
  %v4GMP139.fca.46.insert = insertvalue %gemPrm %v4GMP139.fca.45.insert, <4 x double>* %v4GMP139.fca.46.load, 46
  %v4GMP139.fca.47.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.47.gep
  %v4GMP139.fca.47.insert = insertvalue %gemPrm %v4GMP139.fca.46.insert, <4 x double>* %v4GMP139.fca.47.load, 47
  %v4GMP139.fca.48.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.48.gep
  %v4GMP139.fca.48.insert = insertvalue %gemPrm %v4GMP139.fca.47.insert, <4 x double>* %v4GMP139.fca.48.load, 48
  %v4GMP139.fca.49.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.49.gep
  %v4GMP139.fca.49.insert = insertvalue %gemPrm %v4GMP139.fca.48.insert, <4 x double>* %v4GMP139.fca.49.load, 49
  %v4GMP139.fca.50.load = load <4 x double>*, <4 x double>** %v4GMP8.fca.50.gep
  %v4GMP139.fca.50.insert = insertvalue %gemPrm %v4GMP139.fca.49.insert, <4 x double>* %v4GMP139.fca.50.load, 50
  %v4GMP139.fca.51.load = load <3 x double>*, <3 x double>** %v4GMP8.fca.51.gep
  %v4GMP139.fca.51.insert = insertvalue %gemPrm %v4GMP139.fca.50.insert, <3 x double>* %v4GMP139.fca.51.load, 51
  %v4GMP139.fca.52.load = load <2 x double>*, <2 x double>** %v4GMP8.fca.52.gep
  %v4GMP139.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 0
  store double* %v4GMP139.fca.0.load, double** %v4GMP139.fca.0.gep
  %v4GMP139.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 1
  store double* %v4GMP139.fca.1.load, double** %v4GMP139.fca.1.gep
  %v4GMP139.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 2
  store double* %v4GMP139.fca.2.load, double** %v4GMP139.fca.2.gep
  %v4GMP139.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 3
  store double* %v4GMP139.fca.3.load, double** %v4GMP139.fca.3.gep
  %v4GMP139.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 4
  store double* %v4GMP139.fca.4.load, double** %v4GMP139.fca.4.gep
  %v4GMP139.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 5
  store double* %v4GMP139.fca.5.load, double** %v4GMP139.fca.5.gep
  %v4GMP139.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 6
  store <3 x double>* %v4GMP139.fca.6.load, <3 x double>** %v4GMP139.fca.6.gep
  %v4GMP139.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 7
  store <3 x double>* %v4GMP139.fca.7.load, <3 x double>** %v4GMP139.fca.7.gep
  %v4GMP139.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 8
  store <3 x double>* %v4GMP139.fca.8.load, <3 x double>** %v4GMP139.fca.8.gep
  %v4GMP139.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 9
  store <3 x double>* %v4GMP139.fca.9.load, <3 x double>** %v4GMP139.fca.9.gep
  %v4GMP139.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 10
  store <3 x double>* %v4GMP139.fca.10.load, <3 x double>** %v4GMP139.fca.10.gep
  %v4GMP139.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 11
  store <3 x double>* %v4GMP139.fca.11.load, <3 x double>** %v4GMP139.fca.11.gep
  %v4GMP139.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 12
  store <3 x double>* %v4GMP139.fca.12.load, <3 x double>** %v4GMP139.fca.12.gep
  %v4GMP139.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 13
  store <2 x double>* %v4GMP139.fca.13.load, <2 x double>** %v4GMP139.fca.13.gep
  %v4GMP139.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 14
  store <2 x double>* %v4GMP139.fca.14.load, <2 x double>** %v4GMP139.fca.14.gep
  %v4GMP139.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 15
  store <2 x double>* %v4GMP139.fca.15.load, <2 x double>** %v4GMP139.fca.15.gep
  %v4GMP139.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 16
  store <2 x double>* %v4GMP139.fca.16.load, <2 x double>** %v4GMP139.fca.16.gep
  %v4GMP139.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 17
  store <2 x double>* %v4GMP139.fca.17.load, <2 x double>** %v4GMP139.fca.17.gep
  %v4GMP139.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 18
  store <2 x double>* %v4GMP139.fca.18.load, <2 x double>** %v4GMP139.fca.18.gep
  %v4GMP139.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 19
  store <2 x double>* %v4GMP139.fca.19.load, <2 x double>** %v4GMP139.fca.19.gep
  %v4GMP139.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 20
  store <2 x double>* %v4GMP139.fca.20.load, <2 x double>** %v4GMP139.fca.20.gep
  %v4GMP139.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 21
  store <2 x double>* %v4GMP139.fca.21.load, <2 x double>** %v4GMP139.fca.21.gep
  %v4GMP139.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 22
  store <2 x double>* %v4GMP139.fca.22.load, <2 x double>** %v4GMP139.fca.22.gep
  %v4GMP139.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 23
  store <2 x double>* %v4GMP139.fca.23.load, <2 x double>** %v4GMP139.fca.23.gep
  %v4GMP139.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 24
  store <2 x double>* %v4GMP139.fca.24.load, <2 x double>** %v4GMP139.fca.24.gep
  %v4GMP139.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 25
  store <2 x double>* %v4GMP139.fca.25.load, <2 x double>** %v4GMP139.fca.25.gep
  %v4GMP139.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 26
  store <2 x double>* %v4GMP139.fca.26.load, <2 x double>** %v4GMP139.fca.26.gep
  %v4GMP139.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 27
  store <2 x double>* %v4GMP139.fca.27.load, <2 x double>** %v4GMP139.fca.27.gep
  %v4GMP139.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 28
  store <2 x double>* %v4GMP139.fca.28.load, <2 x double>** %v4GMP139.fca.28.gep
  %v4GMP139.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 29
  store <2 x double>* %v4GMP139.fca.29.load, <2 x double>** %v4GMP139.fca.29.gep
  %v4GMP139.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 30
  store <2 x double>* %v4GMP139.fca.30.load, <2 x double>** %v4GMP139.fca.30.gep
  %v4GMP139.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 31
  store <2 x double>* %v4GMP139.fca.31.load, <2 x double>** %v4GMP139.fca.31.gep
  %v4GMP139.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 32
  store <2 x double>* %v4GMP139.fca.32.load, <2 x double>** %v4GMP139.fca.32.gep
  %v4GMP139.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 33
  store <2 x double>* %v4GMP139.fca.33.load, <2 x double>** %v4GMP139.fca.33.gep
  %v4GMP139.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 34
  store <2 x double>* %v4GMP139.fca.34.load, <2 x double>** %v4GMP139.fca.34.gep
  %v4GMP139.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 35
  store <2 x double>* %v4GMP139.fca.35.load, <2 x double>** %v4GMP139.fca.35.gep
  %v4GMP139.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 36
  store <2 x double>* %v4GMP139.fca.36.load, <2 x double>** %v4GMP139.fca.36.gep
  %v4GMP139.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 37
  store <2 x double>* %v4GMP139.fca.37.load, <2 x double>** %v4GMP139.fca.37.gep
  %v4GMP139.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 38
  store <2 x double>* %v4GMP139.fca.38.load, <2 x double>** %v4GMP139.fca.38.gep
  %v4GMP139.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 39
  store <2 x double>* %v4GMP139.fca.39.load, <2 x double>** %v4GMP139.fca.39.gep
  %v4GMP139.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 40
  store <2 x double>* %v4GMP139.fca.40.load, <2 x double>** %v4GMP139.fca.40.gep
  %v4GMP139.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 41
  store <2 x double>* %v4GMP139.fca.41.load, <2 x double>** %v4GMP139.fca.41.gep
  %v4GMP139.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 42
  store <4 x double>* %v4GMP139.fca.42.load, <4 x double>** %v4GMP139.fca.42.gep
  %v4GMP139.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 43
  store <4 x double>* %v4GMP139.fca.43.load, <4 x double>** %v4GMP139.fca.43.gep
  %v4GMP139.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 44
  store <4 x double>* %v4GMP139.fca.44.load, <4 x double>** %v4GMP139.fca.44.gep
  %v4GMP139.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 45
  store <4 x double>* %v4GMP139.fca.45.load, <4 x double>** %v4GMP139.fca.45.gep
  %v4GMP139.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 46
  store <4 x double>* %v4GMP139.fca.46.load, <4 x double>** %v4GMP139.fca.46.gep
  %v4GMP139.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 47
  store <4 x double>* %v4GMP139.fca.47.load, <4 x double>** %v4GMP139.fca.47.gep
  %v4GMP139.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 48
  store <4 x double>* %v4GMP139.fca.48.load, <4 x double>** %v4GMP139.fca.48.gep
  %v4GMP139.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 49
  store <4 x double>* %v4GMP139.fca.49.load, <4 x double>** %v4GMP139.fca.49.gep
  %v4GMP139.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 50
  store <4 x double>* %v4GMP139.fca.50.load, <4 x double>** %v4GMP139.fca.50.gep
  %v4GMP139.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 51
  store <3 x double>* %v4GMP139.fca.51.load, <3 x double>** %v4GMP139.fca.51.gep
  %v4GMP139.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %38, i32 0, i32 52
  store <2 x double>* %v4GMP139.fca.52.load, <2 x double>** %v4GMP139.fca.52.gep
  store i64 1, i64* %39
  store i64 %return26, i64* %40
  %GEM141.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM141.fca.0.insert = insertvalue %gem undef, i64* %GEM141.fca.0.load, 0
  %GEM141.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM141.fca.1.insert = insertvalue %gem %GEM141.fca.0.insert, i64* %GEM141.fca.1.load, 1
  %GEM141.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM141.fca.2.insert = insertvalue %gem %GEM141.fca.1.insert, i64* %GEM141.fca.2.load, 2
  %GEM141.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM141.fca.3.insert = insertvalue %gem %GEM141.fca.2.insert, i64* %GEM141.fca.3.load, 3
  %GEM141.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM141.fca.4.insert = insertvalue %gem %GEM141.fca.3.insert, i64* %GEM141.fca.4.load, 4
  %GEM141.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM141.fca.5.insert = insertvalue %gem %GEM141.fca.4.insert, i64 %GEM141.fca.5.load, 5
  %GEM141.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM141.fca.6.insert = insertvalue %gem %GEM141.fca.5.insert, i64 %GEM141.fca.6.load, 6
  %GEM141.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM141.fca.7.insert = insertvalue %gem %GEM141.fca.6.insert, i64 %GEM141.fca.7.load, 7
  %GEM141.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM141.fca.8.insert = insertvalue %gem %GEM141.fca.7.insert, i64 %GEM141.fca.8.load, 8
  %GEM141.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM141.fca.9.insert = insertvalue %gem %GEM141.fca.8.insert, double* %GEM141.fca.9.load, 9
  %GEM141.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM141.fca.10.insert = insertvalue %gem %GEM141.fca.9.insert, double* %GEM141.fca.10.load, 10
  %GEM141.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM141.fca.11.insert = insertvalue %gem %GEM141.fca.10.insert, double* %GEM141.fca.11.load, 11
  %GEM141.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM141.fca.12.insert = insertvalue %gem %GEM141.fca.11.insert, double* %GEM141.fca.12.load, 12
  %GEM141.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM141.fca.13.insert = insertvalue %gem %GEM141.fca.12.insert, double* %GEM141.fca.13.load, 13
  %GEM141.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM141.fca.14.insert = insertvalue %gem %GEM141.fca.13.insert, double* %GEM141.fca.14.load, 14
  %GEM141.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM141.fca.15.insert = insertvalue %gem %GEM141.fca.14.insert, double* %GEM141.fca.15.load, 15
  %GEM141.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM141.fca.16.insert = insertvalue %gem %GEM141.fca.15.insert, double %GEM141.fca.16.load, 16
  %GEM141.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM141.fca.17.insert = insertvalue %gem %GEM141.fca.16.insert, double %GEM141.fca.17.load, 17
  %GEM141.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM141.fca.18.insert = insertvalue %gem %GEM141.fca.17.insert, double %GEM141.fca.18.load, 18
  %GEM141.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM141.fca.19.insert = insertvalue %gem %GEM141.fca.18.insert, double %GEM141.fca.19.load, 19
  %GEM141.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM141.fca.20.insert = insertvalue %gem %GEM141.fca.19.insert, double %GEM141.fca.20.load, 20
  %GEM141.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM141.fca.21.insert = insertvalue %gem %GEM141.fca.20.insert, <2 x double> %GEM141.fca.21.load, 21
  %GEM141.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM141.fca.22.insert = insertvalue %gem %GEM141.fca.21.insert, <2 x double>* %GEM141.fca.22.load, 22
  %GEM141.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM141.fca.23.insert = insertvalue %gem %GEM141.fca.22.insert, <2 x double>* %GEM141.fca.23.load, 23
  %GEM141.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM141.fca.24.insert = insertvalue %gem %GEM141.fca.23.insert, <2 x double>* %GEM141.fca.24.load, 24
  %GEM141.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM141.fca.25.insert = insertvalue %gem %GEM141.fca.24.insert, <2 x double>* %GEM141.fca.25.load, 25
  %GEM141.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM141.fca.26.insert = insertvalue %gem %GEM141.fca.25.insert, <2 x double>* %GEM141.fca.26.load, 26
  %GEM141.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM141.fca.27.insert = insertvalue %gem %GEM141.fca.26.insert, <2 x double>* %GEM141.fca.27.load, 27
  %GEM141.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM141.fca.28.insert = insertvalue %gem %GEM141.fca.27.insert, <2 x double> %GEM141.fca.28.load, 28
  %GEM141.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM141.fca.29.insert = insertvalue %gem %GEM141.fca.28.insert, <2 x double> %GEM141.fca.29.load, 29
  %GEM141.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM141.fca.30.insert = insertvalue %gem %GEM141.fca.29.insert, <2 x double> %GEM141.fca.30.load, 30
  %GEM141.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM141.fca.31.insert = insertvalue %gem %GEM141.fca.30.insert, <2 x double> %GEM141.fca.31.load, 31
  %GEM141.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM141.fca.32.insert = insertvalue %gem %GEM141.fca.31.insert, <2 x double> %GEM141.fca.32.load, 32
  %GEM141.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM141.fca.33.insert = insertvalue %gem %GEM141.fca.32.insert, <2 x double> %GEM141.fca.33.load, 33
  %GEM141.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return144 = call i64 @"getcomp@I[II"(i64* %GEM141.fca.3.load, i64 %return26)
  store i64 %return144, i64* %41
  %__mem145 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem145, <2 x double>* %42
  %GEM146.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM146.fca.0.insert = insertvalue %gem undef, i64* %GEM146.fca.0.load, 0
  %GEM146.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM146.fca.1.insert = insertvalue %gem %GEM146.fca.0.insert, i64* %GEM146.fca.1.load, 1
  %GEM146.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM146.fca.2.insert = insertvalue %gem %GEM146.fca.1.insert, i64* %GEM146.fca.2.load, 2
  %GEM146.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM146.fca.3.insert = insertvalue %gem %GEM146.fca.2.insert, i64* %GEM146.fca.3.load, 3
  %GEM146.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM146.fca.4.insert = insertvalue %gem %GEM146.fca.3.insert, i64* %GEM146.fca.4.load, 4
  %GEM146.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM146.fca.5.insert = insertvalue %gem %GEM146.fca.4.insert, i64 %GEM146.fca.5.load, 5
  %GEM146.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM146.fca.6.insert = insertvalue %gem %GEM146.fca.5.insert, i64 %GEM146.fca.6.load, 6
  %GEM146.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM146.fca.7.insert = insertvalue %gem %GEM146.fca.6.insert, i64 %GEM146.fca.7.load, 7
  %GEM146.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM146.fca.8.insert = insertvalue %gem %GEM146.fca.7.insert, i64 %GEM146.fca.8.load, 8
  %GEM146.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM146.fca.9.insert = insertvalue %gem %GEM146.fca.8.insert, double* %GEM146.fca.9.load, 9
  %GEM146.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM146.fca.10.insert = insertvalue %gem %GEM146.fca.9.insert, double* %GEM146.fca.10.load, 10
  %GEM146.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM146.fca.11.insert = insertvalue %gem %GEM146.fca.10.insert, double* %GEM146.fca.11.load, 11
  %GEM146.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM146.fca.12.insert = insertvalue %gem %GEM146.fca.11.insert, double* %GEM146.fca.12.load, 12
  %GEM146.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM146.fca.13.insert = insertvalue %gem %GEM146.fca.12.insert, double* %GEM146.fca.13.load, 13
  %GEM146.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM146.fca.14.insert = insertvalue %gem %GEM146.fca.13.insert, double* %GEM146.fca.14.load, 14
  %GEM146.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM146.fca.15.insert = insertvalue %gem %GEM146.fca.14.insert, double* %GEM146.fca.15.load, 15
  %GEM146.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM146.fca.16.insert = insertvalue %gem %GEM146.fca.15.insert, double %GEM146.fca.16.load, 16
  %GEM146.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM146.fca.17.insert = insertvalue %gem %GEM146.fca.16.insert, double %GEM146.fca.17.load, 17
  %GEM146.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM146.fca.18.insert = insertvalue %gem %GEM146.fca.17.insert, double %GEM146.fca.18.load, 18
  %GEM146.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM146.fca.19.insert = insertvalue %gem %GEM146.fca.18.insert, double %GEM146.fca.19.load, 19
  %GEM146.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM146.fca.20.insert = insertvalue %gem %GEM146.fca.19.insert, double %GEM146.fca.20.load, 20
  %GEM146.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM146.fca.21.insert = insertvalue %gem %GEM146.fca.20.insert, <2 x double> %GEM146.fca.21.load, 21
  %GEM146.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM146.fca.22.insert = insertvalue %gem %GEM146.fca.21.insert, <2 x double>* %GEM146.fca.22.load, 22
  %GEM146.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM146.fca.23.insert = insertvalue %gem %GEM146.fca.22.insert, <2 x double>* %GEM146.fca.23.load, 23
  %GEM146.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM146.fca.24.insert = insertvalue %gem %GEM146.fca.23.insert, <2 x double>* %GEM146.fca.24.load, 24
  %GEM146.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM146.fca.25.insert = insertvalue %gem %GEM146.fca.24.insert, <2 x double>* %GEM146.fca.25.load, 25
  %GEM146.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM146.fca.26.insert = insertvalue %gem %GEM146.fca.25.insert, <2 x double>* %GEM146.fca.26.load, 26
  %GEM146.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM146.fca.27.insert = insertvalue %gem %GEM146.fca.26.insert, <2 x double>* %GEM146.fca.27.load, 27
  %GEM146.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM146.fca.28.insert = insertvalue %gem %GEM146.fca.27.insert, <2 x double> %GEM146.fca.28.load, 28
  %GEM146.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM146.fca.29.insert = insertvalue %gem %GEM146.fca.28.insert, <2 x double> %GEM146.fca.29.load, 29
  %GEM146.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM146.fca.30.insert = insertvalue %gem %GEM146.fca.29.insert, <2 x double> %GEM146.fca.30.load, 30
  %GEM146.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM146.fca.31.insert = insertvalue %gem %GEM146.fca.30.insert, <2 x double> %GEM146.fca.31.load, 31
  %GEM146.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM146.fca.32.insert = insertvalue %gem %GEM146.fca.31.insert, <2 x double> %GEM146.fca.32.load, 32
  %GEM146.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM146.fca.33.insert = insertvalue %gem %GEM146.fca.32.insert, <2 x double> %GEM146.fca.33.load, 33
  %GEM146.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return149 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM146.fca.22.load, i64 %return26)
  store <2 x double> %return149, <2 x double>* %43
  %GEM150.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM150.fca.0.insert = insertvalue %gem undef, i64* %GEM150.fca.0.load, 0
  %GEM150.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM150.fca.1.insert = insertvalue %gem %GEM150.fca.0.insert, i64* %GEM150.fca.1.load, 1
  %GEM150.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM150.fca.2.insert = insertvalue %gem %GEM150.fca.1.insert, i64* %GEM150.fca.2.load, 2
  %GEM150.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM150.fca.3.insert = insertvalue %gem %GEM150.fca.2.insert, i64* %GEM150.fca.3.load, 3
  %GEM150.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM150.fca.4.insert = insertvalue %gem %GEM150.fca.3.insert, i64* %GEM150.fca.4.load, 4
  %GEM150.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM150.fca.5.insert = insertvalue %gem %GEM150.fca.4.insert, i64 %GEM150.fca.5.load, 5
  %GEM150.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM150.fca.6.insert = insertvalue %gem %GEM150.fca.5.insert, i64 %GEM150.fca.6.load, 6
  %GEM150.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM150.fca.7.insert = insertvalue %gem %GEM150.fca.6.insert, i64 %GEM150.fca.7.load, 7
  %GEM150.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM150.fca.8.insert = insertvalue %gem %GEM150.fca.7.insert, i64 %GEM150.fca.8.load, 8
  %GEM150.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM150.fca.9.insert = insertvalue %gem %GEM150.fca.8.insert, double* %GEM150.fca.9.load, 9
  %GEM150.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM150.fca.10.insert = insertvalue %gem %GEM150.fca.9.insert, double* %GEM150.fca.10.load, 10
  %GEM150.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM150.fca.11.insert = insertvalue %gem %GEM150.fca.10.insert, double* %GEM150.fca.11.load, 11
  %GEM150.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM150.fca.12.insert = insertvalue %gem %GEM150.fca.11.insert, double* %GEM150.fca.12.load, 12
  %GEM150.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM150.fca.13.insert = insertvalue %gem %GEM150.fca.12.insert, double* %GEM150.fca.13.load, 13
  %GEM150.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM150.fca.14.insert = insertvalue %gem %GEM150.fca.13.insert, double* %GEM150.fca.14.load, 14
  %GEM150.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM150.fca.15.insert = insertvalue %gem %GEM150.fca.14.insert, double* %GEM150.fca.15.load, 15
  %GEM150.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM150.fca.16.insert = insertvalue %gem %GEM150.fca.15.insert, double %GEM150.fca.16.load, 16
  %GEM150.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM150.fca.17.insert = insertvalue %gem %GEM150.fca.16.insert, double %GEM150.fca.17.load, 17
  %GEM150.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM150.fca.18.insert = insertvalue %gem %GEM150.fca.17.insert, double %GEM150.fca.18.load, 18
  %GEM150.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM150.fca.19.insert = insertvalue %gem %GEM150.fca.18.insert, double %GEM150.fca.19.load, 19
  %GEM150.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM150.fca.20.insert = insertvalue %gem %GEM150.fca.19.insert, double %GEM150.fca.20.load, 20
  %GEM150.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM150.fca.21.insert = insertvalue %gem %GEM150.fca.20.insert, <2 x double> %GEM150.fca.21.load, 21
  %GEM150.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM150.fca.22.insert = insertvalue %gem %GEM150.fca.21.insert, <2 x double>* %GEM150.fca.22.load, 22
  %GEM150.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM150.fca.23.insert = insertvalue %gem %GEM150.fca.22.insert, <2 x double>* %GEM150.fca.23.load, 23
  %GEM150.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM150.fca.24.insert = insertvalue %gem %GEM150.fca.23.insert, <2 x double>* %GEM150.fca.24.load, 24
  %GEM150.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM150.fca.25.insert = insertvalue %gem %GEM150.fca.24.insert, <2 x double>* %GEM150.fca.25.load, 25
  %GEM150.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM150.fca.26.insert = insertvalue %gem %GEM150.fca.25.insert, <2 x double>* %GEM150.fca.26.load, 26
  %GEM150.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM150.fca.27.insert = insertvalue %gem %GEM150.fca.26.insert, <2 x double>* %GEM150.fca.27.load, 27
  %GEM150.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM150.fca.28.insert = insertvalue %gem %GEM150.fca.27.insert, <2 x double> %GEM150.fca.28.load, 28
  %GEM150.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM150.fca.29.insert = insertvalue %gem %GEM150.fca.28.insert, <2 x double> %GEM150.fca.29.load, 29
  %GEM150.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM150.fca.30.insert = insertvalue %gem %GEM150.fca.29.insert, <2 x double> %GEM150.fca.30.load, 30
  %GEM150.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM150.fca.31.insert = insertvalue %gem %GEM150.fca.30.insert, <2 x double> %GEM150.fca.31.load, 31
  %GEM150.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM150.fca.32.insert = insertvalue %gem %GEM150.fca.31.insert, <2 x double> %GEM150.fca.32.load, 32
  %GEM150.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM150.fca.33.insert = insertvalue %gem %GEM150.fca.32.insert, <2 x double> %GEM150.fca.33.load, 33
  %GEM150.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return153 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM150.fca.23.load, i64 %return26)
  store <2 x double> %return153, <2 x double>* %44
  %GEM154.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM154.fca.0.insert = insertvalue %gem undef, i64* %GEM154.fca.0.load, 0
  %GEM154.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM154.fca.1.insert = insertvalue %gem %GEM154.fca.0.insert, i64* %GEM154.fca.1.load, 1
  %GEM154.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM154.fca.2.insert = insertvalue %gem %GEM154.fca.1.insert, i64* %GEM154.fca.2.load, 2
  %GEM154.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM154.fca.3.insert = insertvalue %gem %GEM154.fca.2.insert, i64* %GEM154.fca.3.load, 3
  %GEM154.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM154.fca.4.insert = insertvalue %gem %GEM154.fca.3.insert, i64* %GEM154.fca.4.load, 4
  %GEM154.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM154.fca.5.insert = insertvalue %gem %GEM154.fca.4.insert, i64 %GEM154.fca.5.load, 5
  %GEM154.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM154.fca.6.insert = insertvalue %gem %GEM154.fca.5.insert, i64 %GEM154.fca.6.load, 6
  %GEM154.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM154.fca.7.insert = insertvalue %gem %GEM154.fca.6.insert, i64 %GEM154.fca.7.load, 7
  %GEM154.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM154.fca.8.insert = insertvalue %gem %GEM154.fca.7.insert, i64 %GEM154.fca.8.load, 8
  %GEM154.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM154.fca.9.insert = insertvalue %gem %GEM154.fca.8.insert, double* %GEM154.fca.9.load, 9
  %GEM154.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM154.fca.10.insert = insertvalue %gem %GEM154.fca.9.insert, double* %GEM154.fca.10.load, 10
  %GEM154.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM154.fca.11.insert = insertvalue %gem %GEM154.fca.10.insert, double* %GEM154.fca.11.load, 11
  %GEM154.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM154.fca.12.insert = insertvalue %gem %GEM154.fca.11.insert, double* %GEM154.fca.12.load, 12
  %GEM154.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM154.fca.13.insert = insertvalue %gem %GEM154.fca.12.insert, double* %GEM154.fca.13.load, 13
  %GEM154.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM154.fca.14.insert = insertvalue %gem %GEM154.fca.13.insert, double* %GEM154.fca.14.load, 14
  %GEM154.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM154.fca.15.insert = insertvalue %gem %GEM154.fca.14.insert, double* %GEM154.fca.15.load, 15
  %GEM154.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM154.fca.16.insert = insertvalue %gem %GEM154.fca.15.insert, double %GEM154.fca.16.load, 16
  %GEM154.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM154.fca.17.insert = insertvalue %gem %GEM154.fca.16.insert, double %GEM154.fca.17.load, 17
  %GEM154.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM154.fca.18.insert = insertvalue %gem %GEM154.fca.17.insert, double %GEM154.fca.18.load, 18
  %GEM154.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM154.fca.19.insert = insertvalue %gem %GEM154.fca.18.insert, double %GEM154.fca.19.load, 19
  %GEM154.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM154.fca.20.insert = insertvalue %gem %GEM154.fca.19.insert, double %GEM154.fca.20.load, 20
  %GEM154.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM154.fca.21.insert = insertvalue %gem %GEM154.fca.20.insert, <2 x double> %GEM154.fca.21.load, 21
  %GEM154.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM154.fca.22.insert = insertvalue %gem %GEM154.fca.21.insert, <2 x double>* %GEM154.fca.22.load, 22
  %GEM154.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM154.fca.23.insert = insertvalue %gem %GEM154.fca.22.insert, <2 x double>* %GEM154.fca.23.load, 23
  %GEM154.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM154.fca.24.insert = insertvalue %gem %GEM154.fca.23.insert, <2 x double>* %GEM154.fca.24.load, 24
  %GEM154.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM154.fca.25.insert = insertvalue %gem %GEM154.fca.24.insert, <2 x double>* %GEM154.fca.25.load, 25
  %GEM154.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM154.fca.26.insert = insertvalue %gem %GEM154.fca.25.insert, <2 x double>* %GEM154.fca.26.load, 26
  %GEM154.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM154.fca.27.insert = insertvalue %gem %GEM154.fca.26.insert, <2 x double>* %GEM154.fca.27.load, 27
  %GEM154.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM154.fca.28.insert = insertvalue %gem %GEM154.fca.27.insert, <2 x double> %GEM154.fca.28.load, 28
  %GEM154.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM154.fca.29.insert = insertvalue %gem %GEM154.fca.28.insert, <2 x double> %GEM154.fca.29.load, 29
  %GEM154.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM154.fca.30.insert = insertvalue %gem %GEM154.fca.29.insert, <2 x double> %GEM154.fca.30.load, 30
  %GEM154.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM154.fca.31.insert = insertvalue %gem %GEM154.fca.30.insert, <2 x double> %GEM154.fca.31.load, 31
  %GEM154.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM154.fca.32.insert = insertvalue %gem %GEM154.fca.31.insert, <2 x double> %GEM154.fca.32.load, 32
  %GEM154.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM154.fca.33.insert = insertvalue %gem %GEM154.fca.32.insert, <2 x double> %GEM154.fca.33.load, 33
  %GEM154.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return157 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM154.fca.24.load, i64 %return26)
  store <2 x double> %return157, <2 x double>* %45
  %GEM158.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM158.fca.0.insert = insertvalue %gem undef, i64* %GEM158.fca.0.load, 0
  %GEM158.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM158.fca.1.insert = insertvalue %gem %GEM158.fca.0.insert, i64* %GEM158.fca.1.load, 1
  %GEM158.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM158.fca.2.insert = insertvalue %gem %GEM158.fca.1.insert, i64* %GEM158.fca.2.load, 2
  %GEM158.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM158.fca.3.insert = insertvalue %gem %GEM158.fca.2.insert, i64* %GEM158.fca.3.load, 3
  %GEM158.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM158.fca.4.insert = insertvalue %gem %GEM158.fca.3.insert, i64* %GEM158.fca.4.load, 4
  %GEM158.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM158.fca.5.insert = insertvalue %gem %GEM158.fca.4.insert, i64 %GEM158.fca.5.load, 5
  %GEM158.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM158.fca.6.insert = insertvalue %gem %GEM158.fca.5.insert, i64 %GEM158.fca.6.load, 6
  %GEM158.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM158.fca.7.insert = insertvalue %gem %GEM158.fca.6.insert, i64 %GEM158.fca.7.load, 7
  %GEM158.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM158.fca.8.insert = insertvalue %gem %GEM158.fca.7.insert, i64 %GEM158.fca.8.load, 8
  %GEM158.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM158.fca.9.insert = insertvalue %gem %GEM158.fca.8.insert, double* %GEM158.fca.9.load, 9
  %GEM158.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM158.fca.10.insert = insertvalue %gem %GEM158.fca.9.insert, double* %GEM158.fca.10.load, 10
  %GEM158.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM158.fca.11.insert = insertvalue %gem %GEM158.fca.10.insert, double* %GEM158.fca.11.load, 11
  %GEM158.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM158.fca.12.insert = insertvalue %gem %GEM158.fca.11.insert, double* %GEM158.fca.12.load, 12
  %GEM158.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM158.fca.13.insert = insertvalue %gem %GEM158.fca.12.insert, double* %GEM158.fca.13.load, 13
  %GEM158.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM158.fca.14.insert = insertvalue %gem %GEM158.fca.13.insert, double* %GEM158.fca.14.load, 14
  %GEM158.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM158.fca.15.insert = insertvalue %gem %GEM158.fca.14.insert, double* %GEM158.fca.15.load, 15
  %GEM158.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM158.fca.16.insert = insertvalue %gem %GEM158.fca.15.insert, double %GEM158.fca.16.load, 16
  %GEM158.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM158.fca.17.insert = insertvalue %gem %GEM158.fca.16.insert, double %GEM158.fca.17.load, 17
  %GEM158.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM158.fca.18.insert = insertvalue %gem %GEM158.fca.17.insert, double %GEM158.fca.18.load, 18
  %GEM158.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM158.fca.19.insert = insertvalue %gem %GEM158.fca.18.insert, double %GEM158.fca.19.load, 19
  %GEM158.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM158.fca.20.insert = insertvalue %gem %GEM158.fca.19.insert, double %GEM158.fca.20.load, 20
  %GEM158.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM158.fca.21.insert = insertvalue %gem %GEM158.fca.20.insert, <2 x double> %GEM158.fca.21.load, 21
  %GEM158.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM158.fca.22.insert = insertvalue %gem %GEM158.fca.21.insert, <2 x double>* %GEM158.fca.22.load, 22
  %GEM158.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM158.fca.23.insert = insertvalue %gem %GEM158.fca.22.insert, <2 x double>* %GEM158.fca.23.load, 23
  %GEM158.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM158.fca.24.insert = insertvalue %gem %GEM158.fca.23.insert, <2 x double>* %GEM158.fca.24.load, 24
  %GEM158.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM158.fca.25.insert = insertvalue %gem %GEM158.fca.24.insert, <2 x double>* %GEM158.fca.25.load, 25
  %GEM158.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM158.fca.26.insert = insertvalue %gem %GEM158.fca.25.insert, <2 x double>* %GEM158.fca.26.load, 26
  %GEM158.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM158.fca.27.insert = insertvalue %gem %GEM158.fca.26.insert, <2 x double>* %GEM158.fca.27.load, 27
  %GEM158.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM158.fca.28.insert = insertvalue %gem %GEM158.fca.27.insert, <2 x double> %GEM158.fca.28.load, 28
  %GEM158.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM158.fca.29.insert = insertvalue %gem %GEM158.fca.28.insert, <2 x double> %GEM158.fca.29.load, 29
  %GEM158.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM158.fca.30.insert = insertvalue %gem %GEM158.fca.29.insert, <2 x double> %GEM158.fca.30.load, 30
  %GEM158.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM158.fca.31.insert = insertvalue %gem %GEM158.fca.30.insert, <2 x double> %GEM158.fca.31.load, 31
  %GEM158.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM158.fca.32.insert = insertvalue %gem %GEM158.fca.31.insert, <2 x double> %GEM158.fca.32.load, 32
  %GEM158.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM158.fca.33.insert = insertvalue %gem %GEM158.fca.32.insert, <2 x double> %GEM158.fca.33.load, 33
  %GEM158.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return161 = call double @"getcomp@F[FI"(double* %GEM158.fca.12.load, i64 %return26)
  store double %return161, double* %46
  %FLAME162 = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %38, i64* %39, i64* %40, i64* %41, <2 x double>* %42, <2 x double>* %43, <2 x double>* %44, <2 x double>* %45, double* %46)
  %output163 = call <2 x double> @"add@UU"(<2 x double> %__tmp138, <2 x double> %FLAME162)
  store <2 x double> %output163, <2 x double>* %__tmp
  br label %end137

end137:                                           ; preds = %true136, %end104
  %GEM164.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM164.fca.0.insert = insertvalue %gem undef, i64* %GEM164.fca.0.load, 0
  %GEM164.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM164.fca.1.insert = insertvalue %gem %GEM164.fca.0.insert, i64* %GEM164.fca.1.load, 1
  %GEM164.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM164.fca.2.insert = insertvalue %gem %GEM164.fca.1.insert, i64* %GEM164.fca.2.load, 2
  %GEM164.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM164.fca.3.insert = insertvalue %gem %GEM164.fca.2.insert, i64* %GEM164.fca.3.load, 3
  %GEM164.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM164.fca.4.insert = insertvalue %gem %GEM164.fca.3.insert, i64* %GEM164.fca.4.load, 4
  %GEM164.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM164.fca.5.insert = insertvalue %gem %GEM164.fca.4.insert, i64 %GEM164.fca.5.load, 5
  %GEM164.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM164.fca.6.insert = insertvalue %gem %GEM164.fca.5.insert, i64 %GEM164.fca.6.load, 6
  %GEM164.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM164.fca.7.insert = insertvalue %gem %GEM164.fca.6.insert, i64 %GEM164.fca.7.load, 7
  %GEM164.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM164.fca.8.insert = insertvalue %gem %GEM164.fca.7.insert, i64 %GEM164.fca.8.load, 8
  %GEM164.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM164.fca.9.insert = insertvalue %gem %GEM164.fca.8.insert, double* %GEM164.fca.9.load, 9
  %GEM164.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM164.fca.10.insert = insertvalue %gem %GEM164.fca.9.insert, double* %GEM164.fca.10.load, 10
  %GEM164.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM164.fca.11.insert = insertvalue %gem %GEM164.fca.10.insert, double* %GEM164.fca.11.load, 11
  %GEM164.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM164.fca.12.insert = insertvalue %gem %GEM164.fca.11.insert, double* %GEM164.fca.12.load, 12
  %GEM164.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM164.fca.13.insert = insertvalue %gem %GEM164.fca.12.insert, double* %GEM164.fca.13.load, 13
  %GEM164.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM164.fca.14.insert = insertvalue %gem %GEM164.fca.13.insert, double* %GEM164.fca.14.load, 14
  %GEM164.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM164.fca.15.insert = insertvalue %gem %GEM164.fca.14.insert, double* %GEM164.fca.15.load, 15
  %GEM164.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM164.fca.16.insert = insertvalue %gem %GEM164.fca.15.insert, double %GEM164.fca.16.load, 16
  %GEM164.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM164.fca.17.insert = insertvalue %gem %GEM164.fca.16.insert, double %GEM164.fca.17.load, 17
  %GEM164.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM164.fca.18.insert = insertvalue %gem %GEM164.fca.17.insert, double %GEM164.fca.18.load, 18
  %GEM164.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM164.fca.19.insert = insertvalue %gem %GEM164.fca.18.insert, double %GEM164.fca.19.load, 19
  %GEM164.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM164.fca.20.insert = insertvalue %gem %GEM164.fca.19.insert, double %GEM164.fca.20.load, 20
  %GEM164.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM164.fca.21.insert = insertvalue %gem %GEM164.fca.20.insert, <2 x double> %GEM164.fca.21.load, 21
  %GEM164.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM164.fca.22.insert = insertvalue %gem %GEM164.fca.21.insert, <2 x double>* %GEM164.fca.22.load, 22
  %GEM164.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM164.fca.23.insert = insertvalue %gem %GEM164.fca.22.insert, <2 x double>* %GEM164.fca.23.load, 23
  %GEM164.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM164.fca.24.insert = insertvalue %gem %GEM164.fca.23.insert, <2 x double>* %GEM164.fca.24.load, 24
  %GEM164.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM164.fca.25.insert = insertvalue %gem %GEM164.fca.24.insert, <2 x double>* %GEM164.fca.25.load, 25
  %GEM164.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM164.fca.26.insert = insertvalue %gem %GEM164.fca.25.insert, <2 x double>* %GEM164.fca.26.load, 26
  %GEM164.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM164.fca.27.insert = insertvalue %gem %GEM164.fca.26.insert, <2 x double>* %GEM164.fca.27.load, 27
  %GEM164.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM164.fca.28.insert = insertvalue %gem %GEM164.fca.27.insert, <2 x double> %GEM164.fca.28.load, 28
  %GEM164.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM164.fca.29.insert = insertvalue %gem %GEM164.fca.28.insert, <2 x double> %GEM164.fca.29.load, 29
  %GEM164.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM164.fca.30.insert = insertvalue %gem %GEM164.fca.29.insert, <2 x double> %GEM164.fca.30.load, 30
  %GEM164.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM164.fca.31.insert = insertvalue %gem %GEM164.fca.30.insert, <2 x double> %GEM164.fca.31.load, 31
  %GEM164.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM164.fca.32.insert = insertvalue %gem %GEM164.fca.31.insert, <2 x double> %GEM164.fca.32.load, 32
  %GEM164.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM164.fca.33.insert = insertvalue %gem %GEM164.fca.32.insert, <2 x double> %GEM164.fca.33.load, 33
  %GEM164.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return166 = call i64 @"getcomp@I[II"(i64* %GEM164.fca.4.load, i64 %return26)
  %95 = icmp ne i64 %return166, 0
  br i1 %95, label %true167, label %end168

true167:                                          ; preds = %end137
  %return171 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM164.fca.25.load, i64 %return26)
  store <2 x double> %return171, <2 x double>* %47
  %GEM172.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM172.fca.0.insert = insertvalue %gem undef, i64* %GEM172.fca.0.load, 0
  %GEM172.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM172.fca.1.insert = insertvalue %gem %GEM172.fca.0.insert, i64* %GEM172.fca.1.load, 1
  %GEM172.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM172.fca.2.insert = insertvalue %gem %GEM172.fca.1.insert, i64* %GEM172.fca.2.load, 2
  %GEM172.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM172.fca.3.insert = insertvalue %gem %GEM172.fca.2.insert, i64* %GEM172.fca.3.load, 3
  %GEM172.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM172.fca.4.insert = insertvalue %gem %GEM172.fca.3.insert, i64* %GEM172.fca.4.load, 4
  %GEM172.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM172.fca.5.insert = insertvalue %gem %GEM172.fca.4.insert, i64 %GEM172.fca.5.load, 5
  %GEM172.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM172.fca.6.insert = insertvalue %gem %GEM172.fca.5.insert, i64 %GEM172.fca.6.load, 6
  %GEM172.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM172.fca.7.insert = insertvalue %gem %GEM172.fca.6.insert, i64 %GEM172.fca.7.load, 7
  %GEM172.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM172.fca.8.insert = insertvalue %gem %GEM172.fca.7.insert, i64 %GEM172.fca.8.load, 8
  %GEM172.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM172.fca.9.insert = insertvalue %gem %GEM172.fca.8.insert, double* %GEM172.fca.9.load, 9
  %GEM172.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM172.fca.10.insert = insertvalue %gem %GEM172.fca.9.insert, double* %GEM172.fca.10.load, 10
  %GEM172.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM172.fca.11.insert = insertvalue %gem %GEM172.fca.10.insert, double* %GEM172.fca.11.load, 11
  %GEM172.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM172.fca.12.insert = insertvalue %gem %GEM172.fca.11.insert, double* %GEM172.fca.12.load, 12
  %GEM172.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM172.fca.13.insert = insertvalue %gem %GEM172.fca.12.insert, double* %GEM172.fca.13.load, 13
  %GEM172.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM172.fca.14.insert = insertvalue %gem %GEM172.fca.13.insert, double* %GEM172.fca.14.load, 14
  %GEM172.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM172.fca.15.insert = insertvalue %gem %GEM172.fca.14.insert, double* %GEM172.fca.15.load, 15
  %GEM172.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM172.fca.16.insert = insertvalue %gem %GEM172.fca.15.insert, double %GEM172.fca.16.load, 16
  %GEM172.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM172.fca.17.insert = insertvalue %gem %GEM172.fca.16.insert, double %GEM172.fca.17.load, 17
  %GEM172.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM172.fca.18.insert = insertvalue %gem %GEM172.fca.17.insert, double %GEM172.fca.18.load, 18
  %GEM172.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM172.fca.19.insert = insertvalue %gem %GEM172.fca.18.insert, double %GEM172.fca.19.load, 19
  %GEM172.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM172.fca.20.insert = insertvalue %gem %GEM172.fca.19.insert, double %GEM172.fca.20.load, 20
  %GEM172.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM172.fca.21.insert = insertvalue %gem %GEM172.fca.20.insert, <2 x double> %GEM172.fca.21.load, 21
  %GEM172.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM172.fca.22.insert = insertvalue %gem %GEM172.fca.21.insert, <2 x double>* %GEM172.fca.22.load, 22
  %GEM172.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM172.fca.23.insert = insertvalue %gem %GEM172.fca.22.insert, <2 x double>* %GEM172.fca.23.load, 23
  %GEM172.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM172.fca.24.insert = insertvalue %gem %GEM172.fca.23.insert, <2 x double>* %GEM172.fca.24.load, 24
  %GEM172.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM172.fca.25.insert = insertvalue %gem %GEM172.fca.24.insert, <2 x double>* %GEM172.fca.25.load, 25
  %GEM172.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM172.fca.26.insert = insertvalue %gem %GEM172.fca.25.insert, <2 x double>* %GEM172.fca.26.load, 26
  %GEM172.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM172.fca.27.insert = insertvalue %gem %GEM172.fca.26.insert, <2 x double>* %GEM172.fca.27.load, 27
  %GEM172.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM172.fca.28.insert = insertvalue %gem %GEM172.fca.27.insert, <2 x double> %GEM172.fca.28.load, 28
  %GEM172.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM172.fca.29.insert = insertvalue %gem %GEM172.fca.28.insert, <2 x double> %GEM172.fca.29.load, 29
  %GEM172.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM172.fca.30.insert = insertvalue %gem %GEM172.fca.29.insert, <2 x double> %GEM172.fca.30.load, 30
  %GEM172.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM172.fca.31.insert = insertvalue %gem %GEM172.fca.30.insert, <2 x double> %GEM172.fca.31.load, 31
  %GEM172.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM172.fca.32.insert = insertvalue %gem %GEM172.fca.31.insert, <2 x double> %GEM172.fca.32.load, 32
  %GEM172.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM172.fca.33.insert = insertvalue %gem %GEM172.fca.32.insert, <2 x double> %GEM172.fca.33.load, 33
  %GEM172.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return174 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM172.fca.26.load, i64 %return26)
  store <2 x double> %return174, <2 x double>* %48
  %GEM175.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM175.fca.0.insert = insertvalue %gem undef, i64* %GEM175.fca.0.load, 0
  %GEM175.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM175.fca.1.insert = insertvalue %gem %GEM175.fca.0.insert, i64* %GEM175.fca.1.load, 1
  %GEM175.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM175.fca.2.insert = insertvalue %gem %GEM175.fca.1.insert, i64* %GEM175.fca.2.load, 2
  %GEM175.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM175.fca.3.insert = insertvalue %gem %GEM175.fca.2.insert, i64* %GEM175.fca.3.load, 3
  %GEM175.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM175.fca.4.insert = insertvalue %gem %GEM175.fca.3.insert, i64* %GEM175.fca.4.load, 4
  %GEM175.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM175.fca.5.insert = insertvalue %gem %GEM175.fca.4.insert, i64 %GEM175.fca.5.load, 5
  %GEM175.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM175.fca.6.insert = insertvalue %gem %GEM175.fca.5.insert, i64 %GEM175.fca.6.load, 6
  %GEM175.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM175.fca.7.insert = insertvalue %gem %GEM175.fca.6.insert, i64 %GEM175.fca.7.load, 7
  %GEM175.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM175.fca.8.insert = insertvalue %gem %GEM175.fca.7.insert, i64 %GEM175.fca.8.load, 8
  %GEM175.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM175.fca.9.insert = insertvalue %gem %GEM175.fca.8.insert, double* %GEM175.fca.9.load, 9
  %GEM175.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM175.fca.10.insert = insertvalue %gem %GEM175.fca.9.insert, double* %GEM175.fca.10.load, 10
  %GEM175.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM175.fca.11.insert = insertvalue %gem %GEM175.fca.10.insert, double* %GEM175.fca.11.load, 11
  %GEM175.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM175.fca.12.insert = insertvalue %gem %GEM175.fca.11.insert, double* %GEM175.fca.12.load, 12
  %GEM175.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM175.fca.13.insert = insertvalue %gem %GEM175.fca.12.insert, double* %GEM175.fca.13.load, 13
  %GEM175.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM175.fca.14.insert = insertvalue %gem %GEM175.fca.13.insert, double* %GEM175.fca.14.load, 14
  %GEM175.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM175.fca.15.insert = insertvalue %gem %GEM175.fca.14.insert, double* %GEM175.fca.15.load, 15
  %GEM175.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM175.fca.16.insert = insertvalue %gem %GEM175.fca.15.insert, double %GEM175.fca.16.load, 16
  %GEM175.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM175.fca.17.insert = insertvalue %gem %GEM175.fca.16.insert, double %GEM175.fca.17.load, 17
  %GEM175.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM175.fca.18.insert = insertvalue %gem %GEM175.fca.17.insert, double %GEM175.fca.18.load, 18
  %GEM175.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM175.fca.19.insert = insertvalue %gem %GEM175.fca.18.insert, double %GEM175.fca.19.load, 19
  %GEM175.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM175.fca.20.insert = insertvalue %gem %GEM175.fca.19.insert, double %GEM175.fca.20.load, 20
  %GEM175.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM175.fca.21.insert = insertvalue %gem %GEM175.fca.20.insert, <2 x double> %GEM175.fca.21.load, 21
  %GEM175.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM175.fca.22.insert = insertvalue %gem %GEM175.fca.21.insert, <2 x double>* %GEM175.fca.22.load, 22
  %GEM175.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM175.fca.23.insert = insertvalue %gem %GEM175.fca.22.insert, <2 x double>* %GEM175.fca.23.load, 23
  %GEM175.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM175.fca.24.insert = insertvalue %gem %GEM175.fca.23.insert, <2 x double>* %GEM175.fca.24.load, 24
  %GEM175.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM175.fca.25.insert = insertvalue %gem %GEM175.fca.24.insert, <2 x double>* %GEM175.fca.25.load, 25
  %GEM175.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM175.fca.26.insert = insertvalue %gem %GEM175.fca.25.insert, <2 x double>* %GEM175.fca.26.load, 26
  %GEM175.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM175.fca.27.insert = insertvalue %gem %GEM175.fca.26.insert, <2 x double>* %GEM175.fca.27.load, 27
  %GEM175.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM175.fca.28.insert = insertvalue %gem %GEM175.fca.27.insert, <2 x double> %GEM175.fca.28.load, 28
  %GEM175.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM175.fca.29.insert = insertvalue %gem %GEM175.fca.28.insert, <2 x double> %GEM175.fca.29.load, 29
  %GEM175.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM175.fca.30.insert = insertvalue %gem %GEM175.fca.29.insert, <2 x double> %GEM175.fca.30.load, 30
  %GEM175.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM175.fca.31.insert = insertvalue %gem %GEM175.fca.30.insert, <2 x double> %GEM175.fca.31.load, 31
  %GEM175.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM175.fca.32.insert = insertvalue %gem %GEM175.fca.31.insert, <2 x double> %GEM175.fca.32.load, 32
  %GEM175.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM175.fca.33.insert = insertvalue %gem %GEM175.fca.32.insert, <2 x double> %GEM175.fca.33.load, 33
  %GEM175.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return177 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %GEM175.fca.27.load, i64 %return26)
  store <2 x double> %return177, <2 x double>* %49
  call void @"affine@UUUU"(<2 x double>* %__tmp, <2 x double>* %47, <2 x double>* %48, <2 x double>* %49)
  br label %end168

end168:                                           ; preds = %true167, %end137
  %SYS178.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS178.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS178.fca.0.load, 0
  %SYS178.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS178.fca.1.insert = insertvalue %gemSYS %SYS178.fca.0.insert, i64 %SYS178.fca.1.load, 1
  %SYS178.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS178.fca.2.insert = insertvalue %gemSYS %SYS178.fca.1.insert, i64 %SYS178.fca.2.load, 2
  %SYS178.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS178.fca.3.insert = insertvalue %gemSYS %SYS178.fca.2.insert, i64 %SYS178.fca.3.load, 3
  %SYS178.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS178.fca.4.insert = insertvalue %gemSYS %SYS178.fca.3.insert, i64 %SYS178.fca.4.load, 4
  %SYS178.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS178.fca.5.insert = insertvalue %gemSYS %SYS178.fca.4.insert, i64 %SYS178.fca.5.load, 5
  %SYS178.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS178.fca.6.insert = insertvalue %gemSYS %SYS178.fca.5.insert, i64 %SYS178.fca.6.load, 6
  %SYS178.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS178.fca.7.insert = insertvalue %gemSYS %SYS178.fca.6.insert, i64 %SYS178.fca.7.load, 7
  %SYS178.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS178.fca.8.insert = insertvalue %gemSYS %SYS178.fca.7.insert, i64 %SYS178.fca.8.load, 8
  %SYS178.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS178.fca.9.insert = insertvalue %gemSYS %SYS178.fca.8.insert, i64 %SYS178.fca.9.load, 9
  %SYS178.fca.10.load = load double, double* %SYS1.fca.10.gep
  %96 = icmp ne i64 %SYS178.fca.0.load, 0
  br i1 %96, label %true179, label %end180

true179:                                          ; preds = %end168
  %__tmp181 = load <2 x double>, <2 x double>* %__tmp
  %cast182 = call <3 x double> @"set@VI"(i64 0)
  %GEM183.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM183.fca.0.insert = insertvalue %gem undef, i64* %GEM183.fca.0.load, 0
  %GEM183.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM183.fca.1.insert = insertvalue %gem %GEM183.fca.0.insert, i64* %GEM183.fca.1.load, 1
  %GEM183.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM183.fca.2.insert = insertvalue %gem %GEM183.fca.1.insert, i64* %GEM183.fca.2.load, 2
  %GEM183.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM183.fca.3.insert = insertvalue %gem %GEM183.fca.2.insert, i64* %GEM183.fca.3.load, 3
  %GEM183.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM183.fca.4.insert = insertvalue %gem %GEM183.fca.3.insert, i64* %GEM183.fca.4.load, 4
  %GEM183.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM183.fca.5.insert = insertvalue %gem %GEM183.fca.4.insert, i64 %GEM183.fca.5.load, 5
  %GEM183.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM183.fca.6.insert = insertvalue %gem %GEM183.fca.5.insert, i64 %GEM183.fca.6.load, 6
  %GEM183.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM183.fca.7.insert = insertvalue %gem %GEM183.fca.6.insert, i64 %GEM183.fca.7.load, 7
  %GEM183.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM183.fca.8.insert = insertvalue %gem %GEM183.fca.7.insert, i64 %GEM183.fca.8.load, 8
  %GEM183.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM183.fca.9.insert = insertvalue %gem %GEM183.fca.8.insert, double* %GEM183.fca.9.load, 9
  %GEM183.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM183.fca.10.insert = insertvalue %gem %GEM183.fca.9.insert, double* %GEM183.fca.10.load, 10
  %GEM183.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM183.fca.11.insert = insertvalue %gem %GEM183.fca.10.insert, double* %GEM183.fca.11.load, 11
  %GEM183.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM183.fca.12.insert = insertvalue %gem %GEM183.fca.11.insert, double* %GEM183.fca.12.load, 12
  %GEM183.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM183.fca.13.insert = insertvalue %gem %GEM183.fca.12.insert, double* %GEM183.fca.13.load, 13
  %GEM183.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM183.fca.14.insert = insertvalue %gem %GEM183.fca.13.insert, double* %GEM183.fca.14.load, 14
  %GEM183.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM183.fca.15.insert = insertvalue %gem %GEM183.fca.14.insert, double* %GEM183.fca.15.load, 15
  %GEM183.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM183.fca.16.insert = insertvalue %gem %GEM183.fca.15.insert, double %GEM183.fca.16.load, 16
  %GEM183.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM183.fca.17.insert = insertvalue %gem %GEM183.fca.16.insert, double %GEM183.fca.17.load, 17
  %GEM183.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM183.fca.18.insert = insertvalue %gem %GEM183.fca.17.insert, double %GEM183.fca.18.load, 18
  %GEM183.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM183.fca.19.insert = insertvalue %gem %GEM183.fca.18.insert, double %GEM183.fca.19.load, 19
  %GEM183.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM183.fca.20.insert = insertvalue %gem %GEM183.fca.19.insert, double %GEM183.fca.20.load, 20
  %GEM183.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM183.fca.21.insert = insertvalue %gem %GEM183.fca.20.insert, <2 x double> %GEM183.fca.21.load, 21
  %GEM183.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM183.fca.22.insert = insertvalue %gem %GEM183.fca.21.insert, <2 x double>* %GEM183.fca.22.load, 22
  %GEM183.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM183.fca.23.insert = insertvalue %gem %GEM183.fca.22.insert, <2 x double>* %GEM183.fca.23.load, 23
  %GEM183.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM183.fca.24.insert = insertvalue %gem %GEM183.fca.23.insert, <2 x double>* %GEM183.fca.24.load, 24
  %GEM183.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM183.fca.25.insert = insertvalue %gem %GEM183.fca.24.insert, <2 x double>* %GEM183.fca.25.load, 25
  %GEM183.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM183.fca.26.insert = insertvalue %gem %GEM183.fca.25.insert, <2 x double>* %GEM183.fca.26.load, 26
  %GEM183.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM183.fca.27.insert = insertvalue %gem %GEM183.fca.26.insert, <2 x double>* %GEM183.fca.27.load, 27
  %GEM183.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM183.fca.28.insert = insertvalue %gem %GEM183.fca.27.insert, <2 x double> %GEM183.fca.28.load, 28
  %GEM183.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM183.fca.29.insert = insertvalue %gem %GEM183.fca.28.insert, <2 x double> %GEM183.fca.29.load, 29
  %GEM183.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM183.fca.30.insert = insertvalue %gem %GEM183.fca.29.insert, <2 x double> %GEM183.fca.30.load, 30
  %GEM183.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM183.fca.31.insert = insertvalue %gem %GEM183.fca.30.insert, <2 x double> %GEM183.fca.31.load, 31
  %GEM183.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM183.fca.32.insert = insertvalue %gem %GEM183.fca.31.insert, <2 x double> %GEM183.fca.32.load, 32
  %GEM183.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM183.fca.33.insert = insertvalue %gem %GEM183.fca.32.insert, <2 x double> %GEM183.fca.33.load, 33
  %GEM183.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return184 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %GEM183.fca.20.load)
  %cast186 = call <3 x double> @"set@VU"(<2 x double> %GEM183.fca.21.load)
  %return188 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast182, <3 x double> %return184, <3 x double> %cast186, <3 x double> %cast182)
  %cast189 = call <4 x double> @"set@24"(<16 x double> %return188)
  %output190 = call <2 x double> @"mul@U2"(<2 x double> %__tmp181, <4 x double> %cast189)
  store <2 x double> %output190, <2 x double>* %__tmp
  br label %end180

end180:                                           ; preds = %true179, %end168
  %__tmp191 = load <2 x double>, <2 x double>* %__tmp
  store <2 x double> %__tmp191, <2 x double>* %__mem
  %GEM192.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM192.fca.0.insert = insertvalue %gem undef, i64* %GEM192.fca.0.load, 0
  %GEM192.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM192.fca.1.insert = insertvalue %gem %GEM192.fca.0.insert, i64* %GEM192.fca.1.load, 1
  %GEM192.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM192.fca.2.insert = insertvalue %gem %GEM192.fca.1.insert, i64* %GEM192.fca.2.load, 2
  %GEM192.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM192.fca.3.insert = insertvalue %gem %GEM192.fca.2.insert, i64* %GEM192.fca.3.load, 3
  %GEM192.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM192.fca.4.insert = insertvalue %gem %GEM192.fca.3.insert, i64* %GEM192.fca.4.load, 4
  %GEM192.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM192.fca.5.insert = insertvalue %gem %GEM192.fca.4.insert, i64 %GEM192.fca.5.load, 5
  %GEM192.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM192.fca.6.insert = insertvalue %gem %GEM192.fca.5.insert, i64 %GEM192.fca.6.load, 6
  %GEM192.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM192.fca.7.insert = insertvalue %gem %GEM192.fca.6.insert, i64 %GEM192.fca.7.load, 7
  %GEM192.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM192.fca.8.insert = insertvalue %gem %GEM192.fca.7.insert, i64 %GEM192.fca.8.load, 8
  %GEM192.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM192.fca.9.insert = insertvalue %gem %GEM192.fca.8.insert, double* %GEM192.fca.9.load, 9
  %GEM192.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM192.fca.10.insert = insertvalue %gem %GEM192.fca.9.insert, double* %GEM192.fca.10.load, 10
  %GEM192.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM192.fca.11.insert = insertvalue %gem %GEM192.fca.10.insert, double* %GEM192.fca.11.load, 11
  %GEM192.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM192.fca.12.insert = insertvalue %gem %GEM192.fca.11.insert, double* %GEM192.fca.12.load, 12
  %GEM192.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM192.fca.13.insert = insertvalue %gem %GEM192.fca.12.insert, double* %GEM192.fca.13.load, 13
  %GEM192.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM192.fca.14.insert = insertvalue %gem %GEM192.fca.13.insert, double* %GEM192.fca.14.load, 14
  %GEM192.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM192.fca.15.insert = insertvalue %gem %GEM192.fca.14.insert, double* %GEM192.fca.15.load, 15
  %GEM192.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM192.fca.16.insert = insertvalue %gem %GEM192.fca.15.insert, double %GEM192.fca.16.load, 16
  %GEM192.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM192.fca.17.insert = insertvalue %gem %GEM192.fca.16.insert, double %GEM192.fca.17.load, 17
  %GEM192.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM192.fca.18.insert = insertvalue %gem %GEM192.fca.17.insert, double %GEM192.fca.18.load, 18
  %GEM192.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM192.fca.19.insert = insertvalue %gem %GEM192.fca.18.insert, double %GEM192.fca.19.load, 19
  %GEM192.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM192.fca.20.insert = insertvalue %gem %GEM192.fca.19.insert, double %GEM192.fca.20.load, 20
  %GEM192.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM192.fca.21.insert = insertvalue %gem %GEM192.fca.20.insert, <2 x double> %GEM192.fca.21.load, 21
  %GEM192.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM192.fca.22.insert = insertvalue %gem %GEM192.fca.21.insert, <2 x double>* %GEM192.fca.22.load, 22
  %GEM192.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM192.fca.23.insert = insertvalue %gem %GEM192.fca.22.insert, <2 x double>* %GEM192.fca.23.load, 23
  %GEM192.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM192.fca.24.insert = insertvalue %gem %GEM192.fca.23.insert, <2 x double>* %GEM192.fca.24.load, 24
  %GEM192.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM192.fca.25.insert = insertvalue %gem %GEM192.fca.24.insert, <2 x double>* %GEM192.fca.25.load, 25
  %GEM192.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM192.fca.26.insert = insertvalue %gem %GEM192.fca.25.insert, <2 x double>* %GEM192.fca.26.load, 26
  %GEM192.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM192.fca.27.insert = insertvalue %gem %GEM192.fca.26.insert, <2 x double>* %GEM192.fca.27.load, 27
  %GEM192.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM192.fca.28.insert = insertvalue %gem %GEM192.fca.27.insert, <2 x double> %GEM192.fca.28.load, 28
  %GEM192.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM192.fca.29.insert = insertvalue %gem %GEM192.fca.28.insert, <2 x double> %GEM192.fca.29.load, 29
  %GEM192.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM192.fca.30.insert = insertvalue %gem %GEM192.fca.29.insert, <2 x double> %GEM192.fca.30.load, 30
  %GEM192.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM192.fca.31.insert = insertvalue %gem %GEM192.fca.30.insert, <2 x double> %GEM192.fca.31.load, 31
  %GEM192.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM192.fca.32.insert = insertvalue %gem %GEM192.fca.31.insert, <2 x double> %GEM192.fca.32.load, 32
  %GEM192.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM192.fca.33.insert = insertvalue %gem %GEM192.fca.32.insert, <2 x double> %GEM192.fca.33.load, 33
  %GEM192.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return195 = call double @"getcomp@F[FI"(double* %GEM192.fca.14.load, i64 %return26)
  %return198 = call double @"getcomp@F[FI"(double* %GEM192.fca.15.load, i64 %return26)
  %output200 = fmul double %return198, %PREV_CLR.0
  %output201 = fadd double %return195, %output200
  %output204 = add i64 %i.0, 1
  br label %cond

true206:                                          ; preds = %end
  %cast208 = call <2 x double> @"set@UI"(i64 0)
  store <2 x double> %cast208, <2 x double>* %__tmp
  %GEM209.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM209.fca.0.insert = insertvalue %gem undef, i64* %GEM209.fca.0.load, 0
  %GEM209.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM209.fca.1.insert = insertvalue %gem %GEM209.fca.0.insert, i64* %GEM209.fca.1.load, 1
  %GEM209.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM209.fca.2.insert = insertvalue %gem %GEM209.fca.1.insert, i64* %GEM209.fca.2.load, 2
  %GEM209.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM209.fca.3.insert = insertvalue %gem %GEM209.fca.2.insert, i64* %GEM209.fca.3.load, 3
  %GEM209.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM209.fca.4.insert = insertvalue %gem %GEM209.fca.3.insert, i64* %GEM209.fca.4.load, 4
  %GEM209.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM209.fca.5.insert = insertvalue %gem %GEM209.fca.4.insert, i64 %GEM209.fca.5.load, 5
  %GEM209.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM209.fca.6.insert = insertvalue %gem %GEM209.fca.5.insert, i64 %GEM209.fca.6.load, 6
  %GEM209.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM209.fca.7.insert = insertvalue %gem %GEM209.fca.6.insert, i64 %GEM209.fca.7.load, 7
  %GEM209.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM209.fca.8.insert = insertvalue %gem %GEM209.fca.7.insert, i64 %GEM209.fca.8.load, 8
  %GEM209.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM209.fca.9.insert = insertvalue %gem %GEM209.fca.8.insert, double* %GEM209.fca.9.load, 9
  %GEM209.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM209.fca.10.insert = insertvalue %gem %GEM209.fca.9.insert, double* %GEM209.fca.10.load, 10
  %GEM209.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM209.fca.11.insert = insertvalue %gem %GEM209.fca.10.insert, double* %GEM209.fca.11.load, 11
  %GEM209.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM209.fca.12.insert = insertvalue %gem %GEM209.fca.11.insert, double* %GEM209.fca.12.load, 12
  %GEM209.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM209.fca.13.insert = insertvalue %gem %GEM209.fca.12.insert, double* %GEM209.fca.13.load, 13
  %GEM209.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM209.fca.14.insert = insertvalue %gem %GEM209.fca.13.insert, double* %GEM209.fca.14.load, 14
  %GEM209.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM209.fca.15.insert = insertvalue %gem %GEM209.fca.14.insert, double* %GEM209.fca.15.load, 15
  %GEM209.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM209.fca.16.insert = insertvalue %gem %GEM209.fca.15.insert, double %GEM209.fca.16.load, 16
  %GEM209.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM209.fca.17.insert = insertvalue %gem %GEM209.fca.16.insert, double %GEM209.fca.17.load, 17
  %GEM209.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM209.fca.18.insert = insertvalue %gem %GEM209.fca.17.insert, double %GEM209.fca.18.load, 18
  %GEM209.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM209.fca.19.insert = insertvalue %gem %GEM209.fca.18.insert, double %GEM209.fca.19.load, 19
  %GEM209.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM209.fca.20.insert = insertvalue %gem %GEM209.fca.19.insert, double %GEM209.fca.20.load, 20
  %GEM209.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM209.fca.21.insert = insertvalue %gem %GEM209.fca.20.insert, <2 x double> %GEM209.fca.21.load, 21
  %GEM209.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM209.fca.22.insert = insertvalue %gem %GEM209.fca.21.insert, <2 x double>* %GEM209.fca.22.load, 22
  %GEM209.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM209.fca.23.insert = insertvalue %gem %GEM209.fca.22.insert, <2 x double>* %GEM209.fca.23.load, 23
  %GEM209.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM209.fca.24.insert = insertvalue %gem %GEM209.fca.23.insert, <2 x double>* %GEM209.fca.24.load, 24
  %GEM209.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM209.fca.25.insert = insertvalue %gem %GEM209.fca.24.insert, <2 x double>* %GEM209.fca.25.load, 25
  %GEM209.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM209.fca.26.insert = insertvalue %gem %GEM209.fca.25.insert, <2 x double>* %GEM209.fca.26.load, 26
  %GEM209.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM209.fca.27.insert = insertvalue %gem %GEM209.fca.26.insert, <2 x double>* %GEM209.fca.27.load, 27
  %GEM209.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM209.fca.28.insert = insertvalue %gem %GEM209.fca.27.insert, <2 x double> %GEM209.fca.28.load, 28
  %GEM209.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM209.fca.29.insert = insertvalue %gem %GEM209.fca.28.insert, <2 x double> %GEM209.fca.29.load, 29
  %GEM209.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM209.fca.30.insert = insertvalue %gem %GEM209.fca.29.insert, <2 x double> %GEM209.fca.30.load, 30
  %GEM209.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM209.fca.31.insert = insertvalue %gem %GEM209.fca.30.insert, <2 x double> %GEM209.fca.31.load, 31
  %GEM209.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM209.fca.32.insert = insertvalue %gem %GEM209.fca.31.insert, <2 x double> %GEM209.fca.32.load, 32
  %GEM209.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM209.fca.33.insert = insertvalue %gem %GEM209.fca.32.insert, <2 x double> %GEM209.fca.33.load, 33
  %GEM209.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return210 = fcmp one double %GEM209.fca.16.load, 0.000000e+00
  br i1 %return210, label %true212, label %end213

end207:                                           ; preds = %true272, %false, %end
  %SYS287.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS287.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS287.fca.0.load, 0
  %SYS287.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS287.fca.1.insert = insertvalue %gemSYS %SYS287.fca.0.insert, i64 %SYS287.fca.1.load, 1
  %SYS287.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS287.fca.2.insert = insertvalue %gemSYS %SYS287.fca.1.insert, i64 %SYS287.fca.2.load, 2
  %SYS287.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS287.fca.3.insert = insertvalue %gemSYS %SYS287.fca.2.insert, i64 %SYS287.fca.3.load, 3
  %SYS287.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS287.fca.4.insert = insertvalue %gemSYS %SYS287.fca.3.insert, i64 %SYS287.fca.4.load, 4
  %SYS287.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS287.fca.5.insert = insertvalue %gemSYS %SYS287.fca.4.insert, i64 %SYS287.fca.5.load, 5
  %SYS287.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS287.fca.6.insert = insertvalue %gemSYS %SYS287.fca.5.insert, i64 %SYS287.fca.6.load, 6
  %SYS287.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS287.fca.7.insert = insertvalue %gemSYS %SYS287.fca.6.insert, i64 %SYS287.fca.7.load, 7
  %SYS287.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS287.fca.8.insert = insertvalue %gemSYS %SYS287.fca.7.insert, i64 %SYS287.fca.8.load, 8
  %SYS287.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS287.fca.9.insert = insertvalue %gemSYS %SYS287.fca.8.insert, i64 %SYS287.fca.9.load, 9
  %SYS287.fca.10.load = load double, double* %SYS1.fca.10.gep
  store i64 %SYS287.fca.1.load, i64* %50
  %__mem288 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem288, <2 x double>* %51
  %chkNAN_v = call i64 @"chkNAN_v@IIU"(i64* %50, <2 x double>* %51)
  %97 = icmp ne i64 %chkNAN_v, 0
  br i1 %97, label %true289, label %false290

true212:                                          ; preds = %true206
  %v1GMP215.fca.0.load = load double*, double** %v1GMP5.fca.0.gep
  %v1GMP215.fca.0.insert = insertvalue %gemPrm undef, double* %v1GMP215.fca.0.load, 0
  %v1GMP215.fca.1.load = load double*, double** %v1GMP5.fca.1.gep
  %v1GMP215.fca.1.insert = insertvalue %gemPrm %v1GMP215.fca.0.insert, double* %v1GMP215.fca.1.load, 1
  %v1GMP215.fca.2.load = load double*, double** %v1GMP5.fca.2.gep
  %v1GMP215.fca.2.insert = insertvalue %gemPrm %v1GMP215.fca.1.insert, double* %v1GMP215.fca.2.load, 2
  %v1GMP215.fca.3.load = load double*, double** %v1GMP5.fca.3.gep
  %v1GMP215.fca.3.insert = insertvalue %gemPrm %v1GMP215.fca.2.insert, double* %v1GMP215.fca.3.load, 3
  %v1GMP215.fca.4.load = load double*, double** %v1GMP5.fca.4.gep
  %v1GMP215.fca.4.insert = insertvalue %gemPrm %v1GMP215.fca.3.insert, double* %v1GMP215.fca.4.load, 4
  %v1GMP215.fca.5.load = load double*, double** %v1GMP5.fca.5.gep
  %v1GMP215.fca.5.insert = insertvalue %gemPrm %v1GMP215.fca.4.insert, double* %v1GMP215.fca.5.load, 5
  %v1GMP215.fca.6.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.6.gep
  %v1GMP215.fca.6.insert = insertvalue %gemPrm %v1GMP215.fca.5.insert, <3 x double>* %v1GMP215.fca.6.load, 6
  %v1GMP215.fca.7.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.7.gep
  %v1GMP215.fca.7.insert = insertvalue %gemPrm %v1GMP215.fca.6.insert, <3 x double>* %v1GMP215.fca.7.load, 7
  %v1GMP215.fca.8.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.8.gep
  %v1GMP215.fca.8.insert = insertvalue %gemPrm %v1GMP215.fca.7.insert, <3 x double>* %v1GMP215.fca.8.load, 8
  %v1GMP215.fca.9.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.9.gep
  %v1GMP215.fca.9.insert = insertvalue %gemPrm %v1GMP215.fca.8.insert, <3 x double>* %v1GMP215.fca.9.load, 9
  %v1GMP215.fca.10.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.10.gep
  %v1GMP215.fca.10.insert = insertvalue %gemPrm %v1GMP215.fca.9.insert, <3 x double>* %v1GMP215.fca.10.load, 10
  %v1GMP215.fca.11.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.11.gep
  %v1GMP215.fca.11.insert = insertvalue %gemPrm %v1GMP215.fca.10.insert, <3 x double>* %v1GMP215.fca.11.load, 11
  %v1GMP215.fca.12.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.12.gep
  %v1GMP215.fca.12.insert = insertvalue %gemPrm %v1GMP215.fca.11.insert, <3 x double>* %v1GMP215.fca.12.load, 12
  %v1GMP215.fca.13.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.13.gep
  %v1GMP215.fca.13.insert = insertvalue %gemPrm %v1GMP215.fca.12.insert, <2 x double>* %v1GMP215.fca.13.load, 13
  %v1GMP215.fca.14.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.14.gep
  %v1GMP215.fca.14.insert = insertvalue %gemPrm %v1GMP215.fca.13.insert, <2 x double>* %v1GMP215.fca.14.load, 14
  %v1GMP215.fca.15.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.15.gep
  %v1GMP215.fca.15.insert = insertvalue %gemPrm %v1GMP215.fca.14.insert, <2 x double>* %v1GMP215.fca.15.load, 15
  %v1GMP215.fca.16.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.16.gep
  %v1GMP215.fca.16.insert = insertvalue %gemPrm %v1GMP215.fca.15.insert, <2 x double>* %v1GMP215.fca.16.load, 16
  %v1GMP215.fca.17.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.17.gep
  %v1GMP215.fca.17.insert = insertvalue %gemPrm %v1GMP215.fca.16.insert, <2 x double>* %v1GMP215.fca.17.load, 17
  %v1GMP215.fca.18.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.18.gep
  %v1GMP215.fca.18.insert = insertvalue %gemPrm %v1GMP215.fca.17.insert, <2 x double>* %v1GMP215.fca.18.load, 18
  %v1GMP215.fca.19.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.19.gep
  %v1GMP215.fca.19.insert = insertvalue %gemPrm %v1GMP215.fca.18.insert, <2 x double>* %v1GMP215.fca.19.load, 19
  %v1GMP215.fca.20.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.20.gep
  %v1GMP215.fca.20.insert = insertvalue %gemPrm %v1GMP215.fca.19.insert, <2 x double>* %v1GMP215.fca.20.load, 20
  %v1GMP215.fca.21.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.21.gep
  %v1GMP215.fca.21.insert = insertvalue %gemPrm %v1GMP215.fca.20.insert, <2 x double>* %v1GMP215.fca.21.load, 21
  %v1GMP215.fca.22.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.22.gep
  %v1GMP215.fca.22.insert = insertvalue %gemPrm %v1GMP215.fca.21.insert, <2 x double>* %v1GMP215.fca.22.load, 22
  %v1GMP215.fca.23.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.23.gep
  %v1GMP215.fca.23.insert = insertvalue %gemPrm %v1GMP215.fca.22.insert, <2 x double>* %v1GMP215.fca.23.load, 23
  %v1GMP215.fca.24.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.24.gep
  %v1GMP215.fca.24.insert = insertvalue %gemPrm %v1GMP215.fca.23.insert, <2 x double>* %v1GMP215.fca.24.load, 24
  %v1GMP215.fca.25.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.25.gep
  %v1GMP215.fca.25.insert = insertvalue %gemPrm %v1GMP215.fca.24.insert, <2 x double>* %v1GMP215.fca.25.load, 25
  %v1GMP215.fca.26.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.26.gep
  %v1GMP215.fca.26.insert = insertvalue %gemPrm %v1GMP215.fca.25.insert, <2 x double>* %v1GMP215.fca.26.load, 26
  %v1GMP215.fca.27.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.27.gep
  %v1GMP215.fca.27.insert = insertvalue %gemPrm %v1GMP215.fca.26.insert, <2 x double>* %v1GMP215.fca.27.load, 27
  %v1GMP215.fca.28.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.28.gep
  %v1GMP215.fca.28.insert = insertvalue %gemPrm %v1GMP215.fca.27.insert, <2 x double>* %v1GMP215.fca.28.load, 28
  %v1GMP215.fca.29.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.29.gep
  %v1GMP215.fca.29.insert = insertvalue %gemPrm %v1GMP215.fca.28.insert, <2 x double>* %v1GMP215.fca.29.load, 29
  %v1GMP215.fca.30.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.30.gep
  %v1GMP215.fca.30.insert = insertvalue %gemPrm %v1GMP215.fca.29.insert, <2 x double>* %v1GMP215.fca.30.load, 30
  %v1GMP215.fca.31.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.31.gep
  %v1GMP215.fca.31.insert = insertvalue %gemPrm %v1GMP215.fca.30.insert, <2 x double>* %v1GMP215.fca.31.load, 31
  %v1GMP215.fca.32.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.32.gep
  %v1GMP215.fca.32.insert = insertvalue %gemPrm %v1GMP215.fca.31.insert, <2 x double>* %v1GMP215.fca.32.load, 32
  %v1GMP215.fca.33.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.33.gep
  %v1GMP215.fca.33.insert = insertvalue %gemPrm %v1GMP215.fca.32.insert, <2 x double>* %v1GMP215.fca.33.load, 33
  %v1GMP215.fca.34.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.34.gep
  %v1GMP215.fca.34.insert = insertvalue %gemPrm %v1GMP215.fca.33.insert, <2 x double>* %v1GMP215.fca.34.load, 34
  %v1GMP215.fca.35.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.35.gep
  %v1GMP215.fca.35.insert = insertvalue %gemPrm %v1GMP215.fca.34.insert, <2 x double>* %v1GMP215.fca.35.load, 35
  %v1GMP215.fca.36.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.36.gep
  %v1GMP215.fca.36.insert = insertvalue %gemPrm %v1GMP215.fca.35.insert, <2 x double>* %v1GMP215.fca.36.load, 36
  %v1GMP215.fca.37.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.37.gep
  %v1GMP215.fca.37.insert = insertvalue %gemPrm %v1GMP215.fca.36.insert, <2 x double>* %v1GMP215.fca.37.load, 37
  %v1GMP215.fca.38.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.38.gep
  %v1GMP215.fca.38.insert = insertvalue %gemPrm %v1GMP215.fca.37.insert, <2 x double>* %v1GMP215.fca.38.load, 38
  %v1GMP215.fca.39.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.39.gep
  %v1GMP215.fca.39.insert = insertvalue %gemPrm %v1GMP215.fca.38.insert, <2 x double>* %v1GMP215.fca.39.load, 39
  %v1GMP215.fca.40.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.40.gep
  %v1GMP215.fca.40.insert = insertvalue %gemPrm %v1GMP215.fca.39.insert, <2 x double>* %v1GMP215.fca.40.load, 40
  %v1GMP215.fca.41.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.41.gep
  %v1GMP215.fca.41.insert = insertvalue %gemPrm %v1GMP215.fca.40.insert, <2 x double>* %v1GMP215.fca.41.load, 41
  %v1GMP215.fca.42.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.42.gep
  %v1GMP215.fca.42.insert = insertvalue %gemPrm %v1GMP215.fca.41.insert, <4 x double>* %v1GMP215.fca.42.load, 42
  %v1GMP215.fca.43.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.43.gep
  %v1GMP215.fca.43.insert = insertvalue %gemPrm %v1GMP215.fca.42.insert, <4 x double>* %v1GMP215.fca.43.load, 43
  %v1GMP215.fca.44.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.44.gep
  %v1GMP215.fca.44.insert = insertvalue %gemPrm %v1GMP215.fca.43.insert, <4 x double>* %v1GMP215.fca.44.load, 44
  %v1GMP215.fca.45.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.45.gep
  %v1GMP215.fca.45.insert = insertvalue %gemPrm %v1GMP215.fca.44.insert, <4 x double>* %v1GMP215.fca.45.load, 45
  %v1GMP215.fca.46.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.46.gep
  %v1GMP215.fca.46.insert = insertvalue %gemPrm %v1GMP215.fca.45.insert, <4 x double>* %v1GMP215.fca.46.load, 46
  %v1GMP215.fca.47.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.47.gep
  %v1GMP215.fca.47.insert = insertvalue %gemPrm %v1GMP215.fca.46.insert, <4 x double>* %v1GMP215.fca.47.load, 47
  %v1GMP215.fca.48.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.48.gep
  %v1GMP215.fca.48.insert = insertvalue %gemPrm %v1GMP215.fca.47.insert, <4 x double>* %v1GMP215.fca.48.load, 48
  %v1GMP215.fca.49.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.49.gep
  %v1GMP215.fca.49.insert = insertvalue %gemPrm %v1GMP215.fca.48.insert, <4 x double>* %v1GMP215.fca.49.load, 49
  %v1GMP215.fca.50.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.50.gep
  %v1GMP215.fca.50.insert = insertvalue %gemPrm %v1GMP215.fca.49.insert, <4 x double>* %v1GMP215.fca.50.load, 50
  %v1GMP215.fca.51.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.51.gep
  %v1GMP215.fca.51.insert = insertvalue %gemPrm %v1GMP215.fca.50.insert, <3 x double>* %v1GMP215.fca.51.load, 51
  %v1GMP215.fca.52.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.52.gep
  %v1GMP215.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 0
  store double* %v1GMP215.fca.0.load, double** %v1GMP215.fca.0.gep
  %v1GMP215.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 1
  store double* %v1GMP215.fca.1.load, double** %v1GMP215.fca.1.gep
  %v1GMP215.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 2
  store double* %v1GMP215.fca.2.load, double** %v1GMP215.fca.2.gep
  %v1GMP215.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 3
  store double* %v1GMP215.fca.3.load, double** %v1GMP215.fca.3.gep
  %v1GMP215.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 4
  store double* %v1GMP215.fca.4.load, double** %v1GMP215.fca.4.gep
  %v1GMP215.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 5
  store double* %v1GMP215.fca.5.load, double** %v1GMP215.fca.5.gep
  %v1GMP215.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 6
  store <3 x double>* %v1GMP215.fca.6.load, <3 x double>** %v1GMP215.fca.6.gep
  %v1GMP215.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 7
  store <3 x double>* %v1GMP215.fca.7.load, <3 x double>** %v1GMP215.fca.7.gep
  %v1GMP215.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 8
  store <3 x double>* %v1GMP215.fca.8.load, <3 x double>** %v1GMP215.fca.8.gep
  %v1GMP215.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 9
  store <3 x double>* %v1GMP215.fca.9.load, <3 x double>** %v1GMP215.fca.9.gep
  %v1GMP215.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 10
  store <3 x double>* %v1GMP215.fca.10.load, <3 x double>** %v1GMP215.fca.10.gep
  %v1GMP215.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 11
  store <3 x double>* %v1GMP215.fca.11.load, <3 x double>** %v1GMP215.fca.11.gep
  %v1GMP215.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 12
  store <3 x double>* %v1GMP215.fca.12.load, <3 x double>** %v1GMP215.fca.12.gep
  %v1GMP215.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 13
  store <2 x double>* %v1GMP215.fca.13.load, <2 x double>** %v1GMP215.fca.13.gep
  %v1GMP215.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 14
  store <2 x double>* %v1GMP215.fca.14.load, <2 x double>** %v1GMP215.fca.14.gep
  %v1GMP215.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 15
  store <2 x double>* %v1GMP215.fca.15.load, <2 x double>** %v1GMP215.fca.15.gep
  %v1GMP215.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 16
  store <2 x double>* %v1GMP215.fca.16.load, <2 x double>** %v1GMP215.fca.16.gep
  %v1GMP215.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 17
  store <2 x double>* %v1GMP215.fca.17.load, <2 x double>** %v1GMP215.fca.17.gep
  %v1GMP215.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 18
  store <2 x double>* %v1GMP215.fca.18.load, <2 x double>** %v1GMP215.fca.18.gep
  %v1GMP215.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 19
  store <2 x double>* %v1GMP215.fca.19.load, <2 x double>** %v1GMP215.fca.19.gep
  %v1GMP215.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 20
  store <2 x double>* %v1GMP215.fca.20.load, <2 x double>** %v1GMP215.fca.20.gep
  %v1GMP215.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 21
  store <2 x double>* %v1GMP215.fca.21.load, <2 x double>** %v1GMP215.fca.21.gep
  %v1GMP215.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 22
  store <2 x double>* %v1GMP215.fca.22.load, <2 x double>** %v1GMP215.fca.22.gep
  %v1GMP215.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 23
  store <2 x double>* %v1GMP215.fca.23.load, <2 x double>** %v1GMP215.fca.23.gep
  %v1GMP215.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 24
  store <2 x double>* %v1GMP215.fca.24.load, <2 x double>** %v1GMP215.fca.24.gep
  %v1GMP215.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 25
  store <2 x double>* %v1GMP215.fca.25.load, <2 x double>** %v1GMP215.fca.25.gep
  %v1GMP215.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 26
  store <2 x double>* %v1GMP215.fca.26.load, <2 x double>** %v1GMP215.fca.26.gep
  %v1GMP215.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 27
  store <2 x double>* %v1GMP215.fca.27.load, <2 x double>** %v1GMP215.fca.27.gep
  %v1GMP215.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 28
  store <2 x double>* %v1GMP215.fca.28.load, <2 x double>** %v1GMP215.fca.28.gep
  %v1GMP215.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 29
  store <2 x double>* %v1GMP215.fca.29.load, <2 x double>** %v1GMP215.fca.29.gep
  %v1GMP215.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 30
  store <2 x double>* %v1GMP215.fca.30.load, <2 x double>** %v1GMP215.fca.30.gep
  %v1GMP215.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 31
  store <2 x double>* %v1GMP215.fca.31.load, <2 x double>** %v1GMP215.fca.31.gep
  %v1GMP215.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 32
  store <2 x double>* %v1GMP215.fca.32.load, <2 x double>** %v1GMP215.fca.32.gep
  %v1GMP215.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 33
  store <2 x double>* %v1GMP215.fca.33.load, <2 x double>** %v1GMP215.fca.33.gep
  %v1GMP215.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 34
  store <2 x double>* %v1GMP215.fca.34.load, <2 x double>** %v1GMP215.fca.34.gep
  %v1GMP215.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 35
  store <2 x double>* %v1GMP215.fca.35.load, <2 x double>** %v1GMP215.fca.35.gep
  %v1GMP215.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 36
  store <2 x double>* %v1GMP215.fca.36.load, <2 x double>** %v1GMP215.fca.36.gep
  %v1GMP215.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 37
  store <2 x double>* %v1GMP215.fca.37.load, <2 x double>** %v1GMP215.fca.37.gep
  %v1GMP215.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 38
  store <2 x double>* %v1GMP215.fca.38.load, <2 x double>** %v1GMP215.fca.38.gep
  %v1GMP215.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 39
  store <2 x double>* %v1GMP215.fca.39.load, <2 x double>** %v1GMP215.fca.39.gep
  %v1GMP215.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 40
  store <2 x double>* %v1GMP215.fca.40.load, <2 x double>** %v1GMP215.fca.40.gep
  %v1GMP215.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 41
  store <2 x double>* %v1GMP215.fca.41.load, <2 x double>** %v1GMP215.fca.41.gep
  %v1GMP215.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 42
  store <4 x double>* %v1GMP215.fca.42.load, <4 x double>** %v1GMP215.fca.42.gep
  %v1GMP215.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 43
  store <4 x double>* %v1GMP215.fca.43.load, <4 x double>** %v1GMP215.fca.43.gep
  %v1GMP215.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 44
  store <4 x double>* %v1GMP215.fca.44.load, <4 x double>** %v1GMP215.fca.44.gep
  %v1GMP215.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 45
  store <4 x double>* %v1GMP215.fca.45.load, <4 x double>** %v1GMP215.fca.45.gep
  %v1GMP215.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 46
  store <4 x double>* %v1GMP215.fca.46.load, <4 x double>** %v1GMP215.fca.46.gep
  %v1GMP215.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 47
  store <4 x double>* %v1GMP215.fca.47.load, <4 x double>** %v1GMP215.fca.47.gep
  %v1GMP215.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 48
  store <4 x double>* %v1GMP215.fca.48.load, <4 x double>** %v1GMP215.fca.48.gep
  %v1GMP215.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 49
  store <4 x double>* %v1GMP215.fca.49.load, <4 x double>** %v1GMP215.fca.49.gep
  %v1GMP215.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 50
  store <4 x double>* %v1GMP215.fca.50.load, <4 x double>** %v1GMP215.fca.50.gep
  %v1GMP215.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 51
  store <3 x double>* %v1GMP215.fca.51.load, <3 x double>** %v1GMP215.fca.51.gep
  %v1GMP215.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %52, i32 0, i32 52
  store <2 x double>* %v1GMP215.fca.52.load, <2 x double>** %v1GMP215.fca.52.gep
  store i64 0, i64* %53
  store i64 0, i64* %54
  %GEM216.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM216.fca.0.insert = insertvalue %gem undef, i64* %GEM216.fca.0.load, 0
  %GEM216.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM216.fca.1.insert = insertvalue %gem %GEM216.fca.0.insert, i64* %GEM216.fca.1.load, 1
  %GEM216.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM216.fca.2.insert = insertvalue %gem %GEM216.fca.1.insert, i64* %GEM216.fca.2.load, 2
  %GEM216.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM216.fca.3.insert = insertvalue %gem %GEM216.fca.2.insert, i64* %GEM216.fca.3.load, 3
  %GEM216.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM216.fca.4.insert = insertvalue %gem %GEM216.fca.3.insert, i64* %GEM216.fca.4.load, 4
  %GEM216.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM216.fca.5.insert = insertvalue %gem %GEM216.fca.4.insert, i64 %GEM216.fca.5.load, 5
  %GEM216.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM216.fca.6.insert = insertvalue %gem %GEM216.fca.5.insert, i64 %GEM216.fca.6.load, 6
  %GEM216.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM216.fca.7.insert = insertvalue %gem %GEM216.fca.6.insert, i64 %GEM216.fca.7.load, 7
  %GEM216.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM216.fca.8.insert = insertvalue %gem %GEM216.fca.7.insert, i64 %GEM216.fca.8.load, 8
  %GEM216.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM216.fca.9.insert = insertvalue %gem %GEM216.fca.8.insert, double* %GEM216.fca.9.load, 9
  %GEM216.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM216.fca.10.insert = insertvalue %gem %GEM216.fca.9.insert, double* %GEM216.fca.10.load, 10
  %GEM216.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM216.fca.11.insert = insertvalue %gem %GEM216.fca.10.insert, double* %GEM216.fca.11.load, 11
  %GEM216.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM216.fca.12.insert = insertvalue %gem %GEM216.fca.11.insert, double* %GEM216.fca.12.load, 12
  %GEM216.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM216.fca.13.insert = insertvalue %gem %GEM216.fca.12.insert, double* %GEM216.fca.13.load, 13
  %GEM216.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM216.fca.14.insert = insertvalue %gem %GEM216.fca.13.insert, double* %GEM216.fca.14.load, 14
  %GEM216.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM216.fca.15.insert = insertvalue %gem %GEM216.fca.14.insert, double* %GEM216.fca.15.load, 15
  %GEM216.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM216.fca.16.insert = insertvalue %gem %GEM216.fca.15.insert, double %GEM216.fca.16.load, 16
  %GEM216.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM216.fca.17.insert = insertvalue %gem %GEM216.fca.16.insert, double %GEM216.fca.17.load, 17
  %GEM216.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM216.fca.18.insert = insertvalue %gem %GEM216.fca.17.insert, double %GEM216.fca.18.load, 18
  %GEM216.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM216.fca.19.insert = insertvalue %gem %GEM216.fca.18.insert, double %GEM216.fca.19.load, 19
  %GEM216.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM216.fca.20.insert = insertvalue %gem %GEM216.fca.19.insert, double %GEM216.fca.20.load, 20
  %GEM216.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM216.fca.21.insert = insertvalue %gem %GEM216.fca.20.insert, <2 x double> %GEM216.fca.21.load, 21
  %GEM216.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM216.fca.22.insert = insertvalue %gem %GEM216.fca.21.insert, <2 x double>* %GEM216.fca.22.load, 22
  %GEM216.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM216.fca.23.insert = insertvalue %gem %GEM216.fca.22.insert, <2 x double>* %GEM216.fca.23.load, 23
  %GEM216.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM216.fca.24.insert = insertvalue %gem %GEM216.fca.23.insert, <2 x double>* %GEM216.fca.24.load, 24
  %GEM216.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM216.fca.25.insert = insertvalue %gem %GEM216.fca.24.insert, <2 x double>* %GEM216.fca.25.load, 25
  %GEM216.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM216.fca.26.insert = insertvalue %gem %GEM216.fca.25.insert, <2 x double>* %GEM216.fca.26.load, 26
  %GEM216.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM216.fca.27.insert = insertvalue %gem %GEM216.fca.26.insert, <2 x double>* %GEM216.fca.27.load, 27
  %GEM216.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM216.fca.28.insert = insertvalue %gem %GEM216.fca.27.insert, <2 x double> %GEM216.fca.28.load, 28
  %GEM216.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM216.fca.29.insert = insertvalue %gem %GEM216.fca.28.insert, <2 x double> %GEM216.fca.29.load, 29
  %GEM216.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM216.fca.30.insert = insertvalue %gem %GEM216.fca.29.insert, <2 x double> %GEM216.fca.30.load, 30
  %GEM216.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM216.fca.31.insert = insertvalue %gem %GEM216.fca.30.insert, <2 x double> %GEM216.fca.31.load, 31
  %GEM216.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM216.fca.32.insert = insertvalue %gem %GEM216.fca.31.insert, <2 x double> %GEM216.fca.32.load, 32
  %GEM216.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM216.fca.33.insert = insertvalue %gem %GEM216.fca.32.insert, <2 x double> %GEM216.fca.33.load, 33
  %GEM216.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64 %GEM216.fca.5.load, i64* %55
  %__mem217 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem217, <2 x double>* %56
  %GEM218.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM218.fca.0.insert = insertvalue %gem undef, i64* %GEM218.fca.0.load, 0
  %GEM218.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM218.fca.1.insert = insertvalue %gem %GEM218.fca.0.insert, i64* %GEM218.fca.1.load, 1
  %GEM218.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM218.fca.2.insert = insertvalue %gem %GEM218.fca.1.insert, i64* %GEM218.fca.2.load, 2
  %GEM218.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM218.fca.3.insert = insertvalue %gem %GEM218.fca.2.insert, i64* %GEM218.fca.3.load, 3
  %GEM218.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM218.fca.4.insert = insertvalue %gem %GEM218.fca.3.insert, i64* %GEM218.fca.4.load, 4
  %GEM218.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM218.fca.5.insert = insertvalue %gem %GEM218.fca.4.insert, i64 %GEM218.fca.5.load, 5
  %GEM218.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM218.fca.6.insert = insertvalue %gem %GEM218.fca.5.insert, i64 %GEM218.fca.6.load, 6
  %GEM218.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM218.fca.7.insert = insertvalue %gem %GEM218.fca.6.insert, i64 %GEM218.fca.7.load, 7
  %GEM218.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM218.fca.8.insert = insertvalue %gem %GEM218.fca.7.insert, i64 %GEM218.fca.8.load, 8
  %GEM218.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM218.fca.9.insert = insertvalue %gem %GEM218.fca.8.insert, double* %GEM218.fca.9.load, 9
  %GEM218.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM218.fca.10.insert = insertvalue %gem %GEM218.fca.9.insert, double* %GEM218.fca.10.load, 10
  %GEM218.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM218.fca.11.insert = insertvalue %gem %GEM218.fca.10.insert, double* %GEM218.fca.11.load, 11
  %GEM218.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM218.fca.12.insert = insertvalue %gem %GEM218.fca.11.insert, double* %GEM218.fca.12.load, 12
  %GEM218.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM218.fca.13.insert = insertvalue %gem %GEM218.fca.12.insert, double* %GEM218.fca.13.load, 13
  %GEM218.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM218.fca.14.insert = insertvalue %gem %GEM218.fca.13.insert, double* %GEM218.fca.14.load, 14
  %GEM218.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM218.fca.15.insert = insertvalue %gem %GEM218.fca.14.insert, double* %GEM218.fca.15.load, 15
  %GEM218.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM218.fca.16.insert = insertvalue %gem %GEM218.fca.15.insert, double %GEM218.fca.16.load, 16
  %GEM218.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM218.fca.17.insert = insertvalue %gem %GEM218.fca.16.insert, double %GEM218.fca.17.load, 17
  %GEM218.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM218.fca.18.insert = insertvalue %gem %GEM218.fca.17.insert, double %GEM218.fca.18.load, 18
  %GEM218.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM218.fca.19.insert = insertvalue %gem %GEM218.fca.18.insert, double %GEM218.fca.19.load, 19
  %GEM218.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM218.fca.20.insert = insertvalue %gem %GEM218.fca.19.insert, double %GEM218.fca.20.load, 20
  %GEM218.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM218.fca.21.insert = insertvalue %gem %GEM218.fca.20.insert, <2 x double> %GEM218.fca.21.load, 21
  %GEM218.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM218.fca.22.insert = insertvalue %gem %GEM218.fca.21.insert, <2 x double>* %GEM218.fca.22.load, 22
  %GEM218.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM218.fca.23.insert = insertvalue %gem %GEM218.fca.22.insert, <2 x double>* %GEM218.fca.23.load, 23
  %GEM218.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM218.fca.24.insert = insertvalue %gem %GEM218.fca.23.insert, <2 x double>* %GEM218.fca.24.load, 24
  %GEM218.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM218.fca.25.insert = insertvalue %gem %GEM218.fca.24.insert, <2 x double>* %GEM218.fca.25.load, 25
  %GEM218.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM218.fca.26.insert = insertvalue %gem %GEM218.fca.25.insert, <2 x double>* %GEM218.fca.26.load, 26
  %GEM218.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM218.fca.27.insert = insertvalue %gem %GEM218.fca.26.insert, <2 x double>* %GEM218.fca.27.load, 27
  %GEM218.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM218.fca.28.insert = insertvalue %gem %GEM218.fca.27.insert, <2 x double> %GEM218.fca.28.load, 28
  %GEM218.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM218.fca.29.insert = insertvalue %gem %GEM218.fca.28.insert, <2 x double> %GEM218.fca.29.load, 29
  %GEM218.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM218.fca.30.insert = insertvalue %gem %GEM218.fca.29.insert, <2 x double> %GEM218.fca.30.load, 30
  %GEM218.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM218.fca.31.insert = insertvalue %gem %GEM218.fca.30.insert, <2 x double> %GEM218.fca.31.load, 31
  %GEM218.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM218.fca.32.insert = insertvalue %gem %GEM218.fca.31.insert, <2 x double> %GEM218.fca.32.load, 32
  %GEM218.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM218.fca.33.insert = insertvalue %gem %GEM218.fca.32.insert, <2 x double> %GEM218.fca.33.load, 33
  %GEM218.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM218.fca.28.load, <2 x double>* %57
  %GEM219.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM219.fca.0.insert = insertvalue %gem undef, i64* %GEM219.fca.0.load, 0
  %GEM219.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM219.fca.1.insert = insertvalue %gem %GEM219.fca.0.insert, i64* %GEM219.fca.1.load, 1
  %GEM219.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM219.fca.2.insert = insertvalue %gem %GEM219.fca.1.insert, i64* %GEM219.fca.2.load, 2
  %GEM219.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM219.fca.3.insert = insertvalue %gem %GEM219.fca.2.insert, i64* %GEM219.fca.3.load, 3
  %GEM219.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM219.fca.4.insert = insertvalue %gem %GEM219.fca.3.insert, i64* %GEM219.fca.4.load, 4
  %GEM219.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM219.fca.5.insert = insertvalue %gem %GEM219.fca.4.insert, i64 %GEM219.fca.5.load, 5
  %GEM219.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM219.fca.6.insert = insertvalue %gem %GEM219.fca.5.insert, i64 %GEM219.fca.6.load, 6
  %GEM219.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM219.fca.7.insert = insertvalue %gem %GEM219.fca.6.insert, i64 %GEM219.fca.7.load, 7
  %GEM219.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM219.fca.8.insert = insertvalue %gem %GEM219.fca.7.insert, i64 %GEM219.fca.8.load, 8
  %GEM219.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM219.fca.9.insert = insertvalue %gem %GEM219.fca.8.insert, double* %GEM219.fca.9.load, 9
  %GEM219.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM219.fca.10.insert = insertvalue %gem %GEM219.fca.9.insert, double* %GEM219.fca.10.load, 10
  %GEM219.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM219.fca.11.insert = insertvalue %gem %GEM219.fca.10.insert, double* %GEM219.fca.11.load, 11
  %GEM219.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM219.fca.12.insert = insertvalue %gem %GEM219.fca.11.insert, double* %GEM219.fca.12.load, 12
  %GEM219.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM219.fca.13.insert = insertvalue %gem %GEM219.fca.12.insert, double* %GEM219.fca.13.load, 13
  %GEM219.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM219.fca.14.insert = insertvalue %gem %GEM219.fca.13.insert, double* %GEM219.fca.14.load, 14
  %GEM219.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM219.fca.15.insert = insertvalue %gem %GEM219.fca.14.insert, double* %GEM219.fca.15.load, 15
  %GEM219.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM219.fca.16.insert = insertvalue %gem %GEM219.fca.15.insert, double %GEM219.fca.16.load, 16
  %GEM219.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM219.fca.17.insert = insertvalue %gem %GEM219.fca.16.insert, double %GEM219.fca.17.load, 17
  %GEM219.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM219.fca.18.insert = insertvalue %gem %GEM219.fca.17.insert, double %GEM219.fca.18.load, 18
  %GEM219.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM219.fca.19.insert = insertvalue %gem %GEM219.fca.18.insert, double %GEM219.fca.19.load, 19
  %GEM219.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM219.fca.20.insert = insertvalue %gem %GEM219.fca.19.insert, double %GEM219.fca.20.load, 20
  %GEM219.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM219.fca.21.insert = insertvalue %gem %GEM219.fca.20.insert, <2 x double> %GEM219.fca.21.load, 21
  %GEM219.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM219.fca.22.insert = insertvalue %gem %GEM219.fca.21.insert, <2 x double>* %GEM219.fca.22.load, 22
  %GEM219.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM219.fca.23.insert = insertvalue %gem %GEM219.fca.22.insert, <2 x double>* %GEM219.fca.23.load, 23
  %GEM219.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM219.fca.24.insert = insertvalue %gem %GEM219.fca.23.insert, <2 x double>* %GEM219.fca.24.load, 24
  %GEM219.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM219.fca.25.insert = insertvalue %gem %GEM219.fca.24.insert, <2 x double>* %GEM219.fca.25.load, 25
  %GEM219.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM219.fca.26.insert = insertvalue %gem %GEM219.fca.25.insert, <2 x double>* %GEM219.fca.26.load, 26
  %GEM219.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM219.fca.27.insert = insertvalue %gem %GEM219.fca.26.insert, <2 x double>* %GEM219.fca.27.load, 27
  %GEM219.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM219.fca.28.insert = insertvalue %gem %GEM219.fca.27.insert, <2 x double> %GEM219.fca.28.load, 28
  %GEM219.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM219.fca.29.insert = insertvalue %gem %GEM219.fca.28.insert, <2 x double> %GEM219.fca.29.load, 29
  %GEM219.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM219.fca.30.insert = insertvalue %gem %GEM219.fca.29.insert, <2 x double> %GEM219.fca.30.load, 30
  %GEM219.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM219.fca.31.insert = insertvalue %gem %GEM219.fca.30.insert, <2 x double> %GEM219.fca.31.load, 31
  %GEM219.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM219.fca.32.insert = insertvalue %gem %GEM219.fca.31.insert, <2 x double> %GEM219.fca.32.load, 32
  %GEM219.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM219.fca.33.insert = insertvalue %gem %GEM219.fca.32.insert, <2 x double> %GEM219.fca.33.load, 33
  %GEM219.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM219.fca.29.load, <2 x double>* %58
  %GEM220.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM220.fca.0.insert = insertvalue %gem undef, i64* %GEM220.fca.0.load, 0
  %GEM220.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM220.fca.1.insert = insertvalue %gem %GEM220.fca.0.insert, i64* %GEM220.fca.1.load, 1
  %GEM220.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM220.fca.2.insert = insertvalue %gem %GEM220.fca.1.insert, i64* %GEM220.fca.2.load, 2
  %GEM220.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM220.fca.3.insert = insertvalue %gem %GEM220.fca.2.insert, i64* %GEM220.fca.3.load, 3
  %GEM220.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM220.fca.4.insert = insertvalue %gem %GEM220.fca.3.insert, i64* %GEM220.fca.4.load, 4
  %GEM220.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM220.fca.5.insert = insertvalue %gem %GEM220.fca.4.insert, i64 %GEM220.fca.5.load, 5
  %GEM220.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM220.fca.6.insert = insertvalue %gem %GEM220.fca.5.insert, i64 %GEM220.fca.6.load, 6
  %GEM220.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM220.fca.7.insert = insertvalue %gem %GEM220.fca.6.insert, i64 %GEM220.fca.7.load, 7
  %GEM220.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM220.fca.8.insert = insertvalue %gem %GEM220.fca.7.insert, i64 %GEM220.fca.8.load, 8
  %GEM220.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM220.fca.9.insert = insertvalue %gem %GEM220.fca.8.insert, double* %GEM220.fca.9.load, 9
  %GEM220.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM220.fca.10.insert = insertvalue %gem %GEM220.fca.9.insert, double* %GEM220.fca.10.load, 10
  %GEM220.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM220.fca.11.insert = insertvalue %gem %GEM220.fca.10.insert, double* %GEM220.fca.11.load, 11
  %GEM220.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM220.fca.12.insert = insertvalue %gem %GEM220.fca.11.insert, double* %GEM220.fca.12.load, 12
  %GEM220.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM220.fca.13.insert = insertvalue %gem %GEM220.fca.12.insert, double* %GEM220.fca.13.load, 13
  %GEM220.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM220.fca.14.insert = insertvalue %gem %GEM220.fca.13.insert, double* %GEM220.fca.14.load, 14
  %GEM220.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM220.fca.15.insert = insertvalue %gem %GEM220.fca.14.insert, double* %GEM220.fca.15.load, 15
  %GEM220.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM220.fca.16.insert = insertvalue %gem %GEM220.fca.15.insert, double %GEM220.fca.16.load, 16
  %GEM220.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM220.fca.17.insert = insertvalue %gem %GEM220.fca.16.insert, double %GEM220.fca.17.load, 17
  %GEM220.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM220.fca.18.insert = insertvalue %gem %GEM220.fca.17.insert, double %GEM220.fca.18.load, 18
  %GEM220.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM220.fca.19.insert = insertvalue %gem %GEM220.fca.18.insert, double %GEM220.fca.19.load, 19
  %GEM220.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM220.fca.20.insert = insertvalue %gem %GEM220.fca.19.insert, double %GEM220.fca.20.load, 20
  %GEM220.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM220.fca.21.insert = insertvalue %gem %GEM220.fca.20.insert, <2 x double> %GEM220.fca.21.load, 21
  %GEM220.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM220.fca.22.insert = insertvalue %gem %GEM220.fca.21.insert, <2 x double>* %GEM220.fca.22.load, 22
  %GEM220.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM220.fca.23.insert = insertvalue %gem %GEM220.fca.22.insert, <2 x double>* %GEM220.fca.23.load, 23
  %GEM220.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM220.fca.24.insert = insertvalue %gem %GEM220.fca.23.insert, <2 x double>* %GEM220.fca.24.load, 24
  %GEM220.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM220.fca.25.insert = insertvalue %gem %GEM220.fca.24.insert, <2 x double>* %GEM220.fca.25.load, 25
  %GEM220.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM220.fca.26.insert = insertvalue %gem %GEM220.fca.25.insert, <2 x double>* %GEM220.fca.26.load, 26
  %GEM220.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM220.fca.27.insert = insertvalue %gem %GEM220.fca.26.insert, <2 x double>* %GEM220.fca.27.load, 27
  %GEM220.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM220.fca.28.insert = insertvalue %gem %GEM220.fca.27.insert, <2 x double> %GEM220.fca.28.load, 28
  %GEM220.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM220.fca.29.insert = insertvalue %gem %GEM220.fca.28.insert, <2 x double> %GEM220.fca.29.load, 29
  %GEM220.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM220.fca.30.insert = insertvalue %gem %GEM220.fca.29.insert, <2 x double> %GEM220.fca.30.load, 30
  %GEM220.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM220.fca.31.insert = insertvalue %gem %GEM220.fca.30.insert, <2 x double> %GEM220.fca.31.load, 31
  %GEM220.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM220.fca.32.insert = insertvalue %gem %GEM220.fca.31.insert, <2 x double> %GEM220.fca.32.load, 32
  %GEM220.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM220.fca.33.insert = insertvalue %gem %GEM220.fca.32.insert, <2 x double> %GEM220.fca.33.load, 33
  %GEM220.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM220.fca.30.load, <2 x double>* %59
  %GEM221.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM221.fca.0.insert = insertvalue %gem undef, i64* %GEM221.fca.0.load, 0
  %GEM221.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM221.fca.1.insert = insertvalue %gem %GEM221.fca.0.insert, i64* %GEM221.fca.1.load, 1
  %GEM221.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM221.fca.2.insert = insertvalue %gem %GEM221.fca.1.insert, i64* %GEM221.fca.2.load, 2
  %GEM221.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM221.fca.3.insert = insertvalue %gem %GEM221.fca.2.insert, i64* %GEM221.fca.3.load, 3
  %GEM221.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM221.fca.4.insert = insertvalue %gem %GEM221.fca.3.insert, i64* %GEM221.fca.4.load, 4
  %GEM221.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM221.fca.5.insert = insertvalue %gem %GEM221.fca.4.insert, i64 %GEM221.fca.5.load, 5
  %GEM221.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM221.fca.6.insert = insertvalue %gem %GEM221.fca.5.insert, i64 %GEM221.fca.6.load, 6
  %GEM221.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM221.fca.7.insert = insertvalue %gem %GEM221.fca.6.insert, i64 %GEM221.fca.7.load, 7
  %GEM221.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM221.fca.8.insert = insertvalue %gem %GEM221.fca.7.insert, i64 %GEM221.fca.8.load, 8
  %GEM221.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM221.fca.9.insert = insertvalue %gem %GEM221.fca.8.insert, double* %GEM221.fca.9.load, 9
  %GEM221.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM221.fca.10.insert = insertvalue %gem %GEM221.fca.9.insert, double* %GEM221.fca.10.load, 10
  %GEM221.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM221.fca.11.insert = insertvalue %gem %GEM221.fca.10.insert, double* %GEM221.fca.11.load, 11
  %GEM221.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM221.fca.12.insert = insertvalue %gem %GEM221.fca.11.insert, double* %GEM221.fca.12.load, 12
  %GEM221.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM221.fca.13.insert = insertvalue %gem %GEM221.fca.12.insert, double* %GEM221.fca.13.load, 13
  %GEM221.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM221.fca.14.insert = insertvalue %gem %GEM221.fca.13.insert, double* %GEM221.fca.14.load, 14
  %GEM221.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM221.fca.15.insert = insertvalue %gem %GEM221.fca.14.insert, double* %GEM221.fca.15.load, 15
  %GEM221.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM221.fca.16.insert = insertvalue %gem %GEM221.fca.15.insert, double %GEM221.fca.16.load, 16
  %GEM221.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM221.fca.17.insert = insertvalue %gem %GEM221.fca.16.insert, double %GEM221.fca.17.load, 17
  %GEM221.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM221.fca.18.insert = insertvalue %gem %GEM221.fca.17.insert, double %GEM221.fca.18.load, 18
  %GEM221.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM221.fca.19.insert = insertvalue %gem %GEM221.fca.18.insert, double %GEM221.fca.19.load, 19
  %GEM221.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM221.fca.20.insert = insertvalue %gem %GEM221.fca.19.insert, double %GEM221.fca.20.load, 20
  %GEM221.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM221.fca.21.insert = insertvalue %gem %GEM221.fca.20.insert, <2 x double> %GEM221.fca.21.load, 21
  %GEM221.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM221.fca.22.insert = insertvalue %gem %GEM221.fca.21.insert, <2 x double>* %GEM221.fca.22.load, 22
  %GEM221.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM221.fca.23.insert = insertvalue %gem %GEM221.fca.22.insert, <2 x double>* %GEM221.fca.23.load, 23
  %GEM221.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM221.fca.24.insert = insertvalue %gem %GEM221.fca.23.insert, <2 x double>* %GEM221.fca.24.load, 24
  %GEM221.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM221.fca.25.insert = insertvalue %gem %GEM221.fca.24.insert, <2 x double>* %GEM221.fca.25.load, 25
  %GEM221.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM221.fca.26.insert = insertvalue %gem %GEM221.fca.25.insert, <2 x double>* %GEM221.fca.26.load, 26
  %GEM221.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM221.fca.27.insert = insertvalue %gem %GEM221.fca.26.insert, <2 x double>* %GEM221.fca.27.load, 27
  %GEM221.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM221.fca.28.insert = insertvalue %gem %GEM221.fca.27.insert, <2 x double> %GEM221.fca.28.load, 28
  %GEM221.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM221.fca.29.insert = insertvalue %gem %GEM221.fca.28.insert, <2 x double> %GEM221.fca.29.load, 29
  %GEM221.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM221.fca.30.insert = insertvalue %gem %GEM221.fca.29.insert, <2 x double> %GEM221.fca.30.load, 30
  %GEM221.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM221.fca.31.insert = insertvalue %gem %GEM221.fca.30.insert, <2 x double> %GEM221.fca.31.load, 31
  %GEM221.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM221.fca.32.insert = insertvalue %gem %GEM221.fca.31.insert, <2 x double> %GEM221.fca.32.load, 32
  %GEM221.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM221.fca.33.insert = insertvalue %gem %GEM221.fca.32.insert, <2 x double> %GEM221.fca.33.load, 33
  %GEM221.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store double %GEM221.fca.16.load, double* %60
  %FLAME223 = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %52, i64* %53, i64* %54, i64* %55, <2 x double>* %56, <2 x double>* %57, <2 x double>* %58, <2 x double>* %59, double* %60)
  %output224 = call <2 x double> @"add@UU"(<2 x double> %cast208, <2 x double> %FLAME223)
  store <2 x double> %output224, <2 x double>* %__tmp
  br label %end213

end213:                                           ; preds = %true212, %true206
  %GEM225.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM225.fca.0.insert = insertvalue %gem undef, i64* %GEM225.fca.0.load, 0
  %GEM225.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM225.fca.1.insert = insertvalue %gem %GEM225.fca.0.insert, i64* %GEM225.fca.1.load, 1
  %GEM225.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM225.fca.2.insert = insertvalue %gem %GEM225.fca.1.insert, i64* %GEM225.fca.2.load, 2
  %GEM225.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM225.fca.3.insert = insertvalue %gem %GEM225.fca.2.insert, i64* %GEM225.fca.3.load, 3
  %GEM225.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM225.fca.4.insert = insertvalue %gem %GEM225.fca.3.insert, i64* %GEM225.fca.4.load, 4
  %GEM225.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM225.fca.5.insert = insertvalue %gem %GEM225.fca.4.insert, i64 %GEM225.fca.5.load, 5
  %GEM225.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM225.fca.6.insert = insertvalue %gem %GEM225.fca.5.insert, i64 %GEM225.fca.6.load, 6
  %GEM225.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM225.fca.7.insert = insertvalue %gem %GEM225.fca.6.insert, i64 %GEM225.fca.7.load, 7
  %GEM225.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM225.fca.8.insert = insertvalue %gem %GEM225.fca.7.insert, i64 %GEM225.fca.8.load, 8
  %GEM225.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM225.fca.9.insert = insertvalue %gem %GEM225.fca.8.insert, double* %GEM225.fca.9.load, 9
  %GEM225.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM225.fca.10.insert = insertvalue %gem %GEM225.fca.9.insert, double* %GEM225.fca.10.load, 10
  %GEM225.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM225.fca.11.insert = insertvalue %gem %GEM225.fca.10.insert, double* %GEM225.fca.11.load, 11
  %GEM225.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM225.fca.12.insert = insertvalue %gem %GEM225.fca.11.insert, double* %GEM225.fca.12.load, 12
  %GEM225.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM225.fca.13.insert = insertvalue %gem %GEM225.fca.12.insert, double* %GEM225.fca.13.load, 13
  %GEM225.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM225.fca.14.insert = insertvalue %gem %GEM225.fca.13.insert, double* %GEM225.fca.14.load, 14
  %GEM225.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM225.fca.15.insert = insertvalue %gem %GEM225.fca.14.insert, double* %GEM225.fca.15.load, 15
  %GEM225.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM225.fca.16.insert = insertvalue %gem %GEM225.fca.15.insert, double %GEM225.fca.16.load, 16
  %GEM225.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM225.fca.17.insert = insertvalue %gem %GEM225.fca.16.insert, double %GEM225.fca.17.load, 17
  %GEM225.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM225.fca.18.insert = insertvalue %gem %GEM225.fca.17.insert, double %GEM225.fca.18.load, 18
  %GEM225.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM225.fca.19.insert = insertvalue %gem %GEM225.fca.18.insert, double %GEM225.fca.19.load, 19
  %GEM225.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM225.fca.20.insert = insertvalue %gem %GEM225.fca.19.insert, double %GEM225.fca.20.load, 20
  %GEM225.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM225.fca.21.insert = insertvalue %gem %GEM225.fca.20.insert, <2 x double> %GEM225.fca.21.load, 21
  %GEM225.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM225.fca.22.insert = insertvalue %gem %GEM225.fca.21.insert, <2 x double>* %GEM225.fca.22.load, 22
  %GEM225.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM225.fca.23.insert = insertvalue %gem %GEM225.fca.22.insert, <2 x double>* %GEM225.fca.23.load, 23
  %GEM225.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM225.fca.24.insert = insertvalue %gem %GEM225.fca.23.insert, <2 x double>* %GEM225.fca.24.load, 24
  %GEM225.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM225.fca.25.insert = insertvalue %gem %GEM225.fca.24.insert, <2 x double>* %GEM225.fca.25.load, 25
  %GEM225.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM225.fca.26.insert = insertvalue %gem %GEM225.fca.25.insert, <2 x double>* %GEM225.fca.26.load, 26
  %GEM225.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM225.fca.27.insert = insertvalue %gem %GEM225.fca.26.insert, <2 x double>* %GEM225.fca.27.load, 27
  %GEM225.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM225.fca.28.insert = insertvalue %gem %GEM225.fca.27.insert, <2 x double> %GEM225.fca.28.load, 28
  %GEM225.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM225.fca.29.insert = insertvalue %gem %GEM225.fca.28.insert, <2 x double> %GEM225.fca.29.load, 29
  %GEM225.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM225.fca.30.insert = insertvalue %gem %GEM225.fca.29.insert, <2 x double> %GEM225.fca.30.load, 30
  %GEM225.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM225.fca.31.insert = insertvalue %gem %GEM225.fca.30.insert, <2 x double> %GEM225.fca.31.load, 31
  %GEM225.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM225.fca.32.insert = insertvalue %gem %GEM225.fca.31.insert, <2 x double> %GEM225.fca.32.load, 32
  %GEM225.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM225.fca.33.insert = insertvalue %gem %GEM225.fca.32.insert, <2 x double> %GEM225.fca.33.load, 33
  %GEM225.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return226 = fcmp one double %GEM225.fca.17.load, 0.000000e+00
  br i1 %return226, label %true228, label %end229

true228:                                          ; preds = %end213
  %__tmp230 = load <2 x double>, <2 x double>* %__tmp
  %v1GMP231.fca.0.load = load double*, double** %v1GMP5.fca.0.gep
  %v1GMP231.fca.0.insert = insertvalue %gemPrm undef, double* %v1GMP231.fca.0.load, 0
  %v1GMP231.fca.1.load = load double*, double** %v1GMP5.fca.1.gep
  %v1GMP231.fca.1.insert = insertvalue %gemPrm %v1GMP231.fca.0.insert, double* %v1GMP231.fca.1.load, 1
  %v1GMP231.fca.2.load = load double*, double** %v1GMP5.fca.2.gep
  %v1GMP231.fca.2.insert = insertvalue %gemPrm %v1GMP231.fca.1.insert, double* %v1GMP231.fca.2.load, 2
  %v1GMP231.fca.3.load = load double*, double** %v1GMP5.fca.3.gep
  %v1GMP231.fca.3.insert = insertvalue %gemPrm %v1GMP231.fca.2.insert, double* %v1GMP231.fca.3.load, 3
  %v1GMP231.fca.4.load = load double*, double** %v1GMP5.fca.4.gep
  %v1GMP231.fca.4.insert = insertvalue %gemPrm %v1GMP231.fca.3.insert, double* %v1GMP231.fca.4.load, 4
  %v1GMP231.fca.5.load = load double*, double** %v1GMP5.fca.5.gep
  %v1GMP231.fca.5.insert = insertvalue %gemPrm %v1GMP231.fca.4.insert, double* %v1GMP231.fca.5.load, 5
  %v1GMP231.fca.6.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.6.gep
  %v1GMP231.fca.6.insert = insertvalue %gemPrm %v1GMP231.fca.5.insert, <3 x double>* %v1GMP231.fca.6.load, 6
  %v1GMP231.fca.7.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.7.gep
  %v1GMP231.fca.7.insert = insertvalue %gemPrm %v1GMP231.fca.6.insert, <3 x double>* %v1GMP231.fca.7.load, 7
  %v1GMP231.fca.8.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.8.gep
  %v1GMP231.fca.8.insert = insertvalue %gemPrm %v1GMP231.fca.7.insert, <3 x double>* %v1GMP231.fca.8.load, 8
  %v1GMP231.fca.9.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.9.gep
  %v1GMP231.fca.9.insert = insertvalue %gemPrm %v1GMP231.fca.8.insert, <3 x double>* %v1GMP231.fca.9.load, 9
  %v1GMP231.fca.10.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.10.gep
  %v1GMP231.fca.10.insert = insertvalue %gemPrm %v1GMP231.fca.9.insert, <3 x double>* %v1GMP231.fca.10.load, 10
  %v1GMP231.fca.11.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.11.gep
  %v1GMP231.fca.11.insert = insertvalue %gemPrm %v1GMP231.fca.10.insert, <3 x double>* %v1GMP231.fca.11.load, 11
  %v1GMP231.fca.12.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.12.gep
  %v1GMP231.fca.12.insert = insertvalue %gemPrm %v1GMP231.fca.11.insert, <3 x double>* %v1GMP231.fca.12.load, 12
  %v1GMP231.fca.13.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.13.gep
  %v1GMP231.fca.13.insert = insertvalue %gemPrm %v1GMP231.fca.12.insert, <2 x double>* %v1GMP231.fca.13.load, 13
  %v1GMP231.fca.14.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.14.gep
  %v1GMP231.fca.14.insert = insertvalue %gemPrm %v1GMP231.fca.13.insert, <2 x double>* %v1GMP231.fca.14.load, 14
  %v1GMP231.fca.15.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.15.gep
  %v1GMP231.fca.15.insert = insertvalue %gemPrm %v1GMP231.fca.14.insert, <2 x double>* %v1GMP231.fca.15.load, 15
  %v1GMP231.fca.16.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.16.gep
  %v1GMP231.fca.16.insert = insertvalue %gemPrm %v1GMP231.fca.15.insert, <2 x double>* %v1GMP231.fca.16.load, 16
  %v1GMP231.fca.17.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.17.gep
  %v1GMP231.fca.17.insert = insertvalue %gemPrm %v1GMP231.fca.16.insert, <2 x double>* %v1GMP231.fca.17.load, 17
  %v1GMP231.fca.18.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.18.gep
  %v1GMP231.fca.18.insert = insertvalue %gemPrm %v1GMP231.fca.17.insert, <2 x double>* %v1GMP231.fca.18.load, 18
  %v1GMP231.fca.19.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.19.gep
  %v1GMP231.fca.19.insert = insertvalue %gemPrm %v1GMP231.fca.18.insert, <2 x double>* %v1GMP231.fca.19.load, 19
  %v1GMP231.fca.20.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.20.gep
  %v1GMP231.fca.20.insert = insertvalue %gemPrm %v1GMP231.fca.19.insert, <2 x double>* %v1GMP231.fca.20.load, 20
  %v1GMP231.fca.21.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.21.gep
  %v1GMP231.fca.21.insert = insertvalue %gemPrm %v1GMP231.fca.20.insert, <2 x double>* %v1GMP231.fca.21.load, 21
  %v1GMP231.fca.22.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.22.gep
  %v1GMP231.fca.22.insert = insertvalue %gemPrm %v1GMP231.fca.21.insert, <2 x double>* %v1GMP231.fca.22.load, 22
  %v1GMP231.fca.23.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.23.gep
  %v1GMP231.fca.23.insert = insertvalue %gemPrm %v1GMP231.fca.22.insert, <2 x double>* %v1GMP231.fca.23.load, 23
  %v1GMP231.fca.24.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.24.gep
  %v1GMP231.fca.24.insert = insertvalue %gemPrm %v1GMP231.fca.23.insert, <2 x double>* %v1GMP231.fca.24.load, 24
  %v1GMP231.fca.25.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.25.gep
  %v1GMP231.fca.25.insert = insertvalue %gemPrm %v1GMP231.fca.24.insert, <2 x double>* %v1GMP231.fca.25.load, 25
  %v1GMP231.fca.26.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.26.gep
  %v1GMP231.fca.26.insert = insertvalue %gemPrm %v1GMP231.fca.25.insert, <2 x double>* %v1GMP231.fca.26.load, 26
  %v1GMP231.fca.27.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.27.gep
  %v1GMP231.fca.27.insert = insertvalue %gemPrm %v1GMP231.fca.26.insert, <2 x double>* %v1GMP231.fca.27.load, 27
  %v1GMP231.fca.28.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.28.gep
  %v1GMP231.fca.28.insert = insertvalue %gemPrm %v1GMP231.fca.27.insert, <2 x double>* %v1GMP231.fca.28.load, 28
  %v1GMP231.fca.29.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.29.gep
  %v1GMP231.fca.29.insert = insertvalue %gemPrm %v1GMP231.fca.28.insert, <2 x double>* %v1GMP231.fca.29.load, 29
  %v1GMP231.fca.30.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.30.gep
  %v1GMP231.fca.30.insert = insertvalue %gemPrm %v1GMP231.fca.29.insert, <2 x double>* %v1GMP231.fca.30.load, 30
  %v1GMP231.fca.31.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.31.gep
  %v1GMP231.fca.31.insert = insertvalue %gemPrm %v1GMP231.fca.30.insert, <2 x double>* %v1GMP231.fca.31.load, 31
  %v1GMP231.fca.32.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.32.gep
  %v1GMP231.fca.32.insert = insertvalue %gemPrm %v1GMP231.fca.31.insert, <2 x double>* %v1GMP231.fca.32.load, 32
  %v1GMP231.fca.33.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.33.gep
  %v1GMP231.fca.33.insert = insertvalue %gemPrm %v1GMP231.fca.32.insert, <2 x double>* %v1GMP231.fca.33.load, 33
  %v1GMP231.fca.34.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.34.gep
  %v1GMP231.fca.34.insert = insertvalue %gemPrm %v1GMP231.fca.33.insert, <2 x double>* %v1GMP231.fca.34.load, 34
  %v1GMP231.fca.35.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.35.gep
  %v1GMP231.fca.35.insert = insertvalue %gemPrm %v1GMP231.fca.34.insert, <2 x double>* %v1GMP231.fca.35.load, 35
  %v1GMP231.fca.36.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.36.gep
  %v1GMP231.fca.36.insert = insertvalue %gemPrm %v1GMP231.fca.35.insert, <2 x double>* %v1GMP231.fca.36.load, 36
  %v1GMP231.fca.37.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.37.gep
  %v1GMP231.fca.37.insert = insertvalue %gemPrm %v1GMP231.fca.36.insert, <2 x double>* %v1GMP231.fca.37.load, 37
  %v1GMP231.fca.38.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.38.gep
  %v1GMP231.fca.38.insert = insertvalue %gemPrm %v1GMP231.fca.37.insert, <2 x double>* %v1GMP231.fca.38.load, 38
  %v1GMP231.fca.39.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.39.gep
  %v1GMP231.fca.39.insert = insertvalue %gemPrm %v1GMP231.fca.38.insert, <2 x double>* %v1GMP231.fca.39.load, 39
  %v1GMP231.fca.40.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.40.gep
  %v1GMP231.fca.40.insert = insertvalue %gemPrm %v1GMP231.fca.39.insert, <2 x double>* %v1GMP231.fca.40.load, 40
  %v1GMP231.fca.41.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.41.gep
  %v1GMP231.fca.41.insert = insertvalue %gemPrm %v1GMP231.fca.40.insert, <2 x double>* %v1GMP231.fca.41.load, 41
  %v1GMP231.fca.42.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.42.gep
  %v1GMP231.fca.42.insert = insertvalue %gemPrm %v1GMP231.fca.41.insert, <4 x double>* %v1GMP231.fca.42.load, 42
  %v1GMP231.fca.43.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.43.gep
  %v1GMP231.fca.43.insert = insertvalue %gemPrm %v1GMP231.fca.42.insert, <4 x double>* %v1GMP231.fca.43.load, 43
  %v1GMP231.fca.44.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.44.gep
  %v1GMP231.fca.44.insert = insertvalue %gemPrm %v1GMP231.fca.43.insert, <4 x double>* %v1GMP231.fca.44.load, 44
  %v1GMP231.fca.45.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.45.gep
  %v1GMP231.fca.45.insert = insertvalue %gemPrm %v1GMP231.fca.44.insert, <4 x double>* %v1GMP231.fca.45.load, 45
  %v1GMP231.fca.46.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.46.gep
  %v1GMP231.fca.46.insert = insertvalue %gemPrm %v1GMP231.fca.45.insert, <4 x double>* %v1GMP231.fca.46.load, 46
  %v1GMP231.fca.47.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.47.gep
  %v1GMP231.fca.47.insert = insertvalue %gemPrm %v1GMP231.fca.46.insert, <4 x double>* %v1GMP231.fca.47.load, 47
  %v1GMP231.fca.48.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.48.gep
  %v1GMP231.fca.48.insert = insertvalue %gemPrm %v1GMP231.fca.47.insert, <4 x double>* %v1GMP231.fca.48.load, 48
  %v1GMP231.fca.49.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.49.gep
  %v1GMP231.fca.49.insert = insertvalue %gemPrm %v1GMP231.fca.48.insert, <4 x double>* %v1GMP231.fca.49.load, 49
  %v1GMP231.fca.50.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.50.gep
  %v1GMP231.fca.50.insert = insertvalue %gemPrm %v1GMP231.fca.49.insert, <4 x double>* %v1GMP231.fca.50.load, 50
  %v1GMP231.fca.51.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.51.gep
  %v1GMP231.fca.51.insert = insertvalue %gemPrm %v1GMP231.fca.50.insert, <3 x double>* %v1GMP231.fca.51.load, 51
  %v1GMP231.fca.52.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.52.gep
  %v1GMP231.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 0
  store double* %v1GMP231.fca.0.load, double** %v1GMP231.fca.0.gep
  %v1GMP231.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 1
  store double* %v1GMP231.fca.1.load, double** %v1GMP231.fca.1.gep
  %v1GMP231.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 2
  store double* %v1GMP231.fca.2.load, double** %v1GMP231.fca.2.gep
  %v1GMP231.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 3
  store double* %v1GMP231.fca.3.load, double** %v1GMP231.fca.3.gep
  %v1GMP231.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 4
  store double* %v1GMP231.fca.4.load, double** %v1GMP231.fca.4.gep
  %v1GMP231.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 5
  store double* %v1GMP231.fca.5.load, double** %v1GMP231.fca.5.gep
  %v1GMP231.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 6
  store <3 x double>* %v1GMP231.fca.6.load, <3 x double>** %v1GMP231.fca.6.gep
  %v1GMP231.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 7
  store <3 x double>* %v1GMP231.fca.7.load, <3 x double>** %v1GMP231.fca.7.gep
  %v1GMP231.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 8
  store <3 x double>* %v1GMP231.fca.8.load, <3 x double>** %v1GMP231.fca.8.gep
  %v1GMP231.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 9
  store <3 x double>* %v1GMP231.fca.9.load, <3 x double>** %v1GMP231.fca.9.gep
  %v1GMP231.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 10
  store <3 x double>* %v1GMP231.fca.10.load, <3 x double>** %v1GMP231.fca.10.gep
  %v1GMP231.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 11
  store <3 x double>* %v1GMP231.fca.11.load, <3 x double>** %v1GMP231.fca.11.gep
  %v1GMP231.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 12
  store <3 x double>* %v1GMP231.fca.12.load, <3 x double>** %v1GMP231.fca.12.gep
  %v1GMP231.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 13
  store <2 x double>* %v1GMP231.fca.13.load, <2 x double>** %v1GMP231.fca.13.gep
  %v1GMP231.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 14
  store <2 x double>* %v1GMP231.fca.14.load, <2 x double>** %v1GMP231.fca.14.gep
  %v1GMP231.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 15
  store <2 x double>* %v1GMP231.fca.15.load, <2 x double>** %v1GMP231.fca.15.gep
  %v1GMP231.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 16
  store <2 x double>* %v1GMP231.fca.16.load, <2 x double>** %v1GMP231.fca.16.gep
  %v1GMP231.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 17
  store <2 x double>* %v1GMP231.fca.17.load, <2 x double>** %v1GMP231.fca.17.gep
  %v1GMP231.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 18
  store <2 x double>* %v1GMP231.fca.18.load, <2 x double>** %v1GMP231.fca.18.gep
  %v1GMP231.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 19
  store <2 x double>* %v1GMP231.fca.19.load, <2 x double>** %v1GMP231.fca.19.gep
  %v1GMP231.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 20
  store <2 x double>* %v1GMP231.fca.20.load, <2 x double>** %v1GMP231.fca.20.gep
  %v1GMP231.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 21
  store <2 x double>* %v1GMP231.fca.21.load, <2 x double>** %v1GMP231.fca.21.gep
  %v1GMP231.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 22
  store <2 x double>* %v1GMP231.fca.22.load, <2 x double>** %v1GMP231.fca.22.gep
  %v1GMP231.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 23
  store <2 x double>* %v1GMP231.fca.23.load, <2 x double>** %v1GMP231.fca.23.gep
  %v1GMP231.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 24
  store <2 x double>* %v1GMP231.fca.24.load, <2 x double>** %v1GMP231.fca.24.gep
  %v1GMP231.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 25
  store <2 x double>* %v1GMP231.fca.25.load, <2 x double>** %v1GMP231.fca.25.gep
  %v1GMP231.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 26
  store <2 x double>* %v1GMP231.fca.26.load, <2 x double>** %v1GMP231.fca.26.gep
  %v1GMP231.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 27
  store <2 x double>* %v1GMP231.fca.27.load, <2 x double>** %v1GMP231.fca.27.gep
  %v1GMP231.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 28
  store <2 x double>* %v1GMP231.fca.28.load, <2 x double>** %v1GMP231.fca.28.gep
  %v1GMP231.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 29
  store <2 x double>* %v1GMP231.fca.29.load, <2 x double>** %v1GMP231.fca.29.gep
  %v1GMP231.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 30
  store <2 x double>* %v1GMP231.fca.30.load, <2 x double>** %v1GMP231.fca.30.gep
  %v1GMP231.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 31
  store <2 x double>* %v1GMP231.fca.31.load, <2 x double>** %v1GMP231.fca.31.gep
  %v1GMP231.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 32
  store <2 x double>* %v1GMP231.fca.32.load, <2 x double>** %v1GMP231.fca.32.gep
  %v1GMP231.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 33
  store <2 x double>* %v1GMP231.fca.33.load, <2 x double>** %v1GMP231.fca.33.gep
  %v1GMP231.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 34
  store <2 x double>* %v1GMP231.fca.34.load, <2 x double>** %v1GMP231.fca.34.gep
  %v1GMP231.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 35
  store <2 x double>* %v1GMP231.fca.35.load, <2 x double>** %v1GMP231.fca.35.gep
  %v1GMP231.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 36
  store <2 x double>* %v1GMP231.fca.36.load, <2 x double>** %v1GMP231.fca.36.gep
  %v1GMP231.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 37
  store <2 x double>* %v1GMP231.fca.37.load, <2 x double>** %v1GMP231.fca.37.gep
  %v1GMP231.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 38
  store <2 x double>* %v1GMP231.fca.38.load, <2 x double>** %v1GMP231.fca.38.gep
  %v1GMP231.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 39
  store <2 x double>* %v1GMP231.fca.39.load, <2 x double>** %v1GMP231.fca.39.gep
  %v1GMP231.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 40
  store <2 x double>* %v1GMP231.fca.40.load, <2 x double>** %v1GMP231.fca.40.gep
  %v1GMP231.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 41
  store <2 x double>* %v1GMP231.fca.41.load, <2 x double>** %v1GMP231.fca.41.gep
  %v1GMP231.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 42
  store <4 x double>* %v1GMP231.fca.42.load, <4 x double>** %v1GMP231.fca.42.gep
  %v1GMP231.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 43
  store <4 x double>* %v1GMP231.fca.43.load, <4 x double>** %v1GMP231.fca.43.gep
  %v1GMP231.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 44
  store <4 x double>* %v1GMP231.fca.44.load, <4 x double>** %v1GMP231.fca.44.gep
  %v1GMP231.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 45
  store <4 x double>* %v1GMP231.fca.45.load, <4 x double>** %v1GMP231.fca.45.gep
  %v1GMP231.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 46
  store <4 x double>* %v1GMP231.fca.46.load, <4 x double>** %v1GMP231.fca.46.gep
  %v1GMP231.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 47
  store <4 x double>* %v1GMP231.fca.47.load, <4 x double>** %v1GMP231.fca.47.gep
  %v1GMP231.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 48
  store <4 x double>* %v1GMP231.fca.48.load, <4 x double>** %v1GMP231.fca.48.gep
  %v1GMP231.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 49
  store <4 x double>* %v1GMP231.fca.49.load, <4 x double>** %v1GMP231.fca.49.gep
  %v1GMP231.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 50
  store <4 x double>* %v1GMP231.fca.50.load, <4 x double>** %v1GMP231.fca.50.gep
  %v1GMP231.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 51
  store <3 x double>* %v1GMP231.fca.51.load, <3 x double>** %v1GMP231.fca.51.gep
  %v1GMP231.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %61, i32 0, i32 52
  store <2 x double>* %v1GMP231.fca.52.load, <2 x double>** %v1GMP231.fca.52.gep
  store i64 0, i64* %62
  store i64 0, i64* %63
  %GEM232.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM232.fca.0.insert = insertvalue %gem undef, i64* %GEM232.fca.0.load, 0
  %GEM232.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM232.fca.1.insert = insertvalue %gem %GEM232.fca.0.insert, i64* %GEM232.fca.1.load, 1
  %GEM232.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM232.fca.2.insert = insertvalue %gem %GEM232.fca.1.insert, i64* %GEM232.fca.2.load, 2
  %GEM232.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM232.fca.3.insert = insertvalue %gem %GEM232.fca.2.insert, i64* %GEM232.fca.3.load, 3
  %GEM232.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM232.fca.4.insert = insertvalue %gem %GEM232.fca.3.insert, i64* %GEM232.fca.4.load, 4
  %GEM232.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM232.fca.5.insert = insertvalue %gem %GEM232.fca.4.insert, i64 %GEM232.fca.5.load, 5
  %GEM232.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM232.fca.6.insert = insertvalue %gem %GEM232.fca.5.insert, i64 %GEM232.fca.6.load, 6
  %GEM232.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM232.fca.7.insert = insertvalue %gem %GEM232.fca.6.insert, i64 %GEM232.fca.7.load, 7
  %GEM232.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM232.fca.8.insert = insertvalue %gem %GEM232.fca.7.insert, i64 %GEM232.fca.8.load, 8
  %GEM232.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM232.fca.9.insert = insertvalue %gem %GEM232.fca.8.insert, double* %GEM232.fca.9.load, 9
  %GEM232.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM232.fca.10.insert = insertvalue %gem %GEM232.fca.9.insert, double* %GEM232.fca.10.load, 10
  %GEM232.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM232.fca.11.insert = insertvalue %gem %GEM232.fca.10.insert, double* %GEM232.fca.11.load, 11
  %GEM232.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM232.fca.12.insert = insertvalue %gem %GEM232.fca.11.insert, double* %GEM232.fca.12.load, 12
  %GEM232.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM232.fca.13.insert = insertvalue %gem %GEM232.fca.12.insert, double* %GEM232.fca.13.load, 13
  %GEM232.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM232.fca.14.insert = insertvalue %gem %GEM232.fca.13.insert, double* %GEM232.fca.14.load, 14
  %GEM232.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM232.fca.15.insert = insertvalue %gem %GEM232.fca.14.insert, double* %GEM232.fca.15.load, 15
  %GEM232.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM232.fca.16.insert = insertvalue %gem %GEM232.fca.15.insert, double %GEM232.fca.16.load, 16
  %GEM232.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM232.fca.17.insert = insertvalue %gem %GEM232.fca.16.insert, double %GEM232.fca.17.load, 17
  %GEM232.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM232.fca.18.insert = insertvalue %gem %GEM232.fca.17.insert, double %GEM232.fca.18.load, 18
  %GEM232.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM232.fca.19.insert = insertvalue %gem %GEM232.fca.18.insert, double %GEM232.fca.19.load, 19
  %GEM232.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM232.fca.20.insert = insertvalue %gem %GEM232.fca.19.insert, double %GEM232.fca.20.load, 20
  %GEM232.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM232.fca.21.insert = insertvalue %gem %GEM232.fca.20.insert, <2 x double> %GEM232.fca.21.load, 21
  %GEM232.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM232.fca.22.insert = insertvalue %gem %GEM232.fca.21.insert, <2 x double>* %GEM232.fca.22.load, 22
  %GEM232.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM232.fca.23.insert = insertvalue %gem %GEM232.fca.22.insert, <2 x double>* %GEM232.fca.23.load, 23
  %GEM232.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM232.fca.24.insert = insertvalue %gem %GEM232.fca.23.insert, <2 x double>* %GEM232.fca.24.load, 24
  %GEM232.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM232.fca.25.insert = insertvalue %gem %GEM232.fca.24.insert, <2 x double>* %GEM232.fca.25.load, 25
  %GEM232.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM232.fca.26.insert = insertvalue %gem %GEM232.fca.25.insert, <2 x double>* %GEM232.fca.26.load, 26
  %GEM232.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM232.fca.27.insert = insertvalue %gem %GEM232.fca.26.insert, <2 x double>* %GEM232.fca.27.load, 27
  %GEM232.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM232.fca.28.insert = insertvalue %gem %GEM232.fca.27.insert, <2 x double> %GEM232.fca.28.load, 28
  %GEM232.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM232.fca.29.insert = insertvalue %gem %GEM232.fca.28.insert, <2 x double> %GEM232.fca.29.load, 29
  %GEM232.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM232.fca.30.insert = insertvalue %gem %GEM232.fca.29.insert, <2 x double> %GEM232.fca.30.load, 30
  %GEM232.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM232.fca.31.insert = insertvalue %gem %GEM232.fca.30.insert, <2 x double> %GEM232.fca.31.load, 31
  %GEM232.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM232.fca.32.insert = insertvalue %gem %GEM232.fca.31.insert, <2 x double> %GEM232.fca.32.load, 32
  %GEM232.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM232.fca.33.insert = insertvalue %gem %GEM232.fca.32.insert, <2 x double> %GEM232.fca.33.load, 33
  %GEM232.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64 %GEM232.fca.6.load, i64* %64
  %__mem233 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem233, <2 x double>* %65
  %GEM234.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM234.fca.0.insert = insertvalue %gem undef, i64* %GEM234.fca.0.load, 0
  %GEM234.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM234.fca.1.insert = insertvalue %gem %GEM234.fca.0.insert, i64* %GEM234.fca.1.load, 1
  %GEM234.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM234.fca.2.insert = insertvalue %gem %GEM234.fca.1.insert, i64* %GEM234.fca.2.load, 2
  %GEM234.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM234.fca.3.insert = insertvalue %gem %GEM234.fca.2.insert, i64* %GEM234.fca.3.load, 3
  %GEM234.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM234.fca.4.insert = insertvalue %gem %GEM234.fca.3.insert, i64* %GEM234.fca.4.load, 4
  %GEM234.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM234.fca.5.insert = insertvalue %gem %GEM234.fca.4.insert, i64 %GEM234.fca.5.load, 5
  %GEM234.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM234.fca.6.insert = insertvalue %gem %GEM234.fca.5.insert, i64 %GEM234.fca.6.load, 6
  %GEM234.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM234.fca.7.insert = insertvalue %gem %GEM234.fca.6.insert, i64 %GEM234.fca.7.load, 7
  %GEM234.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM234.fca.8.insert = insertvalue %gem %GEM234.fca.7.insert, i64 %GEM234.fca.8.load, 8
  %GEM234.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM234.fca.9.insert = insertvalue %gem %GEM234.fca.8.insert, double* %GEM234.fca.9.load, 9
  %GEM234.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM234.fca.10.insert = insertvalue %gem %GEM234.fca.9.insert, double* %GEM234.fca.10.load, 10
  %GEM234.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM234.fca.11.insert = insertvalue %gem %GEM234.fca.10.insert, double* %GEM234.fca.11.load, 11
  %GEM234.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM234.fca.12.insert = insertvalue %gem %GEM234.fca.11.insert, double* %GEM234.fca.12.load, 12
  %GEM234.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM234.fca.13.insert = insertvalue %gem %GEM234.fca.12.insert, double* %GEM234.fca.13.load, 13
  %GEM234.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM234.fca.14.insert = insertvalue %gem %GEM234.fca.13.insert, double* %GEM234.fca.14.load, 14
  %GEM234.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM234.fca.15.insert = insertvalue %gem %GEM234.fca.14.insert, double* %GEM234.fca.15.load, 15
  %GEM234.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM234.fca.16.insert = insertvalue %gem %GEM234.fca.15.insert, double %GEM234.fca.16.load, 16
  %GEM234.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM234.fca.17.insert = insertvalue %gem %GEM234.fca.16.insert, double %GEM234.fca.17.load, 17
  %GEM234.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM234.fca.18.insert = insertvalue %gem %GEM234.fca.17.insert, double %GEM234.fca.18.load, 18
  %GEM234.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM234.fca.19.insert = insertvalue %gem %GEM234.fca.18.insert, double %GEM234.fca.19.load, 19
  %GEM234.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM234.fca.20.insert = insertvalue %gem %GEM234.fca.19.insert, double %GEM234.fca.20.load, 20
  %GEM234.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM234.fca.21.insert = insertvalue %gem %GEM234.fca.20.insert, <2 x double> %GEM234.fca.21.load, 21
  %GEM234.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM234.fca.22.insert = insertvalue %gem %GEM234.fca.21.insert, <2 x double>* %GEM234.fca.22.load, 22
  %GEM234.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM234.fca.23.insert = insertvalue %gem %GEM234.fca.22.insert, <2 x double>* %GEM234.fca.23.load, 23
  %GEM234.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM234.fca.24.insert = insertvalue %gem %GEM234.fca.23.insert, <2 x double>* %GEM234.fca.24.load, 24
  %GEM234.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM234.fca.25.insert = insertvalue %gem %GEM234.fca.24.insert, <2 x double>* %GEM234.fca.25.load, 25
  %GEM234.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM234.fca.26.insert = insertvalue %gem %GEM234.fca.25.insert, <2 x double>* %GEM234.fca.26.load, 26
  %GEM234.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM234.fca.27.insert = insertvalue %gem %GEM234.fca.26.insert, <2 x double>* %GEM234.fca.27.load, 27
  %GEM234.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM234.fca.28.insert = insertvalue %gem %GEM234.fca.27.insert, <2 x double> %GEM234.fca.28.load, 28
  %GEM234.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM234.fca.29.insert = insertvalue %gem %GEM234.fca.28.insert, <2 x double> %GEM234.fca.29.load, 29
  %GEM234.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM234.fca.30.insert = insertvalue %gem %GEM234.fca.29.insert, <2 x double> %GEM234.fca.30.load, 30
  %GEM234.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM234.fca.31.insert = insertvalue %gem %GEM234.fca.30.insert, <2 x double> %GEM234.fca.31.load, 31
  %GEM234.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM234.fca.32.insert = insertvalue %gem %GEM234.fca.31.insert, <2 x double> %GEM234.fca.32.load, 32
  %GEM234.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM234.fca.33.insert = insertvalue %gem %GEM234.fca.32.insert, <2 x double> %GEM234.fca.33.load, 33
  %GEM234.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM234.fca.28.load, <2 x double>* %66
  %GEM236.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM236.fca.0.insert = insertvalue %gem undef, i64* %GEM236.fca.0.load, 0
  %GEM236.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM236.fca.1.insert = insertvalue %gem %GEM236.fca.0.insert, i64* %GEM236.fca.1.load, 1
  %GEM236.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM236.fca.2.insert = insertvalue %gem %GEM236.fca.1.insert, i64* %GEM236.fca.2.load, 2
  %GEM236.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM236.fca.3.insert = insertvalue %gem %GEM236.fca.2.insert, i64* %GEM236.fca.3.load, 3
  %GEM236.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM236.fca.4.insert = insertvalue %gem %GEM236.fca.3.insert, i64* %GEM236.fca.4.load, 4
  %GEM236.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM236.fca.5.insert = insertvalue %gem %GEM236.fca.4.insert, i64 %GEM236.fca.5.load, 5
  %GEM236.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM236.fca.6.insert = insertvalue %gem %GEM236.fca.5.insert, i64 %GEM236.fca.6.load, 6
  %GEM236.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM236.fca.7.insert = insertvalue %gem %GEM236.fca.6.insert, i64 %GEM236.fca.7.load, 7
  %GEM236.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM236.fca.8.insert = insertvalue %gem %GEM236.fca.7.insert, i64 %GEM236.fca.8.load, 8
  %GEM236.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM236.fca.9.insert = insertvalue %gem %GEM236.fca.8.insert, double* %GEM236.fca.9.load, 9
  %GEM236.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM236.fca.10.insert = insertvalue %gem %GEM236.fca.9.insert, double* %GEM236.fca.10.load, 10
  %GEM236.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM236.fca.11.insert = insertvalue %gem %GEM236.fca.10.insert, double* %GEM236.fca.11.load, 11
  %GEM236.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM236.fca.12.insert = insertvalue %gem %GEM236.fca.11.insert, double* %GEM236.fca.12.load, 12
  %GEM236.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM236.fca.13.insert = insertvalue %gem %GEM236.fca.12.insert, double* %GEM236.fca.13.load, 13
  %GEM236.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM236.fca.14.insert = insertvalue %gem %GEM236.fca.13.insert, double* %GEM236.fca.14.load, 14
  %GEM236.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM236.fca.15.insert = insertvalue %gem %GEM236.fca.14.insert, double* %GEM236.fca.15.load, 15
  %GEM236.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM236.fca.16.insert = insertvalue %gem %GEM236.fca.15.insert, double %GEM236.fca.16.load, 16
  %GEM236.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM236.fca.17.insert = insertvalue %gem %GEM236.fca.16.insert, double %GEM236.fca.17.load, 17
  %GEM236.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM236.fca.18.insert = insertvalue %gem %GEM236.fca.17.insert, double %GEM236.fca.18.load, 18
  %GEM236.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM236.fca.19.insert = insertvalue %gem %GEM236.fca.18.insert, double %GEM236.fca.19.load, 19
  %GEM236.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM236.fca.20.insert = insertvalue %gem %GEM236.fca.19.insert, double %GEM236.fca.20.load, 20
  %GEM236.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM236.fca.21.insert = insertvalue %gem %GEM236.fca.20.insert, <2 x double> %GEM236.fca.21.load, 21
  %GEM236.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM236.fca.22.insert = insertvalue %gem %GEM236.fca.21.insert, <2 x double>* %GEM236.fca.22.load, 22
  %GEM236.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM236.fca.23.insert = insertvalue %gem %GEM236.fca.22.insert, <2 x double>* %GEM236.fca.23.load, 23
  %GEM236.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM236.fca.24.insert = insertvalue %gem %GEM236.fca.23.insert, <2 x double>* %GEM236.fca.24.load, 24
  %GEM236.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM236.fca.25.insert = insertvalue %gem %GEM236.fca.24.insert, <2 x double>* %GEM236.fca.25.load, 25
  %GEM236.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM236.fca.26.insert = insertvalue %gem %GEM236.fca.25.insert, <2 x double>* %GEM236.fca.26.load, 26
  %GEM236.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM236.fca.27.insert = insertvalue %gem %GEM236.fca.26.insert, <2 x double>* %GEM236.fca.27.load, 27
  %GEM236.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM236.fca.28.insert = insertvalue %gem %GEM236.fca.27.insert, <2 x double> %GEM236.fca.28.load, 28
  %GEM236.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM236.fca.29.insert = insertvalue %gem %GEM236.fca.28.insert, <2 x double> %GEM236.fca.29.load, 29
  %GEM236.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM236.fca.30.insert = insertvalue %gem %GEM236.fca.29.insert, <2 x double> %GEM236.fca.30.load, 30
  %GEM236.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM236.fca.31.insert = insertvalue %gem %GEM236.fca.30.insert, <2 x double> %GEM236.fca.31.load, 31
  %GEM236.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM236.fca.32.insert = insertvalue %gem %GEM236.fca.31.insert, <2 x double> %GEM236.fca.32.load, 32
  %GEM236.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM236.fca.33.insert = insertvalue %gem %GEM236.fca.32.insert, <2 x double> %GEM236.fca.33.load, 33
  %GEM236.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM236.fca.29.load, <2 x double>* %67
  %GEM238.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM238.fca.0.insert = insertvalue %gem undef, i64* %GEM238.fca.0.load, 0
  %GEM238.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM238.fca.1.insert = insertvalue %gem %GEM238.fca.0.insert, i64* %GEM238.fca.1.load, 1
  %GEM238.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM238.fca.2.insert = insertvalue %gem %GEM238.fca.1.insert, i64* %GEM238.fca.2.load, 2
  %GEM238.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM238.fca.3.insert = insertvalue %gem %GEM238.fca.2.insert, i64* %GEM238.fca.3.load, 3
  %GEM238.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM238.fca.4.insert = insertvalue %gem %GEM238.fca.3.insert, i64* %GEM238.fca.4.load, 4
  %GEM238.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM238.fca.5.insert = insertvalue %gem %GEM238.fca.4.insert, i64 %GEM238.fca.5.load, 5
  %GEM238.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM238.fca.6.insert = insertvalue %gem %GEM238.fca.5.insert, i64 %GEM238.fca.6.load, 6
  %GEM238.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM238.fca.7.insert = insertvalue %gem %GEM238.fca.6.insert, i64 %GEM238.fca.7.load, 7
  %GEM238.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM238.fca.8.insert = insertvalue %gem %GEM238.fca.7.insert, i64 %GEM238.fca.8.load, 8
  %GEM238.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM238.fca.9.insert = insertvalue %gem %GEM238.fca.8.insert, double* %GEM238.fca.9.load, 9
  %GEM238.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM238.fca.10.insert = insertvalue %gem %GEM238.fca.9.insert, double* %GEM238.fca.10.load, 10
  %GEM238.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM238.fca.11.insert = insertvalue %gem %GEM238.fca.10.insert, double* %GEM238.fca.11.load, 11
  %GEM238.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM238.fca.12.insert = insertvalue %gem %GEM238.fca.11.insert, double* %GEM238.fca.12.load, 12
  %GEM238.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM238.fca.13.insert = insertvalue %gem %GEM238.fca.12.insert, double* %GEM238.fca.13.load, 13
  %GEM238.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM238.fca.14.insert = insertvalue %gem %GEM238.fca.13.insert, double* %GEM238.fca.14.load, 14
  %GEM238.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM238.fca.15.insert = insertvalue %gem %GEM238.fca.14.insert, double* %GEM238.fca.15.load, 15
  %GEM238.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM238.fca.16.insert = insertvalue %gem %GEM238.fca.15.insert, double %GEM238.fca.16.load, 16
  %GEM238.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM238.fca.17.insert = insertvalue %gem %GEM238.fca.16.insert, double %GEM238.fca.17.load, 17
  %GEM238.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM238.fca.18.insert = insertvalue %gem %GEM238.fca.17.insert, double %GEM238.fca.18.load, 18
  %GEM238.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM238.fca.19.insert = insertvalue %gem %GEM238.fca.18.insert, double %GEM238.fca.19.load, 19
  %GEM238.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM238.fca.20.insert = insertvalue %gem %GEM238.fca.19.insert, double %GEM238.fca.20.load, 20
  %GEM238.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM238.fca.21.insert = insertvalue %gem %GEM238.fca.20.insert, <2 x double> %GEM238.fca.21.load, 21
  %GEM238.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM238.fca.22.insert = insertvalue %gem %GEM238.fca.21.insert, <2 x double>* %GEM238.fca.22.load, 22
  %GEM238.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM238.fca.23.insert = insertvalue %gem %GEM238.fca.22.insert, <2 x double>* %GEM238.fca.23.load, 23
  %GEM238.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM238.fca.24.insert = insertvalue %gem %GEM238.fca.23.insert, <2 x double>* %GEM238.fca.24.load, 24
  %GEM238.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM238.fca.25.insert = insertvalue %gem %GEM238.fca.24.insert, <2 x double>* %GEM238.fca.25.load, 25
  %GEM238.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM238.fca.26.insert = insertvalue %gem %GEM238.fca.25.insert, <2 x double>* %GEM238.fca.26.load, 26
  %GEM238.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM238.fca.27.insert = insertvalue %gem %GEM238.fca.26.insert, <2 x double>* %GEM238.fca.27.load, 27
  %GEM238.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM238.fca.28.insert = insertvalue %gem %GEM238.fca.27.insert, <2 x double> %GEM238.fca.28.load, 28
  %GEM238.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM238.fca.29.insert = insertvalue %gem %GEM238.fca.28.insert, <2 x double> %GEM238.fca.29.load, 29
  %GEM238.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM238.fca.30.insert = insertvalue %gem %GEM238.fca.29.insert, <2 x double> %GEM238.fca.30.load, 30
  %GEM238.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM238.fca.31.insert = insertvalue %gem %GEM238.fca.30.insert, <2 x double> %GEM238.fca.31.load, 31
  %GEM238.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM238.fca.32.insert = insertvalue %gem %GEM238.fca.31.insert, <2 x double> %GEM238.fca.32.load, 32
  %GEM238.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM238.fca.33.insert = insertvalue %gem %GEM238.fca.32.insert, <2 x double> %GEM238.fca.33.load, 33
  %GEM238.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM238.fca.30.load, <2 x double>* %68
  %GEM240.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM240.fca.0.insert = insertvalue %gem undef, i64* %GEM240.fca.0.load, 0
  %GEM240.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM240.fca.1.insert = insertvalue %gem %GEM240.fca.0.insert, i64* %GEM240.fca.1.load, 1
  %GEM240.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM240.fca.2.insert = insertvalue %gem %GEM240.fca.1.insert, i64* %GEM240.fca.2.load, 2
  %GEM240.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM240.fca.3.insert = insertvalue %gem %GEM240.fca.2.insert, i64* %GEM240.fca.3.load, 3
  %GEM240.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM240.fca.4.insert = insertvalue %gem %GEM240.fca.3.insert, i64* %GEM240.fca.4.load, 4
  %GEM240.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM240.fca.5.insert = insertvalue %gem %GEM240.fca.4.insert, i64 %GEM240.fca.5.load, 5
  %GEM240.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM240.fca.6.insert = insertvalue %gem %GEM240.fca.5.insert, i64 %GEM240.fca.6.load, 6
  %GEM240.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM240.fca.7.insert = insertvalue %gem %GEM240.fca.6.insert, i64 %GEM240.fca.7.load, 7
  %GEM240.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM240.fca.8.insert = insertvalue %gem %GEM240.fca.7.insert, i64 %GEM240.fca.8.load, 8
  %GEM240.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM240.fca.9.insert = insertvalue %gem %GEM240.fca.8.insert, double* %GEM240.fca.9.load, 9
  %GEM240.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM240.fca.10.insert = insertvalue %gem %GEM240.fca.9.insert, double* %GEM240.fca.10.load, 10
  %GEM240.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM240.fca.11.insert = insertvalue %gem %GEM240.fca.10.insert, double* %GEM240.fca.11.load, 11
  %GEM240.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM240.fca.12.insert = insertvalue %gem %GEM240.fca.11.insert, double* %GEM240.fca.12.load, 12
  %GEM240.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM240.fca.13.insert = insertvalue %gem %GEM240.fca.12.insert, double* %GEM240.fca.13.load, 13
  %GEM240.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM240.fca.14.insert = insertvalue %gem %GEM240.fca.13.insert, double* %GEM240.fca.14.load, 14
  %GEM240.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM240.fca.15.insert = insertvalue %gem %GEM240.fca.14.insert, double* %GEM240.fca.15.load, 15
  %GEM240.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM240.fca.16.insert = insertvalue %gem %GEM240.fca.15.insert, double %GEM240.fca.16.load, 16
  %GEM240.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM240.fca.17.insert = insertvalue %gem %GEM240.fca.16.insert, double %GEM240.fca.17.load, 17
  %GEM240.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM240.fca.18.insert = insertvalue %gem %GEM240.fca.17.insert, double %GEM240.fca.18.load, 18
  %GEM240.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM240.fca.19.insert = insertvalue %gem %GEM240.fca.18.insert, double %GEM240.fca.19.load, 19
  %GEM240.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM240.fca.20.insert = insertvalue %gem %GEM240.fca.19.insert, double %GEM240.fca.20.load, 20
  %GEM240.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM240.fca.21.insert = insertvalue %gem %GEM240.fca.20.insert, <2 x double> %GEM240.fca.21.load, 21
  %GEM240.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM240.fca.22.insert = insertvalue %gem %GEM240.fca.21.insert, <2 x double>* %GEM240.fca.22.load, 22
  %GEM240.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM240.fca.23.insert = insertvalue %gem %GEM240.fca.22.insert, <2 x double>* %GEM240.fca.23.load, 23
  %GEM240.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM240.fca.24.insert = insertvalue %gem %GEM240.fca.23.insert, <2 x double>* %GEM240.fca.24.load, 24
  %GEM240.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM240.fca.25.insert = insertvalue %gem %GEM240.fca.24.insert, <2 x double>* %GEM240.fca.25.load, 25
  %GEM240.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM240.fca.26.insert = insertvalue %gem %GEM240.fca.25.insert, <2 x double>* %GEM240.fca.26.load, 26
  %GEM240.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM240.fca.27.insert = insertvalue %gem %GEM240.fca.26.insert, <2 x double>* %GEM240.fca.27.load, 27
  %GEM240.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM240.fca.28.insert = insertvalue %gem %GEM240.fca.27.insert, <2 x double> %GEM240.fca.28.load, 28
  %GEM240.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM240.fca.29.insert = insertvalue %gem %GEM240.fca.28.insert, <2 x double> %GEM240.fca.29.load, 29
  %GEM240.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM240.fca.30.insert = insertvalue %gem %GEM240.fca.29.insert, <2 x double> %GEM240.fca.30.load, 30
  %GEM240.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM240.fca.31.insert = insertvalue %gem %GEM240.fca.30.insert, <2 x double> %GEM240.fca.31.load, 31
  %GEM240.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM240.fca.32.insert = insertvalue %gem %GEM240.fca.31.insert, <2 x double> %GEM240.fca.32.load, 32
  %GEM240.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM240.fca.33.insert = insertvalue %gem %GEM240.fca.32.insert, <2 x double> %GEM240.fca.33.load, 33
  %GEM240.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store double %GEM240.fca.17.load, double* %69
  %FLAME242 = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %61, i64* %62, i64* %63, i64* %64, <2 x double>* %65, <2 x double>* %66, <2 x double>* %67, <2 x double>* %68, double* %69)
  %output243 = call <2 x double> @"add@UU"(<2 x double> %__tmp230, <2 x double> %FLAME242)
  store <2 x double> %output243, <2 x double>* %__tmp
  br label %end229

end229:                                           ; preds = %true228, %end213
  %GEM244.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM244.fca.0.insert = insertvalue %gem undef, i64* %GEM244.fca.0.load, 0
  %GEM244.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM244.fca.1.insert = insertvalue %gem %GEM244.fca.0.insert, i64* %GEM244.fca.1.load, 1
  %GEM244.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM244.fca.2.insert = insertvalue %gem %GEM244.fca.1.insert, i64* %GEM244.fca.2.load, 2
  %GEM244.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM244.fca.3.insert = insertvalue %gem %GEM244.fca.2.insert, i64* %GEM244.fca.3.load, 3
  %GEM244.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM244.fca.4.insert = insertvalue %gem %GEM244.fca.3.insert, i64* %GEM244.fca.4.load, 4
  %GEM244.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM244.fca.5.insert = insertvalue %gem %GEM244.fca.4.insert, i64 %GEM244.fca.5.load, 5
  %GEM244.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM244.fca.6.insert = insertvalue %gem %GEM244.fca.5.insert, i64 %GEM244.fca.6.load, 6
  %GEM244.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM244.fca.7.insert = insertvalue %gem %GEM244.fca.6.insert, i64 %GEM244.fca.7.load, 7
  %GEM244.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM244.fca.8.insert = insertvalue %gem %GEM244.fca.7.insert, i64 %GEM244.fca.8.load, 8
  %GEM244.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM244.fca.9.insert = insertvalue %gem %GEM244.fca.8.insert, double* %GEM244.fca.9.load, 9
  %GEM244.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM244.fca.10.insert = insertvalue %gem %GEM244.fca.9.insert, double* %GEM244.fca.10.load, 10
  %GEM244.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM244.fca.11.insert = insertvalue %gem %GEM244.fca.10.insert, double* %GEM244.fca.11.load, 11
  %GEM244.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM244.fca.12.insert = insertvalue %gem %GEM244.fca.11.insert, double* %GEM244.fca.12.load, 12
  %GEM244.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM244.fca.13.insert = insertvalue %gem %GEM244.fca.12.insert, double* %GEM244.fca.13.load, 13
  %GEM244.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM244.fca.14.insert = insertvalue %gem %GEM244.fca.13.insert, double* %GEM244.fca.14.load, 14
  %GEM244.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM244.fca.15.insert = insertvalue %gem %GEM244.fca.14.insert, double* %GEM244.fca.15.load, 15
  %GEM244.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM244.fca.16.insert = insertvalue %gem %GEM244.fca.15.insert, double %GEM244.fca.16.load, 16
  %GEM244.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM244.fca.17.insert = insertvalue %gem %GEM244.fca.16.insert, double %GEM244.fca.17.load, 17
  %GEM244.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM244.fca.18.insert = insertvalue %gem %GEM244.fca.17.insert, double %GEM244.fca.18.load, 18
  %GEM244.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM244.fca.19.insert = insertvalue %gem %GEM244.fca.18.insert, double %GEM244.fca.19.load, 19
  %GEM244.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM244.fca.20.insert = insertvalue %gem %GEM244.fca.19.insert, double %GEM244.fca.20.load, 20
  %GEM244.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM244.fca.21.insert = insertvalue %gem %GEM244.fca.20.insert, <2 x double> %GEM244.fca.21.load, 21
  %GEM244.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM244.fca.22.insert = insertvalue %gem %GEM244.fca.21.insert, <2 x double>* %GEM244.fca.22.load, 22
  %GEM244.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM244.fca.23.insert = insertvalue %gem %GEM244.fca.22.insert, <2 x double>* %GEM244.fca.23.load, 23
  %GEM244.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM244.fca.24.insert = insertvalue %gem %GEM244.fca.23.insert, <2 x double>* %GEM244.fca.24.load, 24
  %GEM244.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM244.fca.25.insert = insertvalue %gem %GEM244.fca.24.insert, <2 x double>* %GEM244.fca.25.load, 25
  %GEM244.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM244.fca.26.insert = insertvalue %gem %GEM244.fca.25.insert, <2 x double>* %GEM244.fca.26.load, 26
  %GEM244.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM244.fca.27.insert = insertvalue %gem %GEM244.fca.26.insert, <2 x double>* %GEM244.fca.27.load, 27
  %GEM244.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM244.fca.28.insert = insertvalue %gem %GEM244.fca.27.insert, <2 x double> %GEM244.fca.28.load, 28
  %GEM244.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM244.fca.29.insert = insertvalue %gem %GEM244.fca.28.insert, <2 x double> %GEM244.fca.29.load, 29
  %GEM244.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM244.fca.30.insert = insertvalue %gem %GEM244.fca.29.insert, <2 x double> %GEM244.fca.30.load, 30
  %GEM244.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM244.fca.31.insert = insertvalue %gem %GEM244.fca.30.insert, <2 x double> %GEM244.fca.31.load, 31
  %GEM244.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM244.fca.32.insert = insertvalue %gem %GEM244.fca.31.insert, <2 x double> %GEM244.fca.32.load, 32
  %GEM244.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM244.fca.33.insert = insertvalue %gem %GEM244.fca.32.insert, <2 x double> %GEM244.fca.33.load, 33
  %GEM244.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return245 = fcmp one double %GEM244.fca.18.load, 0.000000e+00
  br i1 %return245, label %true247, label %end248

true247:                                          ; preds = %end229
  %__tmp249 = load <2 x double>, <2 x double>* %__tmp
  %v1GMP250.fca.0.load = load double*, double** %v1GMP5.fca.0.gep
  %v1GMP250.fca.0.insert = insertvalue %gemPrm undef, double* %v1GMP250.fca.0.load, 0
  %v1GMP250.fca.1.load = load double*, double** %v1GMP5.fca.1.gep
  %v1GMP250.fca.1.insert = insertvalue %gemPrm %v1GMP250.fca.0.insert, double* %v1GMP250.fca.1.load, 1
  %v1GMP250.fca.2.load = load double*, double** %v1GMP5.fca.2.gep
  %v1GMP250.fca.2.insert = insertvalue %gemPrm %v1GMP250.fca.1.insert, double* %v1GMP250.fca.2.load, 2
  %v1GMP250.fca.3.load = load double*, double** %v1GMP5.fca.3.gep
  %v1GMP250.fca.3.insert = insertvalue %gemPrm %v1GMP250.fca.2.insert, double* %v1GMP250.fca.3.load, 3
  %v1GMP250.fca.4.load = load double*, double** %v1GMP5.fca.4.gep
  %v1GMP250.fca.4.insert = insertvalue %gemPrm %v1GMP250.fca.3.insert, double* %v1GMP250.fca.4.load, 4
  %v1GMP250.fca.5.load = load double*, double** %v1GMP5.fca.5.gep
  %v1GMP250.fca.5.insert = insertvalue %gemPrm %v1GMP250.fca.4.insert, double* %v1GMP250.fca.5.load, 5
  %v1GMP250.fca.6.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.6.gep
  %v1GMP250.fca.6.insert = insertvalue %gemPrm %v1GMP250.fca.5.insert, <3 x double>* %v1GMP250.fca.6.load, 6
  %v1GMP250.fca.7.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.7.gep
  %v1GMP250.fca.7.insert = insertvalue %gemPrm %v1GMP250.fca.6.insert, <3 x double>* %v1GMP250.fca.7.load, 7
  %v1GMP250.fca.8.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.8.gep
  %v1GMP250.fca.8.insert = insertvalue %gemPrm %v1GMP250.fca.7.insert, <3 x double>* %v1GMP250.fca.8.load, 8
  %v1GMP250.fca.9.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.9.gep
  %v1GMP250.fca.9.insert = insertvalue %gemPrm %v1GMP250.fca.8.insert, <3 x double>* %v1GMP250.fca.9.load, 9
  %v1GMP250.fca.10.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.10.gep
  %v1GMP250.fca.10.insert = insertvalue %gemPrm %v1GMP250.fca.9.insert, <3 x double>* %v1GMP250.fca.10.load, 10
  %v1GMP250.fca.11.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.11.gep
  %v1GMP250.fca.11.insert = insertvalue %gemPrm %v1GMP250.fca.10.insert, <3 x double>* %v1GMP250.fca.11.load, 11
  %v1GMP250.fca.12.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.12.gep
  %v1GMP250.fca.12.insert = insertvalue %gemPrm %v1GMP250.fca.11.insert, <3 x double>* %v1GMP250.fca.12.load, 12
  %v1GMP250.fca.13.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.13.gep
  %v1GMP250.fca.13.insert = insertvalue %gemPrm %v1GMP250.fca.12.insert, <2 x double>* %v1GMP250.fca.13.load, 13
  %v1GMP250.fca.14.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.14.gep
  %v1GMP250.fca.14.insert = insertvalue %gemPrm %v1GMP250.fca.13.insert, <2 x double>* %v1GMP250.fca.14.load, 14
  %v1GMP250.fca.15.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.15.gep
  %v1GMP250.fca.15.insert = insertvalue %gemPrm %v1GMP250.fca.14.insert, <2 x double>* %v1GMP250.fca.15.load, 15
  %v1GMP250.fca.16.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.16.gep
  %v1GMP250.fca.16.insert = insertvalue %gemPrm %v1GMP250.fca.15.insert, <2 x double>* %v1GMP250.fca.16.load, 16
  %v1GMP250.fca.17.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.17.gep
  %v1GMP250.fca.17.insert = insertvalue %gemPrm %v1GMP250.fca.16.insert, <2 x double>* %v1GMP250.fca.17.load, 17
  %v1GMP250.fca.18.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.18.gep
  %v1GMP250.fca.18.insert = insertvalue %gemPrm %v1GMP250.fca.17.insert, <2 x double>* %v1GMP250.fca.18.load, 18
  %v1GMP250.fca.19.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.19.gep
  %v1GMP250.fca.19.insert = insertvalue %gemPrm %v1GMP250.fca.18.insert, <2 x double>* %v1GMP250.fca.19.load, 19
  %v1GMP250.fca.20.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.20.gep
  %v1GMP250.fca.20.insert = insertvalue %gemPrm %v1GMP250.fca.19.insert, <2 x double>* %v1GMP250.fca.20.load, 20
  %v1GMP250.fca.21.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.21.gep
  %v1GMP250.fca.21.insert = insertvalue %gemPrm %v1GMP250.fca.20.insert, <2 x double>* %v1GMP250.fca.21.load, 21
  %v1GMP250.fca.22.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.22.gep
  %v1GMP250.fca.22.insert = insertvalue %gemPrm %v1GMP250.fca.21.insert, <2 x double>* %v1GMP250.fca.22.load, 22
  %v1GMP250.fca.23.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.23.gep
  %v1GMP250.fca.23.insert = insertvalue %gemPrm %v1GMP250.fca.22.insert, <2 x double>* %v1GMP250.fca.23.load, 23
  %v1GMP250.fca.24.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.24.gep
  %v1GMP250.fca.24.insert = insertvalue %gemPrm %v1GMP250.fca.23.insert, <2 x double>* %v1GMP250.fca.24.load, 24
  %v1GMP250.fca.25.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.25.gep
  %v1GMP250.fca.25.insert = insertvalue %gemPrm %v1GMP250.fca.24.insert, <2 x double>* %v1GMP250.fca.25.load, 25
  %v1GMP250.fca.26.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.26.gep
  %v1GMP250.fca.26.insert = insertvalue %gemPrm %v1GMP250.fca.25.insert, <2 x double>* %v1GMP250.fca.26.load, 26
  %v1GMP250.fca.27.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.27.gep
  %v1GMP250.fca.27.insert = insertvalue %gemPrm %v1GMP250.fca.26.insert, <2 x double>* %v1GMP250.fca.27.load, 27
  %v1GMP250.fca.28.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.28.gep
  %v1GMP250.fca.28.insert = insertvalue %gemPrm %v1GMP250.fca.27.insert, <2 x double>* %v1GMP250.fca.28.load, 28
  %v1GMP250.fca.29.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.29.gep
  %v1GMP250.fca.29.insert = insertvalue %gemPrm %v1GMP250.fca.28.insert, <2 x double>* %v1GMP250.fca.29.load, 29
  %v1GMP250.fca.30.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.30.gep
  %v1GMP250.fca.30.insert = insertvalue %gemPrm %v1GMP250.fca.29.insert, <2 x double>* %v1GMP250.fca.30.load, 30
  %v1GMP250.fca.31.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.31.gep
  %v1GMP250.fca.31.insert = insertvalue %gemPrm %v1GMP250.fca.30.insert, <2 x double>* %v1GMP250.fca.31.load, 31
  %v1GMP250.fca.32.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.32.gep
  %v1GMP250.fca.32.insert = insertvalue %gemPrm %v1GMP250.fca.31.insert, <2 x double>* %v1GMP250.fca.32.load, 32
  %v1GMP250.fca.33.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.33.gep
  %v1GMP250.fca.33.insert = insertvalue %gemPrm %v1GMP250.fca.32.insert, <2 x double>* %v1GMP250.fca.33.load, 33
  %v1GMP250.fca.34.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.34.gep
  %v1GMP250.fca.34.insert = insertvalue %gemPrm %v1GMP250.fca.33.insert, <2 x double>* %v1GMP250.fca.34.load, 34
  %v1GMP250.fca.35.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.35.gep
  %v1GMP250.fca.35.insert = insertvalue %gemPrm %v1GMP250.fca.34.insert, <2 x double>* %v1GMP250.fca.35.load, 35
  %v1GMP250.fca.36.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.36.gep
  %v1GMP250.fca.36.insert = insertvalue %gemPrm %v1GMP250.fca.35.insert, <2 x double>* %v1GMP250.fca.36.load, 36
  %v1GMP250.fca.37.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.37.gep
  %v1GMP250.fca.37.insert = insertvalue %gemPrm %v1GMP250.fca.36.insert, <2 x double>* %v1GMP250.fca.37.load, 37
  %v1GMP250.fca.38.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.38.gep
  %v1GMP250.fca.38.insert = insertvalue %gemPrm %v1GMP250.fca.37.insert, <2 x double>* %v1GMP250.fca.38.load, 38
  %v1GMP250.fca.39.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.39.gep
  %v1GMP250.fca.39.insert = insertvalue %gemPrm %v1GMP250.fca.38.insert, <2 x double>* %v1GMP250.fca.39.load, 39
  %v1GMP250.fca.40.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.40.gep
  %v1GMP250.fca.40.insert = insertvalue %gemPrm %v1GMP250.fca.39.insert, <2 x double>* %v1GMP250.fca.40.load, 40
  %v1GMP250.fca.41.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.41.gep
  %v1GMP250.fca.41.insert = insertvalue %gemPrm %v1GMP250.fca.40.insert, <2 x double>* %v1GMP250.fca.41.load, 41
  %v1GMP250.fca.42.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.42.gep
  %v1GMP250.fca.42.insert = insertvalue %gemPrm %v1GMP250.fca.41.insert, <4 x double>* %v1GMP250.fca.42.load, 42
  %v1GMP250.fca.43.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.43.gep
  %v1GMP250.fca.43.insert = insertvalue %gemPrm %v1GMP250.fca.42.insert, <4 x double>* %v1GMP250.fca.43.load, 43
  %v1GMP250.fca.44.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.44.gep
  %v1GMP250.fca.44.insert = insertvalue %gemPrm %v1GMP250.fca.43.insert, <4 x double>* %v1GMP250.fca.44.load, 44
  %v1GMP250.fca.45.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.45.gep
  %v1GMP250.fca.45.insert = insertvalue %gemPrm %v1GMP250.fca.44.insert, <4 x double>* %v1GMP250.fca.45.load, 45
  %v1GMP250.fca.46.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.46.gep
  %v1GMP250.fca.46.insert = insertvalue %gemPrm %v1GMP250.fca.45.insert, <4 x double>* %v1GMP250.fca.46.load, 46
  %v1GMP250.fca.47.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.47.gep
  %v1GMP250.fca.47.insert = insertvalue %gemPrm %v1GMP250.fca.46.insert, <4 x double>* %v1GMP250.fca.47.load, 47
  %v1GMP250.fca.48.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.48.gep
  %v1GMP250.fca.48.insert = insertvalue %gemPrm %v1GMP250.fca.47.insert, <4 x double>* %v1GMP250.fca.48.load, 48
  %v1GMP250.fca.49.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.49.gep
  %v1GMP250.fca.49.insert = insertvalue %gemPrm %v1GMP250.fca.48.insert, <4 x double>* %v1GMP250.fca.49.load, 49
  %v1GMP250.fca.50.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.50.gep
  %v1GMP250.fca.50.insert = insertvalue %gemPrm %v1GMP250.fca.49.insert, <4 x double>* %v1GMP250.fca.50.load, 50
  %v1GMP250.fca.51.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.51.gep
  %v1GMP250.fca.51.insert = insertvalue %gemPrm %v1GMP250.fca.50.insert, <3 x double>* %v1GMP250.fca.51.load, 51
  %v1GMP250.fca.52.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.52.gep
  %v1GMP250.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 0
  store double* %v1GMP250.fca.0.load, double** %v1GMP250.fca.0.gep
  %v1GMP250.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 1
  store double* %v1GMP250.fca.1.load, double** %v1GMP250.fca.1.gep
  %v1GMP250.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 2
  store double* %v1GMP250.fca.2.load, double** %v1GMP250.fca.2.gep
  %v1GMP250.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 3
  store double* %v1GMP250.fca.3.load, double** %v1GMP250.fca.3.gep
  %v1GMP250.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 4
  store double* %v1GMP250.fca.4.load, double** %v1GMP250.fca.4.gep
  %v1GMP250.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 5
  store double* %v1GMP250.fca.5.load, double** %v1GMP250.fca.5.gep
  %v1GMP250.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 6
  store <3 x double>* %v1GMP250.fca.6.load, <3 x double>** %v1GMP250.fca.6.gep
  %v1GMP250.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 7
  store <3 x double>* %v1GMP250.fca.7.load, <3 x double>** %v1GMP250.fca.7.gep
  %v1GMP250.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 8
  store <3 x double>* %v1GMP250.fca.8.load, <3 x double>** %v1GMP250.fca.8.gep
  %v1GMP250.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 9
  store <3 x double>* %v1GMP250.fca.9.load, <3 x double>** %v1GMP250.fca.9.gep
  %v1GMP250.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 10
  store <3 x double>* %v1GMP250.fca.10.load, <3 x double>** %v1GMP250.fca.10.gep
  %v1GMP250.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 11
  store <3 x double>* %v1GMP250.fca.11.load, <3 x double>** %v1GMP250.fca.11.gep
  %v1GMP250.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 12
  store <3 x double>* %v1GMP250.fca.12.load, <3 x double>** %v1GMP250.fca.12.gep
  %v1GMP250.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 13
  store <2 x double>* %v1GMP250.fca.13.load, <2 x double>** %v1GMP250.fca.13.gep
  %v1GMP250.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 14
  store <2 x double>* %v1GMP250.fca.14.load, <2 x double>** %v1GMP250.fca.14.gep
  %v1GMP250.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 15
  store <2 x double>* %v1GMP250.fca.15.load, <2 x double>** %v1GMP250.fca.15.gep
  %v1GMP250.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 16
  store <2 x double>* %v1GMP250.fca.16.load, <2 x double>** %v1GMP250.fca.16.gep
  %v1GMP250.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 17
  store <2 x double>* %v1GMP250.fca.17.load, <2 x double>** %v1GMP250.fca.17.gep
  %v1GMP250.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 18
  store <2 x double>* %v1GMP250.fca.18.load, <2 x double>** %v1GMP250.fca.18.gep
  %v1GMP250.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 19
  store <2 x double>* %v1GMP250.fca.19.load, <2 x double>** %v1GMP250.fca.19.gep
  %v1GMP250.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 20
  store <2 x double>* %v1GMP250.fca.20.load, <2 x double>** %v1GMP250.fca.20.gep
  %v1GMP250.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 21
  store <2 x double>* %v1GMP250.fca.21.load, <2 x double>** %v1GMP250.fca.21.gep
  %v1GMP250.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 22
  store <2 x double>* %v1GMP250.fca.22.load, <2 x double>** %v1GMP250.fca.22.gep
  %v1GMP250.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 23
  store <2 x double>* %v1GMP250.fca.23.load, <2 x double>** %v1GMP250.fca.23.gep
  %v1GMP250.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 24
  store <2 x double>* %v1GMP250.fca.24.load, <2 x double>** %v1GMP250.fca.24.gep
  %v1GMP250.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 25
  store <2 x double>* %v1GMP250.fca.25.load, <2 x double>** %v1GMP250.fca.25.gep
  %v1GMP250.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 26
  store <2 x double>* %v1GMP250.fca.26.load, <2 x double>** %v1GMP250.fca.26.gep
  %v1GMP250.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 27
  store <2 x double>* %v1GMP250.fca.27.load, <2 x double>** %v1GMP250.fca.27.gep
  %v1GMP250.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 28
  store <2 x double>* %v1GMP250.fca.28.load, <2 x double>** %v1GMP250.fca.28.gep
  %v1GMP250.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 29
  store <2 x double>* %v1GMP250.fca.29.load, <2 x double>** %v1GMP250.fca.29.gep
  %v1GMP250.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 30
  store <2 x double>* %v1GMP250.fca.30.load, <2 x double>** %v1GMP250.fca.30.gep
  %v1GMP250.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 31
  store <2 x double>* %v1GMP250.fca.31.load, <2 x double>** %v1GMP250.fca.31.gep
  %v1GMP250.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 32
  store <2 x double>* %v1GMP250.fca.32.load, <2 x double>** %v1GMP250.fca.32.gep
  %v1GMP250.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 33
  store <2 x double>* %v1GMP250.fca.33.load, <2 x double>** %v1GMP250.fca.33.gep
  %v1GMP250.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 34
  store <2 x double>* %v1GMP250.fca.34.load, <2 x double>** %v1GMP250.fca.34.gep
  %v1GMP250.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 35
  store <2 x double>* %v1GMP250.fca.35.load, <2 x double>** %v1GMP250.fca.35.gep
  %v1GMP250.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 36
  store <2 x double>* %v1GMP250.fca.36.load, <2 x double>** %v1GMP250.fca.36.gep
  %v1GMP250.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 37
  store <2 x double>* %v1GMP250.fca.37.load, <2 x double>** %v1GMP250.fca.37.gep
  %v1GMP250.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 38
  store <2 x double>* %v1GMP250.fca.38.load, <2 x double>** %v1GMP250.fca.38.gep
  %v1GMP250.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 39
  store <2 x double>* %v1GMP250.fca.39.load, <2 x double>** %v1GMP250.fca.39.gep
  %v1GMP250.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 40
  store <2 x double>* %v1GMP250.fca.40.load, <2 x double>** %v1GMP250.fca.40.gep
  %v1GMP250.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 41
  store <2 x double>* %v1GMP250.fca.41.load, <2 x double>** %v1GMP250.fca.41.gep
  %v1GMP250.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 42
  store <4 x double>* %v1GMP250.fca.42.load, <4 x double>** %v1GMP250.fca.42.gep
  %v1GMP250.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 43
  store <4 x double>* %v1GMP250.fca.43.load, <4 x double>** %v1GMP250.fca.43.gep
  %v1GMP250.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 44
  store <4 x double>* %v1GMP250.fca.44.load, <4 x double>** %v1GMP250.fca.44.gep
  %v1GMP250.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 45
  store <4 x double>* %v1GMP250.fca.45.load, <4 x double>** %v1GMP250.fca.45.gep
  %v1GMP250.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 46
  store <4 x double>* %v1GMP250.fca.46.load, <4 x double>** %v1GMP250.fca.46.gep
  %v1GMP250.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 47
  store <4 x double>* %v1GMP250.fca.47.load, <4 x double>** %v1GMP250.fca.47.gep
  %v1GMP250.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 48
  store <4 x double>* %v1GMP250.fca.48.load, <4 x double>** %v1GMP250.fca.48.gep
  %v1GMP250.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 49
  store <4 x double>* %v1GMP250.fca.49.load, <4 x double>** %v1GMP250.fca.49.gep
  %v1GMP250.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 50
  store <4 x double>* %v1GMP250.fca.50.load, <4 x double>** %v1GMP250.fca.50.gep
  %v1GMP250.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 51
  store <3 x double>* %v1GMP250.fca.51.load, <3 x double>** %v1GMP250.fca.51.gep
  %v1GMP250.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %70, i32 0, i32 52
  store <2 x double>* %v1GMP250.fca.52.load, <2 x double>** %v1GMP250.fca.52.gep
  store i64 0, i64* %71
  store i64 0, i64* %72
  %GEM251.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM251.fca.0.insert = insertvalue %gem undef, i64* %GEM251.fca.0.load, 0
  %GEM251.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM251.fca.1.insert = insertvalue %gem %GEM251.fca.0.insert, i64* %GEM251.fca.1.load, 1
  %GEM251.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM251.fca.2.insert = insertvalue %gem %GEM251.fca.1.insert, i64* %GEM251.fca.2.load, 2
  %GEM251.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM251.fca.3.insert = insertvalue %gem %GEM251.fca.2.insert, i64* %GEM251.fca.3.load, 3
  %GEM251.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM251.fca.4.insert = insertvalue %gem %GEM251.fca.3.insert, i64* %GEM251.fca.4.load, 4
  %GEM251.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM251.fca.5.insert = insertvalue %gem %GEM251.fca.4.insert, i64 %GEM251.fca.5.load, 5
  %GEM251.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM251.fca.6.insert = insertvalue %gem %GEM251.fca.5.insert, i64 %GEM251.fca.6.load, 6
  %GEM251.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM251.fca.7.insert = insertvalue %gem %GEM251.fca.6.insert, i64 %GEM251.fca.7.load, 7
  %GEM251.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM251.fca.8.insert = insertvalue %gem %GEM251.fca.7.insert, i64 %GEM251.fca.8.load, 8
  %GEM251.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM251.fca.9.insert = insertvalue %gem %GEM251.fca.8.insert, double* %GEM251.fca.9.load, 9
  %GEM251.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM251.fca.10.insert = insertvalue %gem %GEM251.fca.9.insert, double* %GEM251.fca.10.load, 10
  %GEM251.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM251.fca.11.insert = insertvalue %gem %GEM251.fca.10.insert, double* %GEM251.fca.11.load, 11
  %GEM251.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM251.fca.12.insert = insertvalue %gem %GEM251.fca.11.insert, double* %GEM251.fca.12.load, 12
  %GEM251.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM251.fca.13.insert = insertvalue %gem %GEM251.fca.12.insert, double* %GEM251.fca.13.load, 13
  %GEM251.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM251.fca.14.insert = insertvalue %gem %GEM251.fca.13.insert, double* %GEM251.fca.14.load, 14
  %GEM251.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM251.fca.15.insert = insertvalue %gem %GEM251.fca.14.insert, double* %GEM251.fca.15.load, 15
  %GEM251.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM251.fca.16.insert = insertvalue %gem %GEM251.fca.15.insert, double %GEM251.fca.16.load, 16
  %GEM251.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM251.fca.17.insert = insertvalue %gem %GEM251.fca.16.insert, double %GEM251.fca.17.load, 17
  %GEM251.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM251.fca.18.insert = insertvalue %gem %GEM251.fca.17.insert, double %GEM251.fca.18.load, 18
  %GEM251.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM251.fca.19.insert = insertvalue %gem %GEM251.fca.18.insert, double %GEM251.fca.19.load, 19
  %GEM251.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM251.fca.20.insert = insertvalue %gem %GEM251.fca.19.insert, double %GEM251.fca.20.load, 20
  %GEM251.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM251.fca.21.insert = insertvalue %gem %GEM251.fca.20.insert, <2 x double> %GEM251.fca.21.load, 21
  %GEM251.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM251.fca.22.insert = insertvalue %gem %GEM251.fca.21.insert, <2 x double>* %GEM251.fca.22.load, 22
  %GEM251.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM251.fca.23.insert = insertvalue %gem %GEM251.fca.22.insert, <2 x double>* %GEM251.fca.23.load, 23
  %GEM251.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM251.fca.24.insert = insertvalue %gem %GEM251.fca.23.insert, <2 x double>* %GEM251.fca.24.load, 24
  %GEM251.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM251.fca.25.insert = insertvalue %gem %GEM251.fca.24.insert, <2 x double>* %GEM251.fca.25.load, 25
  %GEM251.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM251.fca.26.insert = insertvalue %gem %GEM251.fca.25.insert, <2 x double>* %GEM251.fca.26.load, 26
  %GEM251.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM251.fca.27.insert = insertvalue %gem %GEM251.fca.26.insert, <2 x double>* %GEM251.fca.27.load, 27
  %GEM251.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM251.fca.28.insert = insertvalue %gem %GEM251.fca.27.insert, <2 x double> %GEM251.fca.28.load, 28
  %GEM251.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM251.fca.29.insert = insertvalue %gem %GEM251.fca.28.insert, <2 x double> %GEM251.fca.29.load, 29
  %GEM251.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM251.fca.30.insert = insertvalue %gem %GEM251.fca.29.insert, <2 x double> %GEM251.fca.30.load, 30
  %GEM251.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM251.fca.31.insert = insertvalue %gem %GEM251.fca.30.insert, <2 x double> %GEM251.fca.31.load, 31
  %GEM251.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM251.fca.32.insert = insertvalue %gem %GEM251.fca.31.insert, <2 x double> %GEM251.fca.32.load, 32
  %GEM251.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM251.fca.33.insert = insertvalue %gem %GEM251.fca.32.insert, <2 x double> %GEM251.fca.33.load, 33
  %GEM251.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64 %GEM251.fca.7.load, i64* %73
  %__mem252 = load <2 x double>, <2 x double>* %__mem
  store <2 x double> %__mem252, <2 x double>* %74
  %GEM253.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM253.fca.0.insert = insertvalue %gem undef, i64* %GEM253.fca.0.load, 0
  %GEM253.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM253.fca.1.insert = insertvalue %gem %GEM253.fca.0.insert, i64* %GEM253.fca.1.load, 1
  %GEM253.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM253.fca.2.insert = insertvalue %gem %GEM253.fca.1.insert, i64* %GEM253.fca.2.load, 2
  %GEM253.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM253.fca.3.insert = insertvalue %gem %GEM253.fca.2.insert, i64* %GEM253.fca.3.load, 3
  %GEM253.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM253.fca.4.insert = insertvalue %gem %GEM253.fca.3.insert, i64* %GEM253.fca.4.load, 4
  %GEM253.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM253.fca.5.insert = insertvalue %gem %GEM253.fca.4.insert, i64 %GEM253.fca.5.load, 5
  %GEM253.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM253.fca.6.insert = insertvalue %gem %GEM253.fca.5.insert, i64 %GEM253.fca.6.load, 6
  %GEM253.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM253.fca.7.insert = insertvalue %gem %GEM253.fca.6.insert, i64 %GEM253.fca.7.load, 7
  %GEM253.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM253.fca.8.insert = insertvalue %gem %GEM253.fca.7.insert, i64 %GEM253.fca.8.load, 8
  %GEM253.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM253.fca.9.insert = insertvalue %gem %GEM253.fca.8.insert, double* %GEM253.fca.9.load, 9
  %GEM253.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM253.fca.10.insert = insertvalue %gem %GEM253.fca.9.insert, double* %GEM253.fca.10.load, 10
  %GEM253.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM253.fca.11.insert = insertvalue %gem %GEM253.fca.10.insert, double* %GEM253.fca.11.load, 11
  %GEM253.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM253.fca.12.insert = insertvalue %gem %GEM253.fca.11.insert, double* %GEM253.fca.12.load, 12
  %GEM253.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM253.fca.13.insert = insertvalue %gem %GEM253.fca.12.insert, double* %GEM253.fca.13.load, 13
  %GEM253.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM253.fca.14.insert = insertvalue %gem %GEM253.fca.13.insert, double* %GEM253.fca.14.load, 14
  %GEM253.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM253.fca.15.insert = insertvalue %gem %GEM253.fca.14.insert, double* %GEM253.fca.15.load, 15
  %GEM253.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM253.fca.16.insert = insertvalue %gem %GEM253.fca.15.insert, double %GEM253.fca.16.load, 16
  %GEM253.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM253.fca.17.insert = insertvalue %gem %GEM253.fca.16.insert, double %GEM253.fca.17.load, 17
  %GEM253.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM253.fca.18.insert = insertvalue %gem %GEM253.fca.17.insert, double %GEM253.fca.18.load, 18
  %GEM253.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM253.fca.19.insert = insertvalue %gem %GEM253.fca.18.insert, double %GEM253.fca.19.load, 19
  %GEM253.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM253.fca.20.insert = insertvalue %gem %GEM253.fca.19.insert, double %GEM253.fca.20.load, 20
  %GEM253.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM253.fca.21.insert = insertvalue %gem %GEM253.fca.20.insert, <2 x double> %GEM253.fca.21.load, 21
  %GEM253.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM253.fca.22.insert = insertvalue %gem %GEM253.fca.21.insert, <2 x double>* %GEM253.fca.22.load, 22
  %GEM253.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM253.fca.23.insert = insertvalue %gem %GEM253.fca.22.insert, <2 x double>* %GEM253.fca.23.load, 23
  %GEM253.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM253.fca.24.insert = insertvalue %gem %GEM253.fca.23.insert, <2 x double>* %GEM253.fca.24.load, 24
  %GEM253.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM253.fca.25.insert = insertvalue %gem %GEM253.fca.24.insert, <2 x double>* %GEM253.fca.25.load, 25
  %GEM253.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM253.fca.26.insert = insertvalue %gem %GEM253.fca.25.insert, <2 x double>* %GEM253.fca.26.load, 26
  %GEM253.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM253.fca.27.insert = insertvalue %gem %GEM253.fca.26.insert, <2 x double>* %GEM253.fca.27.load, 27
  %GEM253.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM253.fca.28.insert = insertvalue %gem %GEM253.fca.27.insert, <2 x double> %GEM253.fca.28.load, 28
  %GEM253.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM253.fca.29.insert = insertvalue %gem %GEM253.fca.28.insert, <2 x double> %GEM253.fca.29.load, 29
  %GEM253.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM253.fca.30.insert = insertvalue %gem %GEM253.fca.29.insert, <2 x double> %GEM253.fca.30.load, 30
  %GEM253.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM253.fca.31.insert = insertvalue %gem %GEM253.fca.30.insert, <2 x double> %GEM253.fca.31.load, 31
  %GEM253.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM253.fca.32.insert = insertvalue %gem %GEM253.fca.31.insert, <2 x double> %GEM253.fca.32.load, 32
  %GEM253.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM253.fca.33.insert = insertvalue %gem %GEM253.fca.32.insert, <2 x double> %GEM253.fca.33.load, 33
  %GEM253.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM253.fca.28.load, <2 x double>* %75
  %GEM255.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM255.fca.0.insert = insertvalue %gem undef, i64* %GEM255.fca.0.load, 0
  %GEM255.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM255.fca.1.insert = insertvalue %gem %GEM255.fca.0.insert, i64* %GEM255.fca.1.load, 1
  %GEM255.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM255.fca.2.insert = insertvalue %gem %GEM255.fca.1.insert, i64* %GEM255.fca.2.load, 2
  %GEM255.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM255.fca.3.insert = insertvalue %gem %GEM255.fca.2.insert, i64* %GEM255.fca.3.load, 3
  %GEM255.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM255.fca.4.insert = insertvalue %gem %GEM255.fca.3.insert, i64* %GEM255.fca.4.load, 4
  %GEM255.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM255.fca.5.insert = insertvalue %gem %GEM255.fca.4.insert, i64 %GEM255.fca.5.load, 5
  %GEM255.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM255.fca.6.insert = insertvalue %gem %GEM255.fca.5.insert, i64 %GEM255.fca.6.load, 6
  %GEM255.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM255.fca.7.insert = insertvalue %gem %GEM255.fca.6.insert, i64 %GEM255.fca.7.load, 7
  %GEM255.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM255.fca.8.insert = insertvalue %gem %GEM255.fca.7.insert, i64 %GEM255.fca.8.load, 8
  %GEM255.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM255.fca.9.insert = insertvalue %gem %GEM255.fca.8.insert, double* %GEM255.fca.9.load, 9
  %GEM255.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM255.fca.10.insert = insertvalue %gem %GEM255.fca.9.insert, double* %GEM255.fca.10.load, 10
  %GEM255.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM255.fca.11.insert = insertvalue %gem %GEM255.fca.10.insert, double* %GEM255.fca.11.load, 11
  %GEM255.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM255.fca.12.insert = insertvalue %gem %GEM255.fca.11.insert, double* %GEM255.fca.12.load, 12
  %GEM255.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM255.fca.13.insert = insertvalue %gem %GEM255.fca.12.insert, double* %GEM255.fca.13.load, 13
  %GEM255.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM255.fca.14.insert = insertvalue %gem %GEM255.fca.13.insert, double* %GEM255.fca.14.load, 14
  %GEM255.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM255.fca.15.insert = insertvalue %gem %GEM255.fca.14.insert, double* %GEM255.fca.15.load, 15
  %GEM255.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM255.fca.16.insert = insertvalue %gem %GEM255.fca.15.insert, double %GEM255.fca.16.load, 16
  %GEM255.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM255.fca.17.insert = insertvalue %gem %GEM255.fca.16.insert, double %GEM255.fca.17.load, 17
  %GEM255.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM255.fca.18.insert = insertvalue %gem %GEM255.fca.17.insert, double %GEM255.fca.18.load, 18
  %GEM255.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM255.fca.19.insert = insertvalue %gem %GEM255.fca.18.insert, double %GEM255.fca.19.load, 19
  %GEM255.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM255.fca.20.insert = insertvalue %gem %GEM255.fca.19.insert, double %GEM255.fca.20.load, 20
  %GEM255.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM255.fca.21.insert = insertvalue %gem %GEM255.fca.20.insert, <2 x double> %GEM255.fca.21.load, 21
  %GEM255.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM255.fca.22.insert = insertvalue %gem %GEM255.fca.21.insert, <2 x double>* %GEM255.fca.22.load, 22
  %GEM255.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM255.fca.23.insert = insertvalue %gem %GEM255.fca.22.insert, <2 x double>* %GEM255.fca.23.load, 23
  %GEM255.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM255.fca.24.insert = insertvalue %gem %GEM255.fca.23.insert, <2 x double>* %GEM255.fca.24.load, 24
  %GEM255.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM255.fca.25.insert = insertvalue %gem %GEM255.fca.24.insert, <2 x double>* %GEM255.fca.25.load, 25
  %GEM255.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM255.fca.26.insert = insertvalue %gem %GEM255.fca.25.insert, <2 x double>* %GEM255.fca.26.load, 26
  %GEM255.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM255.fca.27.insert = insertvalue %gem %GEM255.fca.26.insert, <2 x double>* %GEM255.fca.27.load, 27
  %GEM255.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM255.fca.28.insert = insertvalue %gem %GEM255.fca.27.insert, <2 x double> %GEM255.fca.28.load, 28
  %GEM255.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM255.fca.29.insert = insertvalue %gem %GEM255.fca.28.insert, <2 x double> %GEM255.fca.29.load, 29
  %GEM255.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM255.fca.30.insert = insertvalue %gem %GEM255.fca.29.insert, <2 x double> %GEM255.fca.30.load, 30
  %GEM255.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM255.fca.31.insert = insertvalue %gem %GEM255.fca.30.insert, <2 x double> %GEM255.fca.31.load, 31
  %GEM255.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM255.fca.32.insert = insertvalue %gem %GEM255.fca.31.insert, <2 x double> %GEM255.fca.32.load, 32
  %GEM255.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM255.fca.33.insert = insertvalue %gem %GEM255.fca.32.insert, <2 x double> %GEM255.fca.33.load, 33
  %GEM255.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM255.fca.29.load, <2 x double>* %76
  %GEM257.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM257.fca.0.insert = insertvalue %gem undef, i64* %GEM257.fca.0.load, 0
  %GEM257.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM257.fca.1.insert = insertvalue %gem %GEM257.fca.0.insert, i64* %GEM257.fca.1.load, 1
  %GEM257.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM257.fca.2.insert = insertvalue %gem %GEM257.fca.1.insert, i64* %GEM257.fca.2.load, 2
  %GEM257.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM257.fca.3.insert = insertvalue %gem %GEM257.fca.2.insert, i64* %GEM257.fca.3.load, 3
  %GEM257.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM257.fca.4.insert = insertvalue %gem %GEM257.fca.3.insert, i64* %GEM257.fca.4.load, 4
  %GEM257.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM257.fca.5.insert = insertvalue %gem %GEM257.fca.4.insert, i64 %GEM257.fca.5.load, 5
  %GEM257.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM257.fca.6.insert = insertvalue %gem %GEM257.fca.5.insert, i64 %GEM257.fca.6.load, 6
  %GEM257.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM257.fca.7.insert = insertvalue %gem %GEM257.fca.6.insert, i64 %GEM257.fca.7.load, 7
  %GEM257.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM257.fca.8.insert = insertvalue %gem %GEM257.fca.7.insert, i64 %GEM257.fca.8.load, 8
  %GEM257.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM257.fca.9.insert = insertvalue %gem %GEM257.fca.8.insert, double* %GEM257.fca.9.load, 9
  %GEM257.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM257.fca.10.insert = insertvalue %gem %GEM257.fca.9.insert, double* %GEM257.fca.10.load, 10
  %GEM257.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM257.fca.11.insert = insertvalue %gem %GEM257.fca.10.insert, double* %GEM257.fca.11.load, 11
  %GEM257.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM257.fca.12.insert = insertvalue %gem %GEM257.fca.11.insert, double* %GEM257.fca.12.load, 12
  %GEM257.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM257.fca.13.insert = insertvalue %gem %GEM257.fca.12.insert, double* %GEM257.fca.13.load, 13
  %GEM257.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM257.fca.14.insert = insertvalue %gem %GEM257.fca.13.insert, double* %GEM257.fca.14.load, 14
  %GEM257.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM257.fca.15.insert = insertvalue %gem %GEM257.fca.14.insert, double* %GEM257.fca.15.load, 15
  %GEM257.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM257.fca.16.insert = insertvalue %gem %GEM257.fca.15.insert, double %GEM257.fca.16.load, 16
  %GEM257.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM257.fca.17.insert = insertvalue %gem %GEM257.fca.16.insert, double %GEM257.fca.17.load, 17
  %GEM257.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM257.fca.18.insert = insertvalue %gem %GEM257.fca.17.insert, double %GEM257.fca.18.load, 18
  %GEM257.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM257.fca.19.insert = insertvalue %gem %GEM257.fca.18.insert, double %GEM257.fca.19.load, 19
  %GEM257.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM257.fca.20.insert = insertvalue %gem %GEM257.fca.19.insert, double %GEM257.fca.20.load, 20
  %GEM257.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM257.fca.21.insert = insertvalue %gem %GEM257.fca.20.insert, <2 x double> %GEM257.fca.21.load, 21
  %GEM257.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM257.fca.22.insert = insertvalue %gem %GEM257.fca.21.insert, <2 x double>* %GEM257.fca.22.load, 22
  %GEM257.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM257.fca.23.insert = insertvalue %gem %GEM257.fca.22.insert, <2 x double>* %GEM257.fca.23.load, 23
  %GEM257.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM257.fca.24.insert = insertvalue %gem %GEM257.fca.23.insert, <2 x double>* %GEM257.fca.24.load, 24
  %GEM257.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM257.fca.25.insert = insertvalue %gem %GEM257.fca.24.insert, <2 x double>* %GEM257.fca.25.load, 25
  %GEM257.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM257.fca.26.insert = insertvalue %gem %GEM257.fca.25.insert, <2 x double>* %GEM257.fca.26.load, 26
  %GEM257.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM257.fca.27.insert = insertvalue %gem %GEM257.fca.26.insert, <2 x double>* %GEM257.fca.27.load, 27
  %GEM257.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM257.fca.28.insert = insertvalue %gem %GEM257.fca.27.insert, <2 x double> %GEM257.fca.28.load, 28
  %GEM257.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM257.fca.29.insert = insertvalue %gem %GEM257.fca.28.insert, <2 x double> %GEM257.fca.29.load, 29
  %GEM257.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM257.fca.30.insert = insertvalue %gem %GEM257.fca.29.insert, <2 x double> %GEM257.fca.30.load, 30
  %GEM257.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM257.fca.31.insert = insertvalue %gem %GEM257.fca.30.insert, <2 x double> %GEM257.fca.31.load, 31
  %GEM257.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM257.fca.32.insert = insertvalue %gem %GEM257.fca.31.insert, <2 x double> %GEM257.fca.32.load, 32
  %GEM257.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM257.fca.33.insert = insertvalue %gem %GEM257.fca.32.insert, <2 x double> %GEM257.fca.33.load, 33
  %GEM257.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM257.fca.30.load, <2 x double>* %77
  %GEM259.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM259.fca.0.insert = insertvalue %gem undef, i64* %GEM259.fca.0.load, 0
  %GEM259.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM259.fca.1.insert = insertvalue %gem %GEM259.fca.0.insert, i64* %GEM259.fca.1.load, 1
  %GEM259.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM259.fca.2.insert = insertvalue %gem %GEM259.fca.1.insert, i64* %GEM259.fca.2.load, 2
  %GEM259.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM259.fca.3.insert = insertvalue %gem %GEM259.fca.2.insert, i64* %GEM259.fca.3.load, 3
  %GEM259.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM259.fca.4.insert = insertvalue %gem %GEM259.fca.3.insert, i64* %GEM259.fca.4.load, 4
  %GEM259.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM259.fca.5.insert = insertvalue %gem %GEM259.fca.4.insert, i64 %GEM259.fca.5.load, 5
  %GEM259.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM259.fca.6.insert = insertvalue %gem %GEM259.fca.5.insert, i64 %GEM259.fca.6.load, 6
  %GEM259.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM259.fca.7.insert = insertvalue %gem %GEM259.fca.6.insert, i64 %GEM259.fca.7.load, 7
  %GEM259.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM259.fca.8.insert = insertvalue %gem %GEM259.fca.7.insert, i64 %GEM259.fca.8.load, 8
  %GEM259.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM259.fca.9.insert = insertvalue %gem %GEM259.fca.8.insert, double* %GEM259.fca.9.load, 9
  %GEM259.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM259.fca.10.insert = insertvalue %gem %GEM259.fca.9.insert, double* %GEM259.fca.10.load, 10
  %GEM259.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM259.fca.11.insert = insertvalue %gem %GEM259.fca.10.insert, double* %GEM259.fca.11.load, 11
  %GEM259.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM259.fca.12.insert = insertvalue %gem %GEM259.fca.11.insert, double* %GEM259.fca.12.load, 12
  %GEM259.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM259.fca.13.insert = insertvalue %gem %GEM259.fca.12.insert, double* %GEM259.fca.13.load, 13
  %GEM259.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM259.fca.14.insert = insertvalue %gem %GEM259.fca.13.insert, double* %GEM259.fca.14.load, 14
  %GEM259.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM259.fca.15.insert = insertvalue %gem %GEM259.fca.14.insert, double* %GEM259.fca.15.load, 15
  %GEM259.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM259.fca.16.insert = insertvalue %gem %GEM259.fca.15.insert, double %GEM259.fca.16.load, 16
  %GEM259.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM259.fca.17.insert = insertvalue %gem %GEM259.fca.16.insert, double %GEM259.fca.17.load, 17
  %GEM259.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM259.fca.18.insert = insertvalue %gem %GEM259.fca.17.insert, double %GEM259.fca.18.load, 18
  %GEM259.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM259.fca.19.insert = insertvalue %gem %GEM259.fca.18.insert, double %GEM259.fca.19.load, 19
  %GEM259.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM259.fca.20.insert = insertvalue %gem %GEM259.fca.19.insert, double %GEM259.fca.20.load, 20
  %GEM259.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM259.fca.21.insert = insertvalue %gem %GEM259.fca.20.insert, <2 x double> %GEM259.fca.21.load, 21
  %GEM259.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM259.fca.22.insert = insertvalue %gem %GEM259.fca.21.insert, <2 x double>* %GEM259.fca.22.load, 22
  %GEM259.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM259.fca.23.insert = insertvalue %gem %GEM259.fca.22.insert, <2 x double>* %GEM259.fca.23.load, 23
  %GEM259.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM259.fca.24.insert = insertvalue %gem %GEM259.fca.23.insert, <2 x double>* %GEM259.fca.24.load, 24
  %GEM259.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM259.fca.25.insert = insertvalue %gem %GEM259.fca.24.insert, <2 x double>* %GEM259.fca.25.load, 25
  %GEM259.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM259.fca.26.insert = insertvalue %gem %GEM259.fca.25.insert, <2 x double>* %GEM259.fca.26.load, 26
  %GEM259.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM259.fca.27.insert = insertvalue %gem %GEM259.fca.26.insert, <2 x double>* %GEM259.fca.27.load, 27
  %GEM259.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM259.fca.28.insert = insertvalue %gem %GEM259.fca.27.insert, <2 x double> %GEM259.fca.28.load, 28
  %GEM259.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM259.fca.29.insert = insertvalue %gem %GEM259.fca.28.insert, <2 x double> %GEM259.fca.29.load, 29
  %GEM259.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM259.fca.30.insert = insertvalue %gem %GEM259.fca.29.insert, <2 x double> %GEM259.fca.30.load, 30
  %GEM259.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM259.fca.31.insert = insertvalue %gem %GEM259.fca.30.insert, <2 x double> %GEM259.fca.31.load, 31
  %GEM259.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM259.fca.32.insert = insertvalue %gem %GEM259.fca.31.insert, <2 x double> %GEM259.fca.32.load, 32
  %GEM259.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM259.fca.33.insert = insertvalue %gem %GEM259.fca.32.insert, <2 x double> %GEM259.fca.33.load, 33
  %GEM259.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store double %GEM259.fca.18.load, double* %78
  %FLAME261 = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %70, i64* %71, i64* %72, i64* %73, <2 x double>* %74, <2 x double>* %75, <2 x double>* %76, <2 x double>* %77, double* %78)
  %output262 = call <2 x double> @"add@UU"(<2 x double> %__tmp249, <2 x double> %FLAME261)
  store <2 x double> %output262, <2 x double>* %__tmp
  br label %end248

end248:                                           ; preds = %true247, %end229
  %SYS263.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS263.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS263.fca.0.load, 0
  %SYS263.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS263.fca.1.insert = insertvalue %gemSYS %SYS263.fca.0.insert, i64 %SYS263.fca.1.load, 1
  %SYS263.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS263.fca.2.insert = insertvalue %gemSYS %SYS263.fca.1.insert, i64 %SYS263.fca.2.load, 2
  %SYS263.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS263.fca.3.insert = insertvalue %gemSYS %SYS263.fca.2.insert, i64 %SYS263.fca.3.load, 3
  %SYS263.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS263.fca.4.insert = insertvalue %gemSYS %SYS263.fca.3.insert, i64 %SYS263.fca.4.load, 4
  %SYS263.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS263.fca.5.insert = insertvalue %gemSYS %SYS263.fca.4.insert, i64 %SYS263.fca.5.load, 5
  %SYS263.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS263.fca.6.insert = insertvalue %gemSYS %SYS263.fca.5.insert, i64 %SYS263.fca.6.load, 6
  %SYS263.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS263.fca.7.insert = insertvalue %gemSYS %SYS263.fca.6.insert, i64 %SYS263.fca.7.load, 7
  %SYS263.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS263.fca.8.insert = insertvalue %gemSYS %SYS263.fca.7.insert, i64 %SYS263.fca.8.load, 8
  %SYS263.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS263.fca.9.insert = insertvalue %gemSYS %SYS263.fca.8.insert, i64 %SYS263.fca.9.load, 9
  %SYS263.fca.10.load = load double, double* %SYS1.fca.10.gep
  %98 = icmp ne i64 %SYS263.fca.2.load, 0
  br i1 %98, label %true264, label %end265

true264:                                          ; preds = %end248
  %GEM266.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM266.fca.0.insert = insertvalue %gem undef, i64* %GEM266.fca.0.load, 0
  %GEM266.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM266.fca.1.insert = insertvalue %gem %GEM266.fca.0.insert, i64* %GEM266.fca.1.load, 1
  %GEM266.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM266.fca.2.insert = insertvalue %gem %GEM266.fca.1.insert, i64* %GEM266.fca.2.load, 2
  %GEM266.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM266.fca.3.insert = insertvalue %gem %GEM266.fca.2.insert, i64* %GEM266.fca.3.load, 3
  %GEM266.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM266.fca.4.insert = insertvalue %gem %GEM266.fca.3.insert, i64* %GEM266.fca.4.load, 4
  %GEM266.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM266.fca.5.insert = insertvalue %gem %GEM266.fca.4.insert, i64 %GEM266.fca.5.load, 5
  %GEM266.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM266.fca.6.insert = insertvalue %gem %GEM266.fca.5.insert, i64 %GEM266.fca.6.load, 6
  %GEM266.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM266.fca.7.insert = insertvalue %gem %GEM266.fca.6.insert, i64 %GEM266.fca.7.load, 7
  %GEM266.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM266.fca.8.insert = insertvalue %gem %GEM266.fca.7.insert, i64 %GEM266.fca.8.load, 8
  %GEM266.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM266.fca.9.insert = insertvalue %gem %GEM266.fca.8.insert, double* %GEM266.fca.9.load, 9
  %GEM266.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM266.fca.10.insert = insertvalue %gem %GEM266.fca.9.insert, double* %GEM266.fca.10.load, 10
  %GEM266.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM266.fca.11.insert = insertvalue %gem %GEM266.fca.10.insert, double* %GEM266.fca.11.load, 11
  %GEM266.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM266.fca.12.insert = insertvalue %gem %GEM266.fca.11.insert, double* %GEM266.fca.12.load, 12
  %GEM266.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM266.fca.13.insert = insertvalue %gem %GEM266.fca.12.insert, double* %GEM266.fca.13.load, 13
  %GEM266.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM266.fca.14.insert = insertvalue %gem %GEM266.fca.13.insert, double* %GEM266.fca.14.load, 14
  %GEM266.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM266.fca.15.insert = insertvalue %gem %GEM266.fca.14.insert, double* %GEM266.fca.15.load, 15
  %GEM266.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM266.fca.16.insert = insertvalue %gem %GEM266.fca.15.insert, double %GEM266.fca.16.load, 16
  %GEM266.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM266.fca.17.insert = insertvalue %gem %GEM266.fca.16.insert, double %GEM266.fca.17.load, 17
  %GEM266.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM266.fca.18.insert = insertvalue %gem %GEM266.fca.17.insert, double %GEM266.fca.18.load, 18
  %GEM266.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM266.fca.19.insert = insertvalue %gem %GEM266.fca.18.insert, double %GEM266.fca.19.load, 19
  %GEM266.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM266.fca.20.insert = insertvalue %gem %GEM266.fca.19.insert, double %GEM266.fca.20.load, 20
  %GEM266.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM266.fca.21.insert = insertvalue %gem %GEM266.fca.20.insert, <2 x double> %GEM266.fca.21.load, 21
  %GEM266.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM266.fca.22.insert = insertvalue %gem %GEM266.fca.21.insert, <2 x double>* %GEM266.fca.22.load, 22
  %GEM266.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM266.fca.23.insert = insertvalue %gem %GEM266.fca.22.insert, <2 x double>* %GEM266.fca.23.load, 23
  %GEM266.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM266.fca.24.insert = insertvalue %gem %GEM266.fca.23.insert, <2 x double>* %GEM266.fca.24.load, 24
  %GEM266.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM266.fca.25.insert = insertvalue %gem %GEM266.fca.24.insert, <2 x double>* %GEM266.fca.25.load, 25
  %GEM266.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM266.fca.26.insert = insertvalue %gem %GEM266.fca.25.insert, <2 x double>* %GEM266.fca.26.load, 26
  %GEM266.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM266.fca.27.insert = insertvalue %gem %GEM266.fca.26.insert, <2 x double>* %GEM266.fca.27.load, 27
  %GEM266.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM266.fca.28.insert = insertvalue %gem %GEM266.fca.27.insert, <2 x double> %GEM266.fca.28.load, 28
  %GEM266.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM266.fca.29.insert = insertvalue %gem %GEM266.fca.28.insert, <2 x double> %GEM266.fca.29.load, 29
  %GEM266.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM266.fca.30.insert = insertvalue %gem %GEM266.fca.29.insert, <2 x double> %GEM266.fca.30.load, 30
  %GEM266.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM266.fca.31.insert = insertvalue %gem %GEM266.fca.30.insert, <2 x double> %GEM266.fca.31.load, 31
  %GEM266.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM266.fca.32.insert = insertvalue %gem %GEM266.fca.31.insert, <2 x double> %GEM266.fca.32.load, 32
  %GEM266.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM266.fca.33.insert = insertvalue %gem %GEM266.fca.32.insert, <2 x double> %GEM266.fca.33.load, 33
  %GEM266.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM266.fca.31.load, <2 x double>* %79
  %GEM267.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM267.fca.0.insert = insertvalue %gem undef, i64* %GEM267.fca.0.load, 0
  %GEM267.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM267.fca.1.insert = insertvalue %gem %GEM267.fca.0.insert, i64* %GEM267.fca.1.load, 1
  %GEM267.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM267.fca.2.insert = insertvalue %gem %GEM267.fca.1.insert, i64* %GEM267.fca.2.load, 2
  %GEM267.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM267.fca.3.insert = insertvalue %gem %GEM267.fca.2.insert, i64* %GEM267.fca.3.load, 3
  %GEM267.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM267.fca.4.insert = insertvalue %gem %GEM267.fca.3.insert, i64* %GEM267.fca.4.load, 4
  %GEM267.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM267.fca.5.insert = insertvalue %gem %GEM267.fca.4.insert, i64 %GEM267.fca.5.load, 5
  %GEM267.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM267.fca.6.insert = insertvalue %gem %GEM267.fca.5.insert, i64 %GEM267.fca.6.load, 6
  %GEM267.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM267.fca.7.insert = insertvalue %gem %GEM267.fca.6.insert, i64 %GEM267.fca.7.load, 7
  %GEM267.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM267.fca.8.insert = insertvalue %gem %GEM267.fca.7.insert, i64 %GEM267.fca.8.load, 8
  %GEM267.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM267.fca.9.insert = insertvalue %gem %GEM267.fca.8.insert, double* %GEM267.fca.9.load, 9
  %GEM267.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM267.fca.10.insert = insertvalue %gem %GEM267.fca.9.insert, double* %GEM267.fca.10.load, 10
  %GEM267.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM267.fca.11.insert = insertvalue %gem %GEM267.fca.10.insert, double* %GEM267.fca.11.load, 11
  %GEM267.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM267.fca.12.insert = insertvalue %gem %GEM267.fca.11.insert, double* %GEM267.fca.12.load, 12
  %GEM267.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM267.fca.13.insert = insertvalue %gem %GEM267.fca.12.insert, double* %GEM267.fca.13.load, 13
  %GEM267.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM267.fca.14.insert = insertvalue %gem %GEM267.fca.13.insert, double* %GEM267.fca.14.load, 14
  %GEM267.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM267.fca.15.insert = insertvalue %gem %GEM267.fca.14.insert, double* %GEM267.fca.15.load, 15
  %GEM267.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM267.fca.16.insert = insertvalue %gem %GEM267.fca.15.insert, double %GEM267.fca.16.load, 16
  %GEM267.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM267.fca.17.insert = insertvalue %gem %GEM267.fca.16.insert, double %GEM267.fca.17.load, 17
  %GEM267.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM267.fca.18.insert = insertvalue %gem %GEM267.fca.17.insert, double %GEM267.fca.18.load, 18
  %GEM267.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM267.fca.19.insert = insertvalue %gem %GEM267.fca.18.insert, double %GEM267.fca.19.load, 19
  %GEM267.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM267.fca.20.insert = insertvalue %gem %GEM267.fca.19.insert, double %GEM267.fca.20.load, 20
  %GEM267.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM267.fca.21.insert = insertvalue %gem %GEM267.fca.20.insert, <2 x double> %GEM267.fca.21.load, 21
  %GEM267.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM267.fca.22.insert = insertvalue %gem %GEM267.fca.21.insert, <2 x double>* %GEM267.fca.22.load, 22
  %GEM267.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM267.fca.23.insert = insertvalue %gem %GEM267.fca.22.insert, <2 x double>* %GEM267.fca.23.load, 23
  %GEM267.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM267.fca.24.insert = insertvalue %gem %GEM267.fca.23.insert, <2 x double>* %GEM267.fca.24.load, 24
  %GEM267.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM267.fca.25.insert = insertvalue %gem %GEM267.fca.24.insert, <2 x double>* %GEM267.fca.25.load, 25
  %GEM267.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM267.fca.26.insert = insertvalue %gem %GEM267.fca.25.insert, <2 x double>* %GEM267.fca.26.load, 26
  %GEM267.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM267.fca.27.insert = insertvalue %gem %GEM267.fca.26.insert, <2 x double>* %GEM267.fca.27.load, 27
  %GEM267.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM267.fca.28.insert = insertvalue %gem %GEM267.fca.27.insert, <2 x double> %GEM267.fca.28.load, 28
  %GEM267.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM267.fca.29.insert = insertvalue %gem %GEM267.fca.28.insert, <2 x double> %GEM267.fca.29.load, 29
  %GEM267.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM267.fca.30.insert = insertvalue %gem %GEM267.fca.29.insert, <2 x double> %GEM267.fca.30.load, 30
  %GEM267.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM267.fca.31.insert = insertvalue %gem %GEM267.fca.30.insert, <2 x double> %GEM267.fca.31.load, 31
  %GEM267.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM267.fca.32.insert = insertvalue %gem %GEM267.fca.31.insert, <2 x double> %GEM267.fca.32.load, 32
  %GEM267.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM267.fca.33.insert = insertvalue %gem %GEM267.fca.32.insert, <2 x double> %GEM267.fca.33.load, 33
  %GEM267.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM267.fca.32.load, <2 x double>* %80
  %GEM268.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM268.fca.0.insert = insertvalue %gem undef, i64* %GEM268.fca.0.load, 0
  %GEM268.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM268.fca.1.insert = insertvalue %gem %GEM268.fca.0.insert, i64* %GEM268.fca.1.load, 1
  %GEM268.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM268.fca.2.insert = insertvalue %gem %GEM268.fca.1.insert, i64* %GEM268.fca.2.load, 2
  %GEM268.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM268.fca.3.insert = insertvalue %gem %GEM268.fca.2.insert, i64* %GEM268.fca.3.load, 3
  %GEM268.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM268.fca.4.insert = insertvalue %gem %GEM268.fca.3.insert, i64* %GEM268.fca.4.load, 4
  %GEM268.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM268.fca.5.insert = insertvalue %gem %GEM268.fca.4.insert, i64 %GEM268.fca.5.load, 5
  %GEM268.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM268.fca.6.insert = insertvalue %gem %GEM268.fca.5.insert, i64 %GEM268.fca.6.load, 6
  %GEM268.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM268.fca.7.insert = insertvalue %gem %GEM268.fca.6.insert, i64 %GEM268.fca.7.load, 7
  %GEM268.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM268.fca.8.insert = insertvalue %gem %GEM268.fca.7.insert, i64 %GEM268.fca.8.load, 8
  %GEM268.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM268.fca.9.insert = insertvalue %gem %GEM268.fca.8.insert, double* %GEM268.fca.9.load, 9
  %GEM268.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM268.fca.10.insert = insertvalue %gem %GEM268.fca.9.insert, double* %GEM268.fca.10.load, 10
  %GEM268.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM268.fca.11.insert = insertvalue %gem %GEM268.fca.10.insert, double* %GEM268.fca.11.load, 11
  %GEM268.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM268.fca.12.insert = insertvalue %gem %GEM268.fca.11.insert, double* %GEM268.fca.12.load, 12
  %GEM268.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM268.fca.13.insert = insertvalue %gem %GEM268.fca.12.insert, double* %GEM268.fca.13.load, 13
  %GEM268.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM268.fca.14.insert = insertvalue %gem %GEM268.fca.13.insert, double* %GEM268.fca.14.load, 14
  %GEM268.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM268.fca.15.insert = insertvalue %gem %GEM268.fca.14.insert, double* %GEM268.fca.15.load, 15
  %GEM268.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM268.fca.16.insert = insertvalue %gem %GEM268.fca.15.insert, double %GEM268.fca.16.load, 16
  %GEM268.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM268.fca.17.insert = insertvalue %gem %GEM268.fca.16.insert, double %GEM268.fca.17.load, 17
  %GEM268.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM268.fca.18.insert = insertvalue %gem %GEM268.fca.17.insert, double %GEM268.fca.18.load, 18
  %GEM268.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM268.fca.19.insert = insertvalue %gem %GEM268.fca.18.insert, double %GEM268.fca.19.load, 19
  %GEM268.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM268.fca.20.insert = insertvalue %gem %GEM268.fca.19.insert, double %GEM268.fca.20.load, 20
  %GEM268.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM268.fca.21.insert = insertvalue %gem %GEM268.fca.20.insert, <2 x double> %GEM268.fca.21.load, 21
  %GEM268.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM268.fca.22.insert = insertvalue %gem %GEM268.fca.21.insert, <2 x double>* %GEM268.fca.22.load, 22
  %GEM268.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM268.fca.23.insert = insertvalue %gem %GEM268.fca.22.insert, <2 x double>* %GEM268.fca.23.load, 23
  %GEM268.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM268.fca.24.insert = insertvalue %gem %GEM268.fca.23.insert, <2 x double>* %GEM268.fca.24.load, 24
  %GEM268.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM268.fca.25.insert = insertvalue %gem %GEM268.fca.24.insert, <2 x double>* %GEM268.fca.25.load, 25
  %GEM268.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM268.fca.26.insert = insertvalue %gem %GEM268.fca.25.insert, <2 x double>* %GEM268.fca.26.load, 26
  %GEM268.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM268.fca.27.insert = insertvalue %gem %GEM268.fca.26.insert, <2 x double>* %GEM268.fca.27.load, 27
  %GEM268.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM268.fca.28.insert = insertvalue %gem %GEM268.fca.27.insert, <2 x double> %GEM268.fca.28.load, 28
  %GEM268.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM268.fca.29.insert = insertvalue %gem %GEM268.fca.28.insert, <2 x double> %GEM268.fca.29.load, 29
  %GEM268.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM268.fca.30.insert = insertvalue %gem %GEM268.fca.29.insert, <2 x double> %GEM268.fca.30.load, 30
  %GEM268.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM268.fca.31.insert = insertvalue %gem %GEM268.fca.30.insert, <2 x double> %GEM268.fca.31.load, 31
  %GEM268.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM268.fca.32.insert = insertvalue %gem %GEM268.fca.31.insert, <2 x double> %GEM268.fca.32.load, 32
  %GEM268.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM268.fca.33.insert = insertvalue %gem %GEM268.fca.32.insert, <2 x double> %GEM268.fca.33.load, 33
  %GEM268.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM268.fca.33.load, <2 x double>* %81
  call void @"affine@UUUU"(<2 x double>* %__tmp, <2 x double>* %79, <2 x double>* %80, <2 x double>* %81)
  br label %end265

end265:                                           ; preds = %true264, %end248
  %GEM269.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM269.fca.0.insert = insertvalue %gem undef, i64* %GEM269.fca.0.load, 0
  %GEM269.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM269.fca.1.insert = insertvalue %gem %GEM269.fca.0.insert, i64* %GEM269.fca.1.load, 1
  %GEM269.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM269.fca.2.insert = insertvalue %gem %GEM269.fca.1.insert, i64* %GEM269.fca.2.load, 2
  %GEM269.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM269.fca.3.insert = insertvalue %gem %GEM269.fca.2.insert, i64* %GEM269.fca.3.load, 3
  %GEM269.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM269.fca.4.insert = insertvalue %gem %GEM269.fca.3.insert, i64* %GEM269.fca.4.load, 4
  %GEM269.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM269.fca.5.insert = insertvalue %gem %GEM269.fca.4.insert, i64 %GEM269.fca.5.load, 5
  %GEM269.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM269.fca.6.insert = insertvalue %gem %GEM269.fca.5.insert, i64 %GEM269.fca.6.load, 6
  %GEM269.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM269.fca.7.insert = insertvalue %gem %GEM269.fca.6.insert, i64 %GEM269.fca.7.load, 7
  %GEM269.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM269.fca.8.insert = insertvalue %gem %GEM269.fca.7.insert, i64 %GEM269.fca.8.load, 8
  %GEM269.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM269.fca.9.insert = insertvalue %gem %GEM269.fca.8.insert, double* %GEM269.fca.9.load, 9
  %GEM269.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM269.fca.10.insert = insertvalue %gem %GEM269.fca.9.insert, double* %GEM269.fca.10.load, 10
  %GEM269.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM269.fca.11.insert = insertvalue %gem %GEM269.fca.10.insert, double* %GEM269.fca.11.load, 11
  %GEM269.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM269.fca.12.insert = insertvalue %gem %GEM269.fca.11.insert, double* %GEM269.fca.12.load, 12
  %GEM269.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM269.fca.13.insert = insertvalue %gem %GEM269.fca.12.insert, double* %GEM269.fca.13.load, 13
  %GEM269.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM269.fca.14.insert = insertvalue %gem %GEM269.fca.13.insert, double* %GEM269.fca.14.load, 14
  %GEM269.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM269.fca.15.insert = insertvalue %gem %GEM269.fca.14.insert, double* %GEM269.fca.15.load, 15
  %GEM269.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM269.fca.16.insert = insertvalue %gem %GEM269.fca.15.insert, double %GEM269.fca.16.load, 16
  %GEM269.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM269.fca.17.insert = insertvalue %gem %GEM269.fca.16.insert, double %GEM269.fca.17.load, 17
  %GEM269.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM269.fca.18.insert = insertvalue %gem %GEM269.fca.17.insert, double %GEM269.fca.18.load, 18
  %GEM269.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM269.fca.19.insert = insertvalue %gem %GEM269.fca.18.insert, double %GEM269.fca.19.load, 19
  %GEM269.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM269.fca.20.insert = insertvalue %gem %GEM269.fca.19.insert, double %GEM269.fca.20.load, 20
  %GEM269.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM269.fca.21.insert = insertvalue %gem %GEM269.fca.20.insert, <2 x double> %GEM269.fca.21.load, 21
  %GEM269.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM269.fca.22.insert = insertvalue %gem %GEM269.fca.21.insert, <2 x double>* %GEM269.fca.22.load, 22
  %GEM269.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM269.fca.23.insert = insertvalue %gem %GEM269.fca.22.insert, <2 x double>* %GEM269.fca.23.load, 23
  %GEM269.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM269.fca.24.insert = insertvalue %gem %GEM269.fca.23.insert, <2 x double>* %GEM269.fca.24.load, 24
  %GEM269.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM269.fca.25.insert = insertvalue %gem %GEM269.fca.24.insert, <2 x double>* %GEM269.fca.25.load, 25
  %GEM269.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM269.fca.26.insert = insertvalue %gem %GEM269.fca.25.insert, <2 x double>* %GEM269.fca.26.load, 26
  %GEM269.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM269.fca.27.insert = insertvalue %gem %GEM269.fca.26.insert, <2 x double>* %GEM269.fca.27.load, 27
  %GEM269.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM269.fca.28.insert = insertvalue %gem %GEM269.fca.27.insert, <2 x double> %GEM269.fca.28.load, 28
  %GEM269.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM269.fca.29.insert = insertvalue %gem %GEM269.fca.28.insert, <2 x double> %GEM269.fca.29.load, 29
  %GEM269.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM269.fca.30.insert = insertvalue %gem %GEM269.fca.29.insert, <2 x double> %GEM269.fca.30.load, 30
  %GEM269.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM269.fca.31.insert = insertvalue %gem %GEM269.fca.30.insert, <2 x double> %GEM269.fca.31.load, 31
  %GEM269.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM269.fca.32.insert = insertvalue %gem %GEM269.fca.31.insert, <2 x double> %GEM269.fca.32.load, 32
  %GEM269.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM269.fca.33.insert = insertvalue %gem %GEM269.fca.32.insert, <2 x double> %GEM269.fca.33.load, 33
  %GEM269.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  %return270 = fcmp one double %GEM269.fca.19.load, 0.000000e+00
  br i1 %return270, label %true272, label %false

true272:                                          ; preds = %end265
  %v1GMP274.fca.0.load = load double*, double** %v1GMP5.fca.0.gep
  %v1GMP274.fca.0.insert = insertvalue %gemPrm undef, double* %v1GMP274.fca.0.load, 0
  %v1GMP274.fca.1.load = load double*, double** %v1GMP5.fca.1.gep
  %v1GMP274.fca.1.insert = insertvalue %gemPrm %v1GMP274.fca.0.insert, double* %v1GMP274.fca.1.load, 1
  %v1GMP274.fca.2.load = load double*, double** %v1GMP5.fca.2.gep
  %v1GMP274.fca.2.insert = insertvalue %gemPrm %v1GMP274.fca.1.insert, double* %v1GMP274.fca.2.load, 2
  %v1GMP274.fca.3.load = load double*, double** %v1GMP5.fca.3.gep
  %v1GMP274.fca.3.insert = insertvalue %gemPrm %v1GMP274.fca.2.insert, double* %v1GMP274.fca.3.load, 3
  %v1GMP274.fca.4.load = load double*, double** %v1GMP5.fca.4.gep
  %v1GMP274.fca.4.insert = insertvalue %gemPrm %v1GMP274.fca.3.insert, double* %v1GMP274.fca.4.load, 4
  %v1GMP274.fca.5.load = load double*, double** %v1GMP5.fca.5.gep
  %v1GMP274.fca.5.insert = insertvalue %gemPrm %v1GMP274.fca.4.insert, double* %v1GMP274.fca.5.load, 5
  %v1GMP274.fca.6.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.6.gep
  %v1GMP274.fca.6.insert = insertvalue %gemPrm %v1GMP274.fca.5.insert, <3 x double>* %v1GMP274.fca.6.load, 6
  %v1GMP274.fca.7.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.7.gep
  %v1GMP274.fca.7.insert = insertvalue %gemPrm %v1GMP274.fca.6.insert, <3 x double>* %v1GMP274.fca.7.load, 7
  %v1GMP274.fca.8.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.8.gep
  %v1GMP274.fca.8.insert = insertvalue %gemPrm %v1GMP274.fca.7.insert, <3 x double>* %v1GMP274.fca.8.load, 8
  %v1GMP274.fca.9.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.9.gep
  %v1GMP274.fca.9.insert = insertvalue %gemPrm %v1GMP274.fca.8.insert, <3 x double>* %v1GMP274.fca.9.load, 9
  %v1GMP274.fca.10.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.10.gep
  %v1GMP274.fca.10.insert = insertvalue %gemPrm %v1GMP274.fca.9.insert, <3 x double>* %v1GMP274.fca.10.load, 10
  %v1GMP274.fca.11.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.11.gep
  %v1GMP274.fca.11.insert = insertvalue %gemPrm %v1GMP274.fca.10.insert, <3 x double>* %v1GMP274.fca.11.load, 11
  %v1GMP274.fca.12.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.12.gep
  %v1GMP274.fca.12.insert = insertvalue %gemPrm %v1GMP274.fca.11.insert, <3 x double>* %v1GMP274.fca.12.load, 12
  %v1GMP274.fca.13.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.13.gep
  %v1GMP274.fca.13.insert = insertvalue %gemPrm %v1GMP274.fca.12.insert, <2 x double>* %v1GMP274.fca.13.load, 13
  %v1GMP274.fca.14.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.14.gep
  %v1GMP274.fca.14.insert = insertvalue %gemPrm %v1GMP274.fca.13.insert, <2 x double>* %v1GMP274.fca.14.load, 14
  %v1GMP274.fca.15.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.15.gep
  %v1GMP274.fca.15.insert = insertvalue %gemPrm %v1GMP274.fca.14.insert, <2 x double>* %v1GMP274.fca.15.load, 15
  %v1GMP274.fca.16.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.16.gep
  %v1GMP274.fca.16.insert = insertvalue %gemPrm %v1GMP274.fca.15.insert, <2 x double>* %v1GMP274.fca.16.load, 16
  %v1GMP274.fca.17.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.17.gep
  %v1GMP274.fca.17.insert = insertvalue %gemPrm %v1GMP274.fca.16.insert, <2 x double>* %v1GMP274.fca.17.load, 17
  %v1GMP274.fca.18.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.18.gep
  %v1GMP274.fca.18.insert = insertvalue %gemPrm %v1GMP274.fca.17.insert, <2 x double>* %v1GMP274.fca.18.load, 18
  %v1GMP274.fca.19.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.19.gep
  %v1GMP274.fca.19.insert = insertvalue %gemPrm %v1GMP274.fca.18.insert, <2 x double>* %v1GMP274.fca.19.load, 19
  %v1GMP274.fca.20.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.20.gep
  %v1GMP274.fca.20.insert = insertvalue %gemPrm %v1GMP274.fca.19.insert, <2 x double>* %v1GMP274.fca.20.load, 20
  %v1GMP274.fca.21.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.21.gep
  %v1GMP274.fca.21.insert = insertvalue %gemPrm %v1GMP274.fca.20.insert, <2 x double>* %v1GMP274.fca.21.load, 21
  %v1GMP274.fca.22.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.22.gep
  %v1GMP274.fca.22.insert = insertvalue %gemPrm %v1GMP274.fca.21.insert, <2 x double>* %v1GMP274.fca.22.load, 22
  %v1GMP274.fca.23.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.23.gep
  %v1GMP274.fca.23.insert = insertvalue %gemPrm %v1GMP274.fca.22.insert, <2 x double>* %v1GMP274.fca.23.load, 23
  %v1GMP274.fca.24.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.24.gep
  %v1GMP274.fca.24.insert = insertvalue %gemPrm %v1GMP274.fca.23.insert, <2 x double>* %v1GMP274.fca.24.load, 24
  %v1GMP274.fca.25.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.25.gep
  %v1GMP274.fca.25.insert = insertvalue %gemPrm %v1GMP274.fca.24.insert, <2 x double>* %v1GMP274.fca.25.load, 25
  %v1GMP274.fca.26.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.26.gep
  %v1GMP274.fca.26.insert = insertvalue %gemPrm %v1GMP274.fca.25.insert, <2 x double>* %v1GMP274.fca.26.load, 26
  %v1GMP274.fca.27.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.27.gep
  %v1GMP274.fca.27.insert = insertvalue %gemPrm %v1GMP274.fca.26.insert, <2 x double>* %v1GMP274.fca.27.load, 27
  %v1GMP274.fca.28.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.28.gep
  %v1GMP274.fca.28.insert = insertvalue %gemPrm %v1GMP274.fca.27.insert, <2 x double>* %v1GMP274.fca.28.load, 28
  %v1GMP274.fca.29.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.29.gep
  %v1GMP274.fca.29.insert = insertvalue %gemPrm %v1GMP274.fca.28.insert, <2 x double>* %v1GMP274.fca.29.load, 29
  %v1GMP274.fca.30.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.30.gep
  %v1GMP274.fca.30.insert = insertvalue %gemPrm %v1GMP274.fca.29.insert, <2 x double>* %v1GMP274.fca.30.load, 30
  %v1GMP274.fca.31.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.31.gep
  %v1GMP274.fca.31.insert = insertvalue %gemPrm %v1GMP274.fca.30.insert, <2 x double>* %v1GMP274.fca.31.load, 31
  %v1GMP274.fca.32.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.32.gep
  %v1GMP274.fca.32.insert = insertvalue %gemPrm %v1GMP274.fca.31.insert, <2 x double>* %v1GMP274.fca.32.load, 32
  %v1GMP274.fca.33.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.33.gep
  %v1GMP274.fca.33.insert = insertvalue %gemPrm %v1GMP274.fca.32.insert, <2 x double>* %v1GMP274.fca.33.load, 33
  %v1GMP274.fca.34.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.34.gep
  %v1GMP274.fca.34.insert = insertvalue %gemPrm %v1GMP274.fca.33.insert, <2 x double>* %v1GMP274.fca.34.load, 34
  %v1GMP274.fca.35.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.35.gep
  %v1GMP274.fca.35.insert = insertvalue %gemPrm %v1GMP274.fca.34.insert, <2 x double>* %v1GMP274.fca.35.load, 35
  %v1GMP274.fca.36.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.36.gep
  %v1GMP274.fca.36.insert = insertvalue %gemPrm %v1GMP274.fca.35.insert, <2 x double>* %v1GMP274.fca.36.load, 36
  %v1GMP274.fca.37.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.37.gep
  %v1GMP274.fca.37.insert = insertvalue %gemPrm %v1GMP274.fca.36.insert, <2 x double>* %v1GMP274.fca.37.load, 37
  %v1GMP274.fca.38.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.38.gep
  %v1GMP274.fca.38.insert = insertvalue %gemPrm %v1GMP274.fca.37.insert, <2 x double>* %v1GMP274.fca.38.load, 38
  %v1GMP274.fca.39.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.39.gep
  %v1GMP274.fca.39.insert = insertvalue %gemPrm %v1GMP274.fca.38.insert, <2 x double>* %v1GMP274.fca.39.load, 39
  %v1GMP274.fca.40.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.40.gep
  %v1GMP274.fca.40.insert = insertvalue %gemPrm %v1GMP274.fca.39.insert, <2 x double>* %v1GMP274.fca.40.load, 40
  %v1GMP274.fca.41.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.41.gep
  %v1GMP274.fca.41.insert = insertvalue %gemPrm %v1GMP274.fca.40.insert, <2 x double>* %v1GMP274.fca.41.load, 41
  %v1GMP274.fca.42.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.42.gep
  %v1GMP274.fca.42.insert = insertvalue %gemPrm %v1GMP274.fca.41.insert, <4 x double>* %v1GMP274.fca.42.load, 42
  %v1GMP274.fca.43.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.43.gep
  %v1GMP274.fca.43.insert = insertvalue %gemPrm %v1GMP274.fca.42.insert, <4 x double>* %v1GMP274.fca.43.load, 43
  %v1GMP274.fca.44.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.44.gep
  %v1GMP274.fca.44.insert = insertvalue %gemPrm %v1GMP274.fca.43.insert, <4 x double>* %v1GMP274.fca.44.load, 44
  %v1GMP274.fca.45.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.45.gep
  %v1GMP274.fca.45.insert = insertvalue %gemPrm %v1GMP274.fca.44.insert, <4 x double>* %v1GMP274.fca.45.load, 45
  %v1GMP274.fca.46.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.46.gep
  %v1GMP274.fca.46.insert = insertvalue %gemPrm %v1GMP274.fca.45.insert, <4 x double>* %v1GMP274.fca.46.load, 46
  %v1GMP274.fca.47.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.47.gep
  %v1GMP274.fca.47.insert = insertvalue %gemPrm %v1GMP274.fca.46.insert, <4 x double>* %v1GMP274.fca.47.load, 47
  %v1GMP274.fca.48.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.48.gep
  %v1GMP274.fca.48.insert = insertvalue %gemPrm %v1GMP274.fca.47.insert, <4 x double>* %v1GMP274.fca.48.load, 48
  %v1GMP274.fca.49.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.49.gep
  %v1GMP274.fca.49.insert = insertvalue %gemPrm %v1GMP274.fca.48.insert, <4 x double>* %v1GMP274.fca.49.load, 49
  %v1GMP274.fca.50.load = load <4 x double>*, <4 x double>** %v1GMP5.fca.50.gep
  %v1GMP274.fca.50.insert = insertvalue %gemPrm %v1GMP274.fca.49.insert, <4 x double>* %v1GMP274.fca.50.load, 50
  %v1GMP274.fca.51.load = load <3 x double>*, <3 x double>** %v1GMP5.fca.51.gep
  %v1GMP274.fca.51.insert = insertvalue %gemPrm %v1GMP274.fca.50.insert, <3 x double>* %v1GMP274.fca.51.load, 51
  %v1GMP274.fca.52.load = load <2 x double>*, <2 x double>** %v1GMP5.fca.52.gep
  %v1GMP274.fca.0.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 0
  store double* %v1GMP274.fca.0.load, double** %v1GMP274.fca.0.gep
  %v1GMP274.fca.1.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 1
  store double* %v1GMP274.fca.1.load, double** %v1GMP274.fca.1.gep
  %v1GMP274.fca.2.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 2
  store double* %v1GMP274.fca.2.load, double** %v1GMP274.fca.2.gep
  %v1GMP274.fca.3.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 3
  store double* %v1GMP274.fca.3.load, double** %v1GMP274.fca.3.gep
  %v1GMP274.fca.4.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 4
  store double* %v1GMP274.fca.4.load, double** %v1GMP274.fca.4.gep
  %v1GMP274.fca.5.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 5
  store double* %v1GMP274.fca.5.load, double** %v1GMP274.fca.5.gep
  %v1GMP274.fca.6.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 6
  store <3 x double>* %v1GMP274.fca.6.load, <3 x double>** %v1GMP274.fca.6.gep
  %v1GMP274.fca.7.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 7
  store <3 x double>* %v1GMP274.fca.7.load, <3 x double>** %v1GMP274.fca.7.gep
  %v1GMP274.fca.8.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 8
  store <3 x double>* %v1GMP274.fca.8.load, <3 x double>** %v1GMP274.fca.8.gep
  %v1GMP274.fca.9.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 9
  store <3 x double>* %v1GMP274.fca.9.load, <3 x double>** %v1GMP274.fca.9.gep
  %v1GMP274.fca.10.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 10
  store <3 x double>* %v1GMP274.fca.10.load, <3 x double>** %v1GMP274.fca.10.gep
  %v1GMP274.fca.11.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 11
  store <3 x double>* %v1GMP274.fca.11.load, <3 x double>** %v1GMP274.fca.11.gep
  %v1GMP274.fca.12.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 12
  store <3 x double>* %v1GMP274.fca.12.load, <3 x double>** %v1GMP274.fca.12.gep
  %v1GMP274.fca.13.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 13
  store <2 x double>* %v1GMP274.fca.13.load, <2 x double>** %v1GMP274.fca.13.gep
  %v1GMP274.fca.14.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 14
  store <2 x double>* %v1GMP274.fca.14.load, <2 x double>** %v1GMP274.fca.14.gep
  %v1GMP274.fca.15.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 15
  store <2 x double>* %v1GMP274.fca.15.load, <2 x double>** %v1GMP274.fca.15.gep
  %v1GMP274.fca.16.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 16
  store <2 x double>* %v1GMP274.fca.16.load, <2 x double>** %v1GMP274.fca.16.gep
  %v1GMP274.fca.17.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 17
  store <2 x double>* %v1GMP274.fca.17.load, <2 x double>** %v1GMP274.fca.17.gep
  %v1GMP274.fca.18.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 18
  store <2 x double>* %v1GMP274.fca.18.load, <2 x double>** %v1GMP274.fca.18.gep
  %v1GMP274.fca.19.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 19
  store <2 x double>* %v1GMP274.fca.19.load, <2 x double>** %v1GMP274.fca.19.gep
  %v1GMP274.fca.20.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 20
  store <2 x double>* %v1GMP274.fca.20.load, <2 x double>** %v1GMP274.fca.20.gep
  %v1GMP274.fca.21.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 21
  store <2 x double>* %v1GMP274.fca.21.load, <2 x double>** %v1GMP274.fca.21.gep
  %v1GMP274.fca.22.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 22
  store <2 x double>* %v1GMP274.fca.22.load, <2 x double>** %v1GMP274.fca.22.gep
  %v1GMP274.fca.23.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 23
  store <2 x double>* %v1GMP274.fca.23.load, <2 x double>** %v1GMP274.fca.23.gep
  %v1GMP274.fca.24.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 24
  store <2 x double>* %v1GMP274.fca.24.load, <2 x double>** %v1GMP274.fca.24.gep
  %v1GMP274.fca.25.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 25
  store <2 x double>* %v1GMP274.fca.25.load, <2 x double>** %v1GMP274.fca.25.gep
  %v1GMP274.fca.26.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 26
  store <2 x double>* %v1GMP274.fca.26.load, <2 x double>** %v1GMP274.fca.26.gep
  %v1GMP274.fca.27.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 27
  store <2 x double>* %v1GMP274.fca.27.load, <2 x double>** %v1GMP274.fca.27.gep
  %v1GMP274.fca.28.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 28
  store <2 x double>* %v1GMP274.fca.28.load, <2 x double>** %v1GMP274.fca.28.gep
  %v1GMP274.fca.29.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 29
  store <2 x double>* %v1GMP274.fca.29.load, <2 x double>** %v1GMP274.fca.29.gep
  %v1GMP274.fca.30.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 30
  store <2 x double>* %v1GMP274.fca.30.load, <2 x double>** %v1GMP274.fca.30.gep
  %v1GMP274.fca.31.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 31
  store <2 x double>* %v1GMP274.fca.31.load, <2 x double>** %v1GMP274.fca.31.gep
  %v1GMP274.fca.32.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 32
  store <2 x double>* %v1GMP274.fca.32.load, <2 x double>** %v1GMP274.fca.32.gep
  %v1GMP274.fca.33.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 33
  store <2 x double>* %v1GMP274.fca.33.load, <2 x double>** %v1GMP274.fca.33.gep
  %v1GMP274.fca.34.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 34
  store <2 x double>* %v1GMP274.fca.34.load, <2 x double>** %v1GMP274.fca.34.gep
  %v1GMP274.fca.35.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 35
  store <2 x double>* %v1GMP274.fca.35.load, <2 x double>** %v1GMP274.fca.35.gep
  %v1GMP274.fca.36.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 36
  store <2 x double>* %v1GMP274.fca.36.load, <2 x double>** %v1GMP274.fca.36.gep
  %v1GMP274.fca.37.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 37
  store <2 x double>* %v1GMP274.fca.37.load, <2 x double>** %v1GMP274.fca.37.gep
  %v1GMP274.fca.38.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 38
  store <2 x double>* %v1GMP274.fca.38.load, <2 x double>** %v1GMP274.fca.38.gep
  %v1GMP274.fca.39.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 39
  store <2 x double>* %v1GMP274.fca.39.load, <2 x double>** %v1GMP274.fca.39.gep
  %v1GMP274.fca.40.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 40
  store <2 x double>* %v1GMP274.fca.40.load, <2 x double>** %v1GMP274.fca.40.gep
  %v1GMP274.fca.41.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 41
  store <2 x double>* %v1GMP274.fca.41.load, <2 x double>** %v1GMP274.fca.41.gep
  %v1GMP274.fca.42.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 42
  store <4 x double>* %v1GMP274.fca.42.load, <4 x double>** %v1GMP274.fca.42.gep
  %v1GMP274.fca.43.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 43
  store <4 x double>* %v1GMP274.fca.43.load, <4 x double>** %v1GMP274.fca.43.gep
  %v1GMP274.fca.44.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 44
  store <4 x double>* %v1GMP274.fca.44.load, <4 x double>** %v1GMP274.fca.44.gep
  %v1GMP274.fca.45.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 45
  store <4 x double>* %v1GMP274.fca.45.load, <4 x double>** %v1GMP274.fca.45.gep
  %v1GMP274.fca.46.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 46
  store <4 x double>* %v1GMP274.fca.46.load, <4 x double>** %v1GMP274.fca.46.gep
  %v1GMP274.fca.47.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 47
  store <4 x double>* %v1GMP274.fca.47.load, <4 x double>** %v1GMP274.fca.47.gep
  %v1GMP274.fca.48.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 48
  store <4 x double>* %v1GMP274.fca.48.load, <4 x double>** %v1GMP274.fca.48.gep
  %v1GMP274.fca.49.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 49
  store <4 x double>* %v1GMP274.fca.49.load, <4 x double>** %v1GMP274.fca.49.gep
  %v1GMP274.fca.50.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 50
  store <4 x double>* %v1GMP274.fca.50.load, <4 x double>** %v1GMP274.fca.50.gep
  %v1GMP274.fca.51.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 51
  store <3 x double>* %v1GMP274.fca.51.load, <3 x double>** %v1GMP274.fca.51.gep
  %v1GMP274.fca.52.gep = getelementptr inbounds %gemPrm, %gemPrm* %82, i32 0, i32 52
  store <2 x double>* %v1GMP274.fca.52.load, <2 x double>** %v1GMP274.fca.52.gep
  store i64 0, i64* %83
  store i64 0, i64* %84
  %GEM275.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM275.fca.0.insert = insertvalue %gem undef, i64* %GEM275.fca.0.load, 0
  %GEM275.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM275.fca.1.insert = insertvalue %gem %GEM275.fca.0.insert, i64* %GEM275.fca.1.load, 1
  %GEM275.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM275.fca.2.insert = insertvalue %gem %GEM275.fca.1.insert, i64* %GEM275.fca.2.load, 2
  %GEM275.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM275.fca.3.insert = insertvalue %gem %GEM275.fca.2.insert, i64* %GEM275.fca.3.load, 3
  %GEM275.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM275.fca.4.insert = insertvalue %gem %GEM275.fca.3.insert, i64* %GEM275.fca.4.load, 4
  %GEM275.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM275.fca.5.insert = insertvalue %gem %GEM275.fca.4.insert, i64 %GEM275.fca.5.load, 5
  %GEM275.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM275.fca.6.insert = insertvalue %gem %GEM275.fca.5.insert, i64 %GEM275.fca.6.load, 6
  %GEM275.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM275.fca.7.insert = insertvalue %gem %GEM275.fca.6.insert, i64 %GEM275.fca.7.load, 7
  %GEM275.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM275.fca.8.insert = insertvalue %gem %GEM275.fca.7.insert, i64 %GEM275.fca.8.load, 8
  %GEM275.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM275.fca.9.insert = insertvalue %gem %GEM275.fca.8.insert, double* %GEM275.fca.9.load, 9
  %GEM275.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM275.fca.10.insert = insertvalue %gem %GEM275.fca.9.insert, double* %GEM275.fca.10.load, 10
  %GEM275.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM275.fca.11.insert = insertvalue %gem %GEM275.fca.10.insert, double* %GEM275.fca.11.load, 11
  %GEM275.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM275.fca.12.insert = insertvalue %gem %GEM275.fca.11.insert, double* %GEM275.fca.12.load, 12
  %GEM275.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM275.fca.13.insert = insertvalue %gem %GEM275.fca.12.insert, double* %GEM275.fca.13.load, 13
  %GEM275.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM275.fca.14.insert = insertvalue %gem %GEM275.fca.13.insert, double* %GEM275.fca.14.load, 14
  %GEM275.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM275.fca.15.insert = insertvalue %gem %GEM275.fca.14.insert, double* %GEM275.fca.15.load, 15
  %GEM275.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM275.fca.16.insert = insertvalue %gem %GEM275.fca.15.insert, double %GEM275.fca.16.load, 16
  %GEM275.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM275.fca.17.insert = insertvalue %gem %GEM275.fca.16.insert, double %GEM275.fca.17.load, 17
  %GEM275.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM275.fca.18.insert = insertvalue %gem %GEM275.fca.17.insert, double %GEM275.fca.18.load, 18
  %GEM275.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM275.fca.19.insert = insertvalue %gem %GEM275.fca.18.insert, double %GEM275.fca.19.load, 19
  %GEM275.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM275.fca.20.insert = insertvalue %gem %GEM275.fca.19.insert, double %GEM275.fca.20.load, 20
  %GEM275.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM275.fca.21.insert = insertvalue %gem %GEM275.fca.20.insert, <2 x double> %GEM275.fca.21.load, 21
  %GEM275.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM275.fca.22.insert = insertvalue %gem %GEM275.fca.21.insert, <2 x double>* %GEM275.fca.22.load, 22
  %GEM275.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM275.fca.23.insert = insertvalue %gem %GEM275.fca.22.insert, <2 x double>* %GEM275.fca.23.load, 23
  %GEM275.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM275.fca.24.insert = insertvalue %gem %GEM275.fca.23.insert, <2 x double>* %GEM275.fca.24.load, 24
  %GEM275.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM275.fca.25.insert = insertvalue %gem %GEM275.fca.24.insert, <2 x double>* %GEM275.fca.25.load, 25
  %GEM275.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM275.fca.26.insert = insertvalue %gem %GEM275.fca.25.insert, <2 x double>* %GEM275.fca.26.load, 26
  %GEM275.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM275.fca.27.insert = insertvalue %gem %GEM275.fca.26.insert, <2 x double>* %GEM275.fca.27.load, 27
  %GEM275.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM275.fca.28.insert = insertvalue %gem %GEM275.fca.27.insert, <2 x double> %GEM275.fca.28.load, 28
  %GEM275.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM275.fca.29.insert = insertvalue %gem %GEM275.fca.28.insert, <2 x double> %GEM275.fca.29.load, 29
  %GEM275.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM275.fca.30.insert = insertvalue %gem %GEM275.fca.29.insert, <2 x double> %GEM275.fca.30.load, 30
  %GEM275.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM275.fca.31.insert = insertvalue %gem %GEM275.fca.30.insert, <2 x double> %GEM275.fca.31.load, 31
  %GEM275.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM275.fca.32.insert = insertvalue %gem %GEM275.fca.31.insert, <2 x double> %GEM275.fca.32.load, 32
  %GEM275.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM275.fca.33.insert = insertvalue %gem %GEM275.fca.32.insert, <2 x double> %GEM275.fca.33.load, 33
  %GEM275.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store i64 %GEM275.fca.8.load, i64* %85
  %__tmp276 = load <2 x double>, <2 x double>* %__tmp
  store <2 x double> %__tmp276, <2 x double>* %86
  %GEM277.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM277.fca.0.insert = insertvalue %gem undef, i64* %GEM277.fca.0.load, 0
  %GEM277.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM277.fca.1.insert = insertvalue %gem %GEM277.fca.0.insert, i64* %GEM277.fca.1.load, 1
  %GEM277.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM277.fca.2.insert = insertvalue %gem %GEM277.fca.1.insert, i64* %GEM277.fca.2.load, 2
  %GEM277.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM277.fca.3.insert = insertvalue %gem %GEM277.fca.2.insert, i64* %GEM277.fca.3.load, 3
  %GEM277.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM277.fca.4.insert = insertvalue %gem %GEM277.fca.3.insert, i64* %GEM277.fca.4.load, 4
  %GEM277.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM277.fca.5.insert = insertvalue %gem %GEM277.fca.4.insert, i64 %GEM277.fca.5.load, 5
  %GEM277.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM277.fca.6.insert = insertvalue %gem %GEM277.fca.5.insert, i64 %GEM277.fca.6.load, 6
  %GEM277.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM277.fca.7.insert = insertvalue %gem %GEM277.fca.6.insert, i64 %GEM277.fca.7.load, 7
  %GEM277.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM277.fca.8.insert = insertvalue %gem %GEM277.fca.7.insert, i64 %GEM277.fca.8.load, 8
  %GEM277.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM277.fca.9.insert = insertvalue %gem %GEM277.fca.8.insert, double* %GEM277.fca.9.load, 9
  %GEM277.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM277.fca.10.insert = insertvalue %gem %GEM277.fca.9.insert, double* %GEM277.fca.10.load, 10
  %GEM277.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM277.fca.11.insert = insertvalue %gem %GEM277.fca.10.insert, double* %GEM277.fca.11.load, 11
  %GEM277.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM277.fca.12.insert = insertvalue %gem %GEM277.fca.11.insert, double* %GEM277.fca.12.load, 12
  %GEM277.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM277.fca.13.insert = insertvalue %gem %GEM277.fca.12.insert, double* %GEM277.fca.13.load, 13
  %GEM277.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM277.fca.14.insert = insertvalue %gem %GEM277.fca.13.insert, double* %GEM277.fca.14.load, 14
  %GEM277.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM277.fca.15.insert = insertvalue %gem %GEM277.fca.14.insert, double* %GEM277.fca.15.load, 15
  %GEM277.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM277.fca.16.insert = insertvalue %gem %GEM277.fca.15.insert, double %GEM277.fca.16.load, 16
  %GEM277.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM277.fca.17.insert = insertvalue %gem %GEM277.fca.16.insert, double %GEM277.fca.17.load, 17
  %GEM277.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM277.fca.18.insert = insertvalue %gem %GEM277.fca.17.insert, double %GEM277.fca.18.load, 18
  %GEM277.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM277.fca.19.insert = insertvalue %gem %GEM277.fca.18.insert, double %GEM277.fca.19.load, 19
  %GEM277.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM277.fca.20.insert = insertvalue %gem %GEM277.fca.19.insert, double %GEM277.fca.20.load, 20
  %GEM277.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM277.fca.21.insert = insertvalue %gem %GEM277.fca.20.insert, <2 x double> %GEM277.fca.21.load, 21
  %GEM277.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM277.fca.22.insert = insertvalue %gem %GEM277.fca.21.insert, <2 x double>* %GEM277.fca.22.load, 22
  %GEM277.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM277.fca.23.insert = insertvalue %gem %GEM277.fca.22.insert, <2 x double>* %GEM277.fca.23.load, 23
  %GEM277.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM277.fca.24.insert = insertvalue %gem %GEM277.fca.23.insert, <2 x double>* %GEM277.fca.24.load, 24
  %GEM277.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM277.fca.25.insert = insertvalue %gem %GEM277.fca.24.insert, <2 x double>* %GEM277.fca.25.load, 25
  %GEM277.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM277.fca.26.insert = insertvalue %gem %GEM277.fca.25.insert, <2 x double>* %GEM277.fca.26.load, 26
  %GEM277.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM277.fca.27.insert = insertvalue %gem %GEM277.fca.26.insert, <2 x double>* %GEM277.fca.27.load, 27
  %GEM277.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM277.fca.28.insert = insertvalue %gem %GEM277.fca.27.insert, <2 x double> %GEM277.fca.28.load, 28
  %GEM277.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM277.fca.29.insert = insertvalue %gem %GEM277.fca.28.insert, <2 x double> %GEM277.fca.29.load, 29
  %GEM277.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM277.fca.30.insert = insertvalue %gem %GEM277.fca.29.insert, <2 x double> %GEM277.fca.30.load, 30
  %GEM277.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM277.fca.31.insert = insertvalue %gem %GEM277.fca.30.insert, <2 x double> %GEM277.fca.31.load, 31
  %GEM277.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM277.fca.32.insert = insertvalue %gem %GEM277.fca.31.insert, <2 x double> %GEM277.fca.32.load, 32
  %GEM277.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM277.fca.33.insert = insertvalue %gem %GEM277.fca.32.insert, <2 x double> %GEM277.fca.33.load, 33
  %GEM277.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM277.fca.28.load, <2 x double>* %87
  %GEM279.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM279.fca.0.insert = insertvalue %gem undef, i64* %GEM279.fca.0.load, 0
  %GEM279.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM279.fca.1.insert = insertvalue %gem %GEM279.fca.0.insert, i64* %GEM279.fca.1.load, 1
  %GEM279.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM279.fca.2.insert = insertvalue %gem %GEM279.fca.1.insert, i64* %GEM279.fca.2.load, 2
  %GEM279.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM279.fca.3.insert = insertvalue %gem %GEM279.fca.2.insert, i64* %GEM279.fca.3.load, 3
  %GEM279.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM279.fca.4.insert = insertvalue %gem %GEM279.fca.3.insert, i64* %GEM279.fca.4.load, 4
  %GEM279.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM279.fca.5.insert = insertvalue %gem %GEM279.fca.4.insert, i64 %GEM279.fca.5.load, 5
  %GEM279.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM279.fca.6.insert = insertvalue %gem %GEM279.fca.5.insert, i64 %GEM279.fca.6.load, 6
  %GEM279.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM279.fca.7.insert = insertvalue %gem %GEM279.fca.6.insert, i64 %GEM279.fca.7.load, 7
  %GEM279.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM279.fca.8.insert = insertvalue %gem %GEM279.fca.7.insert, i64 %GEM279.fca.8.load, 8
  %GEM279.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM279.fca.9.insert = insertvalue %gem %GEM279.fca.8.insert, double* %GEM279.fca.9.load, 9
  %GEM279.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM279.fca.10.insert = insertvalue %gem %GEM279.fca.9.insert, double* %GEM279.fca.10.load, 10
  %GEM279.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM279.fca.11.insert = insertvalue %gem %GEM279.fca.10.insert, double* %GEM279.fca.11.load, 11
  %GEM279.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM279.fca.12.insert = insertvalue %gem %GEM279.fca.11.insert, double* %GEM279.fca.12.load, 12
  %GEM279.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM279.fca.13.insert = insertvalue %gem %GEM279.fca.12.insert, double* %GEM279.fca.13.load, 13
  %GEM279.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM279.fca.14.insert = insertvalue %gem %GEM279.fca.13.insert, double* %GEM279.fca.14.load, 14
  %GEM279.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM279.fca.15.insert = insertvalue %gem %GEM279.fca.14.insert, double* %GEM279.fca.15.load, 15
  %GEM279.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM279.fca.16.insert = insertvalue %gem %GEM279.fca.15.insert, double %GEM279.fca.16.load, 16
  %GEM279.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM279.fca.17.insert = insertvalue %gem %GEM279.fca.16.insert, double %GEM279.fca.17.load, 17
  %GEM279.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM279.fca.18.insert = insertvalue %gem %GEM279.fca.17.insert, double %GEM279.fca.18.load, 18
  %GEM279.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM279.fca.19.insert = insertvalue %gem %GEM279.fca.18.insert, double %GEM279.fca.19.load, 19
  %GEM279.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM279.fca.20.insert = insertvalue %gem %GEM279.fca.19.insert, double %GEM279.fca.20.load, 20
  %GEM279.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM279.fca.21.insert = insertvalue %gem %GEM279.fca.20.insert, <2 x double> %GEM279.fca.21.load, 21
  %GEM279.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM279.fca.22.insert = insertvalue %gem %GEM279.fca.21.insert, <2 x double>* %GEM279.fca.22.load, 22
  %GEM279.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM279.fca.23.insert = insertvalue %gem %GEM279.fca.22.insert, <2 x double>* %GEM279.fca.23.load, 23
  %GEM279.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM279.fca.24.insert = insertvalue %gem %GEM279.fca.23.insert, <2 x double>* %GEM279.fca.24.load, 24
  %GEM279.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM279.fca.25.insert = insertvalue %gem %GEM279.fca.24.insert, <2 x double>* %GEM279.fca.25.load, 25
  %GEM279.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM279.fca.26.insert = insertvalue %gem %GEM279.fca.25.insert, <2 x double>* %GEM279.fca.26.load, 26
  %GEM279.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM279.fca.27.insert = insertvalue %gem %GEM279.fca.26.insert, <2 x double>* %GEM279.fca.27.load, 27
  %GEM279.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM279.fca.28.insert = insertvalue %gem %GEM279.fca.27.insert, <2 x double> %GEM279.fca.28.load, 28
  %GEM279.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM279.fca.29.insert = insertvalue %gem %GEM279.fca.28.insert, <2 x double> %GEM279.fca.29.load, 29
  %GEM279.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM279.fca.30.insert = insertvalue %gem %GEM279.fca.29.insert, <2 x double> %GEM279.fca.30.load, 30
  %GEM279.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM279.fca.31.insert = insertvalue %gem %GEM279.fca.30.insert, <2 x double> %GEM279.fca.31.load, 31
  %GEM279.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM279.fca.32.insert = insertvalue %gem %GEM279.fca.31.insert, <2 x double> %GEM279.fca.32.load, 32
  %GEM279.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM279.fca.33.insert = insertvalue %gem %GEM279.fca.32.insert, <2 x double> %GEM279.fca.33.load, 33
  %GEM279.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM279.fca.29.load, <2 x double>* %88
  %GEM281.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM281.fca.0.insert = insertvalue %gem undef, i64* %GEM281.fca.0.load, 0
  %GEM281.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM281.fca.1.insert = insertvalue %gem %GEM281.fca.0.insert, i64* %GEM281.fca.1.load, 1
  %GEM281.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM281.fca.2.insert = insertvalue %gem %GEM281.fca.1.insert, i64* %GEM281.fca.2.load, 2
  %GEM281.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM281.fca.3.insert = insertvalue %gem %GEM281.fca.2.insert, i64* %GEM281.fca.3.load, 3
  %GEM281.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM281.fca.4.insert = insertvalue %gem %GEM281.fca.3.insert, i64* %GEM281.fca.4.load, 4
  %GEM281.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM281.fca.5.insert = insertvalue %gem %GEM281.fca.4.insert, i64 %GEM281.fca.5.load, 5
  %GEM281.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM281.fca.6.insert = insertvalue %gem %GEM281.fca.5.insert, i64 %GEM281.fca.6.load, 6
  %GEM281.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM281.fca.7.insert = insertvalue %gem %GEM281.fca.6.insert, i64 %GEM281.fca.7.load, 7
  %GEM281.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM281.fca.8.insert = insertvalue %gem %GEM281.fca.7.insert, i64 %GEM281.fca.8.load, 8
  %GEM281.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM281.fca.9.insert = insertvalue %gem %GEM281.fca.8.insert, double* %GEM281.fca.9.load, 9
  %GEM281.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM281.fca.10.insert = insertvalue %gem %GEM281.fca.9.insert, double* %GEM281.fca.10.load, 10
  %GEM281.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM281.fca.11.insert = insertvalue %gem %GEM281.fca.10.insert, double* %GEM281.fca.11.load, 11
  %GEM281.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM281.fca.12.insert = insertvalue %gem %GEM281.fca.11.insert, double* %GEM281.fca.12.load, 12
  %GEM281.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM281.fca.13.insert = insertvalue %gem %GEM281.fca.12.insert, double* %GEM281.fca.13.load, 13
  %GEM281.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM281.fca.14.insert = insertvalue %gem %GEM281.fca.13.insert, double* %GEM281.fca.14.load, 14
  %GEM281.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM281.fca.15.insert = insertvalue %gem %GEM281.fca.14.insert, double* %GEM281.fca.15.load, 15
  %GEM281.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM281.fca.16.insert = insertvalue %gem %GEM281.fca.15.insert, double %GEM281.fca.16.load, 16
  %GEM281.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM281.fca.17.insert = insertvalue %gem %GEM281.fca.16.insert, double %GEM281.fca.17.load, 17
  %GEM281.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM281.fca.18.insert = insertvalue %gem %GEM281.fca.17.insert, double %GEM281.fca.18.load, 18
  %GEM281.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM281.fca.19.insert = insertvalue %gem %GEM281.fca.18.insert, double %GEM281.fca.19.load, 19
  %GEM281.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM281.fca.20.insert = insertvalue %gem %GEM281.fca.19.insert, double %GEM281.fca.20.load, 20
  %GEM281.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM281.fca.21.insert = insertvalue %gem %GEM281.fca.20.insert, <2 x double> %GEM281.fca.21.load, 21
  %GEM281.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM281.fca.22.insert = insertvalue %gem %GEM281.fca.21.insert, <2 x double>* %GEM281.fca.22.load, 22
  %GEM281.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM281.fca.23.insert = insertvalue %gem %GEM281.fca.22.insert, <2 x double>* %GEM281.fca.23.load, 23
  %GEM281.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM281.fca.24.insert = insertvalue %gem %GEM281.fca.23.insert, <2 x double>* %GEM281.fca.24.load, 24
  %GEM281.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM281.fca.25.insert = insertvalue %gem %GEM281.fca.24.insert, <2 x double>* %GEM281.fca.25.load, 25
  %GEM281.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM281.fca.26.insert = insertvalue %gem %GEM281.fca.25.insert, <2 x double>* %GEM281.fca.26.load, 26
  %GEM281.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM281.fca.27.insert = insertvalue %gem %GEM281.fca.26.insert, <2 x double>* %GEM281.fca.27.load, 27
  %GEM281.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM281.fca.28.insert = insertvalue %gem %GEM281.fca.27.insert, <2 x double> %GEM281.fca.28.load, 28
  %GEM281.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM281.fca.29.insert = insertvalue %gem %GEM281.fca.28.insert, <2 x double> %GEM281.fca.29.load, 29
  %GEM281.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM281.fca.30.insert = insertvalue %gem %GEM281.fca.29.insert, <2 x double> %GEM281.fca.30.load, 30
  %GEM281.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM281.fca.31.insert = insertvalue %gem %GEM281.fca.30.insert, <2 x double> %GEM281.fca.31.load, 31
  %GEM281.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM281.fca.32.insert = insertvalue %gem %GEM281.fca.31.insert, <2 x double> %GEM281.fca.32.load, 32
  %GEM281.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM281.fca.33.insert = insertvalue %gem %GEM281.fca.32.insert, <2 x double> %GEM281.fca.33.load, 33
  %GEM281.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store <2 x double> %GEM281.fca.30.load, <2 x double>* %89
  %GEM283.fca.0.load = load i64*, i64** %GEM2.fca.0.gep
  %GEM283.fca.0.insert = insertvalue %gem undef, i64* %GEM283.fca.0.load, 0
  %GEM283.fca.1.load = load i64*, i64** %GEM2.fca.1.gep
  %GEM283.fca.1.insert = insertvalue %gem %GEM283.fca.0.insert, i64* %GEM283.fca.1.load, 1
  %GEM283.fca.2.load = load i64*, i64** %GEM2.fca.2.gep
  %GEM283.fca.2.insert = insertvalue %gem %GEM283.fca.1.insert, i64* %GEM283.fca.2.load, 2
  %GEM283.fca.3.load = load i64*, i64** %GEM2.fca.3.gep
  %GEM283.fca.3.insert = insertvalue %gem %GEM283.fca.2.insert, i64* %GEM283.fca.3.load, 3
  %GEM283.fca.4.load = load i64*, i64** %GEM2.fca.4.gep
  %GEM283.fca.4.insert = insertvalue %gem %GEM283.fca.3.insert, i64* %GEM283.fca.4.load, 4
  %GEM283.fca.5.load = load i64, i64* %GEM2.fca.5.gep
  %GEM283.fca.5.insert = insertvalue %gem %GEM283.fca.4.insert, i64 %GEM283.fca.5.load, 5
  %GEM283.fca.6.load = load i64, i64* %GEM2.fca.6.gep
  %GEM283.fca.6.insert = insertvalue %gem %GEM283.fca.5.insert, i64 %GEM283.fca.6.load, 6
  %GEM283.fca.7.load = load i64, i64* %GEM2.fca.7.gep
  %GEM283.fca.7.insert = insertvalue %gem %GEM283.fca.6.insert, i64 %GEM283.fca.7.load, 7
  %GEM283.fca.8.load = load i64, i64* %GEM2.fca.8.gep
  %GEM283.fca.8.insert = insertvalue %gem %GEM283.fca.7.insert, i64 %GEM283.fca.8.load, 8
  %GEM283.fca.9.load = load double*, double** %GEM2.fca.9.gep
  %GEM283.fca.9.insert = insertvalue %gem %GEM283.fca.8.insert, double* %GEM283.fca.9.load, 9
  %GEM283.fca.10.load = load double*, double** %GEM2.fca.10.gep
  %GEM283.fca.10.insert = insertvalue %gem %GEM283.fca.9.insert, double* %GEM283.fca.10.load, 10
  %GEM283.fca.11.load = load double*, double** %GEM2.fca.11.gep
  %GEM283.fca.11.insert = insertvalue %gem %GEM283.fca.10.insert, double* %GEM283.fca.11.load, 11
  %GEM283.fca.12.load = load double*, double** %GEM2.fca.12.gep
  %GEM283.fca.12.insert = insertvalue %gem %GEM283.fca.11.insert, double* %GEM283.fca.12.load, 12
  %GEM283.fca.13.load = load double*, double** %GEM2.fca.13.gep
  %GEM283.fca.13.insert = insertvalue %gem %GEM283.fca.12.insert, double* %GEM283.fca.13.load, 13
  %GEM283.fca.14.load = load double*, double** %GEM2.fca.14.gep
  %GEM283.fca.14.insert = insertvalue %gem %GEM283.fca.13.insert, double* %GEM283.fca.14.load, 14
  %GEM283.fca.15.load = load double*, double** %GEM2.fca.15.gep
  %GEM283.fca.15.insert = insertvalue %gem %GEM283.fca.14.insert, double* %GEM283.fca.15.load, 15
  %GEM283.fca.16.load = load double, double* %GEM2.fca.16.gep
  %GEM283.fca.16.insert = insertvalue %gem %GEM283.fca.15.insert, double %GEM283.fca.16.load, 16
  %GEM283.fca.17.load = load double, double* %GEM2.fca.17.gep
  %GEM283.fca.17.insert = insertvalue %gem %GEM283.fca.16.insert, double %GEM283.fca.17.load, 17
  %GEM283.fca.18.load = load double, double* %GEM2.fca.18.gep
  %GEM283.fca.18.insert = insertvalue %gem %GEM283.fca.17.insert, double %GEM283.fca.18.load, 18
  %GEM283.fca.19.load = load double, double* %GEM2.fca.19.gep
  %GEM283.fca.19.insert = insertvalue %gem %GEM283.fca.18.insert, double %GEM283.fca.19.load, 19
  %GEM283.fca.20.load = load double, double* %GEM2.fca.20.gep
  %GEM283.fca.20.insert = insertvalue %gem %GEM283.fca.19.insert, double %GEM283.fca.20.load, 20
  %GEM283.fca.21.load = load <2 x double>, <2 x double>* %GEM2.fca.21.gep
  %GEM283.fca.21.insert = insertvalue %gem %GEM283.fca.20.insert, <2 x double> %GEM283.fca.21.load, 21
  %GEM283.fca.22.load = load <2 x double>*, <2 x double>** %GEM2.fca.22.gep
  %GEM283.fca.22.insert = insertvalue %gem %GEM283.fca.21.insert, <2 x double>* %GEM283.fca.22.load, 22
  %GEM283.fca.23.load = load <2 x double>*, <2 x double>** %GEM2.fca.23.gep
  %GEM283.fca.23.insert = insertvalue %gem %GEM283.fca.22.insert, <2 x double>* %GEM283.fca.23.load, 23
  %GEM283.fca.24.load = load <2 x double>*, <2 x double>** %GEM2.fca.24.gep
  %GEM283.fca.24.insert = insertvalue %gem %GEM283.fca.23.insert, <2 x double>* %GEM283.fca.24.load, 24
  %GEM283.fca.25.load = load <2 x double>*, <2 x double>** %GEM2.fca.25.gep
  %GEM283.fca.25.insert = insertvalue %gem %GEM283.fca.24.insert, <2 x double>* %GEM283.fca.25.load, 25
  %GEM283.fca.26.load = load <2 x double>*, <2 x double>** %GEM2.fca.26.gep
  %GEM283.fca.26.insert = insertvalue %gem %GEM283.fca.25.insert, <2 x double>* %GEM283.fca.26.load, 26
  %GEM283.fca.27.load = load <2 x double>*, <2 x double>** %GEM2.fca.27.gep
  %GEM283.fca.27.insert = insertvalue %gem %GEM283.fca.26.insert, <2 x double>* %GEM283.fca.27.load, 27
  %GEM283.fca.28.load = load <2 x double>, <2 x double>* %GEM2.fca.28.gep
  %GEM283.fca.28.insert = insertvalue %gem %GEM283.fca.27.insert, <2 x double> %GEM283.fca.28.load, 28
  %GEM283.fca.29.load = load <2 x double>, <2 x double>* %GEM2.fca.29.gep
  %GEM283.fca.29.insert = insertvalue %gem %GEM283.fca.28.insert, <2 x double> %GEM283.fca.29.load, 29
  %GEM283.fca.30.load = load <2 x double>, <2 x double>* %GEM2.fca.30.gep
  %GEM283.fca.30.insert = insertvalue %gem %GEM283.fca.29.insert, <2 x double> %GEM283.fca.30.load, 30
  %GEM283.fca.31.load = load <2 x double>, <2 x double>* %GEM2.fca.31.gep
  %GEM283.fca.31.insert = insertvalue %gem %GEM283.fca.30.insert, <2 x double> %GEM283.fca.31.load, 31
  %GEM283.fca.32.load = load <2 x double>, <2 x double>* %GEM2.fca.32.gep
  %GEM283.fca.32.insert = insertvalue %gem %GEM283.fca.31.insert, <2 x double> %GEM283.fca.32.load, 32
  %GEM283.fca.33.load = load <2 x double>, <2 x double>* %GEM2.fca.33.gep
  %GEM283.fca.33.insert = insertvalue %gem %GEM283.fca.32.insert, <2 x double> %GEM283.fca.33.load, 33
  %GEM283.fca.34.load = load i8**, i8*** %GEM2.fca.34.gep
  store double %GEM283.fca.19.load, double* %90
  %FLAME285 = call <2 x double> @"FLAME@UZ6gemPrmM53N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PN13disc2_precalc[VN18supershape_precalc[UIIIUUUUF"(%gemPrm* %82, i64* %83, i64* %84, i64* %85, <2 x double>* %86, <2 x double>* %87, <2 x double>* %88, <2 x double>* %89, double* %90)
  store <2 x double> %FLAME285, <2 x double>* %__mem
  br label %end207

false:                                            ; preds = %end265
  %__tmp286 = load <2 x double>, <2 x double>* %__tmp
  store <2 x double> %__tmp286, <2 x double>* %__mem
  br label %end207

true289:                                          ; preds = %end207
  %_bound_ptnum292 = load i64, i64* %_bound_ptnum
  %return293 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum292)
  br label %end291

false290:                                         ; preds = %end207
  %SYS294.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS294.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS294.fca.0.load, 0
  %SYS294.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS294.fca.1.insert = insertvalue %gemSYS %SYS294.fca.0.insert, i64 %SYS294.fca.1.load, 1
  %SYS294.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS294.fca.2.insert = insertvalue %gemSYS %SYS294.fca.1.insert, i64 %SYS294.fca.2.load, 2
  %SYS294.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS294.fca.3.insert = insertvalue %gemSYS %SYS294.fca.2.insert, i64 %SYS294.fca.3.load, 3
  %SYS294.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS294.fca.4.insert = insertvalue %gemSYS %SYS294.fca.3.insert, i64 %SYS294.fca.4.load, 4
  %SYS294.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS294.fca.5.insert = insertvalue %gemSYS %SYS294.fca.4.insert, i64 %SYS294.fca.5.load, 5
  %SYS294.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS294.fca.6.insert = insertvalue %gemSYS %SYS294.fca.5.insert, i64 %SYS294.fca.6.load, 6
  %SYS294.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS294.fca.7.insert = insertvalue %gemSYS %SYS294.fca.6.insert, i64 %SYS294.fca.7.load, 7
  %SYS294.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS294.fca.8.insert = insertvalue %gemSYS %SYS294.fca.7.insert, i64 %SYS294.fca.8.load, 8
  %SYS294.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS294.fca.9.insert = insertvalue %gemSYS %SYS294.fca.8.insert, i64 %SYS294.fca.9.load, 9
  %SYS294.fca.10.load = load double, double* %SYS1.fca.10.gep
  %99 = icmp ne i64 %SYS294.fca.5.load, 0
  br i1 %99, label %true295, label %end296

end291:                                           ; preds = %end301, %true289
  ret void

true295:                                          ; preds = %false290
  %return297 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @157, i64 0, i64 0))
  store <2 x double> %return297, <2 x double>* %91
  %SYS298.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS298.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS298.fca.0.load, 0
  %SYS298.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS298.fca.1.insert = insertvalue %gemSYS %SYS298.fca.0.insert, i64 %SYS298.fca.1.load, 1
  %SYS298.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS298.fca.2.insert = insertvalue %gemSYS %SYS298.fca.1.insert, i64 %SYS298.fca.2.load, 2
  %SYS298.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS298.fca.3.insert = insertvalue %gemSYS %SYS298.fca.2.insert, i64 %SYS298.fca.3.load, 3
  %SYS298.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS298.fca.4.insert = insertvalue %gemSYS %SYS298.fca.3.insert, i64 %SYS298.fca.4.load, 4
  %SYS298.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS298.fca.5.insert = insertvalue %gemSYS %SYS298.fca.4.insert, i64 %SYS298.fca.5.load, 5
  %SYS298.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS298.fca.6.insert = insertvalue %gemSYS %SYS298.fca.5.insert, i64 %SYS298.fca.6.load, 6
  %SYS298.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS298.fca.7.insert = insertvalue %gemSYS %SYS298.fca.6.insert, i64 %SYS298.fca.7.load, 7
  %SYS298.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS298.fca.8.insert = insertvalue %gemSYS %SYS298.fca.7.insert, i64 %SYS298.fca.8.load, 8
  %SYS298.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS298.fca.9.insert = insertvalue %gemSYS %SYS298.fca.8.insert, i64 %SYS298.fca.9.load, 9
  %SYS298.fca.10.load = load double, double* %SYS1.fca.10.gep
  store i64 %SYS298.fca.6.load, i64* %92
  call void @"V_SYM@UUI"(<2 x double>* %__mem, <2 x double>* %91, i64* %92)
  br label %end296

end296:                                           ; preds = %true295, %false290
  %SYS299.fca.0.load = load i64, i64* %SYS1.fca.0.gep
  %SYS299.fca.0.insert = insertvalue %gemSYS undef, i64 %SYS299.fca.0.load, 0
  %SYS299.fca.1.load = load i64, i64* %SYS1.fca.1.gep
  %SYS299.fca.1.insert = insertvalue %gemSYS %SYS299.fca.0.insert, i64 %SYS299.fca.1.load, 1
  %SYS299.fca.2.load = load i64, i64* %SYS1.fca.2.gep
  %SYS299.fca.2.insert = insertvalue %gemSYS %SYS299.fca.1.insert, i64 %SYS299.fca.2.load, 2
  %SYS299.fca.3.load = load i64, i64* %SYS1.fca.3.gep
  %SYS299.fca.3.insert = insertvalue %gemSYS %SYS299.fca.2.insert, i64 %SYS299.fca.3.load, 3
  %SYS299.fca.4.load = load i64, i64* %SYS1.fca.4.gep
  %SYS299.fca.4.insert = insertvalue %gemSYS %SYS299.fca.3.insert, i64 %SYS299.fca.4.load, 4
  %SYS299.fca.5.load = load i64, i64* %SYS1.fca.5.gep
  %SYS299.fca.5.insert = insertvalue %gemSYS %SYS299.fca.4.insert, i64 %SYS299.fca.5.load, 5
  %SYS299.fca.6.load = load i64, i64* %SYS1.fca.6.gep
  %SYS299.fca.6.insert = insertvalue %gemSYS %SYS299.fca.5.insert, i64 %SYS299.fca.6.load, 6
  %SYS299.fca.7.load = load i64, i64* %SYS1.fca.7.gep
  %SYS299.fca.7.insert = insertvalue %gemSYS %SYS299.fca.6.insert, i64 %SYS299.fca.7.load, 7
  %SYS299.fca.8.load = load i64, i64* %SYS1.fca.8.gep
  %SYS299.fca.8.insert = insertvalue %gemSYS %SYS299.fca.7.insert, i64 %SYS299.fca.8.load, 8
  %SYS299.fca.9.load = load i64, i64* %SYS1.fca.9.gep
  %SYS299.fca.9.insert = insertvalue %gemSYS %SYS299.fca.8.insert, i64 %SYS299.fca.9.load, 9
  %SYS299.fca.10.load = load double, double* %SYS1.fca.10.gep
  %100 = icmp ne i64 %SYS299.fca.8.load, 0
  br i1 %100, label %true300, label %end301

true300:                                          ; preds = %end296
  %output304 = fmul double 1.000000e-03, %SYS299.fca.10.load
  %_bound_ptnum305 = load i64, i64* %_bound_ptnum
  %return308 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @158, i64 0, i64 0), i64 %_bound_ptnum305, double %SYS299.fca.10.load, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @159, i64 0, i64 0))
  br label %end301

end301:                                           ; preds = %true300, %end296
  %pscl.0 = phi double [ %output304, %true300 ], [ 1.000000e-03, %end296 ]
  %__mem309 = load <2 x double>, <2 x double>* %__mem
  %cast310 = call <3 x double> @"set@VU"(<2 x double> %__mem309)
  store <3 x double> %cast310, <3 x double>* %_bound_P
  store double %CLR.0, double* %_bound_COORD
  store double %pscl.0, double* %_bound_pscale
  br label %end291
}

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UI"(i64) #1

; Function Attrs: alwaysinline
define private i64 @"sample_cdf@[FFI"(double* %rw01, double %rw12) #3 {
__llvm_entry:
  %rw24 = call { i64, double, double } @"sample_cdf@[FFIFF"(double* %rw01, double %rw12)
  %rw25 = extractvalue { i64, double, double } %rw24, 0
  ret i64 %rw25
}

; Function Attrs: nounwind readnone
declare { i64, double, double } @"sample_cdf@[FFIFF"(double*, double) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"add@UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIFS"(i64, i8*, i64, double, i8*) #2

; Function Attrs: nounwind
define void @TheFractalFlameAlgorithm(i64 %ptnum, i64* %VACTIVE, double* %CDF, double %pscale, double %COORD, <3 x double> %P) #2 {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<COORD>" = alloca double
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64*
  %2 = alloca double*
  store double %pscale, double* %"<pscale>"
  store double %COORD, double* %"<COORD>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store i64* %VACTIVE, i64** %1
  store double* %CDF, double** %2
  call void @"_TheFractalFlameAlgorithm@I[I[FFFV"(i64* %0, i64** %1, double** %2, double* %"<pscale>", double* %"<COORD>", <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @160, i64 0, i64 0), i64 %ptnum) #4
  %evalue4 = load double, double* %"<pscale>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @161, i64 0, i64 0), double %evalue4) #4
  %evalue6 = load double, double* %"<COORD>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @162, i64 0, i64 0), double %evalue6) #4
  %evalue8 = load <3 x double>, <3 x double>* %"<P>"
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @163, i64 0, i64 0), <3 x double> %evalue8) #4
  store i64 %gvalue, i64* @ptnum
  store double %gvalue5, double* @pscale
  store double %gvalue7, double* @COORD
  store <3 x double> %gvalue9, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TheFractalFlameAlgorithm(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @48, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @49, i64 0, i64 0), double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { alwaysinline }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.437"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
