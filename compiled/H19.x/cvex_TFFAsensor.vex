;_name	TFFAsensor
; ModuleID = 'TFFAsensor'
source_filename = "TFFAsensor"

%sensor = type { i64, <2 x double>, <2 x double>, double, double }

@0 = private constant [11 x i8] c"vizhandles\00"
@1 = private constant [7 x i8] c"outres\00"
@2 = private constant [10 x i8] c"outcenter\00"
@3 = private constant [9 x i8] c"outscale\00"
@4 = private constant [10 x i8] c"outrotate\00"
@5 = private constant [0 x <3 x double>] zeroinitializer
@6 = private constant [3 x i8] c"Cd\00"
@7 = private constant [4 x i8] c"set\00"
@8 = private constant [5 x i8] c"poly\00"
@9 = private constant [9 x i8] c"polyline\00"
@10 = private constant [2 x i8] c"P\00"
@11 = private constant [5 x i8] c"mult\00"

; Function Attrs: alwaysinline nounwind
define private void @"sensorDATA@Z6sensorM5N5xfvizIN3resUN6centerUN4zoomFN3rotF"(%sensor* %this) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %tmp = load %sensor, %sensor* %this
  %0 = insertvalue %sensor %tmp, i64 %return, 0
  %return1 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %1 = insertvalue %sensor %0, <2 x double> %return1, 1
  %return3 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @2, i64 0, i64 0))
  %2 = insertvalue %sensor %1, <2 x double> %return3, 2
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  %3 = insertvalue %sensor %2, double %return5, 3
  %return7 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0))
  %4 = insertvalue %sensor %3, double %return7, 4
  store %sensor %4, %sensor* %this
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM5N5xfvizIN3resUN6centerUN4zoomFN3rotFIUUFF"(i64* %xfviz, <2 x double>* %res, <2 x double>* %center, double* %zoom, double* %rot) #0 {
__llvm_entry:
  %xfviz1 = load i64, i64* %xfviz
  %0 = insertvalue %sensor undef, i64 %xfviz1, 0
  %res2 = load <2 x double>, <2 x double>* %res
  %1 = insertvalue %sensor %0, <2 x double> %res2, 1
  %center4 = load <2 x double>, <2 x double>* %center
  %2 = insertvalue %sensor %1, <2 x double> %center4, 2
  %zoom6 = load double, double* %zoom
  %3 = insertvalue %sensor %2, double %zoom6, 3
  %rot8 = load double, double* %rot
  %4 = insertvalue %sensor %3, double %rot8, 4
  ret %sensor %4
}

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM5N5xfvizIN3resUN6centerUN4zoomFN3rotF"() #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i64
  store i64 0, i64* %4
  store <2 x double> zeroinitializer, <2 x double>* %0
  store <2 x double> zeroinitializer, <2 x double>* %1
  store double 0.000000e+00, double* %2
  store double 0.000000e+00, double* %3
  %sensor = call %sensor @"sensor@Z6sensorM5N5xfvizIN3resUN6centerUN4zoomFN3rotFIUUFF"(i64* %4, <2 x double>* %0, <2 x double>* %1, double* %2, double* %3)
  ret %sensor %sensor
}

; Function Attrs: alwaysinline nounwind
define private void @_TFFAsensor() #0 {
__llvm_entry:
  %SENSOR = alloca %sensor
  %SENSOR1 = call %sensor @"sensor@Z6sensorM5N5xfvizIN3resUN6centerUN4zoomFN3rotF"()
  %SENSOR1.fca.0.extract = extractvalue %sensor %SENSOR1, 0
  %SENSOR1.fca.0.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 0
  store i64 %SENSOR1.fca.0.extract, i64* %SENSOR1.fca.0.gep
  %SENSOR1.fca.1.extract = extractvalue %sensor %SENSOR1, 1
  %SENSOR1.fca.1.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 1
  store <2 x double> %SENSOR1.fca.1.extract, <2 x double>* %SENSOR1.fca.1.gep
  %SENSOR1.fca.2.extract = extractvalue %sensor %SENSOR1, 2
  %SENSOR1.fca.2.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 2
  store <2 x double> %SENSOR1.fca.2.extract, <2 x double>* %SENSOR1.fca.2.gep
  %SENSOR1.fca.3.extract = extractvalue %sensor %SENSOR1, 3
  %SENSOR1.fca.3.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 3
  store double %SENSOR1.fca.3.extract, double* %SENSOR1.fca.3.gep
  %SENSOR1.fca.4.extract = extractvalue %sensor %SENSOR1, 4
  %SENSOR1.fca.4.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 4
  store double %SENSOR1.fca.4.extract, double* %SENSOR1.fca.4.gep
  call void @"sensorDATA@Z6sensorM5N5xfvizIN3resUN6centerUN4zoomFN3rotF"(%sensor* %SENSOR)
  %SENSOR2.fca.0.load = load i64, i64* %SENSOR1.fca.0.gep
  %SENSOR2.fca.0.insert = insertvalue %sensor undef, i64 %SENSOR2.fca.0.load, 0
  %SENSOR2.fca.1.load = load <2 x double>, <2 x double>* %SENSOR1.fca.1.gep
  %SENSOR2.fca.1.insert = insertvalue %sensor %SENSOR2.fca.0.insert, <2 x double> %SENSOR2.fca.1.load, 1
  %SENSOR2.fca.2.load = load <2 x double>, <2 x double>* %SENSOR1.fca.2.gep
  %SENSOR2.fca.2.insert = insertvalue %sensor %SENSOR2.fca.1.insert, <2 x double> %SENSOR2.fca.2.load, 2
  %SENSOR2.fca.3.load = load double, double* %SENSOR1.fca.3.gep
  %SENSOR2.fca.3.insert = insertvalue %sensor %SENSOR2.fca.2.insert, double %SENSOR2.fca.3.load, 3
  %SENSOR2.fca.4.load = load double, double* %SENSOR1.fca.4.gep
  %return = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.2.load, i64 0)
  %return10 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.2.load, i64 1)
  %return11 = call <3 x double> @"set@VFFF"(double %return, double %return10, double 0.000000e+00)
  %return13 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %SENSOR2.fca.4.load)
  %output = call double @"div@FF"(double 1.000000e+00, double %SENSOR2.fca.3.load)
  %cast = call <3 x double> @"set@VI"(i64 0)
  %cast17 = call <3 x double> @"set@VF"(double %output)
  %return18 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %return11, <3 x double> %cast, <3 x double> %cast17)
  %cast21 = call <3 x double> @"set@VI"(i64 1)
  %return22 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %return11, <3 x double> %cast, <3 x double> %cast21)
  %return27 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return13, <3 x double> %cast21, <3 x double> %return11)
  %return30 = call <3 x double> @"neg@VV"(<3 x double> %return13)
  %return33 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return30, <3 x double> %cast21, <3 x double> %return11)
  %return36 = call i64 @"neg@II"(i64 1)
  %cast37 = sitofp i64 %return36 to double
  %return38 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double %cast37, double 1.000000e+00)
  %return39 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %cast, <3 x double> %return38)
  %return41 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.1.load, i64 0)
  %return43 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.1.load, i64 1)
  %output45 = call double @"div@FF"(double %return41, double 2.000000e+00)
  %return46 = call double @"neg@FF"(double %output45)
  %output48 = call double @"div@FF"(double %return43, double 2.000000e+00)
  %return49 = call <3 x double> @"set@VFFF"(double %return46, double %output48, double 0.000000e+00)
  %return54 = call <3 x double> @"set@VFFF"(double %output45, double %output48, double 0.000000e+00)
  %return59 = call double @"neg@FF"(double %output48)
  %return60 = call <3 x double> @"set@VFFF"(double %output45, double %return59, double 0.000000e+00)
  %return67 = call <3 x double> @"set@VFFF"(double %return46, double %return59, double 0.000000e+00)
  %return72 = call <3 x double>* @"array@[V:VVVV"(<3 x double> %return49, <3 x double> %return54, <3 x double> %return60, <3 x double> %return67)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %_points_tm.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @5, i64 0, i64 0), %__llvm_entry ], [ %output85, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output88, %body ]
  %return74 = call i64 @"lt@III"(i64 %i.0, i64 4)
  %0 = icmp ne i64 %return74, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return77 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return72, i64 %i.0)
  %output81 = call <16 x double> @"mul@44"(<16 x double> %return18, <16 x double> %return33)
  %output82 = call <3 x double> @"mul@V4"(<3 x double> %return77, <16 x double> %output81)
  %output85 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm.0, <3 x double> %output82)
  %output88 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  br label %cond90

cond90:                                           ; preds = %body91, %end
  %_points_tm.1 = phi <3 x double>* [ %_points_tm.0, %end ], [ %output112, %body91 ]
  %i89.0 = phi i64 [ 0, %end ], [ %output115, %body91 ]
  %return93 = call i64 @"lt@III"(i64 %i89.0, i64 4)
  %1 = icmp ne i64 %return93, 0
  br i1 %1, label %body91, label %end94

body91:                                           ; preds = %cond90
  %return99 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 %i89.0)
  %return103 = call <16 x double> @"invert@44"(<16 x double> %return22)
  %output104 = call <3 x double> @"mul@V4"(<3 x double> %return99, <16 x double> %return103)
  %return106 = call <16 x double> @"invert@44"(<16 x double> %return33)
  %output107 = call <3 x double> @"mul@V4"(<3 x double> %output104, <16 x double> %return106)
  %output109 = call <3 x double> @"add@VV"(<3 x double> %output107, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %return110 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.1, <3 x double> %output109, i64 %i89.0)
  %output112 = extractvalue { <3 x double>, <3 x double>* } %return110, 1
  %output115 = add i64 %i89.0, 1
  br label %cond90

end94:                                            ; preds = %cond90
  %return117 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 0)
  %return119 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 1)
  %output120 = call <3 x double> @"add@VV"(<3 x double> %return117, <3 x double> %return119)
  %return122 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 2)
  %output123 = call <3 x double> @"add@VV"(<3 x double> %output120, <3 x double> %return122)
  %return125 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 3)
  %output126 = call <3 x double> @"add@VV"(<3 x double> %output123, <3 x double> %return125)
  %cast127 = call <3 x double> @"set@VF"(double 4.000000e+00)
  %output128 = call <3 x double> @"div@VV"(<3 x double> %output126, <3 x double> %cast127)
  %return132 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %output128, <3 x double> %cast, <3 x double> %cast21)
  br label %cond134

cond134:                                          ; preds = %body135, %end94
  %_points_tm.2 = phi <3 x double>* [ %_points_tm.1, %end94 ], [ %output152, %body135 ]
  %_points_tm_out.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @5, i64 0, i64 0), %end94 ], [ %output162, %body135 ]
  %i133.0 = phi i64 [ 0, %end94 ], [ %output165, %body135 ]
  %return137 = call i64 @"lt@III"(i64 %i133.0, i64 4)
  %2 = icmp ne i64 %return137, 0
  br i1 %2, label %body135, label %end138

body135:                                          ; preds = %cond134
  %return143 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 %i133.0)
  %return147 = call <16 x double> @"invert@44"(<16 x double> %return132)
  %output148 = call <3 x double> @"mul@V4"(<3 x double> %return143, <16 x double> %return147)
  %return150 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.2, <3 x double> %output148, i64 %i133.0)
  %output152 = extractvalue { <3 x double>, <3 x double>* } %return150, 1
  %return156 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output152, i64 %i133.0)
  %return157 = call <16 x double> @"ident@4"()
  %output158 = call <16 x double> @"mul@4F"(<16 x double> %return157, double 1.000000e+03)
  %output159 = call <3 x double> @"mul@V4"(<3 x double> %return156, <16 x double> %output158)
  %output161 = call <3 x double> @"add@VV"(<3 x double> %output159, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %output162 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm_out.0, <3 x double> %output161)
  %output165 = add i64 %i133.0, 1
  br label %cond134

end138:                                           ; preds = %cond134
  %return167 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 0)
  %return168 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return167)
  %return170 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 1)
  %return171 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return170)
  %return173 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 2)
  %return174 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return173)
  %return176 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 3)
  %return177 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return176)
  %return179 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 0)
  %return180 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return179)
  %return182 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 1)
  %return183 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return182)
  %return185 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 2)
  %return186 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return185)
  %return188 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 3)
  %return189 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return188)
  %return192 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return167)
  %return195 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return170)
  %return198 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return173)
  %return201 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return176)
  %cast202 = call <3 x double> @"set@VF"(double 5.000000e-02)
  %return211 = call i64* @"array@[I:IIIIIIII"(i64 %return168, i64 %return171, i64 %return174, i64 %return177, i64 %return180, i64 %return183, i64 %return186, i64 %return189)
  %return213 = call i64 @"len@I[I"(i64* %return211)
  br label %cond214

cond214:                                          ; preds = %body215, %end138
  %__impl_foreach_index.0 = phi i64 [ 0, %end138 ], [ %output228, %body215 ]
  %return218 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return213)
  %3 = icmp ne i64 %return218, 0
  br i1 %3, label %body215, label %end219

body215:                                          ; preds = %cond214
  %return223 = call i64 @"getcomp@I[II"(i64* %return211, i64 %__impl_foreach_index.0)
  %return226 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), i64 %return223, <3 x double> %cast202, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @7, i64 0, i64 0))
  %output228 = add i64 %__impl_foreach_index.0, 1
  br label %cond214

end219:                                           ; preds = %cond214
  %cast229 = call <3 x double> @"set@VF"(double 2.500000e-01)
  %4 = icmp ne i64 %SENSOR2.fca.0.load, 0
  %.cast229 = select i1 %4, <3 x double> <double 2.500000e-01, double 0.000000e+00, double 0.000000e+00>, <3 x double> %cast229
  %return236 = call i64* @"array@[I:IIII"(i64 %return192, i64 %return195, i64 %return198, i64 %return201)
  %return239 = call i64 @"len@I[I"(i64* %return236)
  br label %cond240

cond240:                                          ; preds = %body241, %end219
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end219 ], [ %output254, %body241 ]
  %return244 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return239)
  %5 = icmp ne i64 %return244, 0
  br i1 %5, label %body241, label %end245

body241:                                          ; preds = %cond240
  %return249 = call i64 @"getcomp@I[II"(i64* %return236, i64 %__impl_foreach_index_1.0)
  %return252 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), i64 %return249, <3 x double> %.cast229, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @7, i64 0, i64 0))
  %output254 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond240

end245:                                           ; preds = %cond240
  %return260 = call i64* @"array@[I:IIIII"(i64 %return168, i64 %return171, i64 %return183, i64 %return180, i64 %return168)
  %return261 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return260)
  %return267 = call i64* @"array@[I:IIIII"(i64 %return171, i64 %return174, i64 %return186, i64 %return183, i64 %return171)
  %return268 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return267)
  %return274 = call i64* @"array@[I:IIIII"(i64 %return174, i64 %return177, i64 %return189, i64 %return186, i64 %return174)
  %return275 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return274)
  %return281 = call i64* @"array@[I:IIIII"(i64 %return177, i64 %return168, i64 %return180, i64 %return189, i64 %return177)
  %return282 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return281)
  %return288 = call i64* @"array@[I:IIIII"(i64 %return192, i64 %return195, i64 %return198, i64 %return201, i64 %return192)
  %return289 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @9, i64 0, i64 0), i64* %return288)
  %return292 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), i64 %return261, <16 x double> %return39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %return295 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), i64 %return268, <16 x double> %return39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %return298 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), i64 %return275, <16 x double> %return39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %return301 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), i64 %return282, <16 x double> %return39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %return304 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0), i64 %return289, <16 x double> %return39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %return306 = call <16 x double> @"invert@44"(<16 x double> %return22)
  %output308 = call <16 x double> @"mul@44"(<16 x double> %return306, <16 x double> %return27)
  %return310 = call <16 x double> @"invert@44"(<16 x double> %return132)
  %output311 = call <16 x double> @"mul@44"(<16 x double> %output308, <16 x double> %return310)
  %output313 = call <16 x double> @"mul@44"(<16 x double> %output311, <16 x double> %return39)
  call void @"packedtransform@II4"(i64 0, i64 0, <16 x double> %output313)
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind
declare <16 x double> @"maketransform@4IIVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V:VVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double>* @"append@[VV"(<3 x double>*, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"invert@44"(<16 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #2

; Function Attrs: nounwind
declare <16 x double> @"mul@4F"(<16 x double>, double) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIIIIII"(i64, i64, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIII"(i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #2

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISI4S"(i64, i8*, i64, <16 x double>, i8*) #2

; Function Attrs: nounwind
declare void @"packedtransform@II4"(i64, i64, <16 x double>) #2

; Function Attrs: nounwind
define void @TFFAsensor() #2 {
__llvm_entry:
  call void @_TFFAsensor()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAsensor()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.487"}
!2 = !{!"64"}

;_code_end
