;_name	TFFAsensor
; ModuleID = 'TFFAsensor'
source_filename = "TFFAsensor"

%sensor = type { <2 x double>, <2 x double>, double, double }

@0 = private constant [13 x i8] c"../../outres\00"
@1 = private constant [16 x i8] c"../../outcenter\00"
@2 = private constant [15 x i8] c"../../outscale\00"
@3 = private constant [16 x i8] c"../../outrotate\00"
@4 = private constant [0 x <3 x double>] zeroinitializer
@5 = private constant [3 x i8] c"Cd\00"
@6 = private constant [4 x i8] c"set\00"
@7 = private constant [5 x i8] c"poly\00"
@8 = private constant [2 x i8] c"P\00"
@9 = private constant [5 x i8] c"mult\00"

; Function Attrs: alwaysinline nounwind
define private void @"sensorDATA@Z6sensorM4N3resUN6centerUN4zoomFN3rotF"(%sensor* %this) #0 {
__llvm_entry:
  %return = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %tmp = load %sensor, %sensor* %this
  %0 = insertvalue %sensor %tmp, <2 x double> %return, 0
  %return1 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %1 = insertvalue %sensor %0, <2 x double> %return1, 1
  %return3 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %2 = insertvalue %sensor %1, double %return3, 2
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0))
  %3 = insertvalue %sensor %2, double %return5, 3
  store %sensor %3, %sensor* %this
  ret void
}

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomFN3rotFUUFF"(<2 x double>* %res, <2 x double>* %center, double* %zoom, double* %rot) #0 {
__llvm_entry:
  %res1 = load <2 x double>, <2 x double>* %res
  %0 = insertvalue %sensor undef, <2 x double> %res1, 0
  %center2 = load <2 x double>, <2 x double>* %center
  %1 = insertvalue %sensor %0, <2 x double> %center2, 1
  %zoom4 = load double, double* %zoom
  %2 = insertvalue %sensor %1, double %zoom4, 2
  %rot6 = load double, double* %rot
  %3 = insertvalue %sensor %2, double %rot6, 3
  ret %sensor %3
}

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomFN3rotF"() #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca double
  %2 = alloca double
  %3 = alloca <2 x double>
  store <2 x double> zeroinitializer, <2 x double>* %3
  store <2 x double> zeroinitializer, <2 x double>* %0
  store double 0.000000e+00, double* %1
  store double 0.000000e+00, double* %2
  %sensor = call %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomFN3rotFUUFF"(<2 x double>* %3, <2 x double>* %0, double* %1, double* %2)
  ret %sensor %sensor
}

; Function Attrs: alwaysinline nounwind
define private void @_TFFAsensor() #0 {
__llvm_entry:
  %SENSOR = alloca %sensor
  %SENSOR1 = call %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomFN3rotF"()
  %SENSOR1.fca.0.extract = extractvalue %sensor %SENSOR1, 0
  %SENSOR1.fca.0.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 0
  store <2 x double> %SENSOR1.fca.0.extract, <2 x double>* %SENSOR1.fca.0.gep
  %SENSOR1.fca.1.extract = extractvalue %sensor %SENSOR1, 1
  %SENSOR1.fca.1.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 1
  store <2 x double> %SENSOR1.fca.1.extract, <2 x double>* %SENSOR1.fca.1.gep
  %SENSOR1.fca.2.extract = extractvalue %sensor %SENSOR1, 2
  %SENSOR1.fca.2.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 2
  store double %SENSOR1.fca.2.extract, double* %SENSOR1.fca.2.gep
  %SENSOR1.fca.3.extract = extractvalue %sensor %SENSOR1, 3
  %SENSOR1.fca.3.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 3
  store double %SENSOR1.fca.3.extract, double* %SENSOR1.fca.3.gep
  call void @"sensorDATA@Z6sensorM4N3resUN6centerUN4zoomFN3rotF"(%sensor* %SENSOR)
  %SENSOR2.fca.0.load = load <2 x double>, <2 x double>* %SENSOR1.fca.0.gep
  %SENSOR2.fca.0.insert = insertvalue %sensor undef, <2 x double> %SENSOR2.fca.0.load, 0
  %SENSOR2.fca.1.load = load <2 x double>, <2 x double>* %SENSOR1.fca.1.gep
  %SENSOR2.fca.1.insert = insertvalue %sensor %SENSOR2.fca.0.insert, <2 x double> %SENSOR2.fca.1.load, 1
  %SENSOR2.fca.2.load = load double, double* %SENSOR1.fca.2.gep
  %SENSOR2.fca.2.insert = insertvalue %sensor %SENSOR2.fca.1.insert, double %SENSOR2.fca.2.load, 2
  %SENSOR2.fca.3.load = load double, double* %SENSOR1.fca.3.gep
  %return = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.1.load, i64 0)
  %return8 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.1.load, i64 1)
  %return9 = call <3 x double> @"set@VFFF"(double %return, double %return8, double 0.000000e+00)
  %return11 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %SENSOR2.fca.3.load)
  %output = call double @"div@FF"(double 1.000000e+00, double %SENSOR2.fca.2.load)
  %cast = call <3 x double> @"set@VI"(i64 0)
  %cast15 = call <3 x double> @"set@VF"(double %output)
  %return16 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %return9, <3 x double> %cast, <3 x double> %cast15)
  %cast19 = call <3 x double> @"set@VI"(i64 1)
  %return20 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %return9, <3 x double> %cast, <3 x double> %cast19)
  %return25 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return11, <3 x double> %cast19, <3 x double> %return9)
  %return28 = call <3 x double> @"neg@VV"(<3 x double> %return11)
  %return31 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return28, <3 x double> %cast19, <3 x double> %return9)
  %return34 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %cast, <3 x double> <double 1.000000e+00, double -1.000000e+00, double 1.000000e+00>)
  %return36 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.0.load, i64 0)
  %return38 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.0.load, i64 1)
  %output40 = call double @"div@FF"(double %return36, double 2.000000e+00)
  %return41 = call double @"neg@FF"(double %output40)
  %output43 = call double @"div@FF"(double %return38, double 2.000000e+00)
  %return44 = call <3 x double> @"set@VFFF"(double %return41, double %output43, double 0.000000e+00)
  %return49 = call <3 x double> @"set@VFFF"(double %output40, double %output43, double 0.000000e+00)
  %return54 = call double @"neg@FF"(double %output43)
  %return55 = call <3 x double> @"set@VFFF"(double %output40, double %return54, double 0.000000e+00)
  %return62 = call <3 x double> @"set@VFFF"(double %return41, double %return54, double 0.000000e+00)
  %return67 = call <3 x double>* @"array@[V:VVVV"(<3 x double> %return44, <3 x double> %return49, <3 x double> %return55, <3 x double> %return62)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %_points_tm.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @4, i64 0, i64 0), %__llvm_entry ], [ %output80, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output83, %body ]
  %return69 = call i64 @"lt@III"(i64 %i.0, i64 4)
  %0 = icmp ne i64 %return69, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return72 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return67, i64 %i.0)
  %output76 = call <16 x double> @"mul@44"(<16 x double> %return16, <16 x double> %return31)
  %output77 = call <3 x double> @"mul@V4"(<3 x double> %return72, <16 x double> %output76)
  %output80 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm.0, <3 x double> %output77)
  %output83 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  br label %cond85

cond85:                                           ; preds = %body86, %end
  %_points_tm.1 = phi <3 x double>* [ %_points_tm.0, %end ], [ %output107, %body86 ]
  %i84.0 = phi i64 [ 0, %end ], [ %output110, %body86 ]
  %return88 = call i64 @"lt@III"(i64 %i84.0, i64 4)
  %1 = icmp ne i64 %return88, 0
  br i1 %1, label %body86, label %end89

body86:                                           ; preds = %cond85
  %return94 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 %i84.0)
  %return98 = call <16 x double> @"invert@44"(<16 x double> %return20)
  %output99 = call <3 x double> @"mul@V4"(<3 x double> %return94, <16 x double> %return98)
  %return101 = call <16 x double> @"invert@44"(<16 x double> %return31)
  %output102 = call <3 x double> @"mul@V4"(<3 x double> %output99, <16 x double> %return101)
  %output104 = call <3 x double> @"add@VV"(<3 x double> %output102, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %return105 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.1, <3 x double> %output104, i64 %i84.0)
  %output107 = extractvalue { <3 x double>, <3 x double>* } %return105, 1
  %output110 = add i64 %i84.0, 1
  br label %cond85

end89:                                            ; preds = %cond85
  %return112 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 0)
  %return114 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 1)
  %output115 = call <3 x double> @"add@VV"(<3 x double> %return112, <3 x double> %return114)
  %return117 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 2)
  %output118 = call <3 x double> @"add@VV"(<3 x double> %output115, <3 x double> %return117)
  %return120 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 3)
  %output121 = call <3 x double> @"add@VV"(<3 x double> %output118, <3 x double> %return120)
  %cast122 = call <3 x double> @"set@VF"(double 4.000000e+00)
  %output123 = call <3 x double> @"div@VV"(<3 x double> %output121, <3 x double> %cast122)
  %return127 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %output123, <3 x double> %cast, <3 x double> %cast19)
  br label %cond129

cond129:                                          ; preds = %body130, %end89
  %_points_tm.2 = phi <3 x double>* [ %_points_tm.1, %end89 ], [ %output147, %body130 ]
  %_points_tm_out.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @4, i64 0, i64 0), %end89 ], [ %output157, %body130 ]
  %i128.0 = phi i64 [ 0, %end89 ], [ %output160, %body130 ]
  %return132 = call i64 @"lt@III"(i64 %i128.0, i64 4)
  %2 = icmp ne i64 %return132, 0
  br i1 %2, label %body130, label %end133

body130:                                          ; preds = %cond129
  %return138 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 %i128.0)
  %return142 = call <16 x double> @"invert@44"(<16 x double> %return127)
  %output143 = call <3 x double> @"mul@V4"(<3 x double> %return138, <16 x double> %return142)
  %return145 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.2, <3 x double> %output143, i64 %i128.0)
  %output147 = extractvalue { <3 x double>, <3 x double>* } %return145, 1
  %return151 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output147, i64 %i128.0)
  %return152 = call <16 x double> @"ident@4"()
  %output153 = call <16 x double> @"mul@4F"(<16 x double> %return152, double 1.000000e+03)
  %output154 = call <3 x double> @"mul@V4"(<3 x double> %return151, <16 x double> %output153)
  %output156 = call <3 x double> @"add@VV"(<3 x double> %output154, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %output157 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm_out.0, <3 x double> %output156)
  %output160 = add i64 %i128.0, 1
  br label %cond129

end133:                                           ; preds = %cond129
  %return162 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 0)
  %return163 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return162)
  %return165 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 1)
  %return166 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return165)
  %return168 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 2)
  %return169 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return168)
  %return171 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 3)
  %return172 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return171)
  %return174 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 0)
  %return175 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return174)
  %return177 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 1)
  %return178 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return177)
  %return180 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 2)
  %return181 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return180)
  %return183 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 3)
  %return184 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return183)
  %cast185 = call <3 x double> @"set@VF"(double 5.000000e-02)
  %return194 = call i64* @"array@[I:IIIIIIII"(i64 %return163, i64 %return166, i64 %return169, i64 %return172, i64 %return175, i64 %return178, i64 %return181, i64 %return184)
  %return196 = call i64 @"len@I[I"(i64* %return194)
  br label %cond197

cond197:                                          ; preds = %body198, %end133
  %__impl_foreach_index.0 = phi i64 [ 0, %end133 ], [ %output211, %body198 ]
  %return201 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return196)
  %3 = icmp ne i64 %return201, 0
  br i1 %3, label %body198, label %end202

body198:                                          ; preds = %cond197
  %return206 = call i64 @"getcomp@I[II"(i64* %return194, i64 %__impl_foreach_index.0)
  %return209 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0), i64 %return206, <3 x double> %cast185, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i64 0, i64 0))
  %output211 = add i64 %__impl_foreach_index.0, 1
  br label %cond197

end202:                                           ; preds = %cond197
  %return217 = call i64* @"array@[I:IIIII"(i64 %return163, i64 %return166, i64 %return178, i64 %return175, i64 %return163)
  %return218 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i64* %return217)
  %return224 = call i64* @"array@[I:IIIII"(i64 %return166, i64 %return169, i64 %return181, i64 %return178, i64 %return166)
  %return225 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i64* %return224)
  %return231 = call i64* @"array@[I:IIIII"(i64 %return169, i64 %return172, i64 %return184, i64 %return181, i64 %return169)
  %return232 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i64* %return231)
  %return238 = call i64* @"array@[I:IIIII"(i64 %return172, i64 %return163, i64 %return175, i64 %return184, i64 %return172)
  %return239 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i64 0, i64 0), i64* %return238)
  %return242 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return218, <16 x double> %return34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0))
  %return245 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return225, <16 x double> %return34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0))
  %return248 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return232, <16 x double> %return34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0))
  %return251 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i64 0, i64 0), i64 %return239, <16 x double> %return34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i64 0, i64 0))
  %return253 = call <16 x double> @"invert@44"(<16 x double> %return20)
  %output255 = call <16 x double> @"mul@44"(<16 x double> %return253, <16 x double> %return25)
  %return257 = call <16 x double> @"invert@44"(<16 x double> %return127)
  %output258 = call <16 x double> @"mul@44"(<16 x double> %output255, <16 x double> %return257)
  %output260 = call <16 x double> @"mul@44"(<16 x double> %output258, <16 x double> %return34)
  call void @"packedtransform@II4"(i64 0, i64 0, <16 x double> %output260)
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind
declare <16 x double> @"maketransform@4IIVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V:VVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double>* @"append@[VV"(<3 x double>*, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"invert@44"(<16 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #2

; Function Attrs: nounwind
declare <16 x double> @"mul@4F"(<16 x double>, double) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIIIIII"(i64, i64, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #2

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISI4S"(i64, i8*, i64, <16 x double>, i8*) #2

; Function Attrs: nounwind
declare void @"packedtransform@II4"(i64, i64, <16 x double>) #2

; Function Attrs: nounwind
define void @TFFAsensor() #2 {
__llvm_entry:
  call void @_TFFAsensor()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAsensor()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.0.625"}
!2 = !{!"64"}

;_code_end
