;_name	TFFAsensor
; ModuleID = 'TFFAsensor'
source_filename = "TFFAsensor"

%sensor = type { <2 x double>, <2 x double>, i64, i64 }

@0 = private constant [13 x i8] c"../../outres\00"
@1 = private constant [16 x i8] c"../../outcenter\00"
@2 = private constant [15 x i8] c"../../outscale\00"
@3 = private constant [16 x i8] c"../../outrotate\00"
@4 = private constant [0 x <3 x double>] zeroinitializer
@5 = private constant [9 x i8] c"polyline\00"
@6 = private constant [3 x i8] c"Cd\00"
@7 = private constant [4 x i8] c"set\00"
@8 = private constant [5 x i8] c"poly\00"

; Function Attrs: alwaysinline nounwind
define private void @"sensorDATA@Z6sensorM4N3resUN6centerUN4zoomIN3rotI"(%sensor* %this) #0 {
__llvm_entry:
  %return = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %tmp = load %sensor, %sensor* %this
  %0 = insertvalue %sensor %tmp, <2 x double> %return, 0
  %return1 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %1 = insertvalue %sensor %0, <2 x double> %return1, 1
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i64 0, i64 0))
  %2 = insertvalue %sensor %1, i64 %return3, 2
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i64 0, i64 0))
  %3 = insertvalue %sensor %2, i64 %return5, 3
  store %sensor %3, %sensor* %this
  ret void
}

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomIN3rotIUUII"(<2 x double>* %res, <2 x double>* %center, i64* %zoom, i64* %rot) #0 {
__llvm_entry:
  %res1 = load <2 x double>, <2 x double>* %res
  %0 = insertvalue %sensor undef, <2 x double> %res1, 0
  %center2 = load <2 x double>, <2 x double>* %center
  %1 = insertvalue %sensor %0, <2 x double> %center2, 1
  %zoom4 = load i64, i64* %zoom
  %2 = insertvalue %sensor %1, i64 %zoom4, 2
  %rot6 = load i64, i64* %rot
  %3 = insertvalue %sensor %2, i64 %rot6, 3
  ret %sensor %3
}

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomIN3rotI"() #0 {
__llvm_entry:
  %0 = alloca <2 x double>
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca <2 x double>
  store <2 x double> zeroinitializer, <2 x double>* %3
  store <2 x double> zeroinitializer, <2 x double>* %0
  store i64 0, i64* %1
  store i64 0, i64* %2
  %sensor = call %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomIN3rotIUUII"(<2 x double>* %3, <2 x double>* %0, i64* %1, i64* %2)
  ret %sensor %sensor
}

; Function Attrs: alwaysinline nounwind
define private void @_TFFAsensor() #0 {
__llvm_entry:
  %SENSOR = alloca %sensor
  %SENSOR1 = call %sensor @"sensor@Z6sensorM4N3resUN6centerUN4zoomIN3rotI"()
  %SENSOR1.fca.0.extract = extractvalue %sensor %SENSOR1, 0
  %SENSOR1.fca.0.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 0
  store <2 x double> %SENSOR1.fca.0.extract, <2 x double>* %SENSOR1.fca.0.gep
  %SENSOR1.fca.1.extract = extractvalue %sensor %SENSOR1, 1
  %SENSOR1.fca.1.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 1
  store <2 x double> %SENSOR1.fca.1.extract, <2 x double>* %SENSOR1.fca.1.gep
  %SENSOR1.fca.2.extract = extractvalue %sensor %SENSOR1, 2
  %SENSOR1.fca.2.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 2
  store i64 %SENSOR1.fca.2.extract, i64* %SENSOR1.fca.2.gep
  %SENSOR1.fca.3.extract = extractvalue %sensor %SENSOR1, 3
  %SENSOR1.fca.3.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 3
  store i64 %SENSOR1.fca.3.extract, i64* %SENSOR1.fca.3.gep
  call void @"sensorDATA@Z6sensorM4N3resUN6centerUN4zoomIN3rotI"(%sensor* %SENSOR)
  %SENSOR2.fca.0.load = load <2 x double>, <2 x double>* %SENSOR1.fca.0.gep
  %SENSOR2.fca.0.insert = insertvalue %sensor undef, <2 x double> %SENSOR2.fca.0.load, 0
  %SENSOR2.fca.1.load = load <2 x double>, <2 x double>* %SENSOR1.fca.1.gep
  %SENSOR2.fca.1.insert = insertvalue %sensor %SENSOR2.fca.0.insert, <2 x double> %SENSOR2.fca.1.load, 1
  %SENSOR2.fca.2.load = load i64, i64* %SENSOR1.fca.2.gep
  %SENSOR2.fca.2.insert = insertvalue %sensor %SENSOR2.fca.1.insert, i64 %SENSOR2.fca.2.load, 2
  %SENSOR2.fca.3.load = load i64, i64* %SENSOR1.fca.3.gep
  %return = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.1.load, i64 0)
  %return8 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.1.load, i64 1)
  %return9 = call <3 x double> @"set@VFFF"(double %return, double %return8, double 0.000000e+00)
  %cast = sitofp i64 %SENSOR2.fca.3.load to double
  %return11 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %cast)
  %cast13 = sitofp i64 %SENSOR2.fca.2.load to double
  %output = call double @"div@FF"(double 1.000000e+00, double %cast13)
  %cast18 = call <3 x double> @"set@VI"(i64 0)
  %cast20 = call <3 x double> @"set@VF"(double %output)
  %return22 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %return9, <3 x double> %cast18, <3 x double> %cast20, <3 x double> %cast18)
  %cast25 = call <3 x double> @"set@VI"(i64 1)
  %return26 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %return9, <3 x double> %cast18, <3 x double> %cast25)
  %return31 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast18, <3 x double> %return11, <3 x double> %cast25, <3 x double> %return9)
  %return34 = call <3 x double> @"neg@VV"(<3 x double> %return11)
  %return37 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast18, <3 x double> %return34, <3 x double> %cast25, <3 x double> %return9)
  %return39 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.0.load, i64 0)
  %return41 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.0.load, i64 1)
  %output43 = call double @"div@FF"(double %return39, double 2.000000e+00)
  %return44 = call double @"neg@FF"(double %output43)
  %output46 = call double @"div@FF"(double %return41, double 2.000000e+00)
  %return47 = call <3 x double> @"set@VFFF"(double %return44, double %output46, double 0.000000e+00)
  %return52 = call <3 x double> @"set@VFFF"(double %output43, double %output46, double 0.000000e+00)
  %return57 = call double @"neg@FF"(double %output46)
  %return58 = call <3 x double> @"set@VFFF"(double %output43, double %return57, double 0.000000e+00)
  %return65 = call <3 x double> @"set@VFFF"(double %return44, double %return57, double 0.000000e+00)
  %return70 = call <3 x double>* @"array@[V:VVVV"(<3 x double> %return47, <3 x double> %return52, <3 x double> %return58, <3 x double> %return65)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output86, %body ]
  %_points_tm.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @4, i64 0, i64 0), %__llvm_entry ], [ %output83, %body ]
  %return72 = call i64 @"lt@III"(i64 %i.0, i64 4)
  %0 = icmp ne i64 %return72, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return75 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return70, i64 %i.0)
  %output79 = call <16 x double> @"mul@44"(<16 x double> %return22, <16 x double> %return37)
  %output80 = call <3 x double> @"mul@V4"(<3 x double> %return75, <16 x double> %output79)
  %output83 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm.0, <3 x double> %output80)
  %output86 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  br label %cond88

cond88:                                           ; preds = %body89, %end
  %i87.0 = phi i64 [ 0, %end ], [ %output113, %body89 ]
  %_points_tm.1 = phi <3 x double>* [ %_points_tm.0, %end ], [ %output110, %body89 ]
  %return91 = call i64 @"lt@III"(i64 %i87.0, i64 4)
  %1 = icmp ne i64 %return91, 0
  br i1 %1, label %body89, label %end92

body89:                                           ; preds = %cond88
  %return97 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 %i87.0)
  %return101 = call <16 x double> @"invert@44"(<16 x double> %return26)
  %output102 = call <3 x double> @"mul@V4"(<3 x double> %return97, <16 x double> %return101)
  %return104 = call <16 x double> @"invert@44"(<16 x double> %return37)
  %output105 = call <3 x double> @"mul@V4"(<3 x double> %output102, <16 x double> %return104)
  %output107 = call <3 x double> @"add@VV"(<3 x double> %output105, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %return108 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.1, <3 x double> %output107, i64 %i87.0)
  %output110 = extractvalue { <3 x double>, <3 x double>* } %return108, 1
  %output113 = add i64 %i87.0, 1
  br label %cond88

end92:                                            ; preds = %cond88
  %return115 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 0)
  %return117 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 1)
  %output118 = call <3 x double> @"add@VV"(<3 x double> %return115, <3 x double> %return117)
  %return120 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 2)
  %output121 = call <3 x double> @"add@VV"(<3 x double> %output118, <3 x double> %return120)
  %return123 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 3)
  %output124 = call <3 x double> @"add@VV"(<3 x double> %output121, <3 x double> %return123)
  %cast125 = call <3 x double> @"set@VI"(i64 4)
  %output126 = call <3 x double> @"div@VV"(<3 x double> %output124, <3 x double> %cast125)
  %return130 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %output126, <3 x double> %cast18, <3 x double> %cast25)
  br label %cond132

cond132:                                          ; preds = %body133, %end92
  %_points_tm_out.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @4, i64 0, i64 0), %end92 ], [ %output160, %body133 ]
  %i131.0 = phi i64 [ 0, %end92 ], [ %output163, %body133 ]
  %_points_tm.2 = phi <3 x double>* [ %_points_tm.1, %end92 ], [ %output150, %body133 ]
  %return135 = call i64 @"lt@III"(i64 %i131.0, i64 4)
  %2 = icmp ne i64 %return135, 0
  br i1 %2, label %body133, label %end136

body133:                                          ; preds = %cond132
  %return141 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 %i131.0)
  %return145 = call <16 x double> @"invert@44"(<16 x double> %return130)
  %output146 = call <3 x double> @"mul@V4"(<3 x double> %return141, <16 x double> %return145)
  %return148 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.2, <3 x double> %output146, i64 %i131.0)
  %output150 = extractvalue { <3 x double>, <3 x double>* } %return148, 1
  %return154 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output150, i64 %i131.0)
  %return155 = call <16 x double> @"ident@4"()
  %output156 = call <16 x double> @"mul@4F"(<16 x double> %return155, double 1.000000e+03)
  %output157 = call <3 x double> @"mul@V4"(<3 x double> %return154, <16 x double> %output156)
  %output159 = call <3 x double> @"add@VV"(<3 x double> %output157, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %output160 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm_out.0, <3 x double> %output159)
  %output163 = add i64 %i131.0, 1
  br label %cond132

end136:                                           ; preds = %cond132
  %return165 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 0)
  %return166 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return165)
  %return168 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 1)
  %return169 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return168)
  %return171 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 2)
  %return172 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return171)
  %return174 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 3)
  %return175 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return174)
  %return181 = call i64* @"array@[I:IIIII"(i64 %return166, i64 %return169, i64 %return172, i64 %return175, i64 %return166)
  %return182 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i64* %return181)
  %return184 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 0)
  %return185 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return184)
  %return187 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 1)
  %return188 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return187)
  %return190 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 2)
  %return191 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return190)
  %return193 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 3)
  %return194 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return193)
  %return200 = call i64* @"array@[I:IIIII"(i64 %return185, i64 %return188, i64 %return191, i64 %return194, i64 %return185)
  %return201 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0), i64* %return200)
  %cast202 = call <3 x double> @"set@VF"(double 5.000000e-02)
  %return211 = call i64* @"array@[I:IIIIIIII"(i64 %return166, i64 %return169, i64 %return172, i64 %return175, i64 %return185, i64 %return188, i64 %return191, i64 %return194)
  %return213 = call i64 @"len@I[I"(i64* %return211)
  br label %cond214

cond214:                                          ; preds = %body215, %end136
  %__impl_foreach_index.0 = phi i64 [ 0, %end136 ], [ %output228, %body215 ]
  %return218 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return213)
  %3 = icmp ne i64 %return218, 0
  br i1 %3, label %body215, label %end219

body215:                                          ; preds = %cond214
  %return223 = call i64 @"getcomp@I[II"(i64* %return211, i64 %__impl_foreach_index.0)
  %return226 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i64 0, i64 0), i64 %return223, <3 x double> %cast202, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @7, i64 0, i64 0))
  %output228 = add i64 %__impl_foreach_index.0, 1
  br label %cond214

end219:                                           ; preds = %cond214
  %return234 = call i64* @"array@[I:IIIII"(i64 %return166, i64 %return169, i64 %return188, i64 %return185, i64 %return166)
  %return235 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return234)
  %return241 = call i64* @"array@[I:IIIII"(i64 %return169, i64 %return172, i64 %return191, i64 %return188, i64 %return169)
  %return242 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return241)
  %return248 = call i64* @"array@[I:IIIII"(i64 %return172, i64 %return175, i64 %return194, i64 %return191, i64 %return172)
  %return249 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return248)
  %return255 = call i64* @"array@[I:IIIII"(i64 %return175, i64 %return166, i64 %return185, i64 %return194, i64 %return175)
  %return256 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64* %return255)
  %return258 = call <16 x double> @"invert@44"(<16 x double> %return26)
  %output260 = call <16 x double> @"mul@44"(<16 x double> %return258, <16 x double> %return31)
  %return262 = call <16 x double> @"invert@44"(<16 x double> %return130)
  %output263 = call <16 x double> @"mul@44"(<16 x double> %output260, <16 x double> %return262)
  call void @"packedtransform@II4"(i64 0, i64 0, <16 x double> %output263)
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"maketransform@4IIVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V:VVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double>* @"append@[VV"(<3 x double>*, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"invert@44"(<16 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #2

; Function Attrs: nounwind
declare <16 x double> @"mul@4F"(<16 x double>, double) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIIIIII"(i64, i64, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind
declare void @"packedtransform@II4"(i64, i64, <16 x double>) #2

; Function Attrs: nounwind
define void @TFFAsensor() #2 {
__llvm_entry:
  call void @_TFFAsensor()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAsensor()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.5.435"}
!2 = !{!"64"}

;_code_end
