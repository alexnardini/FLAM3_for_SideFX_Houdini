;_name	TFFAvactive
; ModuleID = 'TFFAvactive'
source_filename = "TFFAvactive"

@0 = private constant [13 x i8] c"../flamefunc\00"
@1 = private constant [0 x i8*] zeroinitializer
@2 = private constant [0 x i64] zeroinitializer
@3 = private constant [0 x double] zeroinitializer
@4 = private constant [12 x i8] c"../vactive_\00"
@5 = private constant [7 x i8] c"../iw_\00"
@6 = private constant [12 x i8] c"../varnote_\00"
@7 = private constant [2 x i8] c":\00"
@8 = private constant [5 x i8] c"XAOS\00"
@VACTIVE = external global i64*
@XAOS_TO = external global double*
@XAOS_FROM = external global double*
@9 = private constant [8 x i8] c"VACTIVE\00"
@10 = private constant [8 x i8] c"XAOS_TO\00"
@11 = private constant [10 x i8] c"XAOS_FROM\00"

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose@[F[FI"(double** %XAOS, double** %T, i64* %size) #0 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load double*, double** %T
  %XAOS15 = load double*, double** %XAOS
  %return17 = call double @"getcomp@F[FI"(double* %XAOS15, i64 %output13)
  %output18 = call double* @"append@[FF"(double* %T14, double %return17)
  store double* %output18, double** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAvactive@[I[F[F"(i64** %_bound_VACTIVE, double** %_bound_XAOS_TO, double** %_bound_XAOS_FROM) #0 {
__llvm_entry:
  %_XAOS_FROM = alloca double*
  %0 = alloca double*
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter ]
  %vactive.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), %__llvm_entry ], [ %vactive.1, %iter ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @1, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter ]
  %return3 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %2 = icmp ne i64 %return3, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return5 = call i8* @"itoa@SI"(i64 %output)
  %return8 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), i8* %return5)
  %return9 = call i64 @"chi@IS"(i8* %return8)
  %output10 = call i64* @"append@[II"(i64* %vactive.0, i64 %return9)
  %return12 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), i8* %return5)
  %return13 = call double @"chf@FS"(i8* %return12)
  %return15 = fcmp oeq double %return13, 0.000000e+00
  br i1 %return15, label %true, label %end17

end:                                              ; preds = %cond
  %return40 = call i64 @"len@I[S"(i8** %sIDX.0)
  store double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), double** %_XAOS_FROM, !vex-initializer-store !3
  br label %cond42

iter:                                             ; preds = %end17, %end27
  %IW.1 = phi double* [ %IW.0, %end17 ], [ %output32, %end27 ]
  %sIDX.1 = phi i8** [ %sIDX.0, %end17 ], [ %output35, %end27 ]
  br label %cond

true:                                             ; preds = %body
  %return19 = call { i64, i64* } @"setcomp@I[III"(i64* %output10, i64 0, i64 %i.0)
  %output21 = extractvalue { i64, i64* } %return19, 1
  br label %end17

end17:                                            ; preds = %true, %body
  %vactive.1 = phi i64* [ %output21, %true ], [ %output10, %body ]
  %return24 = call i64 @"getcomp@I[II"(i64* %vactive.1, i64 %i.0)
  %return25 = call i64 @"not@II"(i64 %return24)
  %3 = icmp ne i64 %return25, 0
  br i1 %3, label %iter, label %end27

end27:                                            ; preds = %end17
  %output32 = call double* @"append@[FF"(double* %IW.0, double %return13)
  %output35 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return5)
  br label %iter

cond42:                                           ; preds = %end117, %end
  %_XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end ], [ %output137, %end117 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end ], [ %output141, %end117 ]
  %i41.0 = phi i64 [ 0, %end ], [ %output144, %end117 ]
  %return46 = call i64 @"lt@III"(i64 %i41.0, i64 %return40)
  %4 = icmp ne i64 %return46, 0
  br i1 %4, label %body43, label %end47

body43:                                           ; preds = %cond42
  %return51 = call i8* @"getcomp@S[SI"(i8** %sIDX.0, i64 %i41.0)
  %return52 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8* %return51)
  %return53 = call i8* @"chs@SS"(i8* %return52)
  %return55 = call i8** @"split@[SSS"(i8* %return53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0))
  %return57 = call i8* @"getcomp@S[SI"(i8** %return55, i64 0)
  %return58 = call i8* @"toupper@SS"(i8* %return57)
  %return59 = call i64 @"eq@ISS"(i8* %return58, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0))
  %5 = icmp ne i64 %return59, 0
  br i1 %5, label %true60, label %false

end47:                                            ; preds = %cond42
  store double* %_XAOS_TO.0, double** %0
  store i64 %return40, i64* %1
  call void @"XAOS_transpose@[F[FI"(double** %0, double** %_XAOS_FROM, i64* %1)
  br label %cond148

true60:                                           ; preds = %body43
  %return63 = call { i8*, i8** } @"pop@S[SI"(i8** %return55, i64 0)
  %output65 = extractvalue { i8*, i8** } %return63, 1
  %return67 = call i64 @"len@I[S"(i8** %output65)
  br label %cond68

false:                                            ; preds = %body43
  %output90 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), i64 %return, double 1.000000e+00)
  br label %end61

end61:                                            ; preds = %false, %end73
  %xaos.0 = phi double* [ %output87, %end73 ], [ %output90, %false ]
  br label %cond91

cond68:                                           ; preds = %body69, %true60
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %true60 ], [ %output82, %body69 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %true60 ], [ %output84, %body69 ]
  %return72 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return67)
  %6 = icmp ne i64 %return72, 0
  br i1 %6, label %body69, label %end73

body69:                                           ; preds = %cond68
  %return77 = call i8* @"getcomp@S[SI"(i8** %output65, i64 %__impl_foreach_index.0)
  %return80 = call double @"atof@FS"(i8* %return77)
  %return81 = call double @"max@FFF"(double %return80, double 1.000000e-10)
  %output82 = call double* @"append@[FF"(double* %xaos.1, double %return81)
  %output84 = add i64 %__impl_foreach_index.0, 1
  br label %cond68

end73:                                            ; preds = %cond68
  %output87 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return, double 1.000000e+00)
  br label %end61

cond91:                                           ; preds = %end103, %end61
  %xaos.2 = phi double* [ %xaos.0, %end61 ], [ %xaos.3, %end103 ]
  %j.0 = phi i64 [ 0, %end61 ], [ %output111, %end103 ]
  %return95 = call i64 @"lt@III"(i64 %j.0, i64 %return)
  %7 = icmp ne i64 %return95, 0
  br i1 %7, label %body92, label %end96

body92:                                           ; preds = %cond91
  %return100 = call i64 @"getcomp@I[II"(i64* %vactive.0, i64 %j.0)
  %return101 = call i64 @"not@II"(i64 %return100)
  %8 = icmp ne i64 %return101, 0
  br i1 %8, label %true102, label %end103

end96:                                            ; preds = %cond91
  br label %cond112

true102:                                          ; preds = %body92
  %return106 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %j.0)
  %output108 = extractvalue { double, double* } %return106, 1
  br label %end103

end103:                                           ; preds = %true102, %body92
  %xaos.3 = phi double* [ %output108, %true102 ], [ %xaos.2, %body92 ]
  %output111 = add i64 %j.0, 1
  br label %cond91

cond112:                                          ; preds = %body113, %end96
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end96 ], [ %output131, %body113 ]
  %k.0 = phi i64 [ 0, %end96 ], [ %output134, %body113 ]
  %return116 = call i64 @"lt@III"(i64 %k.0, i64 %return40)
  %9 = icmp ne i64 %return116, 0
  br i1 %9, label %body113, label %end117

body113:                                          ; preds = %cond112
  %return122 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i41.0)
  %return125 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k.0)
  %output126 = fmul double %return122, %return125
  %return129 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output130 = fmul double %output126, %return129
  %output131 = call double* @"append@[FF"(double* %IW_xaos.0, double %output130)
  %output134 = add i64 %k.0, 1
  br label %cond112

end117:                                           ; preds = %cond112
  %output137 = call double* @"append@[F[F"(double* %_XAOS_TO.0, double* %IW_xaos.0)
  %return140 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output141 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return140)
  %output144 = add i64 %i41.0, 1
  br label %cond42

cond148:                                          ; preds = %body149, %end47
  %XAOS_FROM.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end47 ], [ %output166, %body149 ]
  %i147.0 = phi i64 [ 0, %end47 ], [ %output169, %body149 ]
  %return152 = call i64 @"lt@III"(i64 %i147.0, i64 %return40)
  %10 = icmp ne i64 %return152, 0
  br i1 %10, label %body149, label %end153

body149:                                          ; preds = %cond148
  %output157 = mul i64 %i147.0, %return40
  %_XAOS_FROM159 = load double*, double** %_XAOS_FROM
  %output163 = add i64 %output157, %return40
  %return164 = call double* @"slice@[F[FIIIIII"(double* %_XAOS_FROM159, i64 1, i64 %output157, i64 1, i64 %output163, i64 0, i64 0)
  %return165 = call double* @"create_cdf@[F[F"(double* %return164)
  %output166 = call double* @"append@[F[F"(double* %XAOS_FROM.0, double* %return165)
  %output169 = add i64 %i147.0, 1
  br label %cond148

end153:                                           ; preds = %cond148
  store i64* %vactive.0, i64** %_bound_VACTIVE
  store double* %XAOS_TO.0, double** %_bound_XAOS_TO
  store double* %XAOS_FROM.0, double** %_bound_XAOS_FROM
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #1

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #1

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #1

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #2

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #1

; Function Attrs: nounwind
declare double* @"slice@[F[FIIIIII"(double*, i64, i64, i64, i64, i64, i64) #2

; Function Attrs: nounwind
define void @TFFAvactive(i64* %VACTIVE, double* %XAOS_TO, double* %XAOS_FROM) #2 {
__llvm_entry:
  %"<XAOS_TO>" = alloca double*
  %"<XAOS_FROM>" = alloca double*
  %"<VACTIVE>" = alloca i64*
  store i64* %VACTIVE, i64** %"<VACTIVE>"
  store double* %XAOS_TO, double** %"<XAOS_TO>"
  store double* %XAOS_FROM, double** %"<XAOS_FROM>"
  call void @"_TFFAvactive@[I[F[F"(i64** %"<VACTIVE>", double** %"<XAOS_TO>", double** %"<XAOS_FROM>")
  %evalue = load i64*, i64** %"<VACTIVE>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0), i64* %evalue) #3
  %evalue1 = load double*, double** %"<XAOS_TO>"
  %gvalue2 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), double* %evalue1) #3
  %evalue3 = load double*, double** %"<XAOS_FROM>"
  %gvalue4 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @11, i64 0, i64 0), double* %evalue3) #3
  store i64* %gvalue, i64** @VACTIVE
  store double* %gvalue2, double** @XAOS_TO
  store double* %gvalue4, double** @XAOS_FROM
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAvactive(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.437"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
