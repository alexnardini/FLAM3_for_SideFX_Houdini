;_name	TFFAvactive
; ModuleID = 'TFFAvactive'
source_filename = "TFFAvactive"

@0 = private constant [13 x i8] c"../flamefunc\00"
@1 = private constant [0 x i8*] zeroinitializer
@2 = private constant [0 x i64] zeroinitializer
@3 = private constant [0 x double] zeroinitializer
@4 = private constant [12 x i8] c"../vactive_\00"
@5 = private constant [7 x i8] c"../iw_\00"
@6 = private constant [12 x i8] c"../varnote_\00"
@7 = private constant [2 x i8] c":\00"
@8 = private constant [5 x i8] c"XAOS\00"
@VACTIVE = external global i64*
@XAOS = external global double*
@9 = private constant [8 x i8] c"VACTIVE\00"

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAvactive@[I[F"(i64** %_bound_VACTIVE, double** %_bound_XAOS) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter ]
  %vactive.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), %__llvm_entry ], [ %vactive.1, %iter ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @1, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter ]
  %return3 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %0 = icmp ne i64 %return3, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return5 = call i8* @"itoa@SI"(i64 %output)
  %return8 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), i8* %return5)
  %return9 = call i64 @"chi@IS"(i8* %return8)
  %output10 = call i64* @"append@[II"(i64* %vactive.0, i64 %return9)
  %return12 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), i8* %return5)
  %return13 = call double @"chf@FS"(i8* %return12)
  %return15 = fcmp oeq double %return13, 0.000000e+00
  br i1 %return15, label %true, label %end17

end:                                              ; preds = %cond
  br label %cond40

iter:                                             ; preds = %end17, %end27
  %IW.1 = phi double* [ %IW.0, %end17 ], [ %output32, %end27 ]
  %sIDX.1 = phi i8** [ %sIDX.0, %end17 ], [ %output35, %end27 ]
  br label %cond

true:                                             ; preds = %body
  %return19 = call { i64, i64* } @"setcomp@I[III"(i64* %output10, i64 0, i64 %i.0)
  %output21 = extractvalue { i64, i64* } %return19, 1
  br label %end17

end17:                                            ; preds = %true, %body
  %vactive.1 = phi i64* [ %output21, %true ], [ %output10, %body ]
  %return24 = call i64 @"getcomp@I[II"(i64* %vactive.1, i64 %i.0)
  %return25 = call i64 @"not@II"(i64 %return24)
  %1 = icmp ne i64 %return25, 0
  br i1 %1, label %iter, label %end27

end27:                                            ; preds = %end17
  %output32 = call double* @"append@[FF"(double* %IW.0, double %return13)
  %output35 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return5)
  br label %iter

cond40:                                           ; preds = %end133, %end
  %XAOS.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end ], [ %output154, %end133 ]
  %i39.0 = phi i64 [ 0, %end ], [ %output157, %end133 ]
  %return44 = call i64 @"len@I[S"(i8** %sIDX.0)
  %return45 = call i64 @"lt@III"(i64 %i39.0, i64 %return44)
  %2 = icmp ne i64 %return45, 0
  br i1 %2, label %body41, label %end46

body41:                                           ; preds = %cond40
  %return50 = call i8* @"getcomp@S[SI"(i8** %sIDX.0, i64 %i39.0)
  %return51 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8* %return50)
  %return52 = call i8* @"chs@SS"(i8* %return51)
  %return54 = call i8** @"split@[SSS"(i8* %return52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0))
  %return56 = call i8* @"getcomp@S[SI"(i8** %return54, i64 0)
  %return57 = call i8* @"toupper@SS"(i8* %return56)
  %return58 = call i64 @"eq@ISS"(i8* %return57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0))
  %3 = icmp ne i64 %return58, 0
  br i1 %3, label %true59, label %false

end46:                                            ; preds = %cond40
  store i64* %vactive.0, i64** %_bound_VACTIVE
  store double* %XAOS.0, double** %_bound_XAOS
  ret void

true59:                                           ; preds = %body41
  %return62 = call { i8*, i8** } @"pop@S[SI"(i8** %return54, i64 0)
  %output64 = extractvalue { i8*, i8** } %return62, 1
  %return66 = call i64 @"len@I[S"(i8** %output64)
  br label %cond67

false:                                            ; preds = %body41
  %output88 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), i64 %return, double 1.000000e+00)
  br label %end60

end60:                                            ; preds = %false, %end72
  %notef.0 = phi double* [ %output85, %end72 ], [ %output88, %false ]
  br label %cond89

cond67:                                           ; preds = %body68, %true59
  %notef.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %true59 ], [ %output80, %body68 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %true59 ], [ %output82, %body68 ]
  %return71 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return66)
  %4 = icmp ne i64 %return71, 0
  br i1 %4, label %body68, label %end72

body68:                                           ; preds = %cond67
  %return76 = call i8* @"getcomp@S[SI"(i8** %output64, i64 %__impl_foreach_index.0)
  %return79 = call double @"atof@FS"(i8* %return76)
  %output80 = call double* @"append@[FF"(double* %notef.1, double %return79)
  %output82 = add i64 %__impl_foreach_index.0, 1
  br label %cond67

end72:                                            ; preds = %cond67
  %output85 = call double* @"resize@[FIF"(double* %notef.1, i64 %return, double 1.000000e+00)
  br label %end60

cond89:                                           ; preds = %end101, %end60
  %notef.2 = phi double* [ %notef.0, %end60 ], [ %notef.3, %end101 ]
  %j.0 = phi i64 [ 0, %end60 ], [ %output109, %end101 ]
  %return93 = call i64 @"lt@III"(i64 %j.0, i64 %return)
  %5 = icmp ne i64 %return93, 0
  br i1 %5, label %body90, label %end94

body90:                                           ; preds = %cond89
  %return98 = call i64 @"getcomp@I[II"(i64* %vactive.0, i64 %j.0)
  %return99 = call i64 @"not@II"(i64 %return98)
  %6 = icmp ne i64 %return99, 0
  br i1 %6, label %true100, label %end101

end94:                                            ; preds = %cond89
  br label %cond111

true100:                                          ; preds = %body90
  %return104 = call { double, double* } @"pop@F[FI"(double* %notef.2, i64 %j.0)
  %output106 = extractvalue { double, double* } %return104, 1
  br label %end101

end101:                                           ; preds = %true100, %body90
  %notef.3 = phi double* [ %output106, %true100 ], [ %notef.2, %body90 ]
  %output109 = add i64 %j.0, 1
  br label %cond89

cond111:                                          ; preds = %body112, %end94
  %xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end94 ], [ %output123, %body112 ]
  %j110.0 = phi i64 [ 0, %end94 ], [ %output126, %body112 ]
  %return116 = call i64 @"lt@III"(i64 %j110.0, i64 %return44)
  %7 = icmp ne i64 %return116, 0
  br i1 %7, label %body112, label %end117

body112:                                          ; preds = %cond111
  %return122 = call double @"getcomp@F[FI"(double* %notef.2, i64 %j110.0)
  %output123 = call double* @"append@[FF"(double* %xaos.0, double %return122)
  %output126 = add i64 %j110.0, 1
  br label %cond111

end117:                                           ; preds = %cond111
  br label %cond127

cond127:                                          ; preds = %body128, %end117
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end117 ], [ %output147, %body128 ]
  %k.0 = phi i64 [ 0, %end117 ], [ %output150, %body128 ]
  %return132 = call i64 @"lt@III"(i64 %k.0, i64 %return44)
  %8 = icmp ne i64 %return132, 0
  br i1 %8, label %body128, label %end133

body128:                                          ; preds = %cond127
  %return138 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i39.0)
  %return141 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k.0)
  %output142 = fmul double %return138, %return141
  %return145 = call double @"getcomp@F[FI"(double* %xaos.0, i64 %k.0)
  %output146 = fmul double %output142, %return145
  %output147 = call double* @"append@[FF"(double* %IW_xaos.0, double %output146)
  %output150 = add i64 %k.0, 1
  br label %cond127

end133:                                           ; preds = %cond127
  %return153 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output154 = call double* @"append@[F[F"(double* %XAOS.0, double* %return153)
  %output157 = add i64 %i39.0, 1
  br label %cond40
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #2

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #2

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #1

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #1

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #1

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #2

; Function Attrs: nounwind
define void @TFFAvactive(i64* %VACTIVE, double* %XAOS) #2 {
__llvm_entry:
  %"<XAOS>" = alloca double*
  %"<VACTIVE>" = alloca i64*
  store i64* %VACTIVE, i64** %"<VACTIVE>"
  store double* %XAOS, double** %"<XAOS>"
  call void @"_TFFAvactive@[I[F"(i64** %"<VACTIVE>", double** %"<XAOS>")
  %evalue = load i64*, i64** %"<VACTIVE>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0), i64* %evalue) #3
  %evalue1 = load double*, double** %"<XAOS>"
  %gvalue2 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), double* %evalue1) #3
  store i64* %gvalue, i64** @VACTIVE
  store double* %gvalue2, double** @XAOS
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAvactive(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @2, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0))
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.437"}
!2 = !{!"64"}

;_code_end
