;_name	TFFAvactive
; ModuleID = 'TFFAvactive'
source_filename = "TFFAvactive"

@0 = private constant [13 x i8] c"../flamefunc\00"
@1 = private constant [0 x i64] zeroinitializer
@2 = private constant [0 x i8*] zeroinitializer
@3 = private constant [0 x double] zeroinitializer
@4 = private constant [12 x i8] c"../vactive_\00"
@5 = private constant [7 x i8] c"../iw_\00"
@6 = private constant [12 x i8] c"../varnote_\00"
@7 = private constant [2 x i8] c":\00"
@8 = private constant [5 x i8] c"XAOS\00"
@VACTIVE = external global i64*
@XAOS = external global i64
@XAOS_TO = external global double*
@XAOS_FROM = external global double*
@9 = private constant [8 x i8] c"VACTIVE\00"
@10 = private constant [8 x i8] c"XAOS_TO\00"
@11 = private constant [10 x i8] c"XAOS_FROM\00"

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #0

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #0

; Function Attrs: nounwind
declare <4 x double> @"set@24"(<16 x double>) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@U2"(<2 x double>, <4 x double>) #0

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose@[F[FI"(double** %XAOS, double** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load double*, double** %T
  %XAOS15 = load double*, double** %XAOS
  %return17 = call double @"getcomp@F[FI"(double* %XAOS15, i64 %output13)
  %output18 = call double* @"append@[FF"(double* %T14, double %return17)
  store double* %output18, double** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAvactive@[II[F[F"(i64** %_bound_VACTIVE, i64* %_bound_XAOS, double** %_bound_XAOS_TO, double** %_bound_XAOS_FROM) #2 {
__llvm_entry:
  %_XAOS_FROM = alloca double*
  %0 = alloca double*
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @2, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter ]
  %vactive.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), %__llvm_entry ], [ %vactive.1, %iter ]
  %return3 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %2 = icmp ne i64 %return3, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return5 = call i8* @"itoa@SI"(i64 %output)
  %return8 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i64 0, i64 0), i8* %return5)
  %return9 = call i64 @"chi@IS"(i8* %return8)
  %output10 = call i64* @"append@[II"(i64* %vactive.0, i64 %return9)
  %return12 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i64 0, i64 0), i8* %return5)
  %return13 = call double @"chf@FS"(i8* %return12)
  %return15 = fcmp oeq double %return13, 0.000000e+00
  br i1 %return15, label %true, label %end17

end:                                              ; preds = %cond
  %return39 = call i64 @"len@I[S"(i8** %sIDX.0)
  store double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), double** %_XAOS_FROM, !vex-initializer-store !3
  br label %cond41

iter:                                             ; preds = %end17, %end27
  %IW.1 = phi double* [ %IW.0, %end17 ], [ %output32, %end27 ]
  %sIDX.1 = phi i8** [ %sIDX.0, %end17 ], [ %output35, %end27 ]
  br label %cond

true:                                             ; preds = %body
  %return19 = call { i64, i64* } @"setcomp@I[III"(i64* %output10, i64 0, i64 %i.0)
  %output21 = extractvalue { i64, i64* } %return19, 1
  br label %end17

end17:                                            ; preds = %true, %body
  %vactive.1 = phi i64* [ %output21, %true ], [ %output10, %body ]
  %return24 = call i64 @"getcomp@I[II"(i64* %vactive.1, i64 %i.0)
  %return25 = call i64 @"not@II"(i64 %return24)
  %3 = icmp ne i64 %return25, 0
  br i1 %3, label %iter, label %end27

end27:                                            ; preds = %end17
  %output32 = call double* @"append@[FF"(double* %IW.0, double %return13)
  %output35 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return5)
  br label %iter

cond41:                                           ; preds = %end153, %end
  %xaos_chk.0 = phi i64 [ 0, %end ], [ %xaos_chk.1, %end153 ]
  %_XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end ], [ %output144, %end153 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end ], [ %XAOS_TO.1, %end153 ]
  %i40.0 = phi i64 [ 0, %end ], [ %output163, %end153 ]
  %return45 = call i64 @"lt@III"(i64 %i40.0, i64 %return39)
  %4 = icmp ne i64 %return45, 0
  br i1 %4, label %body42, label %end46

body42:                                           ; preds = %cond41
  %return50 = call i8* @"getcomp@S[SI"(i8** %sIDX.0, i64 %i40.0)
  %return51 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i64 0, i64 0), i8* %return50)
  %return52 = call i8* @"chs@SS"(i8* %return51)
  %return54 = call i8** @"split@[SSS"(i8* %return52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i64 0, i64 0))
  %return56 = call i8* @"getcomp@S[SI"(i8** %return54, i64 0)
  %return57 = call i8* @"toupper@SS"(i8* %return56)
  %return58 = call i64 @"eq@ISS"(i8* %return57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0))
  %5 = icmp ne i64 %return58, 0
  br i1 %5, label %true59, label %false

end46:                                            ; preds = %cond41
  store i64* %vactive.0, i64** %_bound_VACTIVE
  %6 = icmp ne i64 %xaos_chk.0, 0
  br i1 %6, label %true166, label %false167

true59:                                           ; preds = %body42
  %return62 = call { i8*, i8** } @"pop@S[SI"(i8** %return54, i64 0)
  %output64 = extractvalue { i8*, i8** } %return62, 1
  %return66 = call i64 @"len@I[S"(i8** %output64)
  br label %cond67

false:                                            ; preds = %body42
  %output89 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), i64 %return, double 1.000000e+00)
  br label %end60

end60:                                            ; preds = %false, %end72
  %xaos.0 = phi double* [ %output86, %end72 ], [ %output89, %false ]
  br label %cond90

cond67:                                           ; preds = %body68, %true59
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %true59 ], [ %output81, %body68 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %true59 ], [ %output83, %body68 ]
  %return71 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return66)
  %7 = icmp ne i64 %return71, 0
  br i1 %7, label %body68, label %end72

body68:                                           ; preds = %cond67
  %return76 = call i8* @"getcomp@S[SI"(i8** %output64, i64 %__impl_foreach_index.0)
  %return79 = call double @"atof@FS"(i8* %return76)
  %return80 = call double @"max@FFF"(double %return79, double 1.000000e-10)
  %output81 = call double* @"append@[FF"(double* %xaos.1, double %return80)
  %output83 = add i64 %__impl_foreach_index.0, 1
  br label %cond67

end72:                                            ; preds = %cond67
  %output86 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return, double 1.000000e+00)
  br label %end60

cond90:                                           ; preds = %end102, %end60
  %xaos.2 = phi double* [ %xaos.0, %end60 ], [ %xaos.3, %end102 ]
  %j.0 = phi i64 [ 0, %end60 ], [ %output109, %end102 ]
  %return94 = call i64 @"lt@III"(i64 %j.0, i64 %return)
  %8 = icmp ne i64 %return94, 0
  br i1 %8, label %body91, label %end95

body91:                                           ; preds = %cond90
  %return99 = call i64 @"getcomp@I[II"(i64* %vactive.0, i64 %j.0)
  %return100 = call i64 @"not@II"(i64 %return99)
  %9 = icmp ne i64 %return100, 0
  br i1 %9, label %true101, label %end102

end95:                                            ; preds = %cond90
  br label %cond110

true101:                                          ; preds = %body91
  %return105 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %j.0)
  %output107 = extractvalue { double, double* } %return105, 1
  br label %end102

end102:                                           ; preds = %true101, %body91
  %xaos.3 = phi double* [ %output107, %true101 ], [ %xaos.2, %body91 ]
  %output109 = add i64 %j.0, 1
  br label %cond90

cond110:                                          ; preds = %end123, %end95
  %xaos_chk.1 = phi i64 [ %xaos_chk.0, %end95 ], [ %xaos_chk.2, %end123 ]
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %end95 ], [ %output139, %end123 ]
  %k.0 = phi i64 [ 0, %end95 ], [ %output141, %end123 ]
  %return114 = call i64 @"lt@III"(i64 %k.0, i64 %return39)
  %10 = icmp ne i64 %return114, 0
  br i1 %10, label %body111, label %end115

body111:                                          ; preds = %cond110
  %return119 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %return120 = fcmp one double %return119, 1.000000e+00
  br i1 %return120, label %true122, label %end123

end115:                                           ; preds = %cond110
  %output144 = call double* @"append@[F[F"(double* %_XAOS_TO.0, double* %IW_xaos.0)
  %return146 = call double @"min@F[F"(double* %xaos.2)
  %return148 = call double @"max@F[F"(double* %xaos.2)
  %return149 = fcmp oeq double %return146, %return148
  br i1 %return149, label %true151, label %false152

true122:                                          ; preds = %body111
  %output126 = add i64 %xaos_chk.1, 1
  br label %end123

end123:                                           ; preds = %true122, %body111
  %xaos_chk.2 = phi i64 [ %output126, %true122 ], [ %xaos_chk.1, %body111 ]
  %return130 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i40.0)
  %return133 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k.0)
  %output134 = fmul double %return130, %return133
  %output138 = fmul double %output134, %return119
  %output139 = call double* @"append@[FF"(double* %IW_xaos.0, double %output138)
  %output141 = add i64 %k.0, 1
  br label %cond110

true151:                                          ; preds = %end115
  %return156 = call double* @"create_cdf@[F[F"(double* %IW.0)
  %output157 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return156)
  br label %end153

false152:                                         ; preds = %end115
  %return160 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output161 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return160)
  br label %end153

end153:                                           ; preds = %false152, %true151
  %XAOS_TO.1 = phi double* [ %output157, %true151 ], [ %output161, %false152 ]
  %output163 = add i64 %i40.0, 1
  br label %cond41

true166:                                          ; preds = %end46
  store double* %_XAOS_TO.0, double** %0
  store i64 %return39, i64* %1
  call void @"XAOS_transpose@[F[FI"(double** %0, double** %_XAOS_FROM, i64* %1)
  br label %cond172

false167:                                         ; preds = %end46
  store i64 0, i64* %_bound_XAOS
  %return198 = call double* @"create_cdf@[F[F"(double* %IW.0)
  store double* %return198, double** %_bound_XAOS_TO
  br label %end168

end168:                                           ; preds = %false167, %end177
  ret void

cond172:                                          ; preds = %body173, %true166
  %XAOS_FROM.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), %true166 ], [ %output190, %body173 ]
  %i171.0 = phi i64 [ 0, %true166 ], [ %output192, %body173 ]
  %return176 = call i64 @"lt@III"(i64 %i171.0, i64 %return39)
  %11 = icmp ne i64 %return176, 0
  br i1 %11, label %body173, label %end177

body173:                                          ; preds = %cond172
  %output181 = mul i64 %i171.0, %return39
  %_XAOS_FROM183 = load double*, double** %_XAOS_FROM
  %output187 = add i64 %output181, %return39
  %return188 = call double* @"slice@[F[FIIIIII"(double* %_XAOS_FROM183, i64 1, i64 %output181, i64 1, i64 %output187, i64 0, i64 0)
  %return189 = call double* @"create_cdf@[F[F"(double* %return188)
  %output190 = call double* @"append@[F[F"(double* %XAOS_FROM.0, double* %return189)
  %output192 = add i64 %i171.0, 1
  br label %cond172

end177:                                           ; preds = %cond172
  %return194 = call i64 @"clamp@IIII"(i64 %xaos_chk.0, i64 0, i64 1)
  store i64 %return194, i64* %_bound_XAOS
  store double* %XAOS_TO.0, double** %_bound_XAOS_TO
  store double* %XAOS_FROM.0, double** %_bound_XAOS_FROM
  br label %end168
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"slice@[F[FIIIIII"(double*, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"clamp@IIII"(i64, i64, i64) #1

; Function Attrs: nounwind
define void @TFFAvactive(i64* %VACTIVE, i64 %XAOS, double* %XAOS_TO, double* %XAOS_FROM) #1 {
__llvm_entry:
  %"<XAOS>" = alloca i64
  %"<XAOS_TO>" = alloca double*
  %"<XAOS_FROM>" = alloca double*
  %"<VACTIVE>" = alloca i64*
  store i64* %VACTIVE, i64** %"<VACTIVE>"
  store i64 %XAOS, i64* %"<XAOS>"
  store double* %XAOS_TO, double** %"<XAOS_TO>"
  store double* %XAOS_FROM, double** %"<XAOS_FROM>"
  call void @"_TFFAvactive@[II[F[F"(i64** %"<VACTIVE>", i64* %"<XAOS>", double** %"<XAOS_TO>", double** %"<XAOS_FROM>")
  %evalue = load i64*, i64** %"<VACTIVE>"
  %gvalue = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @9, i64 0, i64 0), i64* %evalue) #3
  %evalue1 = load i64, i64* %"<XAOS>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load double*, double** %"<XAOS_TO>"
  %gvalue4 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i64 0, i64 0), double* %evalue3) #3
  %evalue5 = load double*, double** %"<XAOS_FROM>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @11, i64 0, i64 0), double* %evalue5) #3
  store i64* %gvalue, i64** @VACTIVE
  store i64 %gvalue2, i64* @XAOS
  store double* %gvalue4, double** @XAOS_TO
  store double* %gvalue6, double** @XAOS_FROM
  ret void
}

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAvactive(i64* getelementptr inbounds ([0 x i64], [0 x i64]* @1, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @3, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.531"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
