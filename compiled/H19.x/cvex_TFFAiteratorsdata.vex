;_name	TFFAxformsdata
; ModuleID = 'TFFAxformsdata'
source_filename = "TFFAxformsdata"

@0 = private constant [0 x i64] zeroinitializer
@1 = private constant [0 x double] zeroinitializer
@2 = private constant [0 x <2 x double>] zeroinitializer
@3 = private constant [5 x i8] c"sIDX\00"
@4 = private constant [5 x i8] c"clr_\00"
@5 = private constant [10 x i8] c"clrspeed_\00"
@6 = private constant [7 x i8] c"alpha_\00"
@7 = private constant [15 x i8] c"preblurweight_\00"
@8 = private constant [12 x i8] c"pre1weight_\00"
@9 = private constant [10 x i8] c"pre1type_\00"
@10 = private constant [12 x i8] c"pre2weight_\00"
@11 = private constant [10 x i8] c"pre2type_\00"
@12 = private constant [10 x i8] c"v1weight_\00"
@13 = private constant [8 x i8] c"v1type_\00"
@14 = private constant [10 x i8] c"v2weight_\00"
@15 = private constant [8 x i8] c"v2type_\00"
@16 = private constant [10 x i8] c"v3weight_\00"
@17 = private constant [8 x i8] c"v3type_\00"
@18 = private constant [10 x i8] c"v4weight_\00"
@19 = private constant [8 x i8] c"v4type_\00"
@20 = private constant [10 x i8] c"p1weight_\00"
@21 = private constant [8 x i8] c"p1type_\00"
@22 = private constant [3 x i8] c"x_\00"
@23 = private constant [3 x i8] c"y_\00"
@24 = private constant [5 x i8] c"ang_\00"
@25 = private constant [3 x i8] c"o_\00"
@26 = private constant [8 x i8] c"dopost_\00"
@27 = private constant [4 x i8] c"px_\00"
@28 = private constant [4 x i8] c"py_\00"
@29 = private constant [6 x i8] c"pang_\00"
@30 = private constant [4 x i8] c"po_\00"
@RES = external global i64
@POST = external global i64*
@p1t = external global i64*
@p2t = external global i64*
@v1t = external global i64*
@v2t = external global i64*
@v3t = external global i64*
@v4t = external global i64*
@P1t = external global i64*
@pbw = external global double*
@p1w = external global double*
@p2w = external global double*
@v1w = external global double*
@v2w = external global double*
@v3w = external global double*
@v4w = external global double*
@P1w = external global double*
@A = external global double*
@CLR = external global double*
@OM = external global double*
@X = external global <2 x double>*
@Y = external global <2 x double>*
@O = external global <2 x double>*
@PX = external global <2 x double>*
@PY = external global <2 x double>*
@PO = external global <2 x double>*
@31 = private constant [4 x i8] c"RES\00"
@32 = private constant [5 x i8] c"POST\00"
@33 = private constant [4 x i8] c"p1t\00"
@34 = private constant [4 x i8] c"p2t\00"
@35 = private constant [4 x i8] c"v1t\00"
@36 = private constant [4 x i8] c"v2t\00"
@37 = private constant [4 x i8] c"v3t\00"
@38 = private constant [4 x i8] c"v4t\00"
@39 = private constant [4 x i8] c"P1t\00"
@40 = private constant [4 x i8] c"pbw\00"
@41 = private constant [4 x i8] c"p1w\00"
@42 = private constant [4 x i8] c"p2w\00"
@43 = private constant [4 x i8] c"v1w\00"
@44 = private constant [4 x i8] c"v2w\00"
@45 = private constant [4 x i8] c"v3w\00"
@46 = private constant [4 x i8] c"v4w\00"
@47 = private constant [4 x i8] c"P1w\00"
@48 = private constant [2 x i8] c"A\00"
@49 = private constant [4 x i8] c"CLR\00"
@50 = private constant [3 x i8] c"OM\00"
@51 = private constant [2 x i8] c"X\00"
@52 = private constant [2 x i8] c"Y\00"
@53 = private constant [2 x i8] c"O\00"
@54 = private constant [3 x i8] c"PX\00"
@55 = private constant [3 x i8] c"PY\00"
@56 = private constant [3 x i8] c"PO\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %x, <2 x double>* %y, double* %ang) #2 {
__llvm_entry:
  %x1 = load <2 x double>, <2 x double>* %x
  %y2 = load <2 x double>, <2 x double>* %y
  %return = call <4 x double> @"set@2UU"(<2 x double> %x1, <2 x double> %y2)
  store <4 x double> %return, <4 x double>* %m2
  %ang4 = load double, double* %ang
  %output = call <4 x double> @"rotate@2F"(<4 x double> %return, double %ang4)
  store <4 x double> %output, <4 x double>* %m2
  ret void
}

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxformsdata@I[I[I[I[I[I[I[I[I[F[F[F[F[F[F[F[F[F[F[F[U[U[U[U[U[U"(i64* %_bound_RES, i64** %_bound_POST, i64** %_bound_p1t, i64** %_bound_p2t, i64** %_bound_v1t, i64** %_bound_v2t, i64** %_bound_v3t, i64** %_bound_v4t, i64** %_bound_P1t, double** %_bound_pbw, double** %_bound_p1w, double** %_bound_p2w, double** %_bound_v1w, double** %_bound_v2w, double** %_bound_v3w, double** %_bound_v4w, double** %_bound_P1w, double** %_bound_A, double** %_bound_CLR, double** %_bound_OM, <2 x double>** %_bound_X, <2 x double>** %_bound_Y, <2 x double>** %_bound_O, <2 x double>** %_bound_PX, <2 x double>** %_bound_PY, <2 x double>** %_bound_PO) #2 {
__llvm_entry:
  %_m2 = alloca <4 x double>
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca <2 x double>
  %4 = alloca <2 x double>
  %5 = alloca double
  %return = call i8** @"detail@[SIS"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i64 0, i64 0))
  %return2 = call i64 @"len@I[S"(i8** %return)
  store <4 x double> zeroinitializer, <4 x double>* %_m2, !vex-initializer-store !3
  br label %cond

cond:                                             ; preds = %end219, %__llvm_entry
  %POST.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output214, %end219 ]
  %v1t.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output94, %end219 ]
  %v2t.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output110, %end219 ]
  %v3t.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output126, %end219 ]
  %v4t.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output142, %end219 ]
  %p1t.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output62, %end219 ]
  %p2t.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output78, %end219 ]
  %P1t.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), %__llvm_entry ], [ %output158, %end219 ]
  %pbw.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output46, %end219 ]
  %v1w.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output86, %end219 ]
  %v2w.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output102, %end219 ]
  %v3w.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output118, %end219 ]
  %v4w.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output134, %end219 ]
  %p1w.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output54, %end219 ]
  %p2w.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output70, %end219 ]
  %P1w.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output150, %end219 ]
  %CLR.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output22, %end219 ]
  %OM.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output30, %end219 ]
  %A.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), %__llvm_entry ], [ %output38, %end219 ]
  %x.0 = phi <2 x double>* [ getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), %__llvm_entry ], [ %output192, %end219 ]
  %y.0 = phi <2 x double>* [ getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), %__llvm_entry ], [ %output198, %end219 ]
  %o.0 = phi <2 x double>* [ getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), %__llvm_entry ], [ %output206, %end219 ]
  %px.0 = phi <2 x double>* [ getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), %__llvm_entry ], [ %px.1, %end219 ]
  %py.0 = phi <2 x double>* [ getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), %__llvm_entry ], [ %py.1, %end219 ]
  %po.0 = phi <2 x double>* [ getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), %__llvm_entry ], [ %po.1, %end219 ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output270, %end219 ]
  %return5 = call i64 @"lt@III"(i64 %i.0, i64 %return2)
  %6 = icmp ne i64 %return5, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %return8 = call i8* @"getcomp@S[SI"(i8** %return, i64 %i.0)
  %return10 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i64 0, i64 0), i8* %return8)
  %return11 = call double @"chf@FS"(i8* %return10)
  %return13 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @5, i64 0, i64 0), i8* %return8)
  %return14 = call double @"chf@FS"(i8* %return13)
  %output = fsub double 1.000000e+00, %return14
  %output18 = fmul double %return11, %output
  %output19 = call double @"div@FF"(double %output18, double 2.000000e+00)
  %return20 = call { double, double* } @"setcomp@F[FFI"(double* %CLR.0, double %output19, i64 %i.0)
  %output22 = extractvalue { double, double* } %return20, 1
  %output25 = fadd double 1.000000e+00, %return14
  %output26 = call double @"div@FF"(double %output25, double 2.000000e+00)
  %return28 = call { double, double* } @"setcomp@F[FFI"(double* %OM.0, double %output26, i64 %i.0)
  %output30 = extractvalue { double, double* } %return28, 1
  %return33 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), i8* %return8)
  %return34 = call double @"chf@FS"(i8* %return33)
  %return36 = call { double, double* } @"setcomp@F[FFI"(double* %A.0, double %return34, i64 %i.0)
  %output38 = extractvalue { double, double* } %return36, 1
  %return41 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @7, i64 0, i64 0), i8* %return8)
  %return42 = call double @"chf@FS"(i8* %return41)
  %return44 = call { double, double* } @"setcomp@F[FFI"(double* %pbw.0, double %return42, i64 %i.0)
  %output46 = extractvalue { double, double* } %return44, 1
  %return49 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i64 0, i64 0), i8* %return8)
  %return50 = call double @"chf@FS"(i8* %return49)
  %return52 = call { double, double* } @"setcomp@F[FFI"(double* %p1w.0, double %return50, i64 %i.0)
  %output54 = extractvalue { double, double* } %return52, 1
  %return57 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @9, i64 0, i64 0), i8* %return8)
  %return58 = call i64 @"chi@IS"(i8* %return57)
  %return60 = call { i64, i64* } @"setcomp@I[III"(i64* %p1t.0, i64 %return58, i64 %i.0)
  %output62 = extractvalue { i64, i64* } %return60, 1
  %return65 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8* %return8)
  %return66 = call double @"chf@FS"(i8* %return65)
  %return68 = call { double, double* } @"setcomp@F[FFI"(double* %p2w.0, double %return66, i64 %i.0)
  %output70 = extractvalue { double, double* } %return68, 1
  %return73 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @11, i64 0, i64 0), i8* %return8)
  %return74 = call i64 @"chi@IS"(i8* %return73)
  %return76 = call { i64, i64* } @"setcomp@I[III"(i64* %p2t.0, i64 %return74, i64 %i.0)
  %output78 = extractvalue { i64, i64* } %return76, 1
  %return81 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @12, i64 0, i64 0), i8* %return8)
  %return82 = call double @"chf@FS"(i8* %return81)
  %return84 = call { double, double* } @"setcomp@F[FFI"(double* %v1w.0, double %return82, i64 %i.0)
  %output86 = extractvalue { double, double* } %return84, 1
  %return89 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @13, i64 0, i64 0), i8* %return8)
  %return90 = call i64 @"chi@IS"(i8* %return89)
  %return92 = call { i64, i64* } @"setcomp@I[III"(i64* %v1t.0, i64 %return90, i64 %i.0)
  %output94 = extractvalue { i64, i64* } %return92, 1
  %return97 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @14, i64 0, i64 0), i8* %return8)
  %return98 = call double @"chf@FS"(i8* %return97)
  %return100 = call { double, double* } @"setcomp@F[FFI"(double* %v2w.0, double %return98, i64 %i.0)
  %output102 = extractvalue { double, double* } %return100, 1
  %return105 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @15, i64 0, i64 0), i8* %return8)
  %return106 = call i64 @"chi@IS"(i8* %return105)
  %return108 = call { i64, i64* } @"setcomp@I[III"(i64* %v2t.0, i64 %return106, i64 %i.0)
  %output110 = extractvalue { i64, i64* } %return108, 1
  %return113 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @16, i64 0, i64 0), i8* %return8)
  %return114 = call double @"chf@FS"(i8* %return113)
  %return116 = call { double, double* } @"setcomp@F[FFI"(double* %v3w.0, double %return114, i64 %i.0)
  %output118 = extractvalue { double, double* } %return116, 1
  %return121 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @17, i64 0, i64 0), i8* %return8)
  %return122 = call i64 @"chi@IS"(i8* %return121)
  %return124 = call { i64, i64* } @"setcomp@I[III"(i64* %v3t.0, i64 %return122, i64 %i.0)
  %output126 = extractvalue { i64, i64* } %return124, 1
  %return129 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @18, i64 0, i64 0), i8* %return8)
  %return130 = call double @"chf@FS"(i8* %return129)
  %return132 = call { double, double* } @"setcomp@F[FFI"(double* %v4w.0, double %return130, i64 %i.0)
  %output134 = extractvalue { double, double* } %return132, 1
  %return137 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @19, i64 0, i64 0), i8* %return8)
  %return138 = call i64 @"chi@IS"(i8* %return137)
  %return140 = call { i64, i64* } @"setcomp@I[III"(i64* %v4t.0, i64 %return138, i64 %i.0)
  %output142 = extractvalue { i64, i64* } %return140, 1
  %return145 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @20, i64 0, i64 0), i8* %return8)
  %return146 = call double @"chf@FS"(i8* %return145)
  %return148 = call { double, double* } @"setcomp@F[FFI"(double* %P1w.0, double %return146, i64 %i.0)
  %output150 = extractvalue { double, double* } %return148, 1
  %return153 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @21, i64 0, i64 0), i8* %return8)
  %return154 = call i64 @"chi@IS"(i8* %return153)
  %return156 = call { i64, i64* } @"setcomp@I[III"(i64* %P1t.0, i64 %return154, i64 %i.0)
  %output158 = extractvalue { i64, i64* } %return156, 1
  %return160 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @22, i64 0, i64 0), i8* %return8)
  %return161 = call <2 x double> @"chu@US"(i8* %return160)
  %return163 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @23, i64 0, i64 0), i8* %return8)
  %return164 = call <2 x double> @"chu@US"(i8* %return163)
  %return166 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @24, i64 0, i64 0), i8* %return8)
  %return167 = call double @"chf@FS"(i8* %return166)
  %return169 = fcmp one double %return167, 0.000000e+00
  br i1 %return169, label %true, label %end171

end:                                              ; preds = %cond
  store i64 %return2, i64* %_bound_RES
  store i64* %POST.0, i64** %_bound_POST
  store i64* %p1t.0, i64** %_bound_p1t
  store i64* %p2t.0, i64** %_bound_p2t
  store i64* %v1t.0, i64** %_bound_v1t
  store i64* %v2t.0, i64** %_bound_v2t
  store i64* %v3t.0, i64** %_bound_v3t
  store i64* %v4t.0, i64** %_bound_v4t
  store i64* %P1t.0, i64** %_bound_P1t
  store double* %pbw.0, double** %_bound_pbw
  store double* %p1w.0, double** %_bound_p1w
  store double* %p2w.0, double** %_bound_p2w
  store double* %v1w.0, double** %_bound_v1w
  store double* %v2w.0, double** %_bound_v2w
  store double* %v3w.0, double** %_bound_v3w
  store double* %v4w.0, double** %_bound_v4w
  store double* %P1w.0, double** %_bound_P1w
  store double* %A.0, double** %_bound_A
  store double* %CLR.0, double** %_bound_CLR
  store double* %OM.0, double** %_bound_OM
  store <2 x double>* %x.0, <2 x double>** %_bound_X
  store <2 x double>* %y.0, <2 x double>** %_bound_Y
  store <2 x double>* %o.0, <2 x double>** %_bound_O
  store <2 x double>* %px.0, <2 x double>** %_bound_PX
  store <2 x double>* %py.0, <2 x double>** %_bound_PY
  store <2 x double>* %po.0, <2 x double>** %_bound_PO
  ret void

true:                                             ; preds = %body
  store <2 x double> %return161, <2 x double>* %0
  store <2 x double> %return164, <2 x double>* %1
  %return175 = call double @"radians@FF"(double %return167)
  %return176 = call double @"neg@FF"(double %return175)
  store double %return176, double* %2
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %0, <2 x double>* %1, double* %2)
  %_m2177 = load <4 x double>, <4 x double>* %_m2
  %return178 = call double @"getcomp@F2II"(<4 x double> %_m2177, i64 0, i64 0)
  %return180 = call double @"getcomp@F2II"(<4 x double> %_m2177, i64 0, i64 1)
  %return181 = call <2 x double> @"set@UFF"(double %return178, double %return180)
  %return183 = call double @"getcomp@F2II"(<4 x double> %_m2177, i64 1, i64 0)
  %return185 = call double @"getcomp@F2II"(<4 x double> %_m2177, i64 1, i64 1)
  %return186 = call <2 x double> @"set@UFF"(double %return183, double %return185)
  br label %end171

end171:                                           ; preds = %true, %body
  %_x.0 = phi <2 x double> [ %return181, %true ], [ %return161, %body ]
  %_y.0 = phi <2 x double> [ %return186, %true ], [ %return164, %body ]
  %return190 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %x.0, <2 x double> %_x.0, i64 %i.0)
  %output192 = extractvalue { <2 x double>, <2 x double>* } %return190, 1
  %return196 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %y.0, <2 x double> %_y.0, i64 %i.0)
  %output198 = extractvalue { <2 x double>, <2 x double>* } %return196, 1
  %return201 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @25, i64 0, i64 0), i8* %return8)
  %return202 = call <2 x double> @"chu@US"(i8* %return201)
  %return204 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %o.0, <2 x double> %return202, i64 %i.0)
  %output206 = extractvalue { <2 x double>, <2 x double>* } %return204, 1
  %return209 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @26, i64 0, i64 0), i8* %return8)
  %return210 = call i64 @"chi@IS"(i8* %return209)
  %return212 = call { i64, i64* } @"setcomp@I[III"(i64* %POST.0, i64 %return210, i64 %i.0)
  %output214 = extractvalue { i64, i64* } %return212, 1
  %return217 = call i64 @"getcomp@I[II"(i64* %output214, i64 %i.0)
  %7 = icmp ne i64 %return217, 0
  br i1 %7, label %true218, label %end219

true218:                                          ; preds = %end171
  %return221 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @27, i64 0, i64 0), i8* %return8)
  %return222 = call <2 x double> @"chu@US"(i8* %return221)
  %return224 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @28, i64 0, i64 0), i8* %return8)
  %return225 = call <2 x double> @"chu@US"(i8* %return224)
  %return227 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @29, i64 0, i64 0), i8* %return8)
  %return228 = call double @"chf@FS"(i8* %return227)
  %return230 = fcmp one double %return228, 0.000000e+00
  br i1 %return230, label %true232, label %end233

end219:                                           ; preds = %end233, %end171
  %px.1 = phi <2 x double>* [ %output254, %end233 ], [ %px.0, %end171 ]
  %py.1 = phi <2 x double>* [ %output260, %end233 ], [ %py.0, %end171 ]
  %po.1 = phi <2 x double>* [ %output268, %end233 ], [ %po.0, %end171 ]
  %output270 = add i64 %i.0, 1
  br label %cond

true232:                                          ; preds = %true218
  store <2 x double> %return222, <2 x double>* %3
  store <2 x double> %return225, <2 x double>* %4
  %return237 = call double @"radians@FF"(double %return228)
  %return238 = call double @"neg@FF"(double %return237)
  store double %return238, double* %5
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %3, <2 x double>* %4, double* %5)
  %_m2239 = load <4 x double>, <4 x double>* %_m2
  %return240 = call double @"getcomp@F2II"(<4 x double> %_m2239, i64 0, i64 0)
  %return242 = call double @"getcomp@F2II"(<4 x double> %_m2239, i64 0, i64 1)
  %return243 = call <2 x double> @"set@UFF"(double %return240, double %return242)
  %return245 = call double @"getcomp@F2II"(<4 x double> %_m2239, i64 1, i64 0)
  %return247 = call double @"getcomp@F2II"(<4 x double> %_m2239, i64 1, i64 1)
  %return248 = call <2 x double> @"set@UFF"(double %return245, double %return247)
  br label %end233

end233:                                           ; preds = %true232, %true218
  %_x.1 = phi <2 x double> [ %return243, %true232 ], [ %return222, %true218 ]
  %_y.1 = phi <2 x double> [ %return248, %true232 ], [ %return225, %true218 ]
  %return252 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %px.0, <2 x double> %_x.1, i64 %i.0)
  %output254 = extractvalue { <2 x double>, <2 x double>* } %return252, 1
  %return258 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %py.0, <2 x double> %_y.1, i64 %i.0)
  %output260 = extractvalue { <2 x double>, <2 x double>* } %return258, 1
  %return263 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @30, i64 0, i64 0), i8* %return8)
  %return264 = call <2 x double> @"chu@US"(i8* %return263)
  %return266 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %po.0, <2 x double> %return264, i64 %i.0)
  %output268 = extractvalue { <2 x double>, <2 x double>* } %return266, 1
  br label %end219
}

; Function Attrs: nounwind
declare i8** @"detail@[SIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #0

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F2II"(<4 x double>, i64, i64) #0

; Function Attrs: nounwind readnone
declare { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>*, <2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
define void @TFFAxformsdata(i64 %RES, i64* %POST, i64* %p1t, i64* %p2t, i64* %v1t, i64* %v2t, i64* %v3t, i64* %v4t, i64* %P1t, double* %pbw, double* %p1w, double* %p2w, double* %v1w, double* %v2w, double* %v3w, double* %v4w, double* %P1w, double* %A, double* %CLR, double* %OM, <2 x double>* %X, <2 x double>* %Y, <2 x double>* %O, <2 x double>* %PX, <2 x double>* %PY, <2 x double>* %PO) #1 {
__llvm_entry:
  %"<POST>" = alloca i64*
  %"<p1t>" = alloca i64*
  %"<p2t>" = alloca i64*
  %"<v1t>" = alloca i64*
  %"<v2t>" = alloca i64*
  %"<v3t>" = alloca i64*
  %"<v4t>" = alloca i64*
  %"<P1t>" = alloca i64*
  %"<pbw>" = alloca double*
  %"<p1w>" = alloca double*
  %"<p2w>" = alloca double*
  %"<v1w>" = alloca double*
  %"<v2w>" = alloca double*
  %"<v3w>" = alloca double*
  %"<v4w>" = alloca double*
  %"<P1w>" = alloca double*
  %"<A>" = alloca double*
  %"<CLR>" = alloca double*
  %"<OM>" = alloca double*
  %"<X>" = alloca <2 x double>*
  %"<Y>" = alloca <2 x double>*
  %"<O>" = alloca <2 x double>*
  %"<PX>" = alloca <2 x double>*
  %"<PY>" = alloca <2 x double>*
  %"<PO>" = alloca <2 x double>*
  %"<RES>" = alloca i64
  store i64 %RES, i64* %"<RES>"
  store i64* %POST, i64** %"<POST>"
  store i64* %p1t, i64** %"<p1t>"
  store i64* %p2t, i64** %"<p2t>"
  store i64* %v1t, i64** %"<v1t>"
  store i64* %v2t, i64** %"<v2t>"
  store i64* %v3t, i64** %"<v3t>"
  store i64* %v4t, i64** %"<v4t>"
  store i64* %P1t, i64** %"<P1t>"
  store double* %pbw, double** %"<pbw>"
  store double* %p1w, double** %"<p1w>"
  store double* %p2w, double** %"<p2w>"
  store double* %v1w, double** %"<v1w>"
  store double* %v2w, double** %"<v2w>"
  store double* %v3w, double** %"<v3w>"
  store double* %v4w, double** %"<v4w>"
  store double* %P1w, double** %"<P1w>"
  store double* %A, double** %"<A>"
  store double* %CLR, double** %"<CLR>"
  store double* %OM, double** %"<OM>"
  store <2 x double>* %X, <2 x double>** %"<X>"
  store <2 x double>* %Y, <2 x double>** %"<Y>"
  store <2 x double>* %O, <2 x double>** %"<O>"
  store <2 x double>* %PX, <2 x double>** %"<PX>"
  store <2 x double>* %PY, <2 x double>** %"<PY>"
  store <2 x double>* %PO, <2 x double>** %"<PO>"
  call void @"_TFFAxformsdata@I[I[I[I[I[I[I[I[I[F[F[F[F[F[F[F[F[F[F[F[U[U[U[U[U[U"(i64* %"<RES>", i64** %"<POST>", i64** %"<p1t>", i64** %"<p2t>", i64** %"<v1t>", i64** %"<v2t>", i64** %"<v3t>", i64** %"<v4t>", i64** %"<P1t>", double** %"<pbw>", double** %"<p1w>", double** %"<p2w>", double** %"<v1w>", double** %"<v2w>", double** %"<v3w>", double** %"<v4w>", double** %"<P1w>", double** %"<A>", double** %"<CLR>", double** %"<OM>", <2 x double>** %"<X>", <2 x double>** %"<Y>", <2 x double>** %"<O>", <2 x double>** %"<PX>", <2 x double>** %"<PY>", <2 x double>** %"<PO>")
  %evalue = load i64, i64* %"<RES>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @31, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load i64*, i64** %"<POST>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @32, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64*, i64** %"<p1t>"
  %gvalue4 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @33, i64 0, i64 0), i64* %evalue3) #3
  %evalue5 = load i64*, i64** %"<p2t>"
  %gvalue6 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @34, i64 0, i64 0), i64* %evalue5) #3
  %evalue7 = load i64*, i64** %"<v1t>"
  %gvalue8 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @35, i64 0, i64 0), i64* %evalue7) #3
  %evalue9 = load i64*, i64** %"<v2t>"
  %gvalue10 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @36, i64 0, i64 0), i64* %evalue9) #3
  %evalue11 = load i64*, i64** %"<v3t>"
  %gvalue12 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @37, i64 0, i64 0), i64* %evalue11) #3
  %evalue13 = load i64*, i64** %"<v4t>"
  %gvalue14 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @38, i64 0, i64 0), i64* %evalue13) #3
  %evalue15 = load i64*, i64** %"<P1t>"
  %gvalue16 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @39, i64 0, i64 0), i64* %evalue15) #3
  %evalue17 = load double*, double** %"<pbw>"
  %gvalue18 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @40, i64 0, i64 0), double* %evalue17) #3
  %evalue19 = load double*, double** %"<p1w>"
  %gvalue20 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @41, i64 0, i64 0), double* %evalue19) #3
  %evalue21 = load double*, double** %"<p2w>"
  %gvalue22 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @42, i64 0, i64 0), double* %evalue21) #3
  %evalue23 = load double*, double** %"<v1w>"
  %gvalue24 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @43, i64 0, i64 0), double* %evalue23) #3
  %evalue25 = load double*, double** %"<v2w>"
  %gvalue26 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @44, i64 0, i64 0), double* %evalue25) #3
  %evalue27 = load double*, double** %"<v3w>"
  %gvalue28 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @45, i64 0, i64 0), double* %evalue27) #3
  %evalue29 = load double*, double** %"<v4w>"
  %gvalue30 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @46, i64 0, i64 0), double* %evalue29) #3
  %evalue31 = load double*, double** %"<P1w>"
  %gvalue32 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @47, i64 0, i64 0), double* %evalue31) #3
  %evalue33 = load double*, double** %"<A>"
  %gvalue34 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @48, i64 0, i64 0), double* %evalue33) #3
  %evalue35 = load double*, double** %"<CLR>"
  %gvalue36 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @49, i64 0, i64 0), double* %evalue35) #3
  %evalue37 = load double*, double** %"<OM>"
  %gvalue38 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @50, i64 0, i64 0), double* %evalue37) #3
  %evalue39 = load <2 x double>*, <2 x double>** %"<X>"
  %gvalue40 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @51, i64 0, i64 0), <2 x double>* %evalue39) #3
  %evalue41 = load <2 x double>*, <2 x double>** %"<Y>"
  %gvalue42 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @52, i64 0, i64 0), <2 x double>* %evalue41) #3
  %evalue43 = load <2 x double>*, <2 x double>** %"<O>"
  %gvalue44 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @53, i64 0, i64 0), <2 x double>* %evalue43) #3
  %evalue45 = load <2 x double>*, <2 x double>** %"<PX>"
  %gvalue46 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @54, i64 0, i64 0), <2 x double>* %evalue45) #3
  %evalue47 = load <2 x double>*, <2 x double>** %"<PY>"
  %gvalue48 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @55, i64 0, i64 0), <2 x double>* %evalue47) #3
  %evalue49 = load <2 x double>*, <2 x double>** %"<PO>"
  %gvalue50 = call <2 x double>* @"_export@[US[U"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @56, i64 0, i64 0), <2 x double>* %evalue49) #3
  store i64 %gvalue, i64* @RES
  store i64* %gvalue2, i64** @POST
  store i64* %gvalue4, i64** @p1t
  store i64* %gvalue6, i64** @p2t
  store i64* %gvalue8, i64** @v1t
  store i64* %gvalue10, i64** @v2t
  store i64* %gvalue12, i64** @v3t
  store i64* %gvalue14, i64** @v4t
  store i64* %gvalue16, i64** @P1t
  store double* %gvalue18, double** @pbw
  store double* %gvalue20, double** @p1w
  store double* %gvalue22, double** @p2w
  store double* %gvalue24, double** @v1w
  store double* %gvalue26, double** @v2w
  store double* %gvalue28, double** @v3w
  store double* %gvalue30, double** @v4w
  store double* %gvalue32, double** @P1w
  store double* %gvalue34, double** @A
  store double* %gvalue36, double** @CLR
  store double* %gvalue38, double** @OM
  store <2 x double>* %gvalue40, <2 x double>** @X
  store <2 x double>* %gvalue42, <2 x double>** @Y
  store <2 x double>* %gvalue44, <2 x double>** @O
  store <2 x double>* %gvalue46, <2 x double>** @PX
  store <2 x double>* %gvalue48, <2 x double>** @PY
  store <2 x double>* %gvalue50, <2 x double>** @PO
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare double* @"_export@[FS[F"(i8*, double*)

declare <2 x double>* @"_export@[US[U"(i8*, <2 x double>*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxformsdata(i64 0, i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @0, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @1, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0), <2 x double>* getelementptr inbounds ([0 x <2 x double>], [0 x <2 x double>]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
