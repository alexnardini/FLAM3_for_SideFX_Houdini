;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [8 x i8] c"../doff\00"
@1 = private constant [7 x i8] c"../rip\00"
@2 = private constant [8 x i8] c"../domb\00"
@3 = private constant [8 x i8] c"../iter\00"
@4 = private constant [7 x i8] c"../f3c\00"
@5 = private constant [13 x i8] c"../flamefunc\00"
@6 = private constant [0 x i64] zeroinitializer
@7 = private constant [0 x double] zeroinitializer
@8 = private constant [0 x i8*] zeroinitializer
@9 = private constant [1 x i8] zeroinitializer
@10 = private constant [12 x i8] c"../vactive_\00"
@11 = private constant [7 x i8] c"../iw_\00"
@12 = private constant [12 x i8] c"../varnote_\00"
@13 = private constant [2 x i8] c":\00"
@14 = private constant [5 x i8] c"XAOS\00"
@15 = private constant [2 x i8] c".\00"
@16 = private constant [133 x i8] c"Non digit values in one or more iterator's xaos command string. The iterators affected will be reset to a default xaos value of 1's.\00"
@17 = private constant [2 x i8] c"1\00"
@18 = private constant [6 x i8] c"../xm\00"
@sIDX = external global i8**
@SYS = external global i64*
@XS = external global i64
@IW = external global double*
@XST = external global double*
@19 = private constant [5 x i8] c"sIDX\00"
@20 = private constant [4 x i8] c"SYS\00"
@21 = private constant [3 x i8] c"XS\00"
@22 = private constant [3 x i8] c"IW\00"
@23 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@[S[II[F[F"(i8*** %_bound_sIDX, i64** %_bound_SYS, i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %return10 = call i64* @"array@[I:IIIII"(i64 %return, i64 %return1, i64 %return2, i64 %return3, i64 %return4)
  store i64* %return10, i64** %_bound_SYS
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter15, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter15 ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter15 ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter15 ]
  %va.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), %__llvm_entry ], [ %va.1, %iter15 ]
  %return14 = call i64 @"lt@III"(i64 %i.0, i64 %return11)
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return17 = call i8* @"itoa@SI"(i64 %output)
  %return20 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8* %return17)
  %return21 = call i64 @"chi@IS"(i8* %return20)
  %output22 = call i64* @"append@[II"(i64* %va.0, i64 %return21)
  %return24 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @11, i64 0, i64 0), i8* %return17)
  %return25 = call double @"chf@FS"(i8* %return24)
  %return27 = fcmp oeq double %return25, 0.000000e+00
  br i1 %return27, label %true, label %end29

end:                                              ; preds = %cond
  %return51 = call i64 @"len@I[S"(i8** %sIDX.0)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond53

iter15:                                           ; preds = %end29, %end39
  %sIDX.1 = phi i8** [ %sIDX.0, %end29 ], [ %output47, %end39 ]
  %IW.1 = phi double* [ %IW.0, %end29 ], [ %output44, %end39 ]
  br label %cond

true:                                             ; preds = %body
  %return31 = call { i64, i64* } @"setcomp@I[III"(i64* %output22, i64 0, i64 %i.0)
  %output33 = extractvalue { i64, i64* } %return31, 1
  br label %end29

end29:                                            ; preds = %true, %body
  %va.1 = phi i64* [ %output33, %true ], [ %output22, %body ]
  %return36 = call i64 @"getcomp@I[II"(i64* %va.1, i64 %i.0)
  %return37 = call i64 @"not@II"(i64 %return36)
  %3 = icmp ne i64 %return37, 0
  br i1 %3, label %iter15, label %end39

end39:                                            ; preds = %end29
  %output44 = call double* @"append@[FF"(double* %IW.0, double %return25)
  %output47 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return17)
  br label %iter15

cond53:                                           ; preds = %end225, %end
  %x_chk.0 = phi i64 [ 0, %end ], [ %x_chk.1, %end225 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end ], [ %XAOS_TO.1, %end225 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %end ], [ %output194, %end225 ]
  %i52.0 = phi i64 [ 0, %end ], [ %output254, %end225 ]
  %return57 = call i64 @"lt@III"(i64 %i52.0, i64 %return51)
  %4 = icmp ne i64 %return57, 0
  br i1 %4, label %body54, label %end58

body54:                                           ; preds = %cond53
  %return62 = call i8* @"getcomp@S[SI"(i8** %sIDX.0, i64 %i52.0)
  %return63 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i64 0, i64 0), i8* %return62)
  %return64 = call i8* @"chs@SS"(i8* %return63)
  %return66 = call i8** @"split@[SSS"(i8* %return64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i64 0, i64 0))
  %return68 = call i64 @"len@I[S"(i8** %return66)
  br label %cond69

end58:                                            ; preds = %cond53
  %return255 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @18, i64 0, i64 0))
  %return258 = call i64 @"and@III"(i64 %return255, i64 %x_chk.0)
  %5 = icmp ne i64 %return258, 0
  br i1 %5, label %true259, label %end260

cond69:                                           ; preds = %body70, %body54
  %varxaos_strip.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %body54 ], [ %output82, %body70 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %body54 ], [ %output84, %body70 ]
  %return73 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return68)
  %6 = icmp ne i64 %return73, 0
  br i1 %6, label %body70, label %end74

body70:                                           ; preds = %cond69
  %return78 = call i8* @"getcomp@S[SI"(i8** %return66, i64 %__impl_foreach_index.0)
  %return81 = call i8* @"strip@SS"(i8* %return78)
  %output82 = call i8** @"append@[SS"(i8** %varxaos_strip.0, i8* %return81)
  %output84 = add i64 %__impl_foreach_index.0, 1
  br label %cond69

end74:                                            ; preds = %cond69
  %return86 = call i8* @"getcomp@S[SI"(i8** %varxaos_strip.0, i64 0)
  %return87 = call i8* @"toupper@SS"(i8* %return86)
  %return88 = call i64 @"eq@ISS"(i8* %return87, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i64 0, i64 0))
  %7 = icmp ne i64 %return88, 0
  br i1 %7, label %true89, label %end90

true89:                                           ; preds = %end74
  br label %end90

end90:                                            ; preds = %true89, %end74
  %isXAOS.0 = phi i64 [ 1, %true89 ], [ 0, %end74 ]
  %return92 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return93 = call i64 @"len@I[S"(i8** %return92)
  br label %cond94

cond94:                                           ; preds = %end112, %end90
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end90 ], [ %output117, %end112 ]
  %return98 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return93)
  %8 = icmp ne i64 %return98, 0
  br i1 %8, label %body95, label %end99

body95:                                           ; preds = %cond94
  %return102 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return104 = call i8* @"getcomp@S[SI"(i8** %return102, i64 %__impl_foreach_index_1.0)
  %return106 = call i8** @"split@[SSS"(i8* %return104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i64 0, i64 0))
  %return107 = call i8* @"join@S[SS"(i8** %return106, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @9, i64 0, i64 0))
  %return109 = call i64 @"isdigit@IS"(i8* %return107)
  %return110 = call i64 @"not@II"(i64 %return109)
  %9 = icmp ne i64 %return110, 0
  %10 = icmp ne i64 %isXAOS.0, 0
  %or.cond = and i1 %9, %10
  br i1 %or.cond, label %true114, label %end112

end99:                                            ; preds = %true114, %cond94
  %isDigit.0 = phi i64 [ 0, %true114 ], [ 1, %cond94 ]
  %return120 = call i64 @"and@III"(i64 %isXAOS.0, i64 %isDigit.0)
  %11 = icmp ne i64 %return120, 0
  br i1 %11, label %true121, label %false

end112:                                           ; preds = %body95
  %output117 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond94

true114:                                          ; preds = %body95
  call void @"warning@S"(i8* getelementptr inbounds ([133 x i8], [133 x i8]* @16, i64 0, i64 0))
  br label %end99

true121:                                          ; preds = %end99
  %return124 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.0, i64 0)
  %output126 = extractvalue { i8*, i8** } %return124, 1
  %return128 = call i64 @"len@I[S"(i8** %output126)
  br label %cond129

false:                                            ; preds = %end99
  %output154 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), i64 %return11, double 1.000000e+00)
  %output156 = call i8** @"resize@[SI"(i8** %varxaos_strip.0, i64 0)
  %output159 = call i8** @"resize@[SIS"(i8** %output156, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @17, i64 0, i64 0))
  br label %end122

end122:                                           ; preds = %false, %end134
  %xaos.0 = phi double* [ %output148, %end134 ], [ %output154, %false ]
  %varxaos_strip.1 = phi i8** [ %output151, %end134 ], [ %output159, %false ]
  br label %cond160

cond129:                                          ; preds = %body130, %true121
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %true121 ], [ %output143, %body130 ]
  %__impl_foreach_index_2.0 = phi i64 [ 0, %true121 ], [ %output145, %body130 ]
  %return133 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return128)
  %12 = icmp ne i64 %return133, 0
  br i1 %12, label %body130, label %end134

body130:                                          ; preds = %cond129
  %return138 = call i8* @"getcomp@S[SI"(i8** %output126, i64 %__impl_foreach_index_2.0)
  %return141 = call double @"atof@FS"(i8* %return138)
  %return142 = call double @"max@FFF"(double %return141, double 0.000000e+00)
  %output143 = call double* @"append@[FF"(double* %xaos.1, double %return142)
  %output145 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond129

end134:                                           ; preds = %cond129
  %output148 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return11, double 1.000000e+00)
  %output151 = call i8** @"resize@[SIS"(i8** %output126, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @17, i64 0, i64 0))
  br label %end122

cond160:                                          ; preds = %end172, %end122
  %xaos.2 = phi double* [ %xaos.0, %end122 ], [ %xaos.3, %end172 ]
  %varxaos_strip.2 = phi i8** [ %varxaos_strip.1, %end122 ], [ %varxaos_strip.3, %end172 ]
  %trace.0 = phi i64 [ 0, %end122 ], [ %trace.1, %end172 ]
  %j.0 = phi i64 [ 0, %end122 ], [ %output191, %end172 ]
  %return164 = call i64 @"lt@III"(i64 %j.0, i64 %return11)
  %13 = icmp ne i64 %return164, 0
  br i1 %13, label %body161, label %end165

body161:                                          ; preds = %cond160
  %return169 = call i64 @"getcomp@I[II"(i64* %va.0, i64 %j.0)
  %return170 = call i64 @"not@II"(i64 %return169)
  %14 = icmp ne i64 %return170, 0
  br i1 %14, label %true171, label %end172

end165:                                           ; preds = %cond160
  %output194 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos_strip.2)
  br label %cond195

true171:                                          ; preds = %body161
  %output176 = sub i64 %j.0, %trace.0
  %return177 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %output176)
  %output179 = extractvalue { double, double* } %return177, 1
  %return184 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.2, i64 %output176)
  %output186 = extractvalue { i8*, i8** } %return184, 1
  %output189 = add i64 %trace.0, 1
  br label %end172

end172:                                           ; preds = %true171, %body161
  %xaos.3 = phi double* [ %output179, %true171 ], [ %xaos.2, %body161 ]
  %varxaos_strip.3 = phi i8** [ %output186, %true171 ], [ %varxaos_strip.2, %body161 ]
  %trace.1 = phi i64 [ %output189, %true171 ], [ %trace.0, %body161 ]
  %output191 = add i64 %j.0, 1
  br label %cond160

cond195:                                          ; preds = %body196, %end165
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end165 ], [ %output214, %body196 ]
  %k.0 = phi i64 [ 0, %end165 ], [ %output216, %body196 ]
  %return199 = call i64 @"lt@III"(i64 %k.0, i64 %return51)
  %15 = icmp ne i64 %return199, 0
  br i1 %15, label %body196, label %end200

body196:                                          ; preds = %cond195
  %return205 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i52.0)
  %return208 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k.0)
  %output209 = fmul double %return205, %return208
  %return212 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output213 = fmul double %output209, %return212
  %output214 = call double* @"append@[FF"(double* %IW_xaos.0, double %output213)
  %output216 = add i64 %k.0, 1
  br label %cond195

end200:                                           ; preds = %cond195
  %return218 = call double @"min@F[F"(double* %xaos.2)
  %return220 = call double @"max@F[F"(double* %xaos.2)
  %return221 = fcmp oeq double %return218, %return220
  br i1 %return221, label %true223, label %false224

true223:                                          ; preds = %end200
  %return227 = call double @"min@F[F"(double* %xaos.2)
  %return228 = fcmp oeq double %return227, 1.000000e+00
  br i1 %return228, label %true230, label %false231

false224:                                         ; preds = %end200
  %return247 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output248 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return247)
  %return250 = call i64 @"not@II"(i64 %x_chk.0)
  %16 = icmp ne i64 %return250, 0
  br i1 %16, label %true251, label %end225

end225:                                           ; preds = %false224, %true251, %false231, %true243, %true230
  %x_chk.1 = phi i64 [ %x_chk.0, %true230 ], [ 1, %true243 ], [ %x_chk.0, %false231 ], [ 1, %true251 ], [ %x_chk.0, %false224 ]
  %XAOS_TO.1 = phi double* [ %output236, %true230 ], [ %output240, %true243 ], [ %output240, %false231 ], [ %output248, %true251 ], [ %output248, %false224 ]
  %output254 = add i64 %i52.0, 1
  br label %cond53

true230:                                          ; preds = %true223
  %return235 = call double* @"create_cdf@[F[F"(double* %IW.0)
  %output236 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return235)
  br label %end225

false231:                                         ; preds = %true223
  %return239 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output240 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return239)
  %return242 = call i64 @"not@II"(i64 %x_chk.0)
  %17 = icmp ne i64 %return242, 0
  br i1 %17, label %true243, label %end225

true243:                                          ; preds = %false231
  br label %end225

true251:                                          ; preds = %false224
  br label %end225

true259:                                          ; preds = %end58
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return51, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output264 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond266

end260:                                           ; preds = %cond266, %end58
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond266 ], [ %XAOS_TO.0, %end58 ]
  store i8** %sIDX.0, i8*** %_bound_sIDX
  %return334 = call double* @"create_cdf@[F[F"(double* %IW.0)
  store double* %return334, double** %_bound_IW
  %18 = icmp ne i64 %x_chk.0, 0
  br i1 %18, label %true336, label %end337

cond266:                                          ; preds = %end309, %true259
  %XAOS_TO.3 = phi double* [ %output264, %true259 ], [ %output329, %end309 ]
  %i265.0 = phi i64 [ 0, %true259 ], [ %output331, %end309 ]
  %return270 = call i64 @"lt@III"(i64 %i265.0, i64 %return51)
  %19 = icmp ne i64 %return270, 0
  br i1 %19, label %body267, label %end260

body267:                                          ; preds = %cond266
  %output275 = mul i64 %i265.0, %return51
  %xaos_tos_t276 = load i8**, i8*** %xaos_tos_t
  %output280 = add i64 %output275, %return51
  %return281 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t276, i64 1, i64 %output275, i64 1, i64 %output280, i64 0, i64 0)
  %return284 = call i64 @"len@I[S"(i8** %return281)
  br label %cond285

cond285:                                          ; preds = %body286, %body267
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %body267 ], [ %output299, %body286 ]
  %__impl_foreach_index_3.0 = phi i64 [ 0, %body267 ], [ %output301, %body286 ]
  %return289 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return284)
  %20 = icmp ne i64 %return289, 0
  br i1 %20, label %body286, label %end290

body286:                                          ; preds = %cond285
  %return294 = call i8* @"getcomp@S[SI"(i8** %return281, i64 %__impl_foreach_index_3.0)
  %return297 = call double @"atof@FS"(i8* %return294)
  %return298 = call double @"max@FFF"(double %return297, double 0.000000e+00)
  %output299 = call double* @"append@[FF"(double* %xaos_froms.0, double %return298)
  %output301 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond285

end290:                                           ; preds = %cond285
  br label %cond304

cond304:                                          ; preds = %body305, %end290
  %IW_xaos302.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end290 ], [ %output323, %body305 ]
  %k303.0 = phi i64 [ 0, %end290 ], [ %output325, %body305 ]
  %return308 = call i64 @"lt@III"(i64 %k303.0, i64 %return51)
  %21 = icmp ne i64 %return308, 0
  br i1 %21, label %body305, label %end309

body305:                                          ; preds = %cond304
  %return314 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i265.0)
  %return317 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k303.0)
  %output318 = fmul double %return314, %return317
  %return321 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k303.0)
  %output322 = fmul double %output318, %return321
  %output323 = call double* @"append@[FF"(double* %IW_xaos302.0, double %output322)
  %output325 = add i64 %k303.0, 1
  br label %cond304

end309:                                           ; preds = %cond304
  %return328 = call double* @"create_cdf@[F[F"(double* %IW_xaos302.0)
  %output329 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return328)
  %output331 = add i64 %i265.0, 1
  br label %cond266

true336:                                          ; preds = %end260
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end337

end337:                                           ; preds = %true336, %end260
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #0

; Function Attrs: nounwind
declare i64 @"isdigit@IS"(i8*) #1

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
define void @TFFAxaos(i8** %sIDX, i64* %SYS, i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<SYS>" = alloca i64*
  %"<XS>" = alloca i64
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<sIDX>" = alloca i8**
  store i8** %sIDX, i8*** %"<sIDX>"
  store i64* %SYS, i64** %"<SYS>"
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@[S[II[F[F"(i8*** %"<sIDX>", i64** %"<SYS>", i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i8**, i8*** %"<sIDX>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i64 0, i64 0), i8** %evalue) #3
  %evalue1 = load i64*, i64** %"<SYS>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @20, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64, i64* %"<XS>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @21, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load double*, double** %"<IW>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @22, i64 0, i64 0), double* %evalue5) #3
  %evalue7 = load double*, double** %"<XST>"
  %gvalue8 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @23, i64 0, i64 0), double* %evalue7) #3
  store i8** %gvalue, i8*** @sIDX
  store i64* %gvalue2, i64** @SYS
  store i64 %gvalue4, i64* @XS
  store double* %gvalue6, double** @IW
  store double* %gvalue8, double** @XST
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.5.435"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
