;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [8 x i8] c"../doff\00"
@1 = private constant [7 x i8] c"../rip\00"
@2 = private constant [8 x i8] c"../domb\00"
@3 = private constant [8 x i8] c"../iter\00"
@4 = private constant [7 x i8] c"../f3c\00"
@5 = private constant [13 x i8] c"../flamefunc\00"
@6 = private constant [0 x i64] zeroinitializer
@7 = private constant [0 x double] zeroinitializer
@8 = private constant [0 x i8*] zeroinitializer
@9 = private constant [12 x i8] c"../vactive_\00"
@10 = private constant [7 x i8] c"../iw_\00"
@11 = private constant [12 x i8] c"../varnote_\00"
@12 = private constant [2 x i8] c":\00"
@13 = private constant [5 x i8] c"XAOS\00"
@14 = private constant [2 x i8] c"1\00"
@15 = private constant [6 x i8] c"../xm\00"
@sIDX = external global i8**
@SYS = external global i64*
@XS = external global i64
@IW = external global double*
@XST = external global double*
@16 = private constant [5 x i8] c"sIDX\00"
@17 = private constant [4 x i8] c"SYS\00"
@18 = private constant [3 x i8] c"XS\00"
@19 = private constant [3 x i8] c"IW\00"
@20 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #0

; Function Attrs: nounwind readnone
declare <9 x double> @"maketransform@3IV"(i64, <3 x double>) #0

; Function Attrs: nounwind
declare <4 x double> @"set@23"(<9 x double>) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@U2"(<2 x double>, <4 x double>) #0

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@[S[II[F[F"(i8*** %_bound_sIDX, i64** %_bound_SYS, i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %return10 = call i64* @"array@[I:IIIII"(i64 %return, i64 %return1, i64 %return2, i64 %return3, i64 %return4)
  store i64* %return10, i64** %_bound_SYS
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter15, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter15 ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter15 ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter15 ]
  %va.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), %__llvm_entry ], [ %va.1, %iter15 ]
  %return14 = call i64 @"lt@III"(i64 %i.0, i64 %return11)
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return17 = call i8* @"itoa@SI"(i64 %output)
  %return20 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i64 0, i64 0), i8* %return17)
  %return21 = call i64 @"chi@IS"(i8* %return20)
  %output22 = call i64* @"append@[II"(i64* %va.0, i64 %return21)
  %return24 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @10, i64 0, i64 0), i8* %return17)
  %return25 = call double @"chf@FS"(i8* %return24)
  %return27 = fcmp oeq double %return25, 0.000000e+00
  br i1 %return27, label %true, label %end29

end:                                              ; preds = %cond
  %return51 = call i64 @"len@I[S"(i8** %sIDX.0)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond53

iter15:                                           ; preds = %end29, %end39
  %sIDX.1 = phi i8** [ %sIDX.0, %end29 ], [ %output47, %end39 ]
  %IW.1 = phi double* [ %IW.0, %end29 ], [ %output44, %end39 ]
  br label %cond

true:                                             ; preds = %body
  %return31 = call { i64, i64* } @"setcomp@I[III"(i64* %output22, i64 0, i64 %i.0)
  %output33 = extractvalue { i64, i64* } %return31, 1
  br label %end29

end29:                                            ; preds = %true, %body
  %va.1 = phi i64* [ %output33, %true ], [ %output22, %body ]
  %return36 = call i64 @"getcomp@I[II"(i64* %va.1, i64 %i.0)
  %return37 = call i64 @"not@II"(i64 %return36)
  %3 = icmp ne i64 %return37, 0
  br i1 %3, label %iter15, label %end39

end39:                                            ; preds = %end29
  %output44 = call double* @"append@[FF"(double* %IW.0, double %return25)
  %output47 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return17)
  br label %iter15

cond53:                                           ; preds = %end166, %end
  %x_chk.0 = phi i64 [ 0, %end ], [ %x_chk.1, %end166 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end ], [ %XAOS_TO.1, %end166 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %end ], [ %output135, %end166 ]
  %i52.0 = phi i64 [ 0, %end ], [ %output180, %end166 ]
  %return57 = call i64 @"lt@III"(i64 %i52.0, i64 %return51)
  %4 = icmp ne i64 %return57, 0
  br i1 %4, label %body54, label %end58

body54:                                           ; preds = %cond53
  %return62 = call i8* @"getcomp@S[SI"(i8** %sIDX.0, i64 %i52.0)
  %return63 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @11, i64 0, i64 0), i8* %return62)
  %return64 = call i8* @"chs@SS"(i8* %return63)
  %return66 = call i8** @"split@[SSS"(i8* %return64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  %return68 = call i8* @"getcomp@S[SI"(i8** %return66, i64 0)
  %return69 = call i8* @"toupper@SS"(i8* %return68)
  %return70 = call i64 @"eq@ISS"(i8* %return69, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @13, i64 0, i64 0))
  %5 = icmp ne i64 %return70, 0
  br i1 %5, label %true71, label %false

end58:                                            ; preds = %cond53
  %return181 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @15, i64 0, i64 0))
  %return184 = call i64 @"and@III"(i64 %return181, i64 %x_chk.0)
  %6 = icmp ne i64 %return184, 0
  br i1 %6, label %true185, label %end186

true71:                                           ; preds = %body54
  %return74 = call { i8*, i8** } @"pop@S[SI"(i8** %return66, i64 0)
  %output76 = extractvalue { i8*, i8** } %return74, 1
  %return78 = call i64 @"len@I[S"(i8** %output76)
  br label %cond79

false:                                            ; preds = %body54
  %output104 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), i64 %return11, double 1.000000e+00)
  %output107 = call i8** @"resize@[SIS"(i8** %return66, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i64 0, i64 0))
  br label %end72

end72:                                            ; preds = %false, %end84
  %varxaos.0 = phi i8** [ %output101, %end84 ], [ %output107, %false ]
  %xaos.0 = phi double* [ %output98, %end84 ], [ %output104, %false ]
  br label %cond108

cond79:                                           ; preds = %body80, %true71
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %true71 ], [ %output93, %body80 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %true71 ], [ %output95, %body80 ]
  %return83 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return78)
  %7 = icmp ne i64 %return83, 0
  br i1 %7, label %body80, label %end84

body80:                                           ; preds = %cond79
  %return88 = call i8* @"getcomp@S[SI"(i8** %output76, i64 %__impl_foreach_index.0)
  %return91 = call double @"atof@FS"(i8* %return88)
  %return92 = call double @"max@FFF"(double %return91, double 0.000000e+00)
  %output93 = call double* @"append@[FF"(double* %xaos.1, double %return92)
  %output95 = add i64 %__impl_foreach_index.0, 1
  br label %cond79

end84:                                            ; preds = %cond79
  %output98 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return11, double 1.000000e+00)
  %output101 = call i8** @"resize@[SIS"(i8** %output76, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i64 0, i64 0))
  br label %end72

cond108:                                          ; preds = %end120, %end72
  %varxaos.1 = phi i8** [ %varxaos.0, %end72 ], [ %varxaos.2, %end120 ]
  %xaos.2 = phi double* [ %xaos.0, %end72 ], [ %xaos.3, %end120 ]
  %j.0 = phi i64 [ 0, %end72 ], [ %output132, %end120 ]
  %return112 = call i64 @"lt@III"(i64 %j.0, i64 %return11)
  %8 = icmp ne i64 %return112, 0
  br i1 %8, label %body109, label %end113

body109:                                          ; preds = %cond108
  %return117 = call i64 @"getcomp@I[II"(i64* %va.0, i64 %j.0)
  %return118 = call i64 @"not@II"(i64 %return117)
  %9 = icmp ne i64 %return118, 0
  br i1 %9, label %true119, label %end120

end113:                                           ; preds = %cond108
  %output135 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos.1)
  br label %cond136

true119:                                          ; preds = %body109
  %return123 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %j.0)
  %output125 = extractvalue { double, double* } %return123, 1
  %return128 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos.1, i64 %j.0)
  %output130 = extractvalue { i8*, i8** } %return128, 1
  br label %end120

end120:                                           ; preds = %true119, %body109
  %varxaos.2 = phi i8** [ %output130, %true119 ], [ %varxaos.1, %body109 ]
  %xaos.3 = phi double* [ %output125, %true119 ], [ %xaos.2, %body109 ]
  %output132 = add i64 %j.0, 1
  br label %cond108

cond136:                                          ; preds = %body137, %end113
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end113 ], [ %output155, %body137 ]
  %k.0 = phi i64 [ 0, %end113 ], [ %output157, %body137 ]
  %return140 = call i64 @"lt@III"(i64 %k.0, i64 %return51)
  %10 = icmp ne i64 %return140, 0
  br i1 %10, label %body137, label %end141

body137:                                          ; preds = %cond136
  %return146 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i52.0)
  %return149 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k.0)
  %output150 = fmul double %return146, %return149
  %return153 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output154 = fmul double %output150, %return153
  %output155 = call double* @"append@[FF"(double* %IW_xaos.0, double %output154)
  %output157 = add i64 %k.0, 1
  br label %cond136

end141:                                           ; preds = %cond136
  %return159 = call double @"min@F[F"(double* %xaos.2)
  %return161 = call double @"max@F[F"(double* %xaos.2)
  %return162 = fcmp oeq double %return159, %return161
  br i1 %return162, label %true164, label %false165

true164:                                          ; preds = %end141
  %return169 = call double* @"create_cdf@[F[F"(double* %IW.0)
  %output170 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return169)
  br label %end166

false165:                                         ; preds = %end141
  %return173 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output174 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return173)
  %return176 = call i64 @"not@II"(i64 %x_chk.0)
  %11 = icmp ne i64 %return176, 0
  br i1 %11, label %true177, label %end166

end166:                                           ; preds = %false165, %true177, %true164
  %x_chk.1 = phi i64 [ %x_chk.0, %true164 ], [ 1, %true177 ], [ %x_chk.0, %false165 ]
  %XAOS_TO.1 = phi double* [ %output170, %true164 ], [ %output174, %true177 ], [ %output174, %false165 ]
  %output180 = add i64 %i52.0, 1
  br label %cond53

true177:                                          ; preds = %false165
  br label %end166

true185:                                          ; preds = %end58
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return51, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output190 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond192

end186:                                           ; preds = %cond192, %end58
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond192 ], [ %XAOS_TO.0, %end58 ]
  store i8** %sIDX.0, i8*** %_bound_sIDX
  %return260 = call double* @"create_cdf@[F[F"(double* %IW.0)
  store double* %return260, double** %_bound_IW
  %12 = icmp ne i64 %x_chk.0, 0
  br i1 %12, label %true262, label %end263

cond192:                                          ; preds = %end235, %true185
  %XAOS_TO.3 = phi double* [ %output190, %true185 ], [ %output255, %end235 ]
  %i191.0 = phi i64 [ 0, %true185 ], [ %output257, %end235 ]
  %return196 = call i64 @"lt@III"(i64 %i191.0, i64 %return51)
  %13 = icmp ne i64 %return196, 0
  br i1 %13, label %body193, label %end186

body193:                                          ; preds = %cond192
  %output201 = mul i64 %i191.0, %return51
  %xaos_tos_t202 = load i8**, i8*** %xaos_tos_t
  %output206 = add i64 %output201, %return51
  %return207 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t202, i64 1, i64 %output201, i64 1, i64 %output206, i64 0, i64 0)
  %return210 = call i64 @"len@I[S"(i8** %return207)
  br label %cond211

cond211:                                          ; preds = %body212, %body193
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %body193 ], [ %output225, %body212 ]
  %__impl_foreach_index_1.0 = phi i64 [ 0, %body193 ], [ %output227, %body212 ]
  %return215 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return210)
  %14 = icmp ne i64 %return215, 0
  br i1 %14, label %body212, label %end216

body212:                                          ; preds = %cond211
  %return220 = call i8* @"getcomp@S[SI"(i8** %return207, i64 %__impl_foreach_index_1.0)
  %return223 = call double @"atof@FS"(i8* %return220)
  %return224 = call double @"max@FFF"(double %return223, double 0.000000e+00)
  %output225 = call double* @"append@[FF"(double* %xaos_froms.0, double %return224)
  %output227 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond211

end216:                                           ; preds = %cond211
  br label %cond230

cond230:                                          ; preds = %body231, %end216
  %IW_xaos228.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end216 ], [ %output249, %body231 ]
  %k229.0 = phi i64 [ 0, %end216 ], [ %output251, %body231 ]
  %return234 = call i64 @"lt@III"(i64 %k229.0, i64 %return51)
  %15 = icmp ne i64 %return234, 0
  br i1 %15, label %body231, label %end235

body231:                                          ; preds = %cond230
  %return240 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i191.0)
  %return243 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k229.0)
  %output244 = fmul double %return240, %return243
  %return247 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k229.0)
  %output248 = fmul double %output244, %return247
  %output249 = call double* @"append@[FF"(double* %IW_xaos228.0, double %output248)
  %output251 = add i64 %k229.0, 1
  br label %cond230

end235:                                           ; preds = %cond230
  %return254 = call double* @"create_cdf@[F[F"(double* %IW_xaos228.0)
  %output255 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return254)
  %output257 = add i64 %i191.0, 1
  br label %cond192

true262:                                          ; preds = %end186
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end263

end263:                                           ; preds = %true262, %end186
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
define void @TFFAxaos(i8** %sIDX, i64* %SYS, i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<SYS>" = alloca i64*
  %"<XS>" = alloca i64
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<sIDX>" = alloca i8**
  store i8** %sIDX, i8*** %"<sIDX>"
  store i64* %SYS, i64** %"<SYS>"
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@[S[II[F[F"(i8*** %"<sIDX>", i64** %"<SYS>", i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i8**, i8*** %"<sIDX>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i64 0, i64 0), i8** %evalue) #3
  %evalue1 = load i64*, i64** %"<SYS>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @17, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64, i64* %"<XS>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @18, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load double*, double** %"<IW>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @19, i64 0, i64 0), double* %evalue5) #3
  %evalue7 = load double*, double** %"<XST>"
  %gvalue8 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @20, i64 0, i64 0), double* %evalue7) #3
  store i8** %gvalue, i8*** @sIDX
  store i64* %gvalue2, i64** @SYS
  store i64 %gvalue4, i64* @XS
  store double* %gvalue6, double** @IW
  store double* %gvalue8, double** @XST
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.5.435"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
