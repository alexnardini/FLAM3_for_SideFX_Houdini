;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [8 x i8] c"../dotm\00"
@1 = private constant [8 x i8] c"../doff\00"
@2 = private constant [7 x i8] c"../rip\00"
@3 = private constant [6 x i8] c"../sm\00"
@4 = private constant [8 x i8] c"../domb\00"
@5 = private constant [8 x i8] c"../iter\00"
@6 = private constant [9 x i8] c"../smrot\00"
@7 = private constant [13 x i8] c"../flamefunc\00"
@8 = private constant [0 x i64] zeroinitializer
@9 = private constant [0 x double] zeroinitializer
@10 = private constant [0 x i8*] zeroinitializer
@11 = private constant [12 x i8] c"../vactive_\00"
@12 = private constant [7 x i8] c"../iw_\00"
@13 = private constant [12 x i8] c"../varnote_\00"
@14 = private constant [2 x i8] c":\00"
@15 = private constant [5 x i8] c"XAOS\00"
@16 = private constant [2 x i8] c"1\00"
@17 = private constant [6 x i8] c"../xm\00"
@sIDX = external global i8**
@SYS = external global i64*
@XS = external global i64
@IW = external global double*
@XST = external global double*
@18 = private constant [5 x i8] c"sIDX\00"
@19 = private constant [4 x i8] c"SYS\00"
@20 = private constant [3 x i8] c"XS\00"
@21 = private constant [3 x i8] c"IW\00"
@22 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #0

; Function Attrs: nounwind readnone
declare <9 x double> @"maketransform@3IV"(i64, <3 x double>) #0

; Function Attrs: nounwind
declare <4 x double> @"set@23"(<9 x double>) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"mul@U2"(<2 x double>, <4 x double>) #0

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@[S[II[F[F"(i8*** %_bound_sIDX, i64** %_bound_SYS, i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i64 0, i64 0))
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @5, i64 0, i64 0))
  %2 = icmp ne i64 %return3, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @6, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %smm.0 = phi i64 [ %return7, %true ], [ 0, %__llvm_entry ]
  %return15 = call i64* @"array@[I:IIIIIII"(i64 %return, i64 %return1, i64 %return2, i64 %return3, i64 %return4, i64 %return5, i64 %smm.0)
  store i64* %return15, i64** %_bound_SYS
  %return16 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @7, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter21, %end
  %va.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @8, i64 0, i64 0), %end ], [ %va.1, %iter21 ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), %end ], [ %IW.1, %iter21 ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @10, i64 0, i64 0), %end ], [ %sIDX.1, %iter21 ]
  %i.0 = phi i64 [ 0, %end ], [ %output, %iter21 ]
  %return19 = call i64 @"lt@III"(i64 %i.0, i64 %return16)
  %3 = icmp ne i64 %return19, 0
  br i1 %3, label %body, label %end20

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return23 = call i8* @"itoa@SI"(i64 %output)
  %return26 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @11, i64 0, i64 0), i8* %return23)
  %return27 = call i64 @"chi@IS"(i8* %return26)
  %output28 = call i64* @"append@[II"(i64* %va.0, i64 %return27)
  %return30 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @12, i64 0, i64 0), i8* %return23)
  %return31 = call double @"chf@FS"(i8* %return30)
  %return33 = fcmp oeq double %return31, 0.000000e+00
  br i1 %return33, label %true35, label %end36

end20:                                            ; preds = %cond
  %return58 = call i64 @"len@I[S"(i8** %sIDX.0)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @10, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond60

iter21:                                           ; preds = %end36, %end46
  %IW.1 = phi double* [ %IW.0, %end36 ], [ %output51, %end46 ]
  %sIDX.1 = phi i8** [ %sIDX.0, %end36 ], [ %output54, %end46 ]
  br label %cond

true35:                                           ; preds = %body
  %return38 = call { i64, i64* } @"setcomp@I[III"(i64* %output28, i64 0, i64 %i.0)
  %output40 = extractvalue { i64, i64* } %return38, 1
  br label %end36

end36:                                            ; preds = %true35, %body
  %va.1 = phi i64* [ %output40, %true35 ], [ %output28, %body ]
  %return43 = call i64 @"getcomp@I[II"(i64* %va.1, i64 %i.0)
  %return44 = call i64 @"not@II"(i64 %return43)
  %4 = icmp ne i64 %return44, 0
  br i1 %4, label %iter21, label %end46

end46:                                            ; preds = %end36
  %output51 = call double* @"append@[FF"(double* %IW.0, double %return31)
  %output54 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return23)
  br label %iter21

cond60:                                           ; preds = %end173, %end20
  %x_chk.0 = phi i64 [ 0, %end20 ], [ %x_chk.1, %end173 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), %end20 ], [ %XAOS_TO.1, %end173 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @10, i64 0, i64 0), %end20 ], [ %output142, %end173 ]
  %i59.0 = phi i64 [ 0, %end20 ], [ %output187, %end173 ]
  %return64 = call i64 @"lt@III"(i64 %i59.0, i64 %return58)
  %5 = icmp ne i64 %return64, 0
  br i1 %5, label %body61, label %end65

body61:                                           ; preds = %cond60
  %return69 = call i8* @"getcomp@S[SI"(i8** %sIDX.0, i64 %i59.0)
  %return70 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @13, i64 0, i64 0), i8* %return69)
  %return71 = call i8* @"chs@SS"(i8* %return70)
  %return73 = call i8** @"split@[SSS"(i8* %return71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i64 0, i64 0))
  %return75 = call i8* @"getcomp@S[SI"(i8** %return73, i64 0)
  %return76 = call i8* @"toupper@SS"(i8* %return75)
  %return77 = call i64 @"eq@ISS"(i8* %return76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i64 0, i64 0))
  %6 = icmp ne i64 %return77, 0
  br i1 %6, label %true78, label %false

end65:                                            ; preds = %cond60
  %return188 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @17, i64 0, i64 0))
  %return191 = call i64 @"and@III"(i64 %return188, i64 %x_chk.0)
  %7 = icmp ne i64 %return191, 0
  br i1 %7, label %true192, label %end193

true78:                                           ; preds = %body61
  %return81 = call { i8*, i8** } @"pop@S[SI"(i8** %return73, i64 0)
  %output83 = extractvalue { i8*, i8** } %return81, 1
  %return85 = call i64 @"len@I[S"(i8** %output83)
  br label %cond86

false:                                            ; preds = %body61
  %output111 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), i64 %return16, double 1.000000e+00)
  %output114 = call i8** @"resize@[SIS"(i8** %return73, i64 %return16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i64 0, i64 0))
  br label %end79

end79:                                            ; preds = %false, %end91
  %varxaos.0 = phi i8** [ %output108, %end91 ], [ %output114, %false ]
  %xaos.0 = phi double* [ %output105, %end91 ], [ %output111, %false ]
  br label %cond115

cond86:                                           ; preds = %body87, %true78
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), %true78 ], [ %output100, %body87 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %true78 ], [ %output102, %body87 ]
  %return90 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return85)
  %8 = icmp ne i64 %return90, 0
  br i1 %8, label %body87, label %end91

body87:                                           ; preds = %cond86
  %return95 = call i8* @"getcomp@S[SI"(i8** %output83, i64 %__impl_foreach_index.0)
  %return98 = call double @"atof@FS"(i8* %return95)
  %return99 = call double @"max@FFF"(double %return98, double 0.000000e+00)
  %output100 = call double* @"append@[FF"(double* %xaos.1, double %return99)
  %output102 = add i64 %__impl_foreach_index.0, 1
  br label %cond86

end91:                                            ; preds = %cond86
  %output105 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return16, double 1.000000e+00)
  %output108 = call i8** @"resize@[SIS"(i8** %output83, i64 %return16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @16, i64 0, i64 0))
  br label %end79

cond115:                                          ; preds = %end127, %end79
  %varxaos.1 = phi i8** [ %varxaos.0, %end79 ], [ %varxaos.2, %end127 ]
  %xaos.2 = phi double* [ %xaos.0, %end79 ], [ %xaos.3, %end127 ]
  %j.0 = phi i64 [ 0, %end79 ], [ %output139, %end127 ]
  %return119 = call i64 @"lt@III"(i64 %j.0, i64 %return16)
  %9 = icmp ne i64 %return119, 0
  br i1 %9, label %body116, label %end120

body116:                                          ; preds = %cond115
  %return124 = call i64 @"getcomp@I[II"(i64* %va.0, i64 %j.0)
  %return125 = call i64 @"not@II"(i64 %return124)
  %10 = icmp ne i64 %return125, 0
  br i1 %10, label %true126, label %end127

end120:                                           ; preds = %cond115
  %output142 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos.1)
  br label %cond143

true126:                                          ; preds = %body116
  %return130 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %j.0)
  %output132 = extractvalue { double, double* } %return130, 1
  %return135 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos.1, i64 %j.0)
  %output137 = extractvalue { i8*, i8** } %return135, 1
  br label %end127

end127:                                           ; preds = %true126, %body116
  %varxaos.2 = phi i8** [ %output137, %true126 ], [ %varxaos.1, %body116 ]
  %xaos.3 = phi double* [ %output132, %true126 ], [ %xaos.2, %body116 ]
  %output139 = add i64 %j.0, 1
  br label %cond115

cond143:                                          ; preds = %body144, %end120
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), %end120 ], [ %output162, %body144 ]
  %k.0 = phi i64 [ 0, %end120 ], [ %output164, %body144 ]
  %return147 = call i64 @"lt@III"(i64 %k.0, i64 %return58)
  %11 = icmp ne i64 %return147, 0
  br i1 %11, label %body144, label %end148

body144:                                          ; preds = %cond143
  %return153 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i59.0)
  %return156 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k.0)
  %output157 = fmul double %return153, %return156
  %return160 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output161 = fmul double %output157, %return160
  %output162 = call double* @"append@[FF"(double* %IW_xaos.0, double %output161)
  %output164 = add i64 %k.0, 1
  br label %cond143

end148:                                           ; preds = %cond143
  %return166 = call double @"min@F[F"(double* %xaos.2)
  %return168 = call double @"max@F[F"(double* %xaos.2)
  %return169 = fcmp oeq double %return166, %return168
  br i1 %return169, label %true171, label %false172

true171:                                          ; preds = %end148
  %return176 = call double* @"create_cdf@[F[F"(double* %IW.0)
  %output177 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return176)
  br label %end173

false172:                                         ; preds = %end148
  %return180 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output181 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return180)
  %return183 = call i64 @"not@II"(i64 %x_chk.0)
  %12 = icmp ne i64 %return183, 0
  br i1 %12, label %true184, label %end173

end173:                                           ; preds = %false172, %true184, %true171
  %x_chk.1 = phi i64 [ %x_chk.0, %true171 ], [ 1, %true184 ], [ %x_chk.0, %false172 ]
  %XAOS_TO.1 = phi double* [ %output177, %true171 ], [ %output181, %true184 ], [ %output181, %false172 ]
  %output187 = add i64 %i59.0, 1
  br label %cond60

true184:                                          ; preds = %false172
  br label %end173

true192:                                          ; preds = %end65
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return58, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output197 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond199

end193:                                           ; preds = %cond199, %end65
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond199 ], [ %XAOS_TO.0, %end65 ]
  store i8** %sIDX.0, i8*** %_bound_sIDX
  %return267 = call double* @"create_cdf@[F[F"(double* %IW.0)
  store double* %return267, double** %_bound_IW
  %13 = icmp ne i64 %x_chk.0, 0
  br i1 %13, label %true269, label %end270

cond199:                                          ; preds = %end242, %true192
  %XAOS_TO.3 = phi double* [ %output197, %true192 ], [ %output262, %end242 ]
  %i198.0 = phi i64 [ 0, %true192 ], [ %output264, %end242 ]
  %return203 = call i64 @"lt@III"(i64 %i198.0, i64 %return58)
  %14 = icmp ne i64 %return203, 0
  br i1 %14, label %body200, label %end193

body200:                                          ; preds = %cond199
  %output208 = mul i64 %i198.0, %return58
  %xaos_tos_t209 = load i8**, i8*** %xaos_tos_t
  %output213 = add i64 %output208, %return58
  %return214 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t209, i64 1, i64 %output208, i64 1, i64 %output213, i64 0, i64 0)
  %return217 = call i64 @"len@I[S"(i8** %return214)
  br label %cond218

cond218:                                          ; preds = %body219, %body200
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), %body200 ], [ %output232, %body219 ]
  %__impl_foreach_index_1.0 = phi i64 [ 0, %body200 ], [ %output234, %body219 ]
  %return222 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return217)
  %15 = icmp ne i64 %return222, 0
  br i1 %15, label %body219, label %end223

body219:                                          ; preds = %cond218
  %return227 = call i8* @"getcomp@S[SI"(i8** %return214, i64 %__impl_foreach_index_1.0)
  %return230 = call double @"atof@FS"(i8* %return227)
  %return231 = call double @"max@FFF"(double %return230, double 0.000000e+00)
  %output232 = call double* @"append@[FF"(double* %xaos_froms.0, double %return231)
  %output234 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond218

end223:                                           ; preds = %cond218
  br label %cond237

cond237:                                          ; preds = %body238, %end223
  %IW_xaos235.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), %end223 ], [ %output256, %body238 ]
  %k236.0 = phi i64 [ 0, %end223 ], [ %output258, %body238 ]
  %return241 = call i64 @"lt@III"(i64 %k236.0, i64 %return58)
  %16 = icmp ne i64 %return241, 0
  br i1 %16, label %body238, label %end242

body238:                                          ; preds = %cond237
  %return247 = call double @"getcomp@F[FI"(double* %IW.0, i64 %i198.0)
  %return250 = call double @"getcomp@F[FI"(double* %IW.0, i64 %k236.0)
  %output251 = fmul double %return247, %return250
  %return254 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k236.0)
  %output255 = fmul double %output251, %return254
  %output256 = call double* @"append@[FF"(double* %IW_xaos235.0, double %output255)
  %output258 = add i64 %k236.0, 1
  br label %cond237

end242:                                           ; preds = %cond237
  %return261 = call double* @"create_cdf@[F[F"(double* %IW_xaos235.0)
  %output262 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return261)
  %output264 = add i64 %i198.0, 1
  br label %cond199

true269:                                          ; preds = %end193
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end270

end270:                                           ; preds = %true269, %end193
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIIIII"(i64, i64, i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
define void @TFFAxaos(i8** %sIDX, i64* %SYS, i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<SYS>" = alloca i64*
  %"<XS>" = alloca i64
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<sIDX>" = alloca i8**
  store i8** %sIDX, i8*** %"<sIDX>"
  store i64* %SYS, i64** %"<SYS>"
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@[S[II[F[F"(i8*** %"<sIDX>", i64** %"<SYS>", i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i8**, i8*** %"<sIDX>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @18, i64 0, i64 0), i8** %evalue) #3
  %evalue1 = load i64*, i64** %"<SYS>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @19, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64, i64* %"<XS>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @20, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load double*, double** %"<IW>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @21, i64 0, i64 0), double* %evalue5) #3
  %evalue7 = load double*, double** %"<XST>"
  %gvalue8 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @22, i64 0, i64 0), double* %evalue7) #3
  store i8** %gvalue, i8*** @sIDX
  store i64* %gvalue2, i64** @SYS
  store i64 %gvalue4, i64* @XS
  store double* %gvalue6, double** @IW
  store double* %gvalue8, double** @XST
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @10, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @8, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @9, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.5.435"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
