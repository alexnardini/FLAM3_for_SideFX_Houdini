;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [10 x i8] c"flamefunc\00"
@1 = private constant [3 x i8] c"VA\00"
@2 = private constant [0 x double] zeroinitializer
@3 = private constant [3 x i8] c"IW\00"
@4 = private constant [0 x i8*] zeroinitializer
@5 = private constant [5 x i8] c"sIDX\00"
@6 = private constant [107 x i8] c"\0AAll iterators are inactive or their Weight set to: 0(Zero)\0AOne iterator's Weight internally set to: 1e-08\00"
@7 = private constant [16 x i8] c"\0AZERO ITERATORS\00"
@8 = private constant [1 x i8] zeroinitializer
@9 = private constant [6 x i8] c"xaos_\00"
@10 = private constant [2 x i8] c":\00"
@11 = private constant [5 x i8] c"XAOS\00"
@12 = private constant [12 x i8] c"\0AIterator: \00"
@13 = private constant [46 x i8] c" -> without a valid \22 xaos: \22 command string.\00"
@14 = private constant [2 x i8] c".\00"
@15 = private constant [2 x i8] c"-\00"
@16 = private constant [40 x i8] c"\0ANegative xaos values inside iterator: \00"
@17 = private constant [62 x i8] c".\0AThis iterator will be reset to a default xaos value of 1's.\00"
@18 = private constant [41 x i8] c"\0ANon digit xaos values inside iterator: \00"
@19 = private constant [2 x i8] c"1\00"
@20 = private constant [3 x i8] c"xm\00"
@XS = external global i64
@IW = external global double*
@XST = external global double*
@21 = private constant [3 x i8] c"XS\00"
@22 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@I[F[F"(i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return6 = call i64* @"detail@[IIS"(i64 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0))
  %return7 = call double* @"detail@[FIS"(i64 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0))
  %return8 = call i8** @"detail@[SIS"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0))
  %return10 = call i64 @"len@I[F"(double* %return7)
  %return11 = call i64 @"eq@III"(i64 %return10, i64 1)
  %return13 = call double @"getcomp@F[FI"(double* %return7, i64 0)
  %return14 = fcmp oeq double %return13, 1.000000e-08
  %return15 = zext i1 %return14 to i64
  %return16 = call i64 @"and@III"(i64 %return11, i64 %return15)
  %2 = icmp ne i64 %return16, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %3 = icmp ne i64 %return5, 0
  br i1 %3, label %true18, label %false

end:                                              ; preds = %true18, %false, %__llvm_entry
  %return21 = call i64 @"len@I[S"(i8** %return8)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @4, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond

true18:                                           ; preds = %true
  call void @"warning@S"(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @6, i64 0, i64 0))
  br label %end

false:                                            ; preds = %true
  call void @"warning@S"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @7, i64 0, i64 0))
  br label %end

cond:                                             ; preds = %end228, %end
  %x_chk.0 = phi i64 [ 0, %end ], [ %x_chk.1, %end228 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %end ], [ %XAOS_TO.1, %end228 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @4, i64 0, i64 0), %end ], [ %output197, %end228 ]
  %i.0 = phi i64 [ 0, %end ], [ %output257, %end228 ]
  %return24 = call i64 @"lt@III"(i64 %i.0, i64 %return21)
  %4 = icmp ne i64 %return24, 0
  br i1 %4, label %body, label %end25

body:                                             ; preds = %cond
  %return29 = call i8* @"getcomp@S[SI"(i8** %return8, i64 %i.0)
  %return30 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i64 0, i64 0), i8* %return29)
  %return31 = call i8* @"chs@SS"(i8* %return30)
  %return33 = call i8** @"split@[SSS"(i8* %return31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0))
  %return35 = call i64 @"len@I[S"(i8** %return33)
  br label %cond36

end25:                                            ; preds = %cond
  %return258 = call i64 @"chi@IS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @20, i64 0, i64 0))
  %return261 = call i64 @"and@III"(i64 %return258, i64 %x_chk.0)
  %5 = icmp ne i64 %return261, 0
  br i1 %5, label %true262, label %end263

cond36:                                           ; preds = %body37, %body
  %varxaos_strip.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @4, i64 0, i64 0), %body ], [ %output, %body37 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %body ], [ %output50, %body37 ]
  %return40 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return35)
  %6 = icmp ne i64 %return40, 0
  br i1 %6, label %body37, label %end41

body37:                                           ; preds = %cond36
  %return45 = call i8* @"getcomp@S[SI"(i8** %return33, i64 %__impl_foreach_index.0)
  %return48 = call i8* @"strip@SS"(i8* %return45)
  %output = call i8** @"append@[SS"(i8** %varxaos_strip.0, i8* %return48)
  %output50 = add i64 %__impl_foreach_index.0, 1
  br label %cond36

end41:                                            ; preds = %cond36
  %return52 = call i8* @"getcomp@S[SI"(i8** %varxaos_strip.0, i64 0)
  %return53 = call i8* @"toupper@SS"(i8* %return52)
  %return54 = call i64 @"eq@ISS"(i8* %return53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %7 = icmp ne i64 %return54, 0
  %. = select i1 %7, i64 1, i64 0
  %return59 = call i64 @"not@II"(i64 %.)
  %return61 = call i64 @"and@III"(i64 %return59, i64 %return5)
  %8 = icmp ne i64 %return61, 0
  br i1 %8, label %true62, label %end63

true62:                                           ; preds = %end41
  %return67 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i64 0, i64 0), i8* %return29, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @13, i64 0, i64 0))
  call void @"warning@S"(i8* %return67)
  br label %end63

end63:                                            ; preds = %true62, %end41
  %return69 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return70 = call i64 @"len@I[S"(i8** %return69)
  br label %cond71

cond71:                                           ; preds = %end96, %end63
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end63 ], [ %output119, %end96 ]
  %return75 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return70)
  %9 = icmp ne i64 %return75, 0
  br i1 %9, label %body72, label %end76

body72:                                           ; preds = %cond71
  %return79 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return81 = call i8* @"getcomp@S[SI"(i8** %return79, i64 %__impl_foreach_index_1.0)
  %return83 = call i8** @"split@[SSS"(i8* %return81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i64 0, i64 0))
  %return84 = call i8* @"join@S[SS"(i8** %return83, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @8, i64 0, i64 0))
  %return87 = call i8* @"getcomp@SSI"(i8* %return84, i64 0)
  %return88 = call i64 @"eq@ISS"(i8* %return87, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i64 0, i64 0))
  %return89 = call i64 @"and@III"(i64 1, i64 %return88)
  %return91 = call i8* @"slice@SSIIIIII"(i8* %return84, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return92 = call i64 @"isdigit@IS"(i8* %return91)
  %return93 = call i64 @"and@III"(i64 %return89, i64 %return92)
  %10 = icmp ne i64 %return93, 0
  br i1 %10, label %true94, label %false95

end76:                                            ; preds = %true112, %true98, %cond71
  %isDigit.0 = phi i64 [ 0, %true98 ], [ 0, %true112 ], [ 1, %cond71 ]
  %return122 = call i64 @"and@III"(i64 %., i64 %isDigit.0)
  %11 = icmp ne i64 %return122, 0
  br i1 %11, label %true123, label %false124

true94:                                           ; preds = %body72
  br i1 %7, label %true98, label %end96

false95:                                          ; preds = %body72
  %return106 = call i64 @"isdigit@IS"(i8* %return84)
  %return107 = call i64 @"not@II"(i64 %return106)
  %return108 = call i64 @"and@III"(i64 1, i64 %return107)
  %12 = icmp ne i64 %return108, 0
  %or.cond = and i1 %12, %7
  br i1 %or.cond, label %true112, label %end96

end96:                                            ; preds = %false95, %true94
  %output119 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond71

true98:                                           ; preds = %true94
  %return103 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @16, i64 0, i64 0), i8* %return29, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @17, i64 0, i64 0))
  call void @"warning@S"(i8* %return103)
  br label %end76

true112:                                          ; preds = %false95
  %return117 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @18, i64 0, i64 0), i8* %return29, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @17, i64 0, i64 0))
  call void @"warning@S"(i8* %return117)
  br label %end76

true123:                                          ; preds = %end76
  %return127 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.0, i64 0)
  %output129 = extractvalue { i8*, i8** } %return127, 1
  %return131 = call i64 @"len@I[S"(i8** %output129)
  br label %cond132

false124:                                         ; preds = %end76
  %output157 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), i64 %return5, double 1.000000e+00)
  %output159 = call i8** @"resize@[SI"(i8** %varxaos_strip.0, i64 0)
  %output162 = call i8** @"resize@[SIS"(i8** %output159, i64 %return5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i64 0, i64 0))
  br label %end125

end125:                                           ; preds = %false124, %end137
  %xaos.0 = phi double* [ %output151, %end137 ], [ %output157, %false124 ]
  %varxaos_strip.1 = phi i8** [ %output154, %end137 ], [ %output162, %false124 ]
  br label %cond163

cond132:                                          ; preds = %body133, %true123
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %true123 ], [ %output146, %body133 ]
  %__impl_foreach_index_2.0 = phi i64 [ 0, %true123 ], [ %output148, %body133 ]
  %return136 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return131)
  %13 = icmp ne i64 %return136, 0
  br i1 %13, label %body133, label %end137

body133:                                          ; preds = %cond132
  %return141 = call i8* @"getcomp@S[SI"(i8** %output129, i64 %__impl_foreach_index_2.0)
  %return144 = call double @"atof@FS"(i8* %return141)
  %return145 = call double @"max@FFF"(double %return144, double 0.000000e+00)
  %output146 = call double* @"append@[FF"(double* %xaos.1, double %return145)
  %output148 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond132

end137:                                           ; preds = %cond132
  %output151 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return5, double 1.000000e+00)
  %output154 = call i8** @"resize@[SIS"(i8** %output129, i64 %return5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i64 0, i64 0))
  br label %end125

cond163:                                          ; preds = %end175, %end125
  %xaos.2 = phi double* [ %xaos.0, %end125 ], [ %xaos.3, %end175 ]
  %varxaos_strip.2 = phi i8** [ %varxaos_strip.1, %end125 ], [ %varxaos_strip.3, %end175 ]
  %trace.0 = phi i64 [ 0, %end125 ], [ %trace.1, %end175 ]
  %j.0 = phi i64 [ 0, %end125 ], [ %output194, %end175 ]
  %return167 = call i64 @"lt@III"(i64 %j.0, i64 %return5)
  %14 = icmp ne i64 %return167, 0
  br i1 %14, label %body164, label %end168

body164:                                          ; preds = %cond163
  %return172 = call i64 @"getcomp@I[II"(i64* %return6, i64 %j.0)
  %return173 = call i64 @"not@II"(i64 %return172)
  %15 = icmp ne i64 %return173, 0
  br i1 %15, label %true174, label %end175

end168:                                           ; preds = %cond163
  %output197 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos_strip.2)
  br label %cond198

true174:                                          ; preds = %body164
  %output179 = sub i64 %j.0, %trace.0
  %return180 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %output179)
  %output182 = extractvalue { double, double* } %return180, 1
  %return187 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.2, i64 %output179)
  %output189 = extractvalue { i8*, i8** } %return187, 1
  %output192 = add i64 %trace.0, 1
  br label %end175

end175:                                           ; preds = %true174, %body164
  %xaos.3 = phi double* [ %output182, %true174 ], [ %xaos.2, %body164 ]
  %varxaos_strip.3 = phi i8** [ %output189, %true174 ], [ %varxaos_strip.2, %body164 ]
  %trace.1 = phi i64 [ %output192, %true174 ], [ %trace.0, %body164 ]
  %output194 = add i64 %j.0, 1
  br label %cond163

cond198:                                          ; preds = %body199, %end168
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %end168 ], [ %output217, %body199 ]
  %k.0 = phi i64 [ 0, %end168 ], [ %output219, %body199 ]
  %return202 = call i64 @"lt@III"(i64 %k.0, i64 %return21)
  %16 = icmp ne i64 %return202, 0
  br i1 %16, label %body199, label %end203

body199:                                          ; preds = %cond198
  %return208 = call double @"getcomp@F[FI"(double* %return7, i64 %i.0)
  %return211 = call double @"getcomp@F[FI"(double* %return7, i64 %k.0)
  %output212 = fmul double %return208, %return211
  %return215 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output216 = fmul double %output212, %return215
  %output217 = call double* @"append@[FF"(double* %IW_xaos.0, double %output216)
  %output219 = add i64 %k.0, 1
  br label %cond198

end203:                                           ; preds = %cond198
  %return221 = call double @"min@F[F"(double* %xaos.2)
  %return223 = call double @"max@F[F"(double* %xaos.2)
  %return224 = fcmp oeq double %return221, %return223
  br i1 %return224, label %true226, label %false227

true226:                                          ; preds = %end203
  %return230 = call double @"min@F[F"(double* %xaos.2)
  %return231 = fcmp oeq double %return230, 1.000000e+00
  br i1 %return231, label %true233, label %false234

false227:                                         ; preds = %end203
  %return250 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output251 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return250)
  %return253 = call i64 @"not@II"(i64 %x_chk.0)
  %17 = icmp ne i64 %return253, 0
  br i1 %17, label %true254, label %end228

end228:                                           ; preds = %false227, %true254, %false234, %true246, %true233
  %x_chk.1 = phi i64 [ %x_chk.0, %true233 ], [ 1, %true246 ], [ %x_chk.0, %false234 ], [ 1, %true254 ], [ %x_chk.0, %false227 ]
  %XAOS_TO.1 = phi double* [ %output239, %true233 ], [ %output243, %true246 ], [ %output243, %false234 ], [ %output251, %true254 ], [ %output251, %false227 ]
  %output257 = add i64 %i.0, 1
  br label %cond

true233:                                          ; preds = %true226
  %return238 = call double* @"create_cdf@[F[F"(double* %return7)
  %output239 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return238)
  br label %end228

false234:                                         ; preds = %true226
  %return242 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output243 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return242)
  %return245 = call i64 @"not@II"(i64 %x_chk.0)
  %18 = icmp ne i64 %return245, 0
  br i1 %18, label %true246, label %end228

true246:                                          ; preds = %false234
  br label %end228

true254:                                          ; preds = %false227
  br label %end228

true262:                                          ; preds = %end25
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return21, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output267 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond269

end263:                                           ; preds = %cond269, %end25
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond269 ], [ %XAOS_TO.0, %end25 ]
  %return336 = call double* @"create_cdf@[F[F"(double* %return7)
  store double* %return336, double** %_bound_IW
  %19 = icmp ne i64 %x_chk.0, 0
  br i1 %19, label %true338, label %end339

cond269:                                          ; preds = %end312, %true262
  %XAOS_TO.3 = phi double* [ %output267, %true262 ], [ %output332, %end312 ]
  %i268.0 = phi i64 [ 0, %true262 ], [ %output334, %end312 ]
  %return273 = call i64 @"lt@III"(i64 %i268.0, i64 %return21)
  %20 = icmp ne i64 %return273, 0
  br i1 %20, label %body270, label %end263

body270:                                          ; preds = %cond269
  %output278 = mul i64 %i268.0, %return21
  %xaos_tos_t279 = load i8**, i8*** %xaos_tos_t
  %output283 = add i64 %output278, %return21
  %return284 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t279, i64 1, i64 %output278, i64 1, i64 %output283, i64 0, i64 0)
  %return287 = call i64 @"len@I[S"(i8** %return284)
  br label %cond288

cond288:                                          ; preds = %body289, %body270
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %body270 ], [ %output302, %body289 ]
  %__impl_foreach_index_3.0 = phi i64 [ 0, %body270 ], [ %output304, %body289 ]
  %return292 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return287)
  %21 = icmp ne i64 %return292, 0
  br i1 %21, label %body289, label %end293

body289:                                          ; preds = %cond288
  %return297 = call i8* @"getcomp@S[SI"(i8** %return284, i64 %__impl_foreach_index_3.0)
  %return300 = call double @"atof@FS"(i8* %return297)
  %return301 = call double @"max@FFF"(double %return300, double 0.000000e+00)
  %output302 = call double* @"append@[FF"(double* %xaos_froms.0, double %return301)
  %output304 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond288

end293:                                           ; preds = %cond288
  br label %cond307

cond307:                                          ; preds = %body308, %end293
  %IW_xaos305.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %end293 ], [ %output326, %body308 ]
  %k306.0 = phi i64 [ 0, %end293 ], [ %output328, %body308 ]
  %return311 = call i64 @"lt@III"(i64 %k306.0, i64 %return21)
  %22 = icmp ne i64 %return311, 0
  br i1 %22, label %body308, label %end312

body308:                                          ; preds = %cond307
  %return317 = call double @"getcomp@F[FI"(double* %return7, i64 %i268.0)
  %return320 = call double @"getcomp@F[FI"(double* %return7, i64 %k306.0)
  %output321 = fmul double %return317, %return320
  %return324 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k306.0)
  %output325 = fmul double %output321, %return324
  %output326 = call double* @"append@[FF"(double* %IW_xaos305.0, double %output325)
  %output328 = add i64 %k306.0, 1
  br label %cond307

end312:                                           ; preds = %cond307
  %return331 = call double* @"create_cdf@[F[F"(double* %IW_xaos305.0)
  %output332 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return331)
  %output334 = add i64 %i268.0, 1
  br label %cond269

true338:                                          ; preds = %end263
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end339

end339:                                           ; preds = %true338, %end263
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind
declare i64* @"detail@[IIS"(i64, i8*) #1

; Function Attrs: nounwind
declare double* @"detail@[FIS"(i64, i8*) #1

; Function Attrs: nounwind
declare i8** @"detail@[SIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #0

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS:S"(i8*, i8*, i8*) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind
declare i64 @"isdigit@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
define void @TFFAxaos(i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<XS>" = alloca i64
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@I[F[F"(i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i64, i64* %"<XS>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @21, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load double*, double** %"<IW>"
  %gvalue2 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), double* %evalue1) #3
  %evalue3 = load double*, double** %"<XST>"
  %gvalue4 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @22, i64 0, i64 0), double* %evalue3) #3
  store i64 %gvalue, i64* @XS
  store double* %gvalue2, double** @IW
  store double* %gvalue4, double** @XST
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
