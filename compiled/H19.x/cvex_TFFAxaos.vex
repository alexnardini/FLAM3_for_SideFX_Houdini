;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [8 x i8] c"../doff\00"
@1 = private constant [7 x i8] c"../rip\00"
@2 = private constant [8 x i8] c"../domb\00"
@3 = private constant [8 x i8] c"../iter\00"
@4 = private constant [7 x i8] c"../f3c\00"
@5 = private constant [13 x i8] c"../flamefunc\00"
@6 = private constant [0 x i64] zeroinitializer
@7 = private constant [0 x double] zeroinitializer
@8 = private constant [0 x i8*] zeroinitializer
@9 = private constant [1 x i8] zeroinitializer
@10 = private constant [12 x i8] c"../vactive_\00"
@11 = private constant [7 x i8] c"../iw_\00"
@12 = private constant [2 x i8] c"1\00"
@13 = private constant [107 x i8] c"\0AAll iterators are inactive or their Weight set to: 0(Zero)\0AOne iterator's Weight internally set to: 1e-08\00"
@14 = private constant [9 x i8] c"../xaos_\00"
@15 = private constant [2 x i8] c":\00"
@16 = private constant [5 x i8] c"XAOS\00"
@17 = private constant [12 x i8] c"\0AIterator: \00"
@18 = private constant [46 x i8] c" -> without a valid \22 xaos: \22 command string.\00"
@19 = private constant [2 x i8] c".\00"
@20 = private constant [2 x i8] c"-\00"
@21 = private constant [40 x i8] c"\0ANegative xaos values inside iterator: \00"
@22 = private constant [62 x i8] c".\0AThis iterator will be reset to a default xaos value of 1's.\00"
@23 = private constant [41 x i8] c"\0ANon digit xaos values inside iterator: \00"
@24 = private constant [6 x i8] c"../xm\00"
@sIDX = external global i8**
@SYS = external global i64*
@XS = external global i64
@IW = external global double*
@XST = external global double*
@25 = private constant [5 x i8] c"sIDX\00"
@26 = private constant [4 x i8] c"SYS\00"
@27 = private constant [3 x i8] c"XS\00"
@28 = private constant [3 x i8] c"IW\00"
@29 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@[S[II[F[F"(i8*** %_bound_sIDX, i64** %_bound_SYS, i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @3, i64 0, i64 0))
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i64 0, i64 0))
  %return10 = call i64* @"array@[I:IIIII"(i64 %return, i64 %return1, i64 %return2, i64 %return3, i64 %return4)
  store i64* %return10, i64** %_bound_SYS
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i64 0, i64 0))
  br label %cond

cond:                                             ; preds = %iter15, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output, %iter15 ]
  %sIDX.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %__llvm_entry ], [ %sIDX.1, %iter15 ]
  %IW.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %__llvm_entry ], [ %IW.1, %iter15 ]
  %va.0 = phi i64* [ getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), %__llvm_entry ], [ %va.1, %iter15 ]
  %return14 = call i64 @"lt@III"(i64 %i.0, i64 %return11)
  %2 = icmp ne i64 %return14, 0
  br i1 %2, label %body, label %end

body:                                             ; preds = %cond
  %output = add i64 %i.0, 1
  %return17 = call i8* @"itoa@SI"(i64 %output)
  %return20 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i64 0, i64 0), i8* %return17)
  %return21 = call i64 @"chi@IS"(i8* %return20)
  %output22 = call i64* @"append@[II"(i64* %va.0, i64 %return21)
  %return24 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @11, i64 0, i64 0), i8* %return17)
  %return25 = call double @"chf@FS"(i8* %return24)
  %return27 = fcmp oeq double %return25, 0.000000e+00
  br i1 %return27, label %true, label %end29

end:                                              ; preds = %cond
  %return51 = call i64 @"len@I[F"(double* %IW.0)
  %return52 = call i64 @"eq@III"(i64 %return51, i64 0)
  %3 = icmp ne i64 %return52, 0
  br i1 %3, label %true53, label %end54

iter15:                                           ; preds = %end29, %end39
  %sIDX.1 = phi i8** [ %sIDX.0, %end29 ], [ %output47, %end39 ]
  %IW.1 = phi double* [ %IW.0, %end29 ], [ %output44, %end39 ]
  br label %cond

true:                                             ; preds = %body
  %return31 = call { i64, i64* } @"setcomp@I[III"(i64* %output22, i64 0, i64 %i.0)
  %output33 = extractvalue { i64, i64* } %return31, 1
  br label %end29

end29:                                            ; preds = %true, %body
  %va.1 = phi i64* [ %output33, %true ], [ %output22, %body ]
  %return36 = call i64 @"getcomp@I[II"(i64* %va.1, i64 %i.0)
  %return37 = call i64 @"not@II"(i64 %return36)
  %4 = icmp ne i64 %return37, 0
  br i1 %4, label %iter15, label %end39

end39:                                            ; preds = %end29
  %output44 = call double* @"append@[FF"(double* %IW.0, double %return25)
  %output47 = call i8** @"append@[SS"(i8** %sIDX.0, i8* %return17)
  br label %iter15

true53:                                           ; preds = %end
  %output56 = call double* @"append@[FF"(double* %IW.0, double 1.000000e-08)
  %output58 = call i8** @"append@[SS"(i8** %sIDX.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  call void @"warning@S"(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @13, i64 0, i64 0))
  br label %end54

end54:                                            ; preds = %true53, %end
  %sIDX.2 = phi i8** [ %output58, %true53 ], [ %sIDX.0, %end ]
  %IW.2 = phi double* [ %output56, %true53 ], [ %IW.0, %end ]
  %return60 = call i64 @"len@I[S"(i8** %sIDX.2)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond62

cond62:                                           ; preds = %end268, %end54
  %x_chk.0 = phi i64 [ 0, %end54 ], [ %x_chk.1, %end268 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end54 ], [ %XAOS_TO.1, %end268 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %end54 ], [ %output237, %end268 ]
  %i61.0 = phi i64 [ 0, %end54 ], [ %output297, %end268 ]
  %return66 = call i64 @"lt@III"(i64 %i61.0, i64 %return60)
  %5 = icmp ne i64 %return66, 0
  br i1 %5, label %body63, label %end67

body63:                                           ; preds = %cond62
  %return71 = call i8* @"getcomp@S[SI"(i8** %sIDX.2, i64 %i61.0)
  %return72 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @14, i64 0, i64 0), i8* %return71)
  %return73 = call i8* @"chs@SS"(i8* %return72)
  %return75 = call i8** @"split@[SSS"(i8* %return73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i64 0, i64 0))
  %return77 = call i64 @"len@I[S"(i8** %return75)
  br label %cond78

end67:                                            ; preds = %cond62
  %return298 = call i64 @"chi@IS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @24, i64 0, i64 0))
  %return301 = call i64 @"and@III"(i64 %return298, i64 %x_chk.0)
  %6 = icmp ne i64 %return301, 0
  br i1 %6, label %true302, label %end303

cond78:                                           ; preds = %body79, %body63
  %varxaos_strip.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), %body63 ], [ %output91, %body79 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %body63 ], [ %output93, %body79 ]
  %return82 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return77)
  %7 = icmp ne i64 %return82, 0
  br i1 %7, label %body79, label %end83

body79:                                           ; preds = %cond78
  %return87 = call i8* @"getcomp@S[SI"(i8** %return75, i64 %__impl_foreach_index.0)
  %return90 = call i8* @"strip@SS"(i8* %return87)
  %output91 = call i8** @"append@[SS"(i8** %varxaos_strip.0, i8* %return90)
  %output93 = add i64 %__impl_foreach_index.0, 1
  br label %cond78

end83:                                            ; preds = %cond78
  %return95 = call i8* @"getcomp@S[SI"(i8** %varxaos_strip.0, i64 0)
  %return96 = call i8* @"toupper@SS"(i8* %return95)
  %return97 = call i64 @"eq@ISS"(i8* %return96, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i64 0, i64 0))
  %8 = icmp ne i64 %return97, 0
  %. = select i1 %8, i64 1, i64 0
  %return101 = call i64 @"not@II"(i64 %.)
  %9 = icmp ne i64 %return101, 0
  br i1 %9, label %true102, label %end103

true102:                                          ; preds = %end83
  %output105 = add i64 %i61.0, 1
  %return106 = call i8* @"itoa@SI"(i64 %output105)
  %return107 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @17, i64 0, i64 0), i8* %return106, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @18, i64 0, i64 0))
  call void @"warning@S"(i8* %return107)
  br label %end103

end103:                                           ; preds = %true102, %end83
  %return109 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return110 = call i64 @"len@I[S"(i8** %return109)
  br label %cond111

cond111:                                          ; preds = %end136, %end103
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end103 ], [ %output159, %end136 ]
  %return115 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return110)
  %10 = icmp ne i64 %return115, 0
  br i1 %10, label %body112, label %end116

body112:                                          ; preds = %cond111
  %return119 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return121 = call i8* @"getcomp@S[SI"(i8** %return119, i64 %__impl_foreach_index_1.0)
  %return123 = call i8** @"split@[SSS"(i8* %return121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i64 0, i64 0))
  %return124 = call i8* @"join@S[SS"(i8** %return123, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @9, i64 0, i64 0))
  %return127 = call i8* @"getcomp@SSI"(i8* %return124, i64 0)
  %return128 = call i64 @"eq@ISS"(i8* %return127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @20, i64 0, i64 0))
  %return129 = call i64 @"and@III"(i64 1, i64 %return128)
  %return131 = call i8* @"slice@SSIIIIII"(i8* %return124, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return132 = call i64 @"isdigit@IS"(i8* %return131)
  %return133 = call i64 @"and@III"(i64 %return129, i64 %return132)
  %11 = icmp ne i64 %return133, 0
  br i1 %11, label %true134, label %false135

end116:                                           ; preds = %true152, %true138, %cond111
  %isDigit.0 = phi i64 [ 0, %true138 ], [ 0, %true152 ], [ 1, %cond111 ]
  %return162 = call i64 @"and@III"(i64 %., i64 %isDigit.0)
  %12 = icmp ne i64 %return162, 0
  br i1 %12, label %true163, label %false164

true134:                                          ; preds = %body112
  br i1 %8, label %true138, label %end136

false135:                                         ; preds = %body112
  %return146 = call i64 @"isdigit@IS"(i8* %return124)
  %return147 = call i64 @"not@II"(i64 %return146)
  %return148 = call i64 @"and@III"(i64 1, i64 %return147)
  %13 = icmp ne i64 %return148, 0
  %or.cond = and i1 %13, %8
  br i1 %or.cond, label %true152, label %end136

end136:                                           ; preds = %false135, %true134
  %output159 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond111

true138:                                          ; preds = %true134
  %output141 = add i64 %i61.0, 1
  %return142 = call i8* @"itoa@SI"(i64 %output141)
  %return143 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @21, i64 0, i64 0), i8* %return142, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @22, i64 0, i64 0))
  call void @"warning@S"(i8* %return143)
  br label %end116

true152:                                          ; preds = %false135
  %output155 = add i64 %i61.0, 1
  %return156 = call i8* @"itoa@SI"(i64 %output155)
  %return157 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @23, i64 0, i64 0), i8* %return156, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @22, i64 0, i64 0))
  call void @"warning@S"(i8* %return157)
  br label %end116

true163:                                          ; preds = %end116
  %return167 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.0, i64 0)
  %output169 = extractvalue { i8*, i8** } %return167, 1
  %return171 = call i64 @"len@I[S"(i8** %output169)
  br label %cond172

false164:                                         ; preds = %end116
  %output197 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), i64 %return11, double 1.000000e+00)
  %output199 = call i8** @"resize@[SI"(i8** %varxaos_strip.0, i64 0)
  %output202 = call i8** @"resize@[SIS"(i8** %output199, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  br label %end165

end165:                                           ; preds = %false164, %end177
  %xaos.0 = phi double* [ %output191, %end177 ], [ %output197, %false164 ]
  %varxaos_strip.1 = phi i8** [ %output194, %end177 ], [ %output202, %false164 ]
  br label %cond203

cond172:                                          ; preds = %body173, %true163
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %true163 ], [ %output186, %body173 ]
  %__impl_foreach_index_2.0 = phi i64 [ 0, %true163 ], [ %output188, %body173 ]
  %return176 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return171)
  %14 = icmp ne i64 %return176, 0
  br i1 %14, label %body173, label %end177

body173:                                          ; preds = %cond172
  %return181 = call i8* @"getcomp@S[SI"(i8** %output169, i64 %__impl_foreach_index_2.0)
  %return184 = call double @"atof@FS"(i8* %return181)
  %return185 = call double @"max@FFF"(double %return184, double 0.000000e+00)
  %output186 = call double* @"append@[FF"(double* %xaos.1, double %return185)
  %output188 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond172

end177:                                           ; preds = %cond172
  %output191 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return11, double 1.000000e+00)
  %output194 = call i8** @"resize@[SIS"(i8** %output169, i64 %return11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i64 0, i64 0))
  br label %end165

cond203:                                          ; preds = %end215, %end165
  %xaos.2 = phi double* [ %xaos.0, %end165 ], [ %xaos.3, %end215 ]
  %varxaos_strip.2 = phi i8** [ %varxaos_strip.1, %end165 ], [ %varxaos_strip.3, %end215 ]
  %trace.0 = phi i64 [ 0, %end165 ], [ %trace.1, %end215 ]
  %j.0 = phi i64 [ 0, %end165 ], [ %output234, %end215 ]
  %return207 = call i64 @"lt@III"(i64 %j.0, i64 %return11)
  %15 = icmp ne i64 %return207, 0
  br i1 %15, label %body204, label %end208

body204:                                          ; preds = %cond203
  %return212 = call i64 @"getcomp@I[II"(i64* %va.0, i64 %j.0)
  %return213 = call i64 @"not@II"(i64 %return212)
  %16 = icmp ne i64 %return213, 0
  br i1 %16, label %true214, label %end215

end208:                                           ; preds = %cond203
  %output237 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos_strip.2)
  br label %cond238

true214:                                          ; preds = %body204
  %output219 = sub i64 %j.0, %trace.0
  %return220 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %output219)
  %output222 = extractvalue { double, double* } %return220, 1
  %return227 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.2, i64 %output219)
  %output229 = extractvalue { i8*, i8** } %return227, 1
  %output232 = add i64 %trace.0, 1
  br label %end215

end215:                                           ; preds = %true214, %body204
  %xaos.3 = phi double* [ %output222, %true214 ], [ %xaos.2, %body204 ]
  %varxaos_strip.3 = phi i8** [ %output229, %true214 ], [ %varxaos_strip.2, %body204 ]
  %trace.1 = phi i64 [ %output232, %true214 ], [ %trace.0, %body204 ]
  %output234 = add i64 %j.0, 1
  br label %cond203

cond238:                                          ; preds = %body239, %end208
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end208 ], [ %output257, %body239 ]
  %k.0 = phi i64 [ 0, %end208 ], [ %output259, %body239 ]
  %return242 = call i64 @"lt@III"(i64 %k.0, i64 %return60)
  %17 = icmp ne i64 %return242, 0
  br i1 %17, label %body239, label %end243

body239:                                          ; preds = %cond238
  %return248 = call double @"getcomp@F[FI"(double* %IW.2, i64 %i61.0)
  %return251 = call double @"getcomp@F[FI"(double* %IW.2, i64 %k.0)
  %output252 = fmul double %return248, %return251
  %return255 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output256 = fmul double %output252, %return255
  %output257 = call double* @"append@[FF"(double* %IW_xaos.0, double %output256)
  %output259 = add i64 %k.0, 1
  br label %cond238

end243:                                           ; preds = %cond238
  %return261 = call double @"min@F[F"(double* %xaos.2)
  %return263 = call double @"max@F[F"(double* %xaos.2)
  %return264 = fcmp oeq double %return261, %return263
  br i1 %return264, label %true266, label %false267

true266:                                          ; preds = %end243
  %return270 = call double @"min@F[F"(double* %xaos.2)
  %return271 = fcmp oeq double %return270, 1.000000e+00
  br i1 %return271, label %true273, label %false274

false267:                                         ; preds = %end243
  %return290 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output291 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return290)
  %return293 = call i64 @"not@II"(i64 %x_chk.0)
  %18 = icmp ne i64 %return293, 0
  br i1 %18, label %true294, label %end268

end268:                                           ; preds = %false267, %true294, %false274, %true286, %true273
  %x_chk.1 = phi i64 [ %x_chk.0, %true273 ], [ 1, %true286 ], [ %x_chk.0, %false274 ], [ 1, %true294 ], [ %x_chk.0, %false267 ]
  %XAOS_TO.1 = phi double* [ %output279, %true273 ], [ %output283, %true286 ], [ %output283, %false274 ], [ %output291, %true294 ], [ %output291, %false267 ]
  %output297 = add i64 %i61.0, 1
  br label %cond62

true273:                                          ; preds = %true266
  %return278 = call double* @"create_cdf@[F[F"(double* %IW.2)
  %output279 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return278)
  br label %end268

false274:                                         ; preds = %true266
  %return282 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output283 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return282)
  %return285 = call i64 @"not@II"(i64 %x_chk.0)
  %19 = icmp ne i64 %return285, 0
  br i1 %19, label %true286, label %end268

true286:                                          ; preds = %false274
  br label %end268

true294:                                          ; preds = %false267
  br label %end268

true302:                                          ; preds = %end67
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return60, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output307 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond309

end303:                                           ; preds = %cond309, %end67
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond309 ], [ %XAOS_TO.0, %end67 ]
  store i8** %sIDX.2, i8*** %_bound_sIDX
  %return377 = call double* @"create_cdf@[F[F"(double* %IW.2)
  store double* %return377, double** %_bound_IW
  %20 = icmp ne i64 %x_chk.0, 0
  br i1 %20, label %true379, label %end380

cond309:                                          ; preds = %end352, %true302
  %XAOS_TO.3 = phi double* [ %output307, %true302 ], [ %output372, %end352 ]
  %i308.0 = phi i64 [ 0, %true302 ], [ %output374, %end352 ]
  %return313 = call i64 @"lt@III"(i64 %i308.0, i64 %return60)
  %21 = icmp ne i64 %return313, 0
  br i1 %21, label %body310, label %end303

body310:                                          ; preds = %cond309
  %output318 = mul i64 %i308.0, %return60
  %xaos_tos_t319 = load i8**, i8*** %xaos_tos_t
  %output323 = add i64 %output318, %return60
  %return324 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t319, i64 1, i64 %output318, i64 1, i64 %output323, i64 0, i64 0)
  %return327 = call i64 @"len@I[S"(i8** %return324)
  br label %cond328

cond328:                                          ; preds = %body329, %body310
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %body310 ], [ %output342, %body329 ]
  %__impl_foreach_index_3.0 = phi i64 [ 0, %body310 ], [ %output344, %body329 ]
  %return332 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return327)
  %22 = icmp ne i64 %return332, 0
  br i1 %22, label %body329, label %end333

body329:                                          ; preds = %cond328
  %return337 = call i8* @"getcomp@S[SI"(i8** %return324, i64 %__impl_foreach_index_3.0)
  %return340 = call double @"atof@FS"(i8* %return337)
  %return341 = call double @"max@FFF"(double %return340, double 0.000000e+00)
  %output342 = call double* @"append@[FF"(double* %xaos_froms.0, double %return341)
  %output344 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond328

end333:                                           ; preds = %cond328
  br label %cond347

cond347:                                          ; preds = %body348, %end333
  %IW_xaos345.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), %end333 ], [ %output366, %body348 ]
  %k346.0 = phi i64 [ 0, %end333 ], [ %output368, %body348 ]
  %return351 = call i64 @"lt@III"(i64 %k346.0, i64 %return60)
  %23 = icmp ne i64 %return351, 0
  br i1 %23, label %body348, label %end352

body348:                                          ; preds = %cond347
  %return357 = call double @"getcomp@F[FI"(double* %IW.2, i64 %i308.0)
  %return360 = call double @"getcomp@F[FI"(double* %IW.2, i64 %k346.0)
  %output361 = fmul double %return357, %return360
  %return364 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k346.0)
  %output365 = fmul double %output361, %return364
  %output366 = call double* @"append@[FF"(double* %IW_xaos345.0, double %output365)
  %output368 = add i64 %k346.0, 1
  br label %cond347

end352:                                           ; preds = %cond347
  %return371 = call double* @"create_cdf@[F[F"(double* %IW_xaos345.0)
  %output372 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return371)
  %output374 = add i64 %i308.0, 1
  br label %cond309

true379:                                          ; preds = %end303
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end380

end380:                                           ; preds = %true379, %end303
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"itoa@SI"(i64) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i64* @"append@[II"(i64*, i64) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare { i64, i64* } @"setcomp@I[III"(i64*, i64, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #0

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #0

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS:S"(i8*, i8*, i8*) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind
declare i64 @"isdigit@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
define void @TFFAxaos(i8** %sIDX, i64* %SYS, i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<SYS>" = alloca i64*
  %"<XS>" = alloca i64
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<sIDX>" = alloca i8**
  store i8** %sIDX, i8*** %"<sIDX>"
  store i64* %SYS, i64** %"<SYS>"
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@[S[II[F[F"(i8*** %"<sIDX>", i64** %"<SYS>", i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i8**, i8*** %"<sIDX>"
  %gvalue = call i8** @"_export@[SS[S"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @25, i64 0, i64 0), i8** %evalue) #3
  %evalue1 = load i64*, i64** %"<SYS>"
  %gvalue2 = call i64* @"_export@[IS[I"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @26, i64 0, i64 0), i64* %evalue1) #3
  %evalue3 = load i64, i64* %"<XS>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @27, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load double*, double** %"<IW>"
  %gvalue6 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @28, i64 0, i64 0), double* %evalue5) #3
  %evalue7 = load double*, double** %"<XST>"
  %gvalue8 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @29, i64 0, i64 0), double* %evalue7) #3
  store i8** %gvalue, i8*** @sIDX
  store i64* %gvalue2, i64** @SYS
  store i64 %gvalue4, i64* @XS
  store double* %gvalue6, double** @IW
  store double* %gvalue8, double** @XST
  ret void
}

declare i8** @"_export@[SS[S"(i8*, i8**)

declare i64* @"_export@[IS[I"(i8*, i64*)

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @8, i64 0, i64 0), i64* getelementptr inbounds ([0 x i64], [0 x i64]* @6, i64 0, i64 0), i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @7, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
