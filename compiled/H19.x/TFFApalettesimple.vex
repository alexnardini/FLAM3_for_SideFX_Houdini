;_name	TFFApalettesimple
; ModuleID = 'TFFApalettesimple'
source_filename = "TFFApalettesimple"

@0 = private constant [8 x i8] c"../domb\00"
@1 = private constant [9 x i8] c"../vizmb\00"
@2 = private constant [14 x i8] c"../palettehsv\00"
@Alpha = external global double
@Cd = external global <3 x double>
@3 = private constant [6 x i8] c"Alpha\00"
@4 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"_TFFApalettesimple@FFVF"(double* %_bound_clr, double* %_bound_Alpha, <3 x double>* %_bound_Cd, double* %_bound_mb_mod) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i64 0, i64 0))
  %_bound_clr2 = load double, double* %_bound_clr
  %_bound_Alpha3 = load double, double* %_bound_Alpha
  %_bound_mb_mod4 = load double, double* %_bound_mb_mod
  %return6 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i64 0, i64 0), double %_bound_clr2)
  %return9 = call i64 @"and@III"(i64 %return, i64 %return1)
  %0 = icmp ne i64 %return9, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %cast = call <3 x double> @"set@VF"(double %_bound_mb_mod4)
  %output = call <3 x double> @"mul@VV"(<3 x double> %return6, <3 x double> %cast)
  %output14 = fmul double %_bound_Alpha3, %_bound_mb_mod4
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %color.0 = phi <3 x double> [ %output, %true ], [ %return6, %__llvm_entry ]
  %alpha.0 = phi double [ %output14, %true ], [ %_bound_Alpha3, %__llvm_entry ]
  store <3 x double> %color.0, <3 x double>* %_bound_Cd
  store double %alpha.0, double* %_bound_Alpha
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chramp@VSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @TFFApalettesimple(double %clr, double %Alpha, <3 x double> %Cd, double %mb_mod) #2 {
__llvm_entry:
  %"<Alpha>" = alloca double
  %"<Cd>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  store double %Alpha, double* %"<Alpha>"
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store double %clr, double* %0
  store double %mb_mod, double* %1
  call void @"_TFFApalettesimple@FFVF"(double* %0, double* %"<Alpha>", <3 x double>* %"<Cd>", double* %1)
  %evalue = load double, double* %"<Alpha>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i64 0, i64 0), double %evalue) #3
  %evalue3 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue3) #3
  store double %gvalue, double* @Alpha
  store <3 x double> %gvalue4, <3 x double>* @Cd
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFApalettesimple(double 0.000000e+00, double 0.000000e+00, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.5.435"}
!2 = !{!"64"}

;_code_end
