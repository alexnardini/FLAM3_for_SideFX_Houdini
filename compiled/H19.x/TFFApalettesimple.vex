;_name	TFFApalettesimple
; ModuleID = 'TFFApalettesimple'
source_filename = "TFFApalettesimple"

@0 = private constant [7 x i8] c"../hsv\00"
@1 = private constant [8 x i8] c"../domb\00"
@2 = private constant [9 x i8] c"../vizmb\00"
@3 = private constant [11 x i8] c"../palette\00"
@Alpha = external global double
@Cd = external global <3 x double>
@4 = private constant [6 x i8] c"Alpha\00"
@5 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"_TFFApalettesimple@FFVF"(double* %_bound_clr, double* %_bound_Alpha, <3 x double>* %_bound_Cd, double* %_bound_mb_mod) #0 {
__llvm_entry:
  %_bound_mb_mod1 = load double, double* %_bound_mb_mod
  %return = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  %_bound_clr4 = load double, double* %_bound_clr
  %_bound_Alpha5 = load double, double* %_bound_Alpha
  %return7 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), double %_bound_clr4)
  %return9 = call double @"getcomp@FVI"(<3 x double> %return, i64 0)
  %return10 = fcmp one double %return9, 0.000000e+00
  %return11 = zext i1 %return10 to i64
  %return13 = call double @"getcomp@FVI"(<3 x double> %return, i64 1)
  %return14 = fcmp one double %return13, 1.000000e+00
  %return15 = zext i1 %return14 to i64
  %return16 = call i64 @"or@III"(i64 %return11, i64 %return15)
  %return18 = call double @"getcomp@FVI"(<3 x double> %return, i64 2)
  %return19 = fcmp one double %return18, 1.000000e+00
  %return20 = zext i1 %return19 to i64
  %return21 = call i64 @"or@III"(i64 %return16, i64 %return20)
  %0 = icmp ne i64 %return21, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return23 = call <3 x double> @"rgbtohsv@VV"(<3 x double> %return7)
  %return25 = call double @"getcomp@FVI"(<3 x double> %return23, i64 0)
  %output = fadd double %return25, %return9
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return23, double %output, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  %return32 = call double @"getcomp@FVI"(<3 x double> %output30, i64 1)
  %output35 = fmul double %return32, %return13
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output35, i64 1)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  %return41 = call double @"getcomp@FVI"(<3 x double> %output39, i64 2)
  %output44 = fmul double %return41, %return18
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output39, double %output44, i64 2)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  %return50 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %output48)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %color.0 = phi <3 x double> [ %return50, %true ], [ %return7, %__llvm_entry ]
  %return53 = call i64 @"and@III"(i64 %return2, i64 %return3)
  %1 = icmp ne i64 %return53, 0
  br i1 %1, label %true54, label %end55

true54:                                           ; preds = %end
  %cast = call <3 x double> @"set@VF"(double %_bound_mb_mod1)
  %output58 = call <3 x double> @"mul@VV"(<3 x double> %color.0, <3 x double> %cast)
  %output61 = fmul double %_bound_Alpha5, %_bound_mb_mod1
  br label %end55

end55:                                            ; preds = %true54, %end
  %color.1 = phi <3 x double> [ %output58, %true54 ], [ %color.0, %end ]
  %alpha.0 = phi double [ %output61, %true54 ], [ %_bound_Alpha5, %end ]
  store <3 x double> %color.1, <3 x double>* %_bound_Cd
  store double %alpha.0, double* %_bound_Alpha
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chramp@VSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"rgbtohsv@VV"(<3 x double>) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"hsvtorgb@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @TFFApalettesimple(double %clr, double %Alpha, <3 x double> %Cd, double %mb_mod) #3 {
__llvm_entry:
  %"<Alpha>" = alloca double
  %"<Cd>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  store double %Alpha, double* %"<Alpha>"
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store double %clr, double* %0
  store double %mb_mod, double* %1
  call void @"_TFFApalettesimple@FFVF"(double* %0, double* %"<Alpha>", <3 x double>* %"<Cd>", double* %1)
  %evalue = load double, double* %"<Alpha>"
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @4, i64 0, i64 0), double %evalue) #4
  %evalue3 = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue4 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0), <3 x double> %evalue3) #4
  store double %gvalue, double* @Alpha
  store <3 x double> %gvalue4, <3 x double>* @Cd
  ret void
}

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFApalettesimple(double 0.000000e+00, double 0.000000e+00, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.5.435"}
!2 = !{!"64"}

;_code_end
