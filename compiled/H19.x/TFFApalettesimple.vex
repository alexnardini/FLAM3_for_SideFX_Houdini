;_name	TFFApalettesimple
; ModuleID = 'TFFApalettesimple'
source_filename = "TFFApalettesimple"

@0 = private constant [15 x i8] c"../palettehsv_\00"
@1 = private constant [8 x i8] c"../domb\00"
@2 = private constant [9 x i8] c"../vizmb\00"
@3 = private constant [11 x i8] c"../palette\00"
@Cd = external global <3 x double>
@4 = private constant [3 x i8] c"Cd\00"

; Function Attrs: alwaysinline nounwind
define private void @"_TFFApalettesimple@FVF"(double* %_bound_clr, <3 x double>* %_bound_Cd, double* %_bound_mb_modulate) #0 {
__llvm_entry:
  %return = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i64 0, i64 0))
  %return2 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i64 0, i64 0))
  %_bound_clr3 = load double, double* %_bound_clr
  %return5 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i64 0, i64 0), double %_bound_clr3)
  %return7 = call double @"getcomp@FVI"(<3 x double> %return, i64 0)
  %return8 = fcmp one double %return7, 0.000000e+00
  %return9 = zext i1 %return8 to i64
  %return11 = call double @"getcomp@FVI"(<3 x double> %return, i64 1)
  %return12 = fcmp one double %return11, 1.000000e+00
  %return13 = zext i1 %return12 to i64
  %return14 = call i64 @"or@III"(i64 %return9, i64 %return13)
  %return16 = call double @"getcomp@FVI"(<3 x double> %return, i64 2)
  %return17 = fcmp one double %return16, 1.000000e+00
  %return18 = zext i1 %return17 to i64
  %return19 = call i64 @"or@III"(i64 %return14, i64 %return18)
  %0 = icmp ne i64 %return19, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return21 = call <3 x double> @"rgbtohsv@VV"(<3 x double> %return5)
  %return23 = call double @"getcomp@FVI"(<3 x double> %return21, i64 0)
  %output = fadd double %return23, %return7
  %return26 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return21, double %output, i64 0)
  %output28 = extractvalue { double, <3 x double> } %return26, 1
  %return30 = call double @"getcomp@FVI"(<3 x double> %output28, i64 1)
  %output33 = fmul double %return30, %return11
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output28, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  %return39 = call double @"getcomp@FVI"(<3 x double> %output37, i64 2)
  %output42 = fmul double %return39, %return16
  %return44 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output37, double %output42, i64 2)
  %output46 = extractvalue { double, <3 x double> } %return44, 1
  %return48 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %output46)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %color.0 = phi <3 x double> [ %return48, %true ], [ %return5, %__llvm_entry ]
  %return51 = call i64 @"and@III"(i64 %return1, i64 %return2)
  %1 = icmp ne i64 %return51, 0
  br i1 %1, label %true52, label %end53

true52:                                           ; preds = %end
  %_bound_mb_modulate55 = load double, double* %_bound_mb_modulate
  %cast = call <3 x double> @"set@VF"(double %_bound_mb_modulate55)
  %output56 = call <3 x double> @"mul@VV"(<3 x double> %color.0, <3 x double> %cast)
  br label %end53

end53:                                            ; preds = %true52, %end
  %color.1 = phi <3 x double> [ %output56, %true52 ], [ %color.0, %end ]
  store <3 x double> %color.1, <3 x double>* %_bound_Cd
  ret void
}

; Function Attrs: nounwind readnone
declare <3 x double> @"chv@VS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"chramp@VSF"(i8*, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"rgbtohsv@VV"(<3 x double>) #1

; Function Attrs: alwaysinline
define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) #2 {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"hsvtorgb@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
define void @TFFApalettesimple(double %clr, <3 x double> %Cd, double %mb_modulate) #3 {
__llvm_entry:
  %"<Cd>" = alloca <3 x double>
  %0 = alloca double
  %1 = alloca double
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store double %clr, double* %0
  store double %mb_modulate, double* %1
  call void @"_TFFApalettesimple@FVF"(double* %0, <3 x double>* %"<Cd>", double* %1)
  %evalue = load <3 x double>, <3 x double>* %"<Cd>"
  %gvalue = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i64 0, i64 0), <3 x double> %evalue) #4
  store <3 x double> %gvalue, <3 x double>* @Cd
  ret void
}

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFApalettesimple(double 0.000000e+00, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, double 0.000000e+00)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { alwaysinline }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.622"}
!2 = !{!"64"}

;_code_end
