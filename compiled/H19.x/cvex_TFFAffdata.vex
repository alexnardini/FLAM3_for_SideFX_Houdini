;_name	TFFAxformsdata
; ModuleID = 'TFFAxformsdata'
source_filename = "TFFAxformsdata"

@0 = private constant [13 x i8] c"ffpre1weight\00"
@1 = private constant [11 x i8] c"ffpre1type\00"
@2 = private constant [11 x i8] c"ffv1weight\00"
@3 = private constant [9 x i8] c"ffv1type\00"
@4 = private constant [11 x i8] c"ffv2weight\00"
@5 = private constant [9 x i8] c"ffv2type\00"
@6 = private constant [11 x i8] c"ffp1weight\00"
@7 = private constant [9 x i8] c"ffp1type\00"
@8 = private constant [11 x i8] c"ffp2weight\00"
@9 = private constant [9 x i8] c"ffp2type\00"
@10 = private constant [4 x i8] c"ffx\00"
@11 = private constant [4 x i8] c"ffy\00"
@12 = private constant [6 x i8] c"ffang\00"
@13 = private constant [4 x i8] c"ffo\00"
@14 = private constant [9 x i8] c"ffdopost\00"
@15 = private constant [5 x i8] c"ffpx\00"
@16 = private constant [5 x i8] c"ffpy\00"
@17 = private constant [7 x i8] c"ffpang\00"
@18 = private constant [5 x i8] c"ffpo\00"
@PFF = external global i64
@fp1t = external global i64
@fv1t = external global i64
@fv2t = external global i64
@fP1t = external global i64
@fP2t = external global i64
@fp1w = external global double
@fv1w = external global double
@fv2w = external global double
@fP1w = external global double
@fP2w = external global double
@FX = external global <2 x double>
@FY = external global <2 x double>
@FO = external global <2 x double>
@PFX = external global <2 x double>
@PFY = external global <2 x double>
@PFO = external global <2 x double>
@19 = private constant [4 x i8] c"PFF\00"
@20 = private constant [5 x i8] c"fp1t\00"
@21 = private constant [5 x i8] c"fv1t\00"
@22 = private constant [5 x i8] c"fv2t\00"
@23 = private constant [5 x i8] c"fP1t\00"
@24 = private constant [5 x i8] c"fP2t\00"
@25 = private constant [5 x i8] c"fp1w\00"
@26 = private constant [5 x i8] c"fv1w\00"
@27 = private constant [5 x i8] c"fv2w\00"
@28 = private constant [5 x i8] c"fP1w\00"
@29 = private constant [5 x i8] c"fP2w\00"
@30 = private constant [3 x i8] c"FX\00"
@31 = private constant [3 x i8] c"FY\00"
@32 = private constant [3 x i8] c"FO\00"
@33 = private constant [4 x i8] c"PFX\00"
@34 = private constant [4 x i8] c"PFY\00"
@35 = private constant [4 x i8] c"PFO\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: alwaysinline nounwind
define private void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %x, <2 x double>* %y, double* %ang) #2 {
__llvm_entry:
  %x1 = load <2 x double>, <2 x double>* %x
  %y2 = load <2 x double>, <2 x double>* %y
  %return = call <4 x double> @"set@2UU"(<2 x double> %x1, <2 x double> %y2)
  store <4 x double> %return, <4 x double>* %m2
  %ang4 = load double, double* %ang
  %output = call <4 x double> @"rotate@2F"(<4 x double> %return, double %ang4)
  store <4 x double> %output, <4 x double>* %m2
  ret void
}

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxformsdata@IIIIIIFFFFFUUUUUU"(i64* %_bound_PFF, i64* %_bound_fp1t, i64* %_bound_fv1t, i64* %_bound_fv2t, i64* %_bound_fP1t, i64* %_bound_fP2t, double* %_bound_fp1w, double* %_bound_fv1w, double* %_bound_fv2w, double* %_bound_fP1w, double* %_bound_fP2w, <2 x double>* %_bound_FX, <2 x double>* %_bound_FY, <2 x double>* %_bound_FO, <2 x double>* %_bound_PFX, <2 x double>* %_bound_PFY, <2 x double>* %_bound_PFO) #2 {
__llvm_entry:
  %_m2 = alloca <4 x double>
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca <2 x double>
  %4 = alloca <2 x double>
  %5 = alloca double
  store <4 x double> zeroinitializer, <4 x double>* %_m2, !vex-initializer-store !3
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i64 0, i64 0))
  %return2 = fcmp ogt double %return, 0.000000e+00
  br i1 %return2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i64 0, i64 0))
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %fp1t.0 = phi i64 [ %return4, %true ], [ 0, %__llvm_entry ]
  %return5 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i64 0, i64 0))
  %return7 = fcmp one double %return5, 0.000000e+00
  br i1 %return7, label %true9, label %end10

true9:                                            ; preds = %end
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @3, i64 0, i64 0))
  br label %end10

end10:                                            ; preds = %true9, %end
  %fv1t.0 = phi i64 [ %return11, %true9 ], [ 0, %end ]
  %return12 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @4, i64 0, i64 0))
  %return14 = fcmp one double %return12, 0.000000e+00
  br i1 %return14, label %true16, label %end17

true16:                                           ; preds = %end10
  %return18 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0))
  br label %end17

end17:                                            ; preds = %true16, %end10
  %fv2t.0 = phi i64 [ %return18, %true16 ], [ 0, %end10 ]
  %return19 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @6, i64 0, i64 0))
  %return21 = fcmp ogt double %return19, 0.000000e+00
  br i1 %return21, label %true23, label %end24

true23:                                           ; preds = %end17
  %return25 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @7, i64 0, i64 0))
  br label %end24

end24:                                            ; preds = %true23, %end17
  %fP1t.0 = phi i64 [ %return25, %true23 ], [ 0, %end17 ]
  %return26 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @8, i64 0, i64 0))
  %return28 = fcmp ogt double %return26, 0.000000e+00
  br i1 %return28, label %true30, label %end31

true30:                                           ; preds = %end24
  %return32 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @9, i64 0, i64 0))
  br label %end31

end31:                                            ; preds = %true30, %end24
  %fP2t.0 = phi i64 [ %return32, %true30 ], [ 0, %end24 ]
  %return33 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @10, i64 0, i64 0))
  %return34 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @11, i64 0, i64 0))
  %return35 = call double @"chf@FS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @12, i64 0, i64 0))
  %return37 = fcmp one double %return35, 0.000000e+00
  br i1 %return37, label %true39, label %end40

true39:                                           ; preds = %end31
  store <2 x double> %return33, <2 x double>* %0
  store <2 x double> %return34, <2 x double>* %1
  %return44 = call double @"radians@FF"(double %return35)
  %return45 = call double @"neg@FF"(double %return44)
  store double %return45, double* %2
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %0, <2 x double>* %1, double* %2)
  %_m246 = load <4 x double>, <4 x double>* %_m2
  %return47 = call double @"getcomp@F2II"(<4 x double> %_m246, i64 0, i64 0)
  %return49 = call double @"getcomp@F2II"(<4 x double> %_m246, i64 0, i64 1)
  %return50 = call <2 x double> @"set@UFF"(double %return47, double %return49)
  %return52 = call double @"getcomp@F2II"(<4 x double> %_m246, i64 1, i64 0)
  %return54 = call double @"getcomp@F2II"(<4 x double> %_m246, i64 1, i64 1)
  %return55 = call <2 x double> @"set@UFF"(double %return52, double %return54)
  br label %end40

end40:                                            ; preds = %true39, %end31
  %_x.0 = phi <2 x double> [ %return50, %true39 ], [ %return33, %end31 ]
  %_y.0 = phi <2 x double> [ %return55, %true39 ], [ %return34, %end31 ]
  %return58 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @13, i64 0, i64 0))
  %return59 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @14, i64 0, i64 0))
  %6 = icmp ne i64 %return59, 0
  br i1 %6, label %true61, label %end62

true61:                                           ; preds = %end40
  %return63 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @15, i64 0, i64 0))
  %return64 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @16, i64 0, i64 0))
  %return65 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @17, i64 0, i64 0))
  %return67 = fcmp one double %return65, 0.000000e+00
  br i1 %return67, label %true69, label %end70

end62:                                            ; preds = %end70, %end40
  %pfx.0 = phi <2 x double> [ %_x.1, %end70 ], [ zeroinitializer, %end40 ]
  %pfy.0 = phi <2 x double> [ %_y.1, %end70 ], [ zeroinitializer, %end40 ]
  %pfo.0 = phi <2 x double> [ %return88, %end70 ], [ zeroinitializer, %end40 ]
  store i64 %return59, i64* %_bound_PFF
  store i64 %fp1t.0, i64* %_bound_fp1t
  store i64 %fv1t.0, i64* %_bound_fv1t
  store i64 %fv2t.0, i64* %_bound_fv2t
  store i64 %fP1t.0, i64* %_bound_fP1t
  store i64 %fP2t.0, i64* %_bound_fP2t
  store double %return, double* %_bound_fp1w
  store double %return5, double* %_bound_fv1w
  store double %return12, double* %_bound_fv2w
  store double %return19, double* %_bound_fP1w
  store double %return26, double* %_bound_fP2w
  store <2 x double> %_x.0, <2 x double>* %_bound_FX
  store <2 x double> %_y.0, <2 x double>* %_bound_FY
  store <2 x double> %return58, <2 x double>* %_bound_FO
  store <2 x double> %pfx.0, <2 x double>* %_bound_PFX
  store <2 x double> %pfy.0, <2 x double>* %_bound_PFY
  store <2 x double> %pfo.0, <2 x double>* %_bound_PFO
  ret void

true69:                                           ; preds = %true61
  store <2 x double> %return63, <2 x double>* %3
  store <2 x double> %return64, <2 x double>* %4
  %return74 = call double @"radians@FF"(double %return65)
  %return75 = call double @"neg@FF"(double %return74)
  store double %return75, double* %5
  call void @"affineRot@2UUF"(<4 x double>* %_m2, <2 x double>* %3, <2 x double>* %4, double* %5)
  %_m276 = load <4 x double>, <4 x double>* %_m2
  %return77 = call double @"getcomp@F2II"(<4 x double> %_m276, i64 0, i64 0)
  %return79 = call double @"getcomp@F2II"(<4 x double> %_m276, i64 0, i64 1)
  %return80 = call <2 x double> @"set@UFF"(double %return77, double %return79)
  %return82 = call double @"getcomp@F2II"(<4 x double> %_m276, i64 1, i64 0)
  %return84 = call double @"getcomp@F2II"(<4 x double> %_m276, i64 1, i64 1)
  %return85 = call <2 x double> @"set@UFF"(double %return82, double %return84)
  br label %end70

end70:                                            ; preds = %true69, %true61
  %_x.1 = phi <2 x double> [ %return80, %true69 ], [ %return63, %true61 ]
  %_y.1 = phi <2 x double> [ %return85, %true69 ], [ %return64, %true61 ]
  %return88 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @18, i64 0, i64 0))
  br label %end62
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #0

; Function Attrs: nounwind
declare double @"radians@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@F2II"(<4 x double>, i64, i64) #0

; Function Attrs: nounwind
define void @TFFAxformsdata(i64 %PFF, i64 %fp1t, i64 %fv1t, i64 %fv2t, i64 %fP1t, i64 %fP2t, double %fp1w, double %fv1w, double %fv2w, double %fP1w, double %fP2w, <2 x double> %FX, <2 x double> %FY, <2 x double> %FO, <2 x double> %PFX, <2 x double> %PFY, <2 x double> %PFO) #1 {
__llvm_entry:
  %"<fp1t>" = alloca i64
  %"<fv1t>" = alloca i64
  %"<fv2t>" = alloca i64
  %"<fP1t>" = alloca i64
  %"<fP2t>" = alloca i64
  %"<fp1w>" = alloca double
  %"<fv1w>" = alloca double
  %"<fv2w>" = alloca double
  %"<fP1w>" = alloca double
  %"<fP2w>" = alloca double
  %"<FX>" = alloca <2 x double>
  %"<FY>" = alloca <2 x double>
  %"<FO>" = alloca <2 x double>
  %"<PFX>" = alloca <2 x double>
  %"<PFY>" = alloca <2 x double>
  %"<PFO>" = alloca <2 x double>
  %"<PFF>" = alloca i64
  store i64 %PFF, i64* %"<PFF>"
  store i64 %fp1t, i64* %"<fp1t>"
  store i64 %fv1t, i64* %"<fv1t>"
  store i64 %fv2t, i64* %"<fv2t>"
  store i64 %fP1t, i64* %"<fP1t>"
  store i64 %fP2t, i64* %"<fP2t>"
  store double %fp1w, double* %"<fp1w>"
  store double %fv1w, double* %"<fv1w>"
  store double %fv2w, double* %"<fv2w>"
  store double %fP1w, double* %"<fP1w>"
  store double %fP2w, double* %"<fP2w>"
  store <2 x double> %FX, <2 x double>* %"<FX>"
  store <2 x double> %FY, <2 x double>* %"<FY>"
  store <2 x double> %FO, <2 x double>* %"<FO>"
  store <2 x double> %PFX, <2 x double>* %"<PFX>"
  store <2 x double> %PFY, <2 x double>* %"<PFY>"
  store <2 x double> %PFO, <2 x double>* %"<PFO>"
  call void @"_TFFAxformsdata@IIIIIIFFFFFUUUUUU"(i64* %"<PFF>", i64* %"<fp1t>", i64* %"<fv1t>", i64* %"<fv2t>", i64* %"<fP1t>", i64* %"<fP2t>", double* %"<fp1w>", double* %"<fv1w>", double* %"<fv2w>", double* %"<fP1w>", double* %"<fP2w>", <2 x double>* %"<FX>", <2 x double>* %"<FY>", <2 x double>* %"<FO>", <2 x double>* %"<PFX>", <2 x double>* %"<PFY>", <2 x double>* %"<PFO>")
  %evalue = load i64, i64* %"<PFF>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @19, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load i64, i64* %"<fp1t>"
  %gvalue2 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @20, i64 0, i64 0), i64 %evalue1) #3
  %evalue3 = load i64, i64* %"<fv1t>"
  %gvalue4 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @21, i64 0, i64 0), i64 %evalue3) #3
  %evalue5 = load i64, i64* %"<fv2t>"
  %gvalue6 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @22, i64 0, i64 0), i64 %evalue5) #3
  %evalue7 = load i64, i64* %"<fP1t>"
  %gvalue8 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @23, i64 0, i64 0), i64 %evalue7) #3
  %evalue9 = load i64, i64* %"<fP2t>"
  %gvalue10 = call i64 @"_export@ISI"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @24, i64 0, i64 0), i64 %evalue9) #3
  %evalue11 = load double, double* %"<fp1w>"
  %gvalue12 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @25, i64 0, i64 0), double %evalue11) #3
  %evalue13 = load double, double* %"<fv1w>"
  %gvalue14 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @26, i64 0, i64 0), double %evalue13) #3
  %evalue15 = load double, double* %"<fv2w>"
  %gvalue16 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @27, i64 0, i64 0), double %evalue15) #3
  %evalue17 = load double, double* %"<fP1w>"
  %gvalue18 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @28, i64 0, i64 0), double %evalue17) #3
  %evalue19 = load double, double* %"<fP2w>"
  %gvalue20 = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @29, i64 0, i64 0), double %evalue19) #3
  %evalue21 = load <2 x double>, <2 x double>* %"<FX>"
  %gvalue22 = call <2 x double> @"_export@USU"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @30, i64 0, i64 0), <2 x double> %evalue21) #3
  %evalue23 = load <2 x double>, <2 x double>* %"<FY>"
  %gvalue24 = call <2 x double> @"_export@USU"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @31, i64 0, i64 0), <2 x double> %evalue23) #3
  %evalue25 = load <2 x double>, <2 x double>* %"<FO>"
  %gvalue26 = call <2 x double> @"_export@USU"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @32, i64 0, i64 0), <2 x double> %evalue25) #3
  %evalue27 = load <2 x double>, <2 x double>* %"<PFX>"
  %gvalue28 = call <2 x double> @"_export@USU"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @33, i64 0, i64 0), <2 x double> %evalue27) #3
  %evalue29 = load <2 x double>, <2 x double>* %"<PFY>"
  %gvalue30 = call <2 x double> @"_export@USU"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @34, i64 0, i64 0), <2 x double> %evalue29) #3
  %evalue31 = load <2 x double>, <2 x double>* %"<PFO>"
  %gvalue32 = call <2 x double> @"_export@USU"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @35, i64 0, i64 0), <2 x double> %evalue31) #3
  store i64 %gvalue, i64* @PFF
  store i64 %gvalue2, i64* @fp1t
  store i64 %gvalue4, i64* @fv1t
  store i64 %gvalue6, i64* @fv2t
  store i64 %gvalue8, i64* @fP1t
  store i64 %gvalue10, i64* @fP2t
  store double %gvalue12, double* @fp1w
  store double %gvalue14, double* @fv1w
  store double %gvalue16, double* @fv2w
  store double %gvalue18, double* @fP1w
  store double %gvalue20, double* @fP2w
  store <2 x double> %gvalue22, <2 x double>* @FX
  store <2 x double> %gvalue24, <2 x double>* @FY
  store <2 x double> %gvalue26, <2 x double>* @FO
  store <2 x double> %gvalue28, <2 x double>* @PFX
  store <2 x double> %gvalue30, <2 x double>* @PFY
  store <2 x double> %gvalue32, <2 x double>* @PFO
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <2 x double> @"_export@USU"(i8*, <2 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxformsdata(i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, <2 x double> zeroinitializer, <2 x double> zeroinitializer, <2 x double> zeroinitializer, <2 x double> zeroinitializer, <2 x double> zeroinitializer, <2 x double> zeroinitializer)
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.370"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
