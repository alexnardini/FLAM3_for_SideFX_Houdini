;_name	TheFractalFlameAlgorithm
; ModuleID = 'TheFractalFlameAlgorithm'

%gemSYS = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, double }
%gem = type { i64*, i64*, i64*, i64*, i64*, i64, i64, i64, i64, double*, double*, double*, double*, double*, double*, double*, double, double, double, double, double, <2 x double>, <2 x double>, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>, <2 x double>, <2 x double>, <2 x double>, <2 x double>, <2 x double>, i8** }
%gemPrm = type { double*, double*, double*, double*, double*, double*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>* }

@0 = private constant [14 x i8] c"../dotmglobal\00"
@1 = private constant [16 x i8] c"../dofinalflame\00"
@2 = private constant [14 x i8] c"../_dofpost_2\00"
@3 = private constant [16 x i8] c"../delinvalidpt\00"
@4 = private constant [12 x i8] c"../symmetry\00"
@5 = private constant [13 x i8] c"../flamefunc\00"
@6 = private constant [8 x i8] c"../iter\00"
@7 = private constant [8 x i8] c"../domb\00"
@8 = private constant [14 x i8] c"../rotational\00"
@9 = private constant [9 x i8] c"../vizmb\00"
@10 = private constant [11 x i8] c"Tstep_mult\00"
@11 = private constant [8 x i8] c"../clr_\00"
@12 = private constant [13 x i8] c"../clrspeed_\00"
@13 = private constant [18 x i8] c"../preblurweight_\00"
@14 = private constant [13 x i8] c"../v1weight_\00"
@15 = private constant [11 x i8] c"../v1type_\00"
@16 = private constant [13 x i8] c"../v2weight_\00"
@17 = private constant [11 x i8] c"../v2type_\00"
@18 = private constant [13 x i8] c"../v3weight_\00"
@19 = private constant [11 x i8] c"../v3type_\00"
@20 = private constant [13 x i8] c"../v4weight_\00"
@21 = private constant [11 x i8] c"../v4type_\00"
@22 = private constant [6 x i8] c"../x_\00"
@23 = private constant [6 x i8] c"../y_\00"
@24 = private constant [8 x i8] c"../ang_\00"
@25 = private constant [6 x i8] c"../o_\00"
@26 = private constant [11 x i8] c"../dopost_\00"
@27 = private constant [7 x i8] c"../px_\00"
@28 = private constant [7 x i8] c"../py_\00"
@29 = private constant [7 x i8] c"../po_\00"
@30 = private constant [7 x i8] c"../ftr\00"
@31 = private constant [7 x i8] c"../frt\00"
@32 = private constant [7 x i8] c"../fsc\00"
@33 = private constant [14 x i8] c"../ffv1weight\00"
@34 = private constant [12 x i8] c"../ffv1type\00"
@35 = private constant [14 x i8] c"../ffv2weight\00"
@36 = private constant [12 x i8] c"../ffv2type\00"
@37 = private constant [14 x i8] c"../ffv3weight\00"
@38 = private constant [12 x i8] c"../ffv3type\00"
@39 = private constant [14 x i8] c"../ffp1weight\00"
@40 = private constant [12 x i8] c"../ffp1type\00"
@41 = private constant [9 x i8] c"../_fx_2\00"
@42 = private constant [9 x i8] c"../_fy_2\00"
@43 = private constant [10 x i8] c"../_ang_2\00"
@44 = private constant [9 x i8] c"../_fo_2\00"
@45 = private constant [10 x i8] c"../_pfx_2\00"
@46 = private constant [10 x i8] c"../_pfy_2\00"
@47 = private constant [10 x i8] c"../_pfo_2\00"
@48 = private constant [0 x i64] zeroinitializer
@49 = private constant [0 x double] zeroinitializer
@50 = private constant [0 x <2 x double>] zeroinitializer
@51 = private constant [0 x i8*] zeroinitializer
@52 = private constant [20 x i64] [i64 27, i64 28, i64 29, i64 30, i64 31, i64 32, i64 34, i64 35, i64 36, i64 37, i64 38, i64 47, i64 48, i64 49, i64 50, i64 51, i64 52, i64 53, i64 56, i64 57]
@53 = private constant [21 x i64] [i64 61, i64 63, i64 66, i64 67, i64 69, i64 71, i64 72, i64 73, i64 74, i64 75, i64 76, i64 77, i64 78, i64 79, i64 94, i64 95, i64 96, i64 97, i64 98, i64 99, i64 101]
@54 = private constant [10 x i8] c"../curlc_\00"
@55 = private constant [9 x i8] c"../ngon_\00"
@56 = private constant [9 x i8] c"../pdjw_\00"
@57 = private constant [9 x i8] c"../blob_\00"
@58 = private constant [11 x i8] c"../julian_\00"
@59 = private constant [15 x i8] c"../juliascope_\00"
@60 = private constant [9 x i8] c"../fan2_\00"
@61 = private constant [14 x i8] c"../rings2val_\00"
@62 = private constant [15 x i8] c"../rectangles_\00"
@63 = private constant [15 x i8] c"../radialblur_\00"
@64 = private constant [8 x i8] c"../pie_\00"
@65 = private constant [10 x i8] c"../disc2_\00"
@66 = private constant [15 x i8] c"../supershape_\00"
@67 = private constant [16 x i8] c"../supershapen_\00"
@68 = private constant [11 x i8] c"../flower_\00"
@69 = private constant [10 x i8] c"../conic_\00"
@70 = private constant [13 x i8] c"../parabola_\00"
@71 = private constant [12 x i8] c"../bent2xy_\00"
@72 = private constant [17 x i8] c"../bipolarshift_\00"
@73 = private constant [13 x i8] c"../cellsize_\00"
@74 = private constant [9 x i8] c"../cpow_\00"
@75 = private constant [15 x i8] c"../escherbeta_\00"
@76 = private constant [17 x i8] c"../lazysusanxyz_\00"
@77 = private constant [14 x i8] c"../lazysusan_\00"
@78 = private constant [15 x i8] c"../modulusXYZ_\00"
@79 = private constant [11 x i8] c"../oscope_\00"
@80 = private constant [16 x i8] c"../popcorn2xyz_\00"
@81 = private constant [14 x i8] c"../popcorn2c_\00"
@82 = private constant [18 x i8] c"../separationxyz_\00"
@83 = private constant [24 x i8] c"../separationinsidexyz_\00"
@84 = private constant [13 x i8] c"../splitxyz_\00"
@85 = private constant [14 x i8] c"../splitsxyz_\00"
@86 = private constant [12 x i8] c"../stripes_\00"
@87 = private constant [10 x i8] c"../wedge_\00"
@88 = private constant [15 x i8] c"../wedgejulia_\00"
@89 = private constant [13 x i8] c"../wedgesph_\00"
@90 = private constant [10 x i8] c"../whorl_\00"
@91 = private constant [19 x i8] c"../waves2scalexyz_\00"
@92 = private constant [18 x i8] c"../waves2freqxyz_\00"
@93 = private constant [10 x i8] c"../auger_\00"
@94 = private constant [15 x i8] c"../fluxspread_\00"
@95 = private constant [13 x i8] c"../mobiusre_\00"
@96 = private constant [13 x i8] c"../mobiusim_\00"
@97 = private constant [19 x i8] c"../curvexyzlenght_\00"
@98 = private constant [16 x i8] c"../curvexyzamp_\00"
@99 = private constant [10 x i8] c"../persp_\00"
@100 = private constant [11 x i8] c"../bwraps_\00"
@101 = private constant [16 x i8] c"../bwrapstwist_\00"
@102 = private constant [18 x i8] c"../polynomialpow_\00"
@103 = private constant [17 x i8] c"../polynomiallc_\00"
@104 = private constant [17 x i8] c"../polynomialsc_\00"
@105 = private constant [0 x <3 x double>] zeroinitializer
@106 = private constant [0 x <4 x double>] zeroinitializer
@107 = private constant [6 x i8] c"SUMSQ\00"
@108 = private constant [5 x i8] c"SQRT\00"
@109 = private constant [5 x i8] c"ATAN\00"
@110 = private constant [7 x i8] c"ATANYX\00"
@111 = private constant [8 x i8] c"twister\00"
@112 = private constant [12 x i8] c"../_curlc_2\00"
@113 = private constant [11 x i8] c"../_ngon_2\00"
@114 = private constant [11 x i8] c"../_pdjw_2\00"
@115 = private constant [11 x i8] c"../_blob_2\00"
@116 = private constant [13 x i8] c"../_julian_2\00"
@117 = private constant [17 x i8] c"../_juliascope_2\00"
@118 = private constant [11 x i8] c"../_fan2_2\00"
@119 = private constant [16 x i8] c"../_rings2val_2\00"
@120 = private constant [17 x i8] c"../_rectangles_2\00"
@121 = private constant [17 x i8] c"../_radialblur_2\00"
@122 = private constant [10 x i8] c"../_pie_2\00"
@123 = private constant [12 x i8] c"../_disc2_2\00"
@124 = private constant [17 x i8] c"../_supershape_2\00"
@125 = private constant [18 x i8] c"../_supershapen_2\00"
@126 = private constant [13 x i8] c"../_flower_2\00"
@127 = private constant [12 x i8] c"../_conic_2\00"
@128 = private constant [15 x i8] c"../_parabola_2\00"
@129 = private constant [14 x i8] c"../_bent2xy_2\00"
@130 = private constant [19 x i8] c"../_bipolarshift_2\00"
@131 = private constant [15 x i8] c"../_cellsize_2\00"
@132 = private constant [11 x i8] c"../_cpow_2\00"
@133 = private constant [17 x i8] c"../_escherbeta_2\00"
@134 = private constant [19 x i8] c"../_lazysusanxyz_2\00"
@135 = private constant [16 x i8] c"../_lazysusan_2\00"
@136 = private constant [17 x i8] c"../_modulusXYZ_2\00"
@137 = private constant [13 x i8] c"../_oscope_2\00"
@138 = private constant [18 x i8] c"../_popcorn2xyz_2\00"
@139 = private constant [16 x i8] c"../_popcorn2c_2\00"
@140 = private constant [20 x i8] c"../_separationxyz_2\00"
@141 = private constant [26 x i8] c"../_separationinsidexyz_2\00"
@142 = private constant [15 x i8] c"../_splitxyz_2\00"
@143 = private constant [16 x i8] c"../_splitsxyz_2\00"
@144 = private constant [14 x i8] c"../_stripes_2\00"
@145 = private constant [12 x i8] c"../_wedge_2\00"
@146 = private constant [17 x i8] c"../_wedgejulia_2\00"
@147 = private constant [15 x i8] c"../_wedgesph_2\00"
@148 = private constant [12 x i8] c"../_whorl_2\00"
@149 = private constant [21 x i8] c"../_waves2scalexyz_2\00"
@150 = private constant [20 x i8] c"../_waves2freqxyz_2\00"
@151 = private constant [12 x i8] c"../_auger_2\00"
@152 = private constant [17 x i8] c"../_fluxspread_2\00"
@153 = private constant [15 x i8] c"../_mobiusre_2\00"
@154 = private constant [15 x i8] c"../_mobiusim_2\00"
@155 = private constant [21 x i8] c"../_curvexyzlenght_2\00"
@156 = private constant [18 x i8] c"../_curvexyzamp_2\00"
@157 = private constant [12 x i8] c"../_persp_2\00"
@158 = private constant [13 x i8] c"../_bwraps_2\00"
@159 = private constant [18 x i8] c"../_bwrapstwist_2\00"
@160 = private constant [20 x i8] c"../_polynomialpow_2\00"
@161 = private constant [19 x i8] c"../_polynomiallc_2\00"
@162 = private constant [19 x i8] c"../_polynomialsc_2\00"
@163 = private constant [13 x i8] c"../symgpivot\00"
@164 = private constant [12 x i8] c"mb_modulate\00"
@165 = private constant [4 x i8] c"set\00"
@ptnum = external global i64
@pscale = external global double
@COORD = external global double
@P = external global <3 x double>
@166 = private constant [6 x i8] c"ptnum\00"
@167 = private constant [7 x i8] c"pscale\00"
@168 = private constant [6 x i8] c"COORD\00"
@169 = private constant [2 x i8] c"P\00"

define private void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %x, <2 x double>* %y, double* %ang) nounwind alwaysinline {
__llvm_entry:
  %x1 = load <2 x double>* %x
  %y2 = load <2 x double>* %y
  %return = call <4 x double> @"set@2UU"(<2 x double> %x1, <2 x double> %y2)
  store <4 x double> %return, <4 x double>* %m2
  %ang4 = load double* %ang
  %output = call <4 x double> @"rotate@2F"(<4 x double> %return, double %ang4)
  store <4 x double> %output, <4 x double>* %m2
  ret void
}

declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) nounwind

declare <4 x double> @"rotate@2F"(<4 x double>, double) nounwind readnone

define private void @"gemSYSBuild@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%gemSYS* %this) nounwind alwaysinline {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8]* @0, i64 0, i64 0))
  %tmp = load %gemSYS* %this
  %0 = insertvalue %gemSYS %tmp, i64 %return, 0
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8]* @1, i64 0, i64 0))
  %1 = insertvalue %gemSYS %0, i64 %return1, 3
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8]* @2, i64 0, i64 0))
  %2 = insertvalue %gemSYS %1, i64 %return3, 2
  %return5 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8]* @3, i64 0, i64 0))
  %3 = insertvalue %gemSYS %2, i64 %return5, 1
  store %gemSYS %3, %gemSYS* %this
  %return7 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @4, i64 0, i64 0))
  %tmp8 = load %gemSYS* %this
  %4 = insertvalue %gemSYS %tmp8, i64 %return7, 5
  %return9 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @5, i64 0, i64 0))
  %5 = insertvalue %gemSYS %4, i64 %return9, 4
  %return11 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8]* @6, i64 0, i64 0))
  %6 = insertvalue %gemSYS %5, i64 %return11, 7
  %return13 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8]* @7, i64 0, i64 0))
  %7 = insertvalue %gemSYS %6, i64 %return13, 8
  store %gemSYS %7, %gemSYS* %this
  %tmp15 = load %gemSYS* %this
  %8 = insertvalue %gemSYS %tmp15, double 1.000000e+00, 10
  store %gemSYS %8, %gemSYS* %this
  %sym = extractvalue %gemSYS %8, 5
  %9 = icmp ne i64 %sym, 0
  br i1 %9, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return17 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8]* @8, i64 0, i64 0))
  %10 = insertvalue %gemSYS %8, i64 %return17, 6
  store %gemSYS %10, %gemSYS* %this
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %this19 = load %gemSYS* %this
  %domb = extractvalue %gemSYS %this19, 8
  %11 = icmp ne i64 %domb, 0
  br i1 %11, label %true20, label %end21

true20:                                           ; preds = %end
  %return22 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8]* @9, i64 0, i64 0))
  %12 = insertvalue %gemSYS %this19, i64 %return22, 9
  store %gemSYS %12, %gemSYS* %this
  %return24 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([11 x i8]* @10, i64 0, i64 0), i64 0)
  %tmp25 = load %gemSYS* %this
  %13 = insertvalue %gemSYS %tmp25, double %return24, 10
  store %gemSYS %13, %gemSYS* %this
  br label %end21

end21:                                            ; preds = %true20, %end
  ret void
}

declare i64 @"chi@IS"(i8*) nounwind readnone

declare double @"detail@FISI"(i64, i8*, i64) nounwind

define private %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateFIIIIIIIIIIF"(i64* %TMG, i64* %DELPT, i64* %POSTF, i64* %FF, i64* %iter_f, i64* %sym, i64* %sym_mode, i64* %iter, i64* %domb, i64* %vizmb, double* %mb_modulate) nounwind alwaysinline {
__llvm_entry:
  %TMG1 = load i64* %TMG
  %0 = insertvalue %gemSYS undef, i64 %TMG1, 0
  %DELPT2 = load i64* %DELPT
  %1 = insertvalue %gemSYS %0, i64 %DELPT2, 1
  %POSTF4 = load i64* %POSTF
  %2 = insertvalue %gemSYS %1, i64 %POSTF4, 2
  %FF6 = load i64* %FF
  %3 = insertvalue %gemSYS %2, i64 %FF6, 3
  %iter_f8 = load i64* %iter_f
  %4 = insertvalue %gemSYS %3, i64 %iter_f8, 4
  %sym10 = load i64* %sym
  %5 = insertvalue %gemSYS %4, i64 %sym10, 5
  %sym_mode12 = load i64* %sym_mode
  %6 = insertvalue %gemSYS %5, i64 %sym_mode12, 6
  %iter14 = load i64* %iter
  %7 = insertvalue %gemSYS %6, i64 %iter14, 7
  %domb16 = load i64* %domb
  %8 = insertvalue %gemSYS %7, i64 %domb16, 8
  %vizmb18 = load i64* %vizmb
  %9 = insertvalue %gemSYS %8, i64 %vizmb18, 9
  %mb_modulate20 = load double* %mb_modulate
  %10 = insertvalue %gemSYS %9, double %mb_modulate20, 10
  ret %gemSYS %10
}

define private %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateF"() nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca double
  %10 = alloca i64
  store i64 0, i64* %10
  store i64 0, i64* %0
  store i64 0, i64* %1
  store i64 0, i64* %2
  store i64 0, i64* %3
  store i64 0, i64* %4
  store i64 0, i64* %5
  store i64 0, i64* %6
  store i64 0, i64* %7
  store i64 0, i64* %8
  store double 0.000000e+00, double* %9
  %gemSYS = call %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateFIIIIIIIIIIF"(i64* %10, i64* %0, i64* %1, i64* %2, i64* %3, i64* %4, i64* %5, i64* %6, i64* %7, i64* %8, double* %9)
  ret %gemSYS %gemSYS
}

define private void @"gemBuild@Z3gemM36N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gtrUN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[IZ6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%gem* %this, i64** %VACTIVE, %gemSYS* %SYS) nounwind alwaysinline {
__llvm_entry:
  %m2 = alloca <4 x double>
  %0 = alloca <2 x double>
  %1 = alloca <2 x double>
  %2 = alloca double
  %3 = alloca <2 x double>
  %4 = alloca <2 x double>
  %5 = alloca double
  store <4 x double> zeroinitializer, <4 x double>* %m2, !vex-initializer-store !3
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output230, %iter ]
  %SYS2 = load %gemSYS* %SYS
  %iter_f = extractvalue %gemSYS %SYS2, 4
  %return = call i64 @"lt@III"(i64 %i.0, i64 %iter_f)
  %6 = icmp ne i64 %return, 0
  br i1 %6, label %body, label %end

body:                                             ; preds = %cond
  %VACTIVE3 = load i64** %VACTIVE
  %return5 = call i64 @"getcomp@I[II"(i64* %VACTIVE3, i64 %i.0)
  %return6 = call i64 @"not@II"(i64 %return5)
  %7 = icmp ne i64 %return6, 0
  br i1 %7, label %iter, label %end7

end:                                              ; preds = %cond
  %TMG = extractvalue %gemSYS %SYS2, 0
  %8 = icmp ne i64 %TMG, 0
  br i1 %8, label %true232, label %end233

iter:                                             ; preds = %true192, %false193, %body
  %output230 = add i64 %i.0, 1
  br label %cond

end7:                                             ; preds = %body
  %output = add i64 %i.0, 1
  %return9 = call i8* @"itoa@SI"(i64 %output)
  %this10 = load %gem* %this
  %sIDX = extractvalue %gem %this10, 35
  %output12 = call i8** @"append@[SS"(i8** %sIDX, i8* %return9)
  %tmp = load %gem* %this
  %9 = insertvalue %gem %tmp, i8** %output12, 35
  store %gem %9, %gem* %this
  %sIDX14 = extractvalue %gem %9, 35
  %return15 = call i64 @"len@I[S"(i8** %sIDX14)
  %return17 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8]* @11, i64 0, i64 0), i8* %return9)
  %return18 = call double @"chf@FS"(i8* %return17)
  %return20 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @12, i64 0, i64 0), i8* %return9)
  %return21 = call double @"chf@FS"(i8* %return20)
  %CLR = extractvalue %gem %9, 14
  %output25 = fmul double %return21, %return18
  %output26 = call double* @"append@[FF"(double* %CLR, double %output25)
  %tmp27 = load %gem* %this
  %10 = insertvalue %gem %tmp27, double* %output26, 14
  store %gem %10, %gem* %this
  %ONEMINUS = extractvalue %gem %10, 15
  %output30 = fsub double 1.000000e+00, %return21
  %output31 = call double* @"append@[FF"(double* %ONEMINUS, double %output30)
  %tmp32 = load %gem* %this
  %11 = insertvalue %gem %tmp32, double* %output31, 15
  store %gem %11, %gem* %this
  %PBW = extractvalue %gem %11, 13
  %return35 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8]* @13, i64 0, i64 0), i8* %return9)
  %return36 = call double @"chf@FS"(i8* %return35)
  %output37 = call double* @"append@[FF"(double* %PBW, double %return36)
  %tmp38 = load %gem* %this
  %12 = insertvalue %gem %tmp38, double* %output37, 13
  store %gem %12, %gem* %this
  %v1w = extractvalue %gem %12, 9
  %return41 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @14, i64 0, i64 0), i8* %return9)
  %return42 = call double @"chf@FS"(i8* %return41)
  %output43 = call double* @"append@[FF"(double* %v1w, double %return42)
  %tmp44 = load %gem* %this
  %13 = insertvalue %gem %tmp44, double* %output43, 9
  store %gem %13, %gem* %this
  %v1w46 = extractvalue %gem %13, 9
  %return47 = call i64 @"neg@II"(i64 1)
  %return48 = call double @"getcomp@F[FI"(double* %v1w46, i64 %return47)
  %return49 = fcmp one double %return48, 0.000000e+00
  %v1type = extractvalue %gem %13, 0
  br i1 %return49, label %true51, label %false

true51:                                           ; preds = %end7
  %return55 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @15, i64 0, i64 0), i8* %return9)
  %return56 = call i8* @"chs@SS"(i8* %return55)
  %return57 = call i64 @"atoi@IS"(i8* %return56)
  %output58 = call i64* @"append@[II"(i64* %v1type, i64 %return57)
  %tmp59 = load %gem* %this
  %14 = insertvalue %gem %tmp59, i64* %output58, 0
  store %gem %14, %gem* %this
  br label %end52

false:                                            ; preds = %end7
  %output63 = call i64* @"resize@[II"(i64* %v1type, i64 %return15)
  %15 = insertvalue %gem %13, i64* %output63, 0
  store %gem %15, %gem* %this
  br label %end52

end52:                                            ; preds = %false, %true51
  %this65 = load %gem* %this
  %v2w = extractvalue %gem %this65, 10
  %return67 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @16, i64 0, i64 0), i8* %return9)
  %return68 = call double @"chf@FS"(i8* %return67)
  %output69 = call double* @"append@[FF"(double* %v2w, double %return68)
  %tmp70 = load %gem* %this
  %16 = insertvalue %gem %tmp70, double* %output69, 10
  store %gem %16, %gem* %this
  %v2w72 = extractvalue %gem %16, 10
  %return74 = call double @"getcomp@F[FI"(double* %v2w72, i64 %return47)
  %return75 = fcmp one double %return74, 0.000000e+00
  %v2type = extractvalue %gem %16, 1
  br i1 %return75, label %true77, label %false78

true77:                                           ; preds = %end52
  %return82 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @17, i64 0, i64 0), i8* %return9)
  %return83 = call i8* @"chs@SS"(i8* %return82)
  %return84 = call i64 @"atoi@IS"(i8* %return83)
  %output85 = call i64* @"append@[II"(i64* %v2type, i64 %return84)
  %tmp86 = load %gem* %this
  %17 = insertvalue %gem %tmp86, i64* %output85, 1
  store %gem %17, %gem* %this
  br label %end79

false78:                                          ; preds = %end52
  %output90 = call i64* @"resize@[II"(i64* %v2type, i64 %return15)
  %18 = insertvalue %gem %16, i64* %output90, 1
  store %gem %18, %gem* %this
  br label %end79

end79:                                            ; preds = %false78, %true77
  %this92 = load %gem* %this
  %v3w = extractvalue %gem %this92, 11
  %return94 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @18, i64 0, i64 0), i8* %return9)
  %return95 = call double @"chf@FS"(i8* %return94)
  %output96 = call double* @"append@[FF"(double* %v3w, double %return95)
  %tmp97 = load %gem* %this
  %19 = insertvalue %gem %tmp97, double* %output96, 11
  store %gem %19, %gem* %this
  %v3w99 = extractvalue %gem %19, 11
  %return101 = call double @"getcomp@F[FI"(double* %v3w99, i64 %return47)
  %return102 = fcmp one double %return101, 0.000000e+00
  %v3type = extractvalue %gem %19, 2
  br i1 %return102, label %true104, label %false105

true104:                                          ; preds = %end79
  %return109 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @19, i64 0, i64 0), i8* %return9)
  %return110 = call i8* @"chs@SS"(i8* %return109)
  %return111 = call i64 @"atoi@IS"(i8* %return110)
  %output112 = call i64* @"append@[II"(i64* %v3type, i64 %return111)
  %tmp113 = load %gem* %this
  %20 = insertvalue %gem %tmp113, i64* %output112, 2
  store %gem %20, %gem* %this
  br label %end106

false105:                                         ; preds = %end79
  %output117 = call i64* @"resize@[II"(i64* %v3type, i64 %return15)
  %21 = insertvalue %gem %19, i64* %output117, 2
  store %gem %21, %gem* %this
  br label %end106

end106:                                           ; preds = %false105, %true104
  %this119 = load %gem* %this
  %v4w = extractvalue %gem %this119, 12
  %return121 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @20, i64 0, i64 0), i8* %return9)
  %return122 = call double @"chf@FS"(i8* %return121)
  %output123 = call double* @"append@[FF"(double* %v4w, double %return122)
  %tmp124 = load %gem* %this
  %22 = insertvalue %gem %tmp124, double* %output123, 12
  store %gem %22, %gem* %this
  %v4w126 = extractvalue %gem %22, 12
  %return128 = call double @"getcomp@F[FI"(double* %v4w126, i64 %return47)
  %return129 = fcmp one double %return128, 0.000000e+00
  %v4type = extractvalue %gem %22, 3
  br i1 %return129, label %true131, label %false132

true131:                                          ; preds = %end106
  %return136 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @21, i64 0, i64 0), i8* %return9)
  %return137 = call i8* @"chs@SS"(i8* %return136)
  %return138 = call i64 @"atoi@IS"(i8* %return137)
  %output139 = call i64* @"append@[II"(i64* %v4type, i64 %return138)
  %tmp140 = load %gem* %this
  %23 = insertvalue %gem %tmp140, i64* %output139, 3
  store %gem %23, %gem* %this
  br label %end133

false132:                                         ; preds = %end106
  %output144 = call i64* @"resize@[II"(i64* %v4type, i64 %return15)
  %24 = insertvalue %gem %22, i64* %output144, 3
  store %gem %24, %gem* %this
  br label %end133

end133:                                           ; preds = %false132, %true131
  %return147 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @22, i64 0, i64 0), i8* %return9)
  %return148 = call <2 x double> @"chu@US"(i8* %return147)
  %return150 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @23, i64 0, i64 0), i8* %return9)
  %return151 = call <2 x double> @"chu@US"(i8* %return150)
  %return153 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8]* @24, i64 0, i64 0), i8* %return9)
  %return154 = call double @"chf@FS"(i8* %return153)
  store <2 x double> %return148, <2 x double>* %0
  store <2 x double> %return151, <2 x double>* %1
  %return158 = call double @"radians@FF"(double %return154)
  %return159 = call double @"neg@FF"(double %return158)
  store double %return159, double* %2
  call void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %0, <2 x double>* %1, double* %2)
  %this160 = load %gem* %this
  %x = extractvalue %gem %this160, 23
  %m2161 = load <4 x double>* %m2
  %return162 = call double @"getcomp@F2II"(<4 x double> %m2161, i64 0, i64 0)
  %return164 = call double @"getcomp@F2II"(<4 x double> %m2161, i64 0, i64 1)
  %return165 = call <2 x double> @"set@UFF"(double %return162, double %return164)
  %output166 = call <2 x double>* @"append@[UU"(<2 x double>* %x, <2 x double> %return165)
  %tmp167 = load %gem* %this
  %25 = insertvalue %gem %tmp167, <2 x double>* %output166, 23
  store %gem %25, %gem* %this
  %y = extractvalue %gem %25, 24
  %m2169 = load <4 x double>* %m2
  %return170 = call double @"getcomp@F2II"(<4 x double> %m2169, i64 1, i64 0)
  %return172 = call double @"getcomp@F2II"(<4 x double> %m2169, i64 1, i64 1)
  %return173 = call <2 x double> @"set@UFF"(double %return170, double %return172)
  %output174 = call <2 x double>* @"append@[UU"(<2 x double>* %y, <2 x double> %return173)
  %tmp175 = load %gem* %this
  %26 = insertvalue %gem %tmp175, <2 x double>* %output174, 24
  store %gem %26, %gem* %this
  %o = extractvalue %gem %26, 25
  %return178 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @25, i64 0, i64 0), i8* %return9)
  %return179 = call <2 x double> @"chu@US"(i8* %return178)
  %output180 = call <2 x double>* @"append@[UU"(<2 x double>* %o, <2 x double> %return179)
  %tmp181 = load %gem* %this
  %27 = insertvalue %gem %tmp181, <2 x double>* %output180, 25
  store %gem %27, %gem* %this
  %POSTL = extractvalue %gem %27, 4
  %return184 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @26, i64 0, i64 0), i8* %return9)
  %return185 = call i64 @"chi@IS"(i8* %return184)
  %output186 = call i64* @"append@[II"(i64* %POSTL, i64 %return185)
  %tmp187 = load %gem* %this
  %28 = insertvalue %gem %tmp187, i64* %output186, 4
  store %gem %28, %gem* %this
  %POSTL189 = extractvalue %gem %28, 4
  %return191 = call i64 @"getcomp@I[II"(i64* %POSTL189, i64 %return47)
  %29 = icmp ne i64 %return191, 0
  %px = extractvalue %gem %28, 26
  br i1 %29, label %true192, label %false193

true192:                                          ; preds = %end133
  %return197 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8]* @27, i64 0, i64 0), i8* %return9)
  %return198 = call <2 x double> @"chu@US"(i8* %return197)
  %output199 = call <2 x double>* @"append@[UU"(<2 x double>* %px, <2 x double> %return198)
  %tmp200 = load %gem* %this
  %30 = insertvalue %gem %tmp200, <2 x double>* %output199, 26
  store %gem %30, %gem* %this
  %py = extractvalue %gem %30, 27
  %return203 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8]* @28, i64 0, i64 0), i8* %return9)
  %return204 = call <2 x double> @"chu@US"(i8* %return203)
  %output205 = call <2 x double>* @"append@[UU"(<2 x double>* %py, <2 x double> %return204)
  %tmp206 = load %gem* %this
  %31 = insertvalue %gem %tmp206, <2 x double>* %output205, 27
  store %gem %31, %gem* %this
  %po = extractvalue %gem %31, 28
  %return209 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8]* @29, i64 0, i64 0), i8* %return9)
  %return210 = call <2 x double> @"chu@US"(i8* %return209)
  %output211 = call <2 x double>* @"append@[UU"(<2 x double>* %po, <2 x double> %return210)
  %tmp212 = load %gem* %this
  %32 = insertvalue %gem %tmp212, <2 x double>* %output211, 28
  store %gem %32, %gem* %this
  br label %iter

false193:                                         ; preds = %end133
  %output216 = call <2 x double>* @"resize@[UI"(<2 x double>* %px, i64 %return15)
  %33 = insertvalue %gem %28, <2 x double>* %output216, 26
  %py219 = extractvalue %gem %33, 27
  %output221 = call <2 x double>* @"resize@[UI"(<2 x double>* %py219, i64 %return15)
  %34 = insertvalue %gem %33, <2 x double>* %output221, 27
  %po224 = extractvalue %gem %34, 28
  %output226 = call <2 x double>* @"resize@[UI"(<2 x double>* %po224, i64 %return15)
  %35 = insertvalue %gem %34, <2 x double>* %output226, 28
  store %gem %35, %gem* %this
  br label %iter

true232:                                          ; preds = %end
  %return234 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([7 x i8]* @30, i64 0, i64 0))
  %tmp235 = load %gem* %this
  %36 = insertvalue %gem %tmp235, <2 x double> %return234, 21
  %return236 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8]* @31, i64 0, i64 0))
  %37 = insertvalue %gem %36, double %return236, 20
  %return238 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([7 x i8]* @32, i64 0, i64 0))
  %38 = insertvalue %gem %37, <2 x double> %return238, 22
  store %gem %38, %gem* %this
  br label %end233

end233:                                           ; preds = %true232, %end
  %SYS240 = load %gemSYS* %SYS
  %FF = extractvalue %gemSYS %SYS240, 3
  %39 = icmp ne i64 %FF, 0
  br i1 %39, label %true241, label %end242

true241:                                          ; preds = %end233
  %return243 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8]* @33, i64 0, i64 0))
  %tmp244 = load %gem* %this
  %40 = insertvalue %gem %tmp244, double %return243, 16
  store %gem %40, %gem* %this
  %ffv1w = extractvalue %gem %40, 16
  %return246 = fcmp one double %ffv1w, 0.000000e+00
  br i1 %return246, label %true248, label %end249

end242:                                           ; preds = %end276, %true302, %end233
  ret void

true248:                                          ; preds = %true241
  %return250 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @34, i64 0, i64 0))
  %41 = insertvalue %gem %40, i64 %return250, 5
  store %gem %41, %gem* %this
  br label %end249

end249:                                           ; preds = %true248, %true241
  %return252 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8]* @35, i64 0, i64 0))
  %tmp253 = load %gem* %this
  %42 = insertvalue %gem %tmp253, double %return252, 17
  store %gem %42, %gem* %this
  %ffv2w = extractvalue %gem %42, 17
  %return255 = fcmp one double %ffv2w, 0.000000e+00
  br i1 %return255, label %true257, label %end258

true257:                                          ; preds = %end249
  %return259 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @36, i64 0, i64 0))
  %43 = insertvalue %gem %42, i64 %return259, 6
  store %gem %43, %gem* %this
  br label %end258

end258:                                           ; preds = %true257, %end249
  %return261 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8]* @37, i64 0, i64 0))
  %tmp262 = load %gem* %this
  %44 = insertvalue %gem %tmp262, double %return261, 18
  store %gem %44, %gem* %this
  %ffv3w = extractvalue %gem %44, 18
  %return264 = fcmp one double %ffv3w, 0.000000e+00
  br i1 %return264, label %true266, label %end267

true266:                                          ; preds = %end258
  %return268 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @38, i64 0, i64 0))
  %45 = insertvalue %gem %44, i64 %return268, 7
  store %gem %45, %gem* %this
  br label %end267

end267:                                           ; preds = %true266, %end258
  %return270 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8]* @39, i64 0, i64 0))
  %tmp271 = load %gem* %this
  %46 = insertvalue %gem %tmp271, double %return270, 19
  store %gem %46, %gem* %this
  %ffp1w = extractvalue %gem %46, 19
  %return273 = fcmp one double %ffp1w, 0.000000e+00
  br i1 %return273, label %true275, label %end276

true275:                                          ; preds = %end267
  %return277 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @40, i64 0, i64 0))
  %47 = insertvalue %gem %46, i64 %return277, 8
  store %gem %47, %gem* %this
  br label %end276

end276:                                           ; preds = %true275, %end267
  %return279 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([9 x i8]* @41, i64 0, i64 0))
  %return280 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([9 x i8]* @42, i64 0, i64 0))
  %return281 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @43, i64 0, i64 0))
  store <2 x double> %return279, <2 x double>* %3
  store <2 x double> %return280, <2 x double>* %4
  %return285 = call double @"radians@FF"(double %return281)
  %return286 = call double @"neg@FF"(double %return285)
  store double %return286, double* %5
  call void @"affineRot@2UUF"(<4 x double>* %m2, <2 x double>* %3, <2 x double>* %4, double* %5)
  %m2287 = load <4 x double>* %m2
  %return288 = call double @"getcomp@F2II"(<4 x double> %m2287, i64 0, i64 0)
  %return290 = call double @"getcomp@F2II"(<4 x double> %m2287, i64 0, i64 1)
  %return291 = call <2 x double> @"set@UFF"(double %return288, double %return290)
  %tmp292 = load %gem* %this
  %48 = insertvalue %gem %tmp292, <2 x double> %return291, 29
  %return294 = call double @"getcomp@F2II"(<4 x double> %m2287, i64 1, i64 0)
  %return296 = call double @"getcomp@F2II"(<4 x double> %m2287, i64 1, i64 1)
  %return297 = call <2 x double> @"set@UFF"(double %return294, double %return296)
  %49 = insertvalue %gem %48, <2 x double> %return297, 30
  %return299 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([9 x i8]* @44, i64 0, i64 0))
  %50 = insertvalue %gem %49, <2 x double> %return299, 31
  store %gem %50, %gem* %this
  %SYS301 = load %gemSYS* %SYS
  %POSTF = extractvalue %gemSYS %SYS301, 2
  %51 = icmp ne i64 %POSTF, 0
  br i1 %51, label %true302, label %end242

true302:                                          ; preds = %end276
  %return304 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8]* @45, i64 0, i64 0))
  %52 = insertvalue %gem %50, <2 x double> %return304, 32
  %return306 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8]* @46, i64 0, i64 0))
  %53 = insertvalue %gem %52, <2 x double> %return306, 33
  %return308 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8]* @47, i64 0, i64 0))
  %54 = insertvalue %gem %53, <2 x double> %return308, 34
  store %gem %54, %gem* %this
  br label %end242
}

declare i64 @"lt@III"(i64, i64) nounwind readnone

declare i64 @"getcomp@I[II"(i64*, i64) nounwind readnone

declare i64 @"not@II"(i64) nounwind readnone

declare i8* @"itoa@SI"(i64) nounwind readnone

declare i8** @"append@[SS"(i8**, i8*) nounwind

declare i64 @"len@I[S"(i8**) nounwind readnone

declare i8* @"concat@SSS"(i8*, i8*) nounwind readnone

declare double @"chf@FS"(i8*) nounwind readnone

declare double* @"append@[FF"(double*, double) nounwind

declare i64 @"neg@II"(i64) nounwind readnone

declare double @"getcomp@F[FI"(double*, i64) nounwind readnone

declare i8* @"chs@SS"(i8*) nounwind readnone

declare i64 @"atoi@IS"(i8*) nounwind readnone

declare i64* @"append@[II"(i64*, i64) nounwind

declare i64* @"resize@[II"(i64*, i64) nounwind readnone

declare <2 x double> @"chu@US"(i8*) nounwind readnone

declare double @"radians@FF"(double) nounwind

declare double @"neg@FF"(double) nounwind readnone

declare double @"getcomp@F2II"(<4 x double>, i64, i64) nounwind readnone

declare <2 x double> @"set@UFF"(double, double) nounwind readnone

declare <2 x double>* @"append@[UU"(<2 x double>*, <2 x double>) nounwind

declare <2 x double>* @"resize@[UI"(<2 x double>*, i64) nounwind readnone

define private %gem @"gem@Z3gemM36N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gtrUN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[I[I[I[I[IIIII[F[F[F[F[F[F[FFFFFFUU[U[U[U[U[U[UUUUUUU[S"(i64** %v1type, i64** %v2type, i64** %v3type, i64** %v4type, i64** %POSTL, i64* %ffv1type, i64* %ffv2type, i64* %ffv3type, i64* %ffp1type, double** %v1w, double** %v2w, double** %v3w, double** %v4w, double** %PBW, double** %CLR, double** %ONEMINUS, double* %ffv1w, double* %ffv2w, double* %ffv3w, double* %ffp1w, double* %grt, <2 x double>* %gtr, <2 x double>* %gsc, <2 x double>** %x, <2 x double>** %y, <2 x double>** %o, <2 x double>** %px, <2 x double>** %py, <2 x double>** %po, <2 x double>* %fx, <2 x double>* %fy, <2 x double>* %fo, <2 x double>* %pfx, <2 x double>* %pfy, <2 x double>* %pfo, i8*** %sIDX) nounwind alwaysinline {
__llvm_entry:
  %v1type1 = load i64** %v1type
  %0 = insertvalue %gem undef, i64* %v1type1, 0
  %v2type2 = load i64** %v2type
  %1 = insertvalue %gem %0, i64* %v2type2, 1
  %v3type4 = load i64** %v3type
  %2 = insertvalue %gem %1, i64* %v3type4, 2
  %v4type6 = load i64** %v4type
  %3 = insertvalue %gem %2, i64* %v4type6, 3
  %POSTL8 = load i64** %POSTL
  %4 = insertvalue %gem %3, i64* %POSTL8, 4
  %ffv1type10 = load i64* %ffv1type
  %5 = insertvalue %gem %4, i64 %ffv1type10, 5
  %ffv2type12 = load i64* %ffv2type
  %6 = insertvalue %gem %5, i64 %ffv2type12, 6
  %ffv3type14 = load i64* %ffv3type
  %7 = insertvalue %gem %6, i64 %ffv3type14, 7
  %ffp1type16 = load i64* %ffp1type
  %8 = insertvalue %gem %7, i64 %ffp1type16, 8
  %v1w18 = load double** %v1w
  %9 = insertvalue %gem %8, double* %v1w18, 9
  %v2w20 = load double** %v2w
  %10 = insertvalue %gem %9, double* %v2w20, 10
  %v3w22 = load double** %v3w
  %11 = insertvalue %gem %10, double* %v3w22, 11
  %v4w24 = load double** %v4w
  %12 = insertvalue %gem %11, double* %v4w24, 12
  %PBW26 = load double** %PBW
  %13 = insertvalue %gem %12, double* %PBW26, 13
  %CLR28 = load double** %CLR
  %14 = insertvalue %gem %13, double* %CLR28, 14
  %ONEMINUS30 = load double** %ONEMINUS
  %15 = insertvalue %gem %14, double* %ONEMINUS30, 15
  %ffv1w32 = load double* %ffv1w
  %16 = insertvalue %gem %15, double %ffv1w32, 16
  %ffv2w34 = load double* %ffv2w
  %17 = insertvalue %gem %16, double %ffv2w34, 17
  %ffv3w36 = load double* %ffv3w
  %18 = insertvalue %gem %17, double %ffv3w36, 18
  %ffp1w38 = load double* %ffp1w
  %19 = insertvalue %gem %18, double %ffp1w38, 19
  %grt40 = load double* %grt
  %20 = insertvalue %gem %19, double %grt40, 20
  %gtr42 = load <2 x double>* %gtr
  %21 = insertvalue %gem %20, <2 x double> %gtr42, 21
  %gsc44 = load <2 x double>* %gsc
  %22 = insertvalue %gem %21, <2 x double> %gsc44, 22
  %x46 = load <2 x double>** %x
  %23 = insertvalue %gem %22, <2 x double>* %x46, 23
  %y48 = load <2 x double>** %y
  %24 = insertvalue %gem %23, <2 x double>* %y48, 24
  %o50 = load <2 x double>** %o
  %25 = insertvalue %gem %24, <2 x double>* %o50, 25
  %px52 = load <2 x double>** %px
  %26 = insertvalue %gem %25, <2 x double>* %px52, 26
  %py54 = load <2 x double>** %py
  %27 = insertvalue %gem %26, <2 x double>* %py54, 27
  %po56 = load <2 x double>** %po
  %28 = insertvalue %gem %27, <2 x double>* %po56, 28
  %fx58 = load <2 x double>* %fx
  %29 = insertvalue %gem %28, <2 x double> %fx58, 29
  %fy60 = load <2 x double>* %fy
  %30 = insertvalue %gem %29, <2 x double> %fy60, 30
  %fo62 = load <2 x double>* %fo
  %31 = insertvalue %gem %30, <2 x double> %fo62, 31
  %pfx64 = load <2 x double>* %pfx
  %32 = insertvalue %gem %31, <2 x double> %pfx64, 32
  %pfy66 = load <2 x double>* %pfy
  %33 = insertvalue %gem %32, <2 x double> %pfy66, 33
  %pfo68 = load <2 x double>* %pfo
  %34 = insertvalue %gem %33, <2 x double> %pfo68, 34
  %sIDX70 = load i8*** %sIDX
  %35 = insertvalue %gem %34, i8** %sIDX70, 35
  ret %gem %35
}

define private %gem @"gem@Z3gemM36N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gtrUN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S"() nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i64*
  %1 = alloca i64*
  %2 = alloca i64*
  %3 = alloca i64*
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca double*
  %9 = alloca double*
  %10 = alloca double*
  %11 = alloca double*
  %12 = alloca double*
  %13 = alloca double*
  %14 = alloca double*
  %15 = alloca double
  %16 = alloca double
  %17 = alloca double
  %18 = alloca double
  %19 = alloca double
  %20 = alloca <2 x double>
  %21 = alloca <2 x double>
  %22 = alloca <2 x double>*
  %23 = alloca <2 x double>*
  %24 = alloca <2 x double>*
  %25 = alloca <2 x double>*
  %26 = alloca <2 x double>*
  %27 = alloca <2 x double>*
  %28 = alloca <2 x double>
  %29 = alloca <2 x double>
  %30 = alloca <2 x double>
  %31 = alloca <2 x double>
  %32 = alloca <2 x double>
  %33 = alloca <2 x double>
  %34 = alloca i8**
  %35 = alloca i64*
  store i64* getelementptr inbounds ([0 x i64]* @48, i64 0, i64 0), i64** %35
  store i64* getelementptr inbounds ([0 x i64]* @48, i64 0, i64 0), i64** %0
  store i64* getelementptr inbounds ([0 x i64]* @48, i64 0, i64 0), i64** %1
  store i64* getelementptr inbounds ([0 x i64]* @48, i64 0, i64 0), i64** %2
  store i64* getelementptr inbounds ([0 x i64]* @48, i64 0, i64 0), i64** %3
  store i64 0, i64* %4
  store i64 0, i64* %5
  store i64 0, i64* %6
  store i64 0, i64* %7
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %8
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %9
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %10
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %11
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %12
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %13
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %14
  store double 0.000000e+00, double* %15
  store double 0.000000e+00, double* %16
  store double 0.000000e+00, double* %17
  store double 0.000000e+00, double* %18
  store double 0.000000e+00, double* %19
  store <2 x double> zeroinitializer, <2 x double>* %20
  store <2 x double> zeroinitializer, <2 x double>* %21
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %22
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %23
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %24
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %25
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %26
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %27
  store <2 x double> zeroinitializer, <2 x double>* %28
  store <2 x double> zeroinitializer, <2 x double>* %29
  store <2 x double> zeroinitializer, <2 x double>* %30
  store <2 x double> zeroinitializer, <2 x double>* %31
  store <2 x double> zeroinitializer, <2 x double>* %32
  store <2 x double> zeroinitializer, <2 x double>* %33
  store i8** getelementptr inbounds ([0 x i8*]* @51, i64 0, i64 0), i8*** %34
  %gem = call %gem @"gem@Z3gemM36N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gtrUN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[I[I[I[I[IIIII[F[F[F[F[F[F[FFFFFFUU[U[U[U[U[U[UUUUUUU[S"(i64** %35, i64** %0, i64** %1, i64** %2, i64** %3, i64* %4, i64* %5, i64* %6, i64* %7, double** %8, double** %9, double** %10, double** %11, double** %12, double** %13, double** %14, double* %15, double* %16, double* %17, double* %18, double* %19, <2 x double>* %20, <2 x double>* %21, <2 x double>** %22, <2 x double>** %23, <2 x double>** %24, <2 x double>** %25, <2 x double>** %26, <2 x double>** %27, <2 x double>* %28, <2 x double>* %29, <2 x double>* %30, <2 x double>* %31, <2 x double>* %32, <2 x double>* %33, i8*** %34)
  ret %gem %gem
}

define private void @"gemPrmBuild@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[S[I"(%gemPrm* %this, i8*** %sIDX, i64** %GEMTYPE) nounwind alwaysinline {
__llvm_entry:
  %GEMTYPE1 = load i64** %GEMTYPE
  %return = call i64 @"max@I[I"(i64* %GEMTYPE1)
  %return2 = call i64 @"gt@III"(i64 %return, i64 26)
  %0 = icmp ne i64 %return2, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %GEMTYPE3 = load i64** %GEMTYPE
  %return4 = call i64 @"len@I[I"(i64* %GEMTYPE3)
  %this5 = load %gemPrm* %this
  %rings2_val = extractvalue %gemPrm %this5, 0
  %output = call double* @"resize@[FI"(double* %rings2_val, i64 %return4)
  %1 = insertvalue %gemPrm %this5, double* %output, 0
  %rings2_val8 = extractvalue %gemPrm %1, 0
  %2 = insertvalue %gemPrm %1, double* %rings2_val8, 5
  %3 = insertvalue %gemPrm %2, double* %rings2_val8, 4
  %4 = insertvalue %gemPrm %3, double* %rings2_val8, 3
  store %gemPrm %4, %gemPrm* %this
  %tmp12 = load %gemPrm* %this
  %5 = insertvalue %gemPrm %tmp12, double* %rings2_val8, 2
  %6 = insertvalue %gemPrm %5, double* %rings2_val8, 1
  %blob = extractvalue %gemPrm %6, 6
  %output16 = call <3 x double>* @"resize@[VI"(<3 x double>* %blob, i64 %return4)
  %7 = insertvalue %gemPrm %6, <3 x double>* %output16, 6
  %blob19 = extractvalue %gemPrm %7, 6
  %8 = insertvalue %gemPrm %7, <3 x double>* %blob19, 11
  store %gemPrm %8, %gemPrm* %this
  %tmp21 = load %gemPrm* %this
  %9 = insertvalue %gemPrm %tmp21, <3 x double>* %blob19, 10
  %10 = insertvalue %gemPrm %9, <3 x double>* %blob19, 9
  %11 = insertvalue %gemPrm %10, <3 x double>* %blob19, 8
  %12 = insertvalue %gemPrm %11, <3 x double>* %blob19, 7
  store %gemPrm %12, %gemPrm* %this
  %this25 = load %gemPrm* %this
  %curl_c = extractvalue %gemPrm %this25, 13
  %output27 = call <2 x double>* @"resize@[UI"(<2 x double>* %curl_c, i64 %return4)
  %13 = insertvalue %gemPrm %this25, <2 x double>* %output27, 13
  %curl_c30 = extractvalue %gemPrm %13, 13
  %14 = insertvalue %gemPrm %13, <2 x double>* %curl_c30, 41
  %15 = insertvalue %gemPrm %14, <2 x double>* %curl_c30, 40
  %16 = insertvalue %gemPrm %15, <2 x double>* %curl_c30, 39
  store %gemPrm %16, %gemPrm* %this
  %tmp34 = load %gemPrm* %this
  %17 = insertvalue %gemPrm %tmp34, <2 x double>* %curl_c30, 38
  %18 = insertvalue %gemPrm %17, <2 x double>* %curl_c30, 37
  %19 = insertvalue %gemPrm %18, <2 x double>* %curl_c30, 36
  %20 = insertvalue %gemPrm %19, <2 x double>* %curl_c30, 35
  store %gemPrm %20, %gemPrm* %this
  %tmp38 = load %gemPrm* %this
  %21 = insertvalue %gemPrm %tmp38, <2 x double>* %curl_c30, 34
  %22 = insertvalue %gemPrm %21, <2 x double>* %curl_c30, 33
  %23 = insertvalue %gemPrm %22, <2 x double>* %curl_c30, 32
  %24 = insertvalue %gemPrm %23, <2 x double>* %curl_c30, 31
  store %gemPrm %24, %gemPrm* %this
  %tmp42 = load %gemPrm* %this
  %25 = insertvalue %gemPrm %tmp42, <2 x double>* %curl_c30, 30
  %26 = insertvalue %gemPrm %25, <2 x double>* %curl_c30, 29
  %27 = insertvalue %gemPrm %26, <2 x double>* %curl_c30, 28
  %28 = insertvalue %gemPrm %27, <2 x double>* %curl_c30, 27
  store %gemPrm %28, %gemPrm* %this
  %tmp46 = load %gemPrm* %this
  %29 = insertvalue %gemPrm %tmp46, <2 x double>* %curl_c30, 26
  %30 = insertvalue %gemPrm %29, <2 x double>* %curl_c30, 25
  %31 = insertvalue %gemPrm %30, <2 x double>* %curl_c30, 24
  %32 = insertvalue %gemPrm %31, <2 x double>* %curl_c30, 23
  store %gemPrm %32, %gemPrm* %this
  %tmp50 = load %gemPrm* %this
  %33 = insertvalue %gemPrm %tmp50, <2 x double>* %curl_c30, 22
  %34 = insertvalue %gemPrm %33, <2 x double>* %curl_c30, 21
  %35 = insertvalue %gemPrm %34, <2 x double>* %curl_c30, 20
  %36 = insertvalue %gemPrm %35, <2 x double>* %curl_c30, 19
  store %gemPrm %36, %gemPrm* %this
  %tmp54 = load %gemPrm* %this
  %37 = insertvalue %gemPrm %tmp54, <2 x double>* %curl_c30, 18
  %38 = insertvalue %gemPrm %37, <2 x double>* %curl_c30, 17
  %39 = insertvalue %gemPrm %38, <2 x double>* %curl_c30, 16
  %40 = insertvalue %gemPrm %39, <2 x double>* %curl_c30, 15
  store %gemPrm %40, %gemPrm* %this
  %tmp58 = load %gemPrm* %this
  %41 = insertvalue %gemPrm %tmp58, <2 x double>* %curl_c30, 14
  %ngon = extractvalue %gemPrm %41, 42
  %output61 = call <4 x double>* @"resize@[PI"(<4 x double>* %ngon, i64 %return4)
  %42 = insertvalue %gemPrm %41, <4 x double>* %output61, 42
  %ngon64 = extractvalue %gemPrm %42, 42
  %43 = insertvalue %gemPrm %42, <4 x double>* %ngon64, 50
  %44 = insertvalue %gemPrm %43, <4 x double>* %ngon64, 49
  store %gemPrm %44, %gemPrm* %this
  %tmp67 = load %gemPrm* %this
  %45 = insertvalue %gemPrm %tmp67, <4 x double>* %ngon64, 48
  %46 = insertvalue %gemPrm %45, <4 x double>* %ngon64, 47
  %47 = insertvalue %gemPrm %46, <4 x double>* %ngon64, 46
  %48 = insertvalue %gemPrm %47, <4 x double>* %ngon64, 45
  store %gemPrm %48, %gemPrm* %this
  %tmp71 = load %gemPrm* %this
  %49 = insertvalue %gemPrm %tmp71, <4 x double>* %ngon64, 44
  %50 = insertvalue %gemPrm %49, <4 x double>* %ngon64, 43
  store %gemPrm %50, %gemPrm* %this
  br label %cond

end:                                              ; preds = %cond, %__llvm_entry
  ret void

cond:                                             ; preds = %iter, %true
  %i.0 = phi i64 [ 0, %true ], [ %output772, %iter ]
  %return75 = call i64 @"lt@III"(i64 %i.0, i64 %return4)
  %51 = icmp ne i64 %return75, 0
  br i1 %51, label %body, label %end

body:                                             ; preds = %cond
  %GEMTYPE77 = load i64** %GEMTYPE
  %return79 = call i64 @"getcomp@I[II"(i64* %GEMTYPE77, i64 %i.0)
  %sIDX80 = load i8*** %sIDX
  %return82 = call i8* @"getcomp@S[SI"(i8** %sIDX80, i64 %i.0)
  %return84 = call i64 @"lt@III"(i64 %return79, i64 27)
  %52 = icmp ne i64 %return84, 0
  br i1 %52, label %iter, label %false

iter:                                             ; preds = %false719, %false553, %false92, %false362, %false214, %body, %true741, %true718, %true704, %true681, %true658, %true644, %true630, %true607, %true593, %true579, %true566, %true552, %true538, %true524, %true510, %true487, %true464, %true450, %true436, %true413, %true399, %true375, %true361, %true347, %true333, %true319, %true305, %true291, %true268, %true254, %true240, %true227, %true213, %true199, %true185, %true171, %true157, %true143, %true129, %true115, %true101
  %output772 = add i64 %i.0, 1
  br label %cond

false:                                            ; preds = %body
  %return89 = call i64 @"find@I[II"(i64* getelementptr inbounds ([20 x i64]* @52, i64 0, i64 0), i64 %return79)
  %return90 = call i64 @"ge@III"(i64 %return89, i64 0)
  %53 = icmp ne i64 %return90, 0
  br i1 %53, label %true91, label %false92

true91:                                           ; preds = %false
  %return95 = call i64 @"lt@III"(i64 %return79, i64 38)
  %54 = icmp ne i64 %return95, 0
  br i1 %54, label %true96, label %false97

false92:                                          ; preds = %false
  %return388 = call i64 @"find@I[II"(i64* getelementptr inbounds ([21 x i64]* @53, i64 0, i64 0), i64 %return79)
  %return389 = call i64 @"ge@III"(i64 %return388, i64 0)
  %55 = icmp ne i64 %return389, 0
  br i1 %55, label %true390, label %iter

true96:                                           ; preds = %true91
  %return100 = call i64 @"eq@III"(i64 %return79, i64 27)
  %56 = icmp ne i64 %return100, 0
  br i1 %56, label %true101, label %false102

false97:                                          ; preds = %true91
  %return239 = call i64 @"eq@III"(i64 %return79, i64 38)
  %57 = icmp ne i64 %return239, 0
  br i1 %57, label %true240, label %false241

true101:                                          ; preds = %true96
  %return106 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8]* @54, i64 0, i64 0), i8* %return82)
  %return107 = call <2 x double> @"chu@US"(i8* %return106)
  %tmp108 = load %gemPrm* %this
  %tmp109 = extractvalue %gemPrm %tmp108, 13
  %return110 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp109, <2 x double> %return107, i64 %i.0)
  %output112 = extractvalue { <2 x double>, <2 x double>* } %return110, 1
  %58 = insertvalue %gemPrm %tmp108, <2 x double>* %output112, 13
  store %gemPrm %58, %gemPrm* %this
  br label %iter

false102:                                         ; preds = %true96
  %return114 = call i64 @"eq@III"(i64 %return79, i64 28)
  %59 = icmp ne i64 %return114, 0
  br i1 %59, label %true115, label %false116

true115:                                          ; preds = %false102
  %return120 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8]* @55, i64 0, i64 0), i8* %return82)
  %return121 = call <4 x double> @"chp@PS"(i8* %return120)
  %tmp122 = load %gemPrm* %this
  %tmp123 = extractvalue %gemPrm %tmp122, 42
  %return124 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp123, <4 x double> %return121, i64 %i.0)
  %output126 = extractvalue { <4 x double>, <4 x double>* } %return124, 1
  %60 = insertvalue %gemPrm %tmp122, <4 x double>* %output126, 42
  store %gemPrm %60, %gemPrm* %this
  br label %iter

false116:                                         ; preds = %false102
  %return128 = call i64 @"eq@III"(i64 %return79, i64 29)
  %61 = icmp ne i64 %return128, 0
  br i1 %61, label %true129, label %false130

true129:                                          ; preds = %false116
  %return134 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8]* @56, i64 0, i64 0), i8* %return82)
  %return135 = call <4 x double> @"chp@PS"(i8* %return134)
  %tmp136 = load %gemPrm* %this
  %tmp137 = extractvalue %gemPrm %tmp136, 43
  %return138 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp137, <4 x double> %return135, i64 %i.0)
  %output140 = extractvalue { <4 x double>, <4 x double>* } %return138, 1
  %62 = insertvalue %gemPrm %tmp136, <4 x double>* %output140, 43
  store %gemPrm %62, %gemPrm* %this
  br label %iter

false130:                                         ; preds = %false116
  %return142 = call i64 @"eq@III"(i64 %return79, i64 30)
  %63 = icmp ne i64 %return142, 0
  br i1 %63, label %true143, label %false144

true143:                                          ; preds = %false130
  %return148 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8]* @57, i64 0, i64 0), i8* %return82)
  %return149 = call <3 x double> @"chv@VS"(i8* %return148)
  %tmp150 = load %gemPrm* %this
  %tmp151 = extractvalue %gemPrm %tmp150, 6
  %return152 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp151, <3 x double> %return149, i64 %i.0)
  %output154 = extractvalue { <3 x double>, <3 x double>* } %return152, 1
  %64 = insertvalue %gemPrm %tmp150, <3 x double>* %output154, 6
  store %gemPrm %64, %gemPrm* %this
  br label %iter

false144:                                         ; preds = %false130
  %return156 = call i64 @"eq@III"(i64 %return79, i64 31)
  %65 = icmp ne i64 %return156, 0
  br i1 %65, label %true157, label %false158

true157:                                          ; preds = %false144
  %return162 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @58, i64 0, i64 0), i8* %return82)
  %return163 = call <2 x double> @"chu@US"(i8* %return162)
  %tmp164 = load %gemPrm* %this
  %tmp165 = extractvalue %gemPrm %tmp164, 32
  %return166 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp165, <2 x double> %return163, i64 %i.0)
  %output168 = extractvalue { <2 x double>, <2 x double>* } %return166, 1
  %66 = insertvalue %gemPrm %tmp164, <2 x double>* %output168, 32
  store %gemPrm %66, %gemPrm* %this
  br label %iter

false158:                                         ; preds = %false144
  %return170 = call i64 @"eq@III"(i64 %return79, i64 32)
  %67 = icmp ne i64 %return170, 0
  br i1 %67, label %true171, label %false172

true171:                                          ; preds = %false158
  %return176 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @59, i64 0, i64 0), i8* %return82)
  %return177 = call <2 x double> @"chu@US"(i8* %return176)
  %tmp178 = load %gemPrm* %this
  %tmp179 = extractvalue %gemPrm %tmp178, 33
  %return180 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp179, <2 x double> %return177, i64 %i.0)
  %output182 = extractvalue { <2 x double>, <2 x double>* } %return180, 1
  %68 = insertvalue %gemPrm %tmp178, <2 x double>* %output182, 33
  store %gemPrm %68, %gemPrm* %this
  br label %iter

false172:                                         ; preds = %false158
  %return184 = call i64 @"eq@III"(i64 %return79, i64 34)
  %69 = icmp ne i64 %return184, 0
  br i1 %69, label %true185, label %false186

true185:                                          ; preds = %false172
  %return190 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8]* @60, i64 0, i64 0), i8* %return82)
  %return191 = call <2 x double> @"chu@US"(i8* %return190)
  %tmp192 = load %gemPrm* %this
  %tmp193 = extractvalue %gemPrm %tmp192, 15
  %return194 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp193, <2 x double> %return191, i64 %i.0)
  %output196 = extractvalue { <2 x double>, <2 x double>* } %return194, 1
  %70 = insertvalue %gemPrm %tmp192, <2 x double>* %output196, 15
  store %gemPrm %70, %gemPrm* %this
  br label %iter

false186:                                         ; preds = %false172
  %return198 = call i64 @"eq@III"(i64 %return79, i64 35)
  %71 = icmp ne i64 %return198, 0
  br i1 %71, label %true199, label %false200

true199:                                          ; preds = %false186
  %return204 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8]* @61, i64 0, i64 0), i8* %return82)
  %return205 = call double @"chf@FS"(i8* %return204)
  %tmp206 = load %gemPrm* %this
  %tmp207 = extractvalue %gemPrm %tmp206, 0
  %return208 = call { double, double* } @"setcomp@F[FFI"(double* %tmp207, double %return205, i64 %i.0)
  %output210 = extractvalue { double, double* } %return208, 1
  %72 = insertvalue %gemPrm %tmp206, double* %output210, 0
  store %gemPrm %72, %gemPrm* %this
  br label %iter

false200:                                         ; preds = %false186
  %return212 = call i64 @"eq@III"(i64 %return79, i64 36)
  %73 = icmp ne i64 %return212, 0
  br i1 %73, label %true213, label %false214

true213:                                          ; preds = %false200
  %return218 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @62, i64 0, i64 0), i8* %return82)
  %return219 = call <2 x double> @"chu@US"(i8* %return218)
  %tmp220 = load %gemPrm* %this
  %tmp221 = extractvalue %gemPrm %tmp220, 16
  %return222 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp221, <2 x double> %return219, i64 %i.0)
  %output224 = extractvalue { <2 x double>, <2 x double>* } %return222, 1
  %74 = insertvalue %gemPrm %tmp220, <2 x double>* %output224, 16
  store %gemPrm %74, %gemPrm* %this
  br label %iter

false214:                                         ; preds = %false200
  %return226 = call i64 @"eq@III"(i64 %return79, i64 37)
  %75 = icmp ne i64 %return226, 0
  br i1 %75, label %true227, label %iter

true227:                                          ; preds = %false214
  %return231 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @63, i64 0, i64 0), i8* %return82)
  %return232 = call <2 x double> @"chu@US"(i8* %return231)
  %tmp233 = load %gemPrm* %this
  %tmp234 = extractvalue %gemPrm %tmp233, 34
  %return235 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp234, <2 x double> %return232, i64 %i.0)
  %output237 = extractvalue { <2 x double>, <2 x double>* } %return235, 1
  %76 = insertvalue %gemPrm %tmp233, <2 x double>* %output237, 34
  store %gemPrm %76, %gemPrm* %this
  br label %iter

true240:                                          ; preds = %false97
  %return245 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8]* @64, i64 0, i64 0), i8* %return82)
  %return246 = call <3 x double> @"chv@VS"(i8* %return245)
  %tmp247 = load %gemPrm* %this
  %tmp248 = extractvalue %gemPrm %tmp247, 7
  %return249 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp248, <3 x double> %return246, i64 %i.0)
  %output251 = extractvalue { <3 x double>, <3 x double>* } %return249, 1
  %77 = insertvalue %gemPrm %tmp247, <3 x double>* %output251, 7
  store %gemPrm %77, %gemPrm* %this
  br label %iter

false241:                                         ; preds = %false97
  %return253 = call i64 @"eq@III"(i64 %return79, i64 47)
  %78 = icmp ne i64 %return253, 0
  br i1 %78, label %true254, label %false255

true254:                                          ; preds = %false241
  %return259 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8]* @65, i64 0, i64 0), i8* %return82)
  %return260 = call <2 x double> @"chu@US"(i8* %return259)
  %tmp261 = load %gemPrm* %this
  %tmp262 = extractvalue %gemPrm %tmp261, 35
  %return263 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp262, <2 x double> %return260, i64 %i.0)
  %output265 = extractvalue { <2 x double>, <2 x double>* } %return263, 1
  %79 = insertvalue %gemPrm %tmp261, <2 x double>* %output265, 35
  store %gemPrm %79, %gemPrm* %this
  br label %iter

false255:                                         ; preds = %false241
  %return267 = call i64 @"eq@III"(i64 %return79, i64 48)
  %80 = icmp ne i64 %return267, 0
  br i1 %80, label %true268, label %false269

true268:                                          ; preds = %false255
  %return273 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @66, i64 0, i64 0), i8* %return82)
  %return274 = call <3 x double> @"chv@VS"(i8* %return273)
  %tmp275 = load %gemPrm* %this
  %tmp276 = extractvalue %gemPrm %tmp275, 8
  %return277 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp276, <3 x double> %return274, i64 %i.0)
  %output279 = extractvalue { <3 x double>, <3 x double>* } %return277, 1
  %81 = insertvalue %gemPrm %tmp275, <3 x double>* %output279, 8
  %return282 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8]* @67, i64 0, i64 0), i8* %return82)
  %return283 = call <3 x double> @"chv@VS"(i8* %return282)
  %tmp285 = extractvalue %gemPrm %81, 9
  %return286 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp285, <3 x double> %return283, i64 %i.0)
  %output288 = extractvalue { <3 x double>, <3 x double>* } %return286, 1
  %82 = insertvalue %gemPrm %81, <3 x double>* %output288, 9
  store %gemPrm %82, %gemPrm* %this
  br label %iter

false269:                                         ; preds = %false255
  %return290 = call i64 @"eq@III"(i64 %return79, i64 49)
  %83 = icmp ne i64 %return290, 0
  br i1 %83, label %true291, label %false292

true291:                                          ; preds = %false269
  %return296 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @68, i64 0, i64 0), i8* %return82)
  %return297 = call <2 x double> @"chu@US"(i8* %return296)
  %tmp298 = load %gemPrm* %this
  %tmp299 = extractvalue %gemPrm %tmp298, 36
  %return300 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp299, <2 x double> %return297, i64 %i.0)
  %output302 = extractvalue { <2 x double>, <2 x double>* } %return300, 1
  %84 = insertvalue %gemPrm %tmp298, <2 x double>* %output302, 36
  store %gemPrm %84, %gemPrm* %this
  br label %iter

false292:                                         ; preds = %false269
  %return304 = call i64 @"eq@III"(i64 %return79, i64 50)
  %85 = icmp ne i64 %return304, 0
  br i1 %85, label %true305, label %false306

true305:                                          ; preds = %false292
  %return310 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8]* @69, i64 0, i64 0), i8* %return82)
  %return311 = call <2 x double> @"chu@US"(i8* %return310)
  %tmp312 = load %gemPrm* %this
  %tmp313 = extractvalue %gemPrm %tmp312, 37
  %return314 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp313, <2 x double> %return311, i64 %i.0)
  %output316 = extractvalue { <2 x double>, <2 x double>* } %return314, 1
  %86 = insertvalue %gemPrm %tmp312, <2 x double>* %output316, 37
  store %gemPrm %86, %gemPrm* %this
  br label %iter

false306:                                         ; preds = %false292
  %return318 = call i64 @"eq@III"(i64 %return79, i64 51)
  %87 = icmp ne i64 %return318, 0
  br i1 %87, label %true319, label %false320

true319:                                          ; preds = %false306
  %return324 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @70, i64 0, i64 0), i8* %return82)
  %return325 = call <2 x double> @"chu@US"(i8* %return324)
  %tmp326 = load %gemPrm* %this
  %tmp327 = extractvalue %gemPrm %tmp326, 14
  %return328 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp327, <2 x double> %return325, i64 %i.0)
  %output330 = extractvalue { <2 x double>, <2 x double>* } %return328, 1
  %88 = insertvalue %gemPrm %tmp326, <2 x double>* %output330, 14
  store %gemPrm %88, %gemPrm* %this
  br label %iter

false320:                                         ; preds = %false306
  %return332 = call i64 @"eq@III"(i64 %return79, i64 52)
  %89 = icmp ne i64 %return332, 0
  br i1 %89, label %true333, label %false334

true333:                                          ; preds = %false320
  %return338 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8]* @71, i64 0, i64 0), i8* %return82)
  %return339 = call <2 x double> @"chu@US"(i8* %return338)
  %tmp340 = load %gemPrm* %this
  %tmp341 = extractvalue %gemPrm %tmp340, 17
  %return342 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp341, <2 x double> %return339, i64 %i.0)
  %output344 = extractvalue { <2 x double>, <2 x double>* } %return342, 1
  %90 = insertvalue %gemPrm %tmp340, <2 x double>* %output344, 17
  store %gemPrm %90, %gemPrm* %this
  br label %iter

false334:                                         ; preds = %false320
  %return346 = call i64 @"eq@III"(i64 %return79, i64 53)
  %91 = icmp ne i64 %return346, 0
  br i1 %91, label %true347, label %false348

true347:                                          ; preds = %false334
  %return352 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8]* @72, i64 0, i64 0), i8* %return82)
  %return353 = call double @"chf@FS"(i8* %return352)
  %tmp354 = load %gemPrm* %this
  %tmp355 = extractvalue %gemPrm %tmp354, 1
  %return356 = call { double, double* } @"setcomp@F[FFI"(double* %tmp355, double %return353, i64 %i.0)
  %output358 = extractvalue { double, double* } %return356, 1
  %92 = insertvalue %gemPrm %tmp354, double* %output358, 1
  store %gemPrm %92, %gemPrm* %this
  br label %iter

false348:                                         ; preds = %false334
  %return360 = call i64 @"eq@III"(i64 %return79, i64 56)
  %93 = icmp ne i64 %return360, 0
  br i1 %93, label %true361, label %false362

true361:                                          ; preds = %false348
  %return366 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @73, i64 0, i64 0), i8* %return82)
  %return367 = call double @"chf@FS"(i8* %return366)
  %tmp368 = load %gemPrm* %this
  %tmp369 = extractvalue %gemPrm %tmp368, 2
  %return370 = call { double, double* } @"setcomp@F[FFI"(double* %tmp369, double %return367, i64 %i.0)
  %output372 = extractvalue { double, double* } %return370, 1
  %94 = insertvalue %gemPrm %tmp368, double* %output372, 2
  store %gemPrm %94, %gemPrm* %this
  br label %iter

false362:                                         ; preds = %false348
  %return374 = call i64 @"eq@III"(i64 %return79, i64 57)
  %95 = icmp ne i64 %return374, 0
  br i1 %95, label %true375, label %iter

true375:                                          ; preds = %false362
  %return379 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([9 x i8]* @74, i64 0, i64 0), i8* %return82)
  %return380 = call <3 x double> @"chv@VS"(i8* %return379)
  %tmp381 = load %gemPrm* %this
  %tmp382 = extractvalue %gemPrm %tmp381, 10
  %return383 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp382, <3 x double> %return380, i64 %i.0)
  %output385 = extractvalue { <3 x double>, <3 x double>* } %return383, 1
  %96 = insertvalue %gemPrm %tmp381, <3 x double>* %output385, 10
  store %gemPrm %96, %gemPrm* %this
  br label %iter

true390:                                          ; preds = %false92
  %return393 = call i64 @"lt@III"(i64 %return79, i64 77)
  %97 = icmp ne i64 %return393, 0
  br i1 %97, label %true394, label %false395

true394:                                          ; preds = %true390
  %return398 = call i64 @"eq@III"(i64 %return79, i64 61)
  %98 = icmp ne i64 %return398, 0
  br i1 %98, label %true399, label %false400

false395:                                         ; preds = %true390
  %return578 = call i64 @"eq@III"(i64 %return79, i64 77)
  %99 = icmp ne i64 %return578, 0
  br i1 %99, label %true579, label %false580

true399:                                          ; preds = %true394
  %return404 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @75, i64 0, i64 0), i8* %return82)
  %return405 = call double @"chf@FS"(i8* %return404)
  %tmp406 = load %gemPrm* %this
  %tmp407 = extractvalue %gemPrm %tmp406, 3
  %return408 = call { double, double* } @"setcomp@F[FFI"(double* %tmp407, double %return405, i64 %i.0)
  %output410 = extractvalue { double, double* } %return408, 1
  %100 = insertvalue %gemPrm %tmp406, double* %output410, 3
  store %gemPrm %100, %gemPrm* %this
  br label %iter

false400:                                         ; preds = %true394
  %return412 = call i64 @"eq@III"(i64 %return79, i64 63)
  %101 = icmp ne i64 %return412, 0
  br i1 %101, label %true413, label %false414

true413:                                          ; preds = %false400
  %return418 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8]* @76, i64 0, i64 0), i8* %return82)
  %return419 = call <2 x double> @"chu@US"(i8* %return418)
  %tmp420 = load %gemPrm* %this
  %tmp421 = extractvalue %gemPrm %tmp420, 18
  %return422 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp421, <2 x double> %return419, i64 %i.0)
  %output424 = extractvalue { <2 x double>, <2 x double>* } %return422, 1
  %102 = insertvalue %gemPrm %tmp420, <2 x double>* %output424, 18
  %return427 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8]* @77, i64 0, i64 0), i8* %return82)
  %return428 = call <2 x double> @"chu@US"(i8* %return427)
  %cast = call <3 x double> @"set@VU"(<2 x double> %return428)
  %tmp430 = extractvalue %gemPrm %102, 11
  %return431 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp430, <3 x double> %cast, i64 %i.0)
  %output433 = extractvalue { <3 x double>, <3 x double>* } %return431, 1
  %103 = insertvalue %gemPrm %102, <3 x double>* %output433, 11
  store %gemPrm %103, %gemPrm* %this
  br label %iter

false414:                                         ; preds = %false400
  %return435 = call i64 @"eq@III"(i64 %return79, i64 66)
  %104 = icmp ne i64 %return435, 0
  br i1 %104, label %true436, label %false437

true436:                                          ; preds = %false414
  %return441 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @78, i64 0, i64 0), i8* %return82)
  %return442 = call <2 x double> @"chu@US"(i8* %return441)
  %tmp443 = load %gemPrm* %this
  %tmp444 = extractvalue %gemPrm %tmp443, 19
  %return445 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp444, <2 x double> %return442, i64 %i.0)
  %output447 = extractvalue { <2 x double>, <2 x double>* } %return445, 1
  %105 = insertvalue %gemPrm %tmp443, <2 x double>* %output447, 19
  store %gemPrm %105, %gemPrm* %this
  br label %iter

false437:                                         ; preds = %false414
  %return449 = call i64 @"eq@III"(i64 %return79, i64 67)
  %106 = icmp ne i64 %return449, 0
  br i1 %106, label %true450, label %false451

true450:                                          ; preds = %false437
  %return455 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @79, i64 0, i64 0), i8* %return82)
  %return456 = call <4 x double> @"chp@PS"(i8* %return455)
  %tmp457 = load %gemPrm* %this
  %tmp458 = extractvalue %gemPrm %tmp457, 44
  %return459 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp458, <4 x double> %return456, i64 %i.0)
  %output461 = extractvalue { <4 x double>, <4 x double>* } %return459, 1
  %107 = insertvalue %gemPrm %tmp457, <4 x double>* %output461, 44
  store %gemPrm %107, %gemPrm* %this
  br label %iter

false451:                                         ; preds = %false437
  %return463 = call i64 @"eq@III"(i64 %return79, i64 69)
  %108 = icmp ne i64 %return463, 0
  br i1 %108, label %true464, label %false465

true464:                                          ; preds = %false451
  %return469 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8]* @80, i64 0, i64 0), i8* %return82)
  %return470 = call <2 x double> @"chu@US"(i8* %return469)
  %tmp471 = load %gemPrm* %this
  %tmp472 = extractvalue %gemPrm %tmp471, 20
  %return473 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp472, <2 x double> %return470, i64 %i.0)
  %output475 = extractvalue { <2 x double>, <2 x double>* } %return473, 1
  %109 = insertvalue %gemPrm %tmp471, <2 x double>* %output475, 20
  %return478 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8]* @81, i64 0, i64 0), i8* %return82)
  %return479 = call double @"chf@FS"(i8* %return478)
  %tmp481 = extractvalue %gemPrm %109, 4
  %return482 = call { double, double* } @"setcomp@F[FFI"(double* %tmp481, double %return479, i64 %i.0)
  %output484 = extractvalue { double, double* } %return482, 1
  %110 = insertvalue %gemPrm %109, double* %output484, 4
  store %gemPrm %110, %gemPrm* %this
  br label %iter

false465:                                         ; preds = %false451
  %return486 = call i64 @"eq@III"(i64 %return79, i64 71)
  %111 = icmp ne i64 %return486, 0
  br i1 %111, label %true487, label %false488

true487:                                          ; preds = %false465
  %return492 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8]* @82, i64 0, i64 0), i8* %return82)
  %return493 = call <2 x double> @"chu@US"(i8* %return492)
  %tmp494 = load %gemPrm* %this
  %tmp495 = extractvalue %gemPrm %tmp494, 21
  %return496 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp495, <2 x double> %return493, i64 %i.0)
  %output498 = extractvalue { <2 x double>, <2 x double>* } %return496, 1
  %112 = insertvalue %gemPrm %tmp494, <2 x double>* %output498, 21
  %return501 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([24 x i8]* @83, i64 0, i64 0), i8* %return82)
  %return502 = call <2 x double> @"chu@US"(i8* %return501)
  %tmp504 = extractvalue %gemPrm %112, 22
  %return505 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp504, <2 x double> %return502, i64 %i.0)
  %output507 = extractvalue { <2 x double>, <2 x double>* } %return505, 1
  %113 = insertvalue %gemPrm %112, <2 x double>* %output507, 22
  store %gemPrm %113, %gemPrm* %this
  br label %iter

false488:                                         ; preds = %false465
  %return509 = call i64 @"eq@III"(i64 %return79, i64 72)
  %114 = icmp ne i64 %return509, 0
  br i1 %114, label %true510, label %false511

true510:                                          ; preds = %false488
  %return515 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @84, i64 0, i64 0), i8* %return82)
  %return516 = call <2 x double> @"chu@US"(i8* %return515)
  %tmp517 = load %gemPrm* %this
  %tmp518 = extractvalue %gemPrm %tmp517, 23
  %return519 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp518, <2 x double> %return516, i64 %i.0)
  %output521 = extractvalue { <2 x double>, <2 x double>* } %return519, 1
  %115 = insertvalue %gemPrm %tmp517, <2 x double>* %output521, 23
  store %gemPrm %115, %gemPrm* %this
  br label %iter

false511:                                         ; preds = %false488
  %return523 = call i64 @"eq@III"(i64 %return79, i64 73)
  %116 = icmp ne i64 %return523, 0
  br i1 %116, label %true524, label %false525

true524:                                          ; preds = %false511
  %return529 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([14 x i8]* @85, i64 0, i64 0), i8* %return82)
  %return530 = call <2 x double> @"chu@US"(i8* %return529)
  %tmp531 = load %gemPrm* %this
  %tmp532 = extractvalue %gemPrm %tmp531, 24
  %return533 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp532, <2 x double> %return530, i64 %i.0)
  %output535 = extractvalue { <2 x double>, <2 x double>* } %return533, 1
  %117 = insertvalue %gemPrm %tmp531, <2 x double>* %output535, 24
  store %gemPrm %117, %gemPrm* %this
  br label %iter

false525:                                         ; preds = %false511
  %return537 = call i64 @"eq@III"(i64 %return79, i64 74)
  %118 = icmp ne i64 %return537, 0
  br i1 %118, label %true538, label %false539

true538:                                          ; preds = %false525
  %return543 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([12 x i8]* @86, i64 0, i64 0), i8* %return82)
  %return544 = call <2 x double> @"chu@US"(i8* %return543)
  %tmp545 = load %gemPrm* %this
  %tmp546 = extractvalue %gemPrm %tmp545, 38
  %return547 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp546, <2 x double> %return544, i64 %i.0)
  %output549 = extractvalue { <2 x double>, <2 x double>* } %return547, 1
  %119 = insertvalue %gemPrm %tmp545, <2 x double>* %output549, 38
  store %gemPrm %119, %gemPrm* %this
  br label %iter

false539:                                         ; preds = %false525
  %return551 = call i64 @"eq@III"(i64 %return79, i64 75)
  %120 = icmp ne i64 %return551, 0
  br i1 %120, label %true552, label %false553

true552:                                          ; preds = %false539
  %return557 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8]* @87, i64 0, i64 0), i8* %return82)
  %return558 = call <4 x double> @"chp@PS"(i8* %return557)
  %tmp559 = load %gemPrm* %this
  %tmp560 = extractvalue %gemPrm %tmp559, 45
  %return561 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp560, <4 x double> %return558, i64 %i.0)
  %output563 = extractvalue { <4 x double>, <4 x double>* } %return561, 1
  %121 = insertvalue %gemPrm %tmp559, <4 x double>* %output563, 45
  store %gemPrm %121, %gemPrm* %this
  br label %iter

false553:                                         ; preds = %false539
  %return565 = call i64 @"eq@III"(i64 %return79, i64 76)
  %122 = icmp ne i64 %return565, 0
  br i1 %122, label %true566, label %iter

true566:                                          ; preds = %false553
  %return570 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @88, i64 0, i64 0), i8* %return82)
  %return571 = call <4 x double> @"chp@PS"(i8* %return570)
  %tmp572 = load %gemPrm* %this
  %tmp573 = extractvalue %gemPrm %tmp572, 46
  %return574 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp573, <4 x double> %return571, i64 %i.0)
  %output576 = extractvalue { <4 x double>, <4 x double>* } %return574, 1
  %123 = insertvalue %gemPrm %tmp572, <4 x double>* %output576, 46
  store %gemPrm %123, %gemPrm* %this
  br label %iter

true579:                                          ; preds = %false395
  %return584 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @89, i64 0, i64 0), i8* %return82)
  %return585 = call <4 x double> @"chp@PS"(i8* %return584)
  %tmp586 = load %gemPrm* %this
  %tmp587 = extractvalue %gemPrm %tmp586, 47
  %return588 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp587, <4 x double> %return585, i64 %i.0)
  %output590 = extractvalue { <4 x double>, <4 x double>* } %return588, 1
  %124 = insertvalue %gemPrm %tmp586, <4 x double>* %output590, 47
  store %gemPrm %124, %gemPrm* %this
  br label %iter

false580:                                         ; preds = %false395
  %return592 = call i64 @"eq@III"(i64 %return79, i64 78)
  %125 = icmp ne i64 %return592, 0
  br i1 %125, label %true593, label %false594

true593:                                          ; preds = %false580
  %return598 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8]* @90, i64 0, i64 0), i8* %return82)
  %return599 = call <2 x double> @"chu@US"(i8* %return598)
  %tmp600 = load %gemPrm* %this
  %tmp601 = extractvalue %gemPrm %tmp600, 39
  %return602 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp601, <2 x double> %return599, i64 %i.0)
  %output604 = extractvalue { <2 x double>, <2 x double>* } %return602, 1
  %126 = insertvalue %gemPrm %tmp600, <2 x double>* %output604, 39
  store %gemPrm %126, %gemPrm* %this
  br label %iter

false594:                                         ; preds = %false580
  %return606 = call i64 @"eq@III"(i64 %return79, i64 79)
  %127 = icmp ne i64 %return606, 0
  br i1 %127, label %true607, label %false608

true607:                                          ; preds = %false594
  %return612 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([19 x i8]* @91, i64 0, i64 0), i8* %return82)
  %return613 = call <2 x double> @"chu@US"(i8* %return612)
  %tmp614 = load %gemPrm* %this
  %tmp615 = extractvalue %gemPrm %tmp614, 25
  %return616 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp615, <2 x double> %return613, i64 %i.0)
  %output618 = extractvalue { <2 x double>, <2 x double>* } %return616, 1
  %128 = insertvalue %gemPrm %tmp614, <2 x double>* %output618, 25
  %return621 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8]* @92, i64 0, i64 0), i8* %return82)
  %return622 = call <2 x double> @"chu@US"(i8* %return621)
  %tmp624 = extractvalue %gemPrm %128, 26
  %return625 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp624, <2 x double> %return622, i64 %i.0)
  %output627 = extractvalue { <2 x double>, <2 x double>* } %return625, 1
  %129 = insertvalue %gemPrm %128, <2 x double>* %output627, 26
  store %gemPrm %129, %gemPrm* %this
  br label %iter

false608:                                         ; preds = %false594
  %return629 = call i64 @"eq@III"(i64 %return79, i64 94)
  %130 = icmp ne i64 %return629, 0
  br i1 %130, label %true630, label %false631

true630:                                          ; preds = %false608
  %return635 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8]* @93, i64 0, i64 0), i8* %return82)
  %return636 = call <4 x double> @"chp@PS"(i8* %return635)
  %tmp637 = load %gemPrm* %this
  %tmp638 = extractvalue %gemPrm %tmp637, 48
  %return639 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp638, <4 x double> %return636, i64 %i.0)
  %output641 = extractvalue { <4 x double>, <4 x double>* } %return639, 1
  %131 = insertvalue %gemPrm %tmp637, <4 x double>* %output641, 48
  store %gemPrm %131, %gemPrm* %this
  br label %iter

false631:                                         ; preds = %false608
  %return643 = call i64 @"eq@III"(i64 %return79, i64 95)
  %132 = icmp ne i64 %return643, 0
  br i1 %132, label %true644, label %false645

true644:                                          ; preds = %false631
  %return649 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([15 x i8]* @94, i64 0, i64 0), i8* %return82)
  %return650 = call double @"chf@FS"(i8* %return649)
  %tmp651 = load %gemPrm* %this
  %tmp652 = extractvalue %gemPrm %tmp651, 5
  %return653 = call { double, double* } @"setcomp@F[FFI"(double* %tmp652, double %return650, i64 %i.0)
  %output655 = extractvalue { double, double* } %return653, 1
  %133 = insertvalue %gemPrm %tmp651, double* %output655, 5
  store %gemPrm %133, %gemPrm* %this
  br label %iter

false645:                                         ; preds = %false631
  %return657 = call i64 @"eq@III"(i64 %return79, i64 96)
  %134 = icmp ne i64 %return657, 0
  br i1 %134, label %true658, label %false659

true658:                                          ; preds = %false645
  %return663 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @95, i64 0, i64 0), i8* %return82)
  %return664 = call <4 x double> @"chp@PS"(i8* %return663)
  %tmp665 = load %gemPrm* %this
  %tmp666 = extractvalue %gemPrm %tmp665, 49
  %return667 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp666, <4 x double> %return664, i64 %i.0)
  %output669 = extractvalue { <4 x double>, <4 x double>* } %return667, 1
  %135 = insertvalue %gemPrm %tmp665, <4 x double>* %output669, 49
  %return672 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @96, i64 0, i64 0), i8* %return82)
  %return673 = call <4 x double> @"chp@PS"(i8* %return672)
  %tmp675 = extractvalue %gemPrm %135, 50
  %return676 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp675, <4 x double> %return673, i64 %i.0)
  %output678 = extractvalue { <4 x double>, <4 x double>* } %return676, 1
  %136 = insertvalue %gemPrm %135, <4 x double>* %output678, 50
  store %gemPrm %136, %gemPrm* %this
  br label %iter

false659:                                         ; preds = %false645
  %return680 = call i64 @"eq@III"(i64 %return79, i64 97)
  %137 = icmp ne i64 %return680, 0
  br i1 %137, label %true681, label %false682

true681:                                          ; preds = %false659
  %return686 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([19 x i8]* @97, i64 0, i64 0), i8* %return82)
  %return687 = call <2 x double> @"chu@US"(i8* %return686)
  %tmp688 = load %gemPrm* %this
  %tmp689 = extractvalue %gemPrm %tmp688, 27
  %return690 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp689, <2 x double> %return687, i64 %i.0)
  %output692 = extractvalue { <2 x double>, <2 x double>* } %return690, 1
  %138 = insertvalue %gemPrm %tmp688, <2 x double>* %output692, 27
  %return695 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8]* @98, i64 0, i64 0), i8* %return82)
  %return696 = call <2 x double> @"chu@US"(i8* %return695)
  %tmp698 = extractvalue %gemPrm %138, 28
  %return699 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp698, <2 x double> %return696, i64 %i.0)
  %output701 = extractvalue { <2 x double>, <2 x double>* } %return699, 1
  %139 = insertvalue %gemPrm %138, <2 x double>* %output701, 28
  store %gemPrm %139, %gemPrm* %this
  br label %iter

false682:                                         ; preds = %false659
  %return703 = call i64 @"eq@III"(i64 %return79, i64 98)
  %140 = icmp ne i64 %return703, 0
  br i1 %140, label %true704, label %false705

true704:                                          ; preds = %false682
  %return709 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([10 x i8]* @99, i64 0, i64 0), i8* %return82)
  %return710 = call <2 x double> @"chu@US"(i8* %return709)
  %tmp711 = load %gemPrm* %this
  %tmp712 = extractvalue %gemPrm %tmp711, 40
  %return713 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp712, <2 x double> %return710, i64 %i.0)
  %output715 = extractvalue { <2 x double>, <2 x double>* } %return713, 1
  %141 = insertvalue %gemPrm %tmp711, <2 x double>* %output715, 40
  store %gemPrm %141, %gemPrm* %this
  br label %iter

false705:                                         ; preds = %false682
  %return717 = call i64 @"eq@III"(i64 %return79, i64 99)
  %142 = icmp ne i64 %return717, 0
  br i1 %142, label %true718, label %false719

true718:                                          ; preds = %false705
  %return723 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @100, i64 0, i64 0), i8* %return82)
  %return724 = call <3 x double> @"chv@VS"(i8* %return723)
  %tmp725 = load %gemPrm* %this
  %tmp726 = extractvalue %gemPrm %tmp725, 12
  %return727 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp726, <3 x double> %return724, i64 %i.0)
  %output729 = extractvalue { <3 x double>, <3 x double>* } %return727, 1
  %143 = insertvalue %gemPrm %tmp725, <3 x double>* %output729, 12
  %return732 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([16 x i8]* @101, i64 0, i64 0), i8* %return82)
  %return733 = call <2 x double> @"chu@US"(i8* %return732)
  %tmp735 = extractvalue %gemPrm %143, 41
  %return736 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp735, <2 x double> %return733, i64 %i.0)
  %output738 = extractvalue { <2 x double>, <2 x double>* } %return736, 1
  %144 = insertvalue %gemPrm %143, <2 x double>* %output738, 41
  store %gemPrm %144, %gemPrm* %this
  br label %iter

false719:                                         ; preds = %false705
  %return740 = call i64 @"eq@III"(i64 %return79, i64 101)
  %145 = icmp ne i64 %return740, 0
  br i1 %145, label %true741, label %iter

true741:                                          ; preds = %false719
  %return745 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8]* @102, i64 0, i64 0), i8* %return82)
  %return746 = call <2 x double> @"chu@US"(i8* %return745)
  %tmp747 = load %gemPrm* %this
  %tmp748 = extractvalue %gemPrm %tmp747, 29
  %return749 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp748, <2 x double> %return746, i64 %i.0)
  %output751 = extractvalue { <2 x double>, <2 x double>* } %return749, 1
  %146 = insertvalue %gemPrm %tmp747, <2 x double>* %output751, 29
  %return754 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8]* @103, i64 0, i64 0), i8* %return82)
  %return755 = call <2 x double> @"chu@US"(i8* %return754)
  %tmp757 = extractvalue %gemPrm %146, 30
  %return758 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp757, <2 x double> %return755, i64 %i.0)
  %output760 = extractvalue { <2 x double>, <2 x double>* } %return758, 1
  %147 = insertvalue %gemPrm %146, <2 x double>* %output760, 30
  %return763 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8]* @104, i64 0, i64 0), i8* %return82)
  %return764 = call <2 x double> @"chu@US"(i8* %return763)
  %tmp766 = extractvalue %gemPrm %147, 31
  %return767 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp766, <2 x double> %return764, i64 %i.0)
  %output769 = extractvalue { <2 x double>, <2 x double>* } %return767, 1
  %148 = insertvalue %gemPrm %147, <2 x double>* %output769, 31
  store %gemPrm %148, %gemPrm* %this
  br label %iter
}

declare i64 @"max@I[I"(i64*) nounwind

declare i64 @"gt@III"(i64, i64) nounwind readnone

declare i64 @"len@I[I"(i64*) nounwind readnone

declare double* @"resize@[FI"(double*, i64) nounwind readnone

declare <3 x double>* @"resize@[VI"(<3 x double>*, i64) nounwind readnone

declare <4 x double>* @"resize@[PI"(<4 x double>*, i64) nounwind readnone

declare i8* @"getcomp@S[SI"(i8**, i64) nounwind readnone

declare i64 @"find@I[II"(i64*, i64) nounwind

declare i64 @"ge@III"(i64, i64) nounwind readnone

declare i64 @"eq@III"(i64, i64) nounwind readnone

declare { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>*, <2 x double>, i64) nounwind readnone

declare <4 x double> @"chp@PS"(i8*) nounwind readnone

declare { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>*, <4 x double>, i64) nounwind readnone

declare <3 x double> @"chv@VS"(i8*) nounwind readnone

declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) nounwind readnone

declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) nounwind readnone

declare <3 x double> @"set@VU"(<2 x double>) nounwind readnone

define private %gemPrm @"gemPrm@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[F[F[F[F[F[F[V[V[V[V[V[V[V[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[P[P[P[P[P[P[P[P[P"(double** %rings2_val, double** %bipolar_shift, double** %cell_size, double** %escher_beta, double** %popcorn2_c, double** %flux_spread, <3 x double>** %blob, <3 x double>** %pie, <3 x double>** %supershape, <3 x double>** %supershape_n, <3 x double>** %cpow, <3 x double>** %lazysusan, <3 x double>** %bwraps, <2 x double>** %curl_c, <2 x double>** %parabola, <2 x double>** %fan2, <2 x double>** %rectangles, <2 x double>** %bent2, <2 x double>** %lazysusanxyz, <2 x double>** %modulus, <2 x double>** %popcorn2, <2 x double>** %separation, <2 x double>** %separation_inside, <2 x double>** %split, <2 x double>** %splits, <2 x double>** %waves2_scale, <2 x double>** %waves2_freq, <2 x double>** %curve_lenght, <2 x double>** %curve_amp, <2 x double>** %polynomial_pow, <2 x double>** %polynomial_lc, <2 x double>** %polynomial_sc, <2 x double>** %julian, <2 x double>** %juliascope, <2 x double>** %radialblur, <2 x double>** %disc2, <2 x double>** %flower, <2 x double>** %conic, <2 x double>** %stripes, <2 x double>** %whorl, <2 x double>** %persp, <2 x double>** %bwrapstwist, <4 x double>** %ngon, <4 x double>** %pdj_w, <4 x double>** %oscope, <4 x double>** %wedge, <4 x double>** %wedgejulia, <4 x double>** %wedgesph, <4 x double>** %auger, <4 x double>** %mobius_re, <4 x double>** %mobius_im) nounwind alwaysinline {
__llvm_entry:
  %rings2_val1 = load double** %rings2_val
  %0 = insertvalue %gemPrm undef, double* %rings2_val1, 0
  %bipolar_shift2 = load double** %bipolar_shift
  %1 = insertvalue %gemPrm %0, double* %bipolar_shift2, 1
  %cell_size4 = load double** %cell_size
  %2 = insertvalue %gemPrm %1, double* %cell_size4, 2
  %escher_beta6 = load double** %escher_beta
  %3 = insertvalue %gemPrm %2, double* %escher_beta6, 3
  %popcorn2_c8 = load double** %popcorn2_c
  %4 = insertvalue %gemPrm %3, double* %popcorn2_c8, 4
  %flux_spread10 = load double** %flux_spread
  %5 = insertvalue %gemPrm %4, double* %flux_spread10, 5
  %blob12 = load <3 x double>** %blob
  %6 = insertvalue %gemPrm %5, <3 x double>* %blob12, 6
  %pie14 = load <3 x double>** %pie
  %7 = insertvalue %gemPrm %6, <3 x double>* %pie14, 7
  %supershape16 = load <3 x double>** %supershape
  %8 = insertvalue %gemPrm %7, <3 x double>* %supershape16, 8
  %supershape_n18 = load <3 x double>** %supershape_n
  %9 = insertvalue %gemPrm %8, <3 x double>* %supershape_n18, 9
  %cpow20 = load <3 x double>** %cpow
  %10 = insertvalue %gemPrm %9, <3 x double>* %cpow20, 10
  %lazysusan22 = load <3 x double>** %lazysusan
  %11 = insertvalue %gemPrm %10, <3 x double>* %lazysusan22, 11
  %bwraps24 = load <3 x double>** %bwraps
  %12 = insertvalue %gemPrm %11, <3 x double>* %bwraps24, 12
  %curl_c26 = load <2 x double>** %curl_c
  %13 = insertvalue %gemPrm %12, <2 x double>* %curl_c26, 13
  %parabola28 = load <2 x double>** %parabola
  %14 = insertvalue %gemPrm %13, <2 x double>* %parabola28, 14
  %fan230 = load <2 x double>** %fan2
  %15 = insertvalue %gemPrm %14, <2 x double>* %fan230, 15
  %rectangles32 = load <2 x double>** %rectangles
  %16 = insertvalue %gemPrm %15, <2 x double>* %rectangles32, 16
  %bent234 = load <2 x double>** %bent2
  %17 = insertvalue %gemPrm %16, <2 x double>* %bent234, 17
  %lazysusanxyz36 = load <2 x double>** %lazysusanxyz
  %18 = insertvalue %gemPrm %17, <2 x double>* %lazysusanxyz36, 18
  %modulus38 = load <2 x double>** %modulus
  %19 = insertvalue %gemPrm %18, <2 x double>* %modulus38, 19
  %popcorn240 = load <2 x double>** %popcorn2
  %20 = insertvalue %gemPrm %19, <2 x double>* %popcorn240, 20
  %separation42 = load <2 x double>** %separation
  %21 = insertvalue %gemPrm %20, <2 x double>* %separation42, 21
  %separation_inside44 = load <2 x double>** %separation_inside
  %22 = insertvalue %gemPrm %21, <2 x double>* %separation_inside44, 22
  %split46 = load <2 x double>** %split
  %23 = insertvalue %gemPrm %22, <2 x double>* %split46, 23
  %splits48 = load <2 x double>** %splits
  %24 = insertvalue %gemPrm %23, <2 x double>* %splits48, 24
  %waves2_scale50 = load <2 x double>** %waves2_scale
  %25 = insertvalue %gemPrm %24, <2 x double>* %waves2_scale50, 25
  %waves2_freq52 = load <2 x double>** %waves2_freq
  %26 = insertvalue %gemPrm %25, <2 x double>* %waves2_freq52, 26
  %curve_lenght54 = load <2 x double>** %curve_lenght
  %27 = insertvalue %gemPrm %26, <2 x double>* %curve_lenght54, 27
  %curve_amp56 = load <2 x double>** %curve_amp
  %28 = insertvalue %gemPrm %27, <2 x double>* %curve_amp56, 28
  %polynomial_pow58 = load <2 x double>** %polynomial_pow
  %29 = insertvalue %gemPrm %28, <2 x double>* %polynomial_pow58, 29
  %polynomial_lc60 = load <2 x double>** %polynomial_lc
  %30 = insertvalue %gemPrm %29, <2 x double>* %polynomial_lc60, 30
  %polynomial_sc62 = load <2 x double>** %polynomial_sc
  %31 = insertvalue %gemPrm %30, <2 x double>* %polynomial_sc62, 31
  %julian64 = load <2 x double>** %julian
  %32 = insertvalue %gemPrm %31, <2 x double>* %julian64, 32
  %juliascope66 = load <2 x double>** %juliascope
  %33 = insertvalue %gemPrm %32, <2 x double>* %juliascope66, 33
  %radialblur68 = load <2 x double>** %radialblur
  %34 = insertvalue %gemPrm %33, <2 x double>* %radialblur68, 34
  %disc270 = load <2 x double>** %disc2
  %35 = insertvalue %gemPrm %34, <2 x double>* %disc270, 35
  %flower72 = load <2 x double>** %flower
  %36 = insertvalue %gemPrm %35, <2 x double>* %flower72, 36
  %conic74 = load <2 x double>** %conic
  %37 = insertvalue %gemPrm %36, <2 x double>* %conic74, 37
  %stripes76 = load <2 x double>** %stripes
  %38 = insertvalue %gemPrm %37, <2 x double>* %stripes76, 38
  %whorl78 = load <2 x double>** %whorl
  %39 = insertvalue %gemPrm %38, <2 x double>* %whorl78, 39
  %persp80 = load <2 x double>** %persp
  %40 = insertvalue %gemPrm %39, <2 x double>* %persp80, 40
  %bwrapstwist82 = load <2 x double>** %bwrapstwist
  %41 = insertvalue %gemPrm %40, <2 x double>* %bwrapstwist82, 41
  %ngon84 = load <4 x double>** %ngon
  %42 = insertvalue %gemPrm %41, <4 x double>* %ngon84, 42
  %pdj_w86 = load <4 x double>** %pdj_w
  %43 = insertvalue %gemPrm %42, <4 x double>* %pdj_w86, 43
  %oscope88 = load <4 x double>** %oscope
  %44 = insertvalue %gemPrm %43, <4 x double>* %oscope88, 44
  %wedge90 = load <4 x double>** %wedge
  %45 = insertvalue %gemPrm %44, <4 x double>* %wedge90, 45
  %wedgejulia92 = load <4 x double>** %wedgejulia
  %46 = insertvalue %gemPrm %45, <4 x double>* %wedgejulia92, 46
  %wedgesph94 = load <4 x double>** %wedgesph
  %47 = insertvalue %gemPrm %46, <4 x double>* %wedgesph94, 47
  %auger96 = load <4 x double>** %auger
  %48 = insertvalue %gemPrm %47, <4 x double>* %auger96, 48
  %mobius_re98 = load <4 x double>** %mobius_re
  %49 = insertvalue %gemPrm %48, <4 x double>* %mobius_re98, 49
  %mobius_im100 = load <4 x double>** %mobius_im
  %50 = insertvalue %gemPrm %49, <4 x double>* %mobius_im100, 50
  ret %gemPrm %50
}

define private %gemPrm @"gemPrm@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"() nounwind alwaysinline {
__llvm_entry:
  %0 = alloca double*
  %1 = alloca double*
  %2 = alloca double*
  %3 = alloca double*
  %4 = alloca double*
  %5 = alloca <3 x double>*
  %6 = alloca <3 x double>*
  %7 = alloca <3 x double>*
  %8 = alloca <3 x double>*
  %9 = alloca <3 x double>*
  %10 = alloca <3 x double>*
  %11 = alloca <3 x double>*
  %12 = alloca <2 x double>*
  %13 = alloca <2 x double>*
  %14 = alloca <2 x double>*
  %15 = alloca <2 x double>*
  %16 = alloca <2 x double>*
  %17 = alloca <2 x double>*
  %18 = alloca <2 x double>*
  %19 = alloca <2 x double>*
  %20 = alloca <2 x double>*
  %21 = alloca <2 x double>*
  %22 = alloca <2 x double>*
  %23 = alloca <2 x double>*
  %24 = alloca <2 x double>*
  %25 = alloca <2 x double>*
  %26 = alloca <2 x double>*
  %27 = alloca <2 x double>*
  %28 = alloca <2 x double>*
  %29 = alloca <2 x double>*
  %30 = alloca <2 x double>*
  %31 = alloca <2 x double>*
  %32 = alloca <2 x double>*
  %33 = alloca <2 x double>*
  %34 = alloca <2 x double>*
  %35 = alloca <2 x double>*
  %36 = alloca <2 x double>*
  %37 = alloca <2 x double>*
  %38 = alloca <2 x double>*
  %39 = alloca <2 x double>*
  %40 = alloca <2 x double>*
  %41 = alloca <4 x double>*
  %42 = alloca <4 x double>*
  %43 = alloca <4 x double>*
  %44 = alloca <4 x double>*
  %45 = alloca <4 x double>*
  %46 = alloca <4 x double>*
  %47 = alloca <4 x double>*
  %48 = alloca <4 x double>*
  %49 = alloca <4 x double>*
  %50 = alloca double*
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %50
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %0
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %1
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %2
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %3
  store double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double** %4
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %5
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %6
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %7
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %8
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %9
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %10
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @105, i64 0, i64 0), <3 x double>** %11
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %12
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %13
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %14
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %15
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %16
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %17
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %18
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %19
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %20
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %21
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %22
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %23
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %24
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %25
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %26
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %27
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %28
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %29
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %30
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %31
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %32
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %33
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %34
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %35
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %36
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %37
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %38
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %39
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @50, i64 0, i64 0), <2 x double>** %40
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %41
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %42
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %43
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %44
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %45
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %46
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %47
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %48
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @106, i64 0, i64 0), <4 x double>** %49
  %gemPrm = call %gemPrm @"gemPrm@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[F[F[F[F[F[F[V[V[V[V[V[V[V[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[P[P[P[P[P[P[P[P[P"(double** %50, double** %0, double** %1, double** %2, double** %3, double** %4, <3 x double>** %5, <3 x double>** %6, <3 x double>** %7, <3 x double>** %8, <3 x double>** %9, <3 x double>** %10, <3 x double>** %11, <2 x double>** %12, <2 x double>** %13, <2 x double>** %14, <2 x double>** %15, <2 x double>** %16, <2 x double>** %17, <2 x double>** %18, <2 x double>** %19, <2 x double>** %20, <2 x double>** %21, <2 x double>** %22, <2 x double>** %23, <2 x double>** %24, <2 x double>** %25, <2 x double>** %26, <2 x double>** %27, <2 x double>** %28, <2 x double>** %29, <2 x double>** %30, <2 x double>** %31, <2 x double>** %32, <2 x double>** %33, <2 x double>** %34, <2 x double>** %35, <2 x double>** %36, <2 x double>** %37, <2 x double>** %38, <2 x double>** %39, <2 x double>** %40, <4 x double>** %41, <4 x double>** %42, <4 x double>** %43, <4 x double>** %44, <4 x double>** %45, <4 x double>** %46, <4 x double>** %47, <4 x double>** %48, <4 x double>** %49)
  ret %gemPrm %gemPrm
}

define private double @"sgn@FF"(double* %n) nounwind alwaysinline {
__llvm_entry:
  %n1 = load double* %n
  %return = fcmp olt double %n1, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"neg@II"(i64 1)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return5 = fcmp ogt double %n1, 0.000000e+00
  %. = select i1 %return5, i64 1, i64 0
  br label %end

end:                                              ; preds = %false, %true
  %phi10 = phi i64 [ %return3, %true ], [ %., %false ]
  %cast = sitofp i64 %phi10 to double
  ret double %cast
}

define private void @"sincos@FFF"(double* %a, double* %sa, double* %ca) nounwind alwaysinline {
__llvm_entry:
  %a1 = load double* %a
  %return = call double @"sin@FF"(double %a1)
  store double %return, double* %sa
  %a2 = load double* %a
  %return3 = call double @"cos@FF"(double %a2)
  store double %return3, double* %ca
  ret void
}

declare double @"sin@FF"(double) nounwind readnone

declare double @"cos@FF"(double) nounwind readnone

define private double @"fmod@FFF"(double* %a, double* %b) nounwind alwaysinline {
__llvm_entry:
  %a1 = load double* %a
  %b3 = load double* %b
  %output = call double @"div@FF"(double %a1, double %b3)
  %return = call double @"floor@FF"(double %output)
  %output5 = fmul double %return, %b3
  %output6 = fsub double %a1, %output5
  ret double %output6
}

declare double @"div@FF"(double, double) nounwind readnone

declare double @"floor@FF"(double) nounwind readnone

define private double @"precalc@FSV"(i8** %type, <3 x double>* %p) nounwind alwaysinline {
__llvm_entry:
  %type1 = load i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %p2 = load <3 x double>* %p
  %return3 = call double @"getcomp@FVI"(<3 x double> %p2, i64 0)
  %output = fmul double %return3, %return3
  %return7 = call double @"getcomp@FVI"(<3 x double> %p2, i64 1)
  %output10 = fmul double %return7, %return7
  %output11 = fadd double %output, %output10
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return13 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0))
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %true14, label %false15

true14:                                           ; preds = %false
  %p17 = load <3 x double>* %p
  %return18 = call double @"getcomp@FVI"(<3 x double> %p17, i64 0)
  %output21 = fmul double %return18, %return18
  %return23 = call double @"getcomp@FVI"(<3 x double> %p17, i64 1)
  %output26 = fmul double %return23, %return23
  %output27 = fadd double %output21, %output26
  %return28 = call double @"sqrt@FF"(double %output27)
  br label %UnifiedReturnBlock

false15:                                          ; preds = %false
  %return30 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0))
  %2 = icmp ne i64 %return30, 0
  br i1 %2, label %true31, label %false32

true31:                                           ; preds = %false15
  %p34 = load <3 x double>* %p
  %return35 = call double @"getcomp@FVI"(<3 x double> %p34, i64 0)
  %return37 = call double @"getcomp@FVI"(<3 x double> %p34, i64 1)
  %return38 = call double @"atan2@FFF"(double %return35, double %return37)
  br label %UnifiedReturnBlock

false32:                                          ; preds = %false15
  %return40 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0))
  %3 = icmp ne i64 %return40, 0
  br i1 %3, label %true41, label %end42

true41:                                           ; preds = %false32
  %p43 = load <3 x double>* %p
  %return44 = call double @"getcomp@FVI"(<3 x double> %p43, i64 1)
  %return46 = call double @"getcomp@FVI"(<3 x double> %p43, i64 0)
  %return47 = call double @"atan2@FFF"(double %return44, double %return46)
  br label %UnifiedReturnBlock

end42:                                            ; preds = %false32
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true41, %true31, %true14, %true
  %UnifiedRetVal = phi double [ %output11, %true ], [ %return28, %true14 ], [ %return38, %true31 ], [ %return47, %true41 ], [ 0.000000e+00, %end42 ]
  ret double %UnifiedRetVal
}

declare i64 @"eq@ISS"(i8*, i8*) nounwind readnone

declare double @"getcomp@FVI"(<3 x double>, i64) nounwind readnone

declare double @"sqrt@FF"(double) nounwind readnone

declare double @"atan2@FFF"(double, double) nounwind readnone

define private <3 x double> @"biunit@V"() nounwind alwaysinline {
__llvm_entry:
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return1 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return1 to double
  %return2 = call double @"fit01@FFFF"(double %return, double %cast, double 1.000000e+00)
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return6 = call double @"fit01@FFFF"(double %return3, double %cast, double 1.000000e+00)
  %return7 = call <3 x double> @"set@VFFF"(double %return2, double %return6, double 0.000000e+00)
  ret <3 x double> %return7
}

declare double @"nrandom@F:S"(i8*) nounwind

declare double @"fit01@FFFF"(double, double, double) nounwind

declare <3 x double> @"set@VFFF"(double, double, double) nounwind readnone

define private i64 @"chkNAN_v@IIV"(i64* %ACTIVE, <3 x double>* %vec) nounwind alwaysinline {
__llvm_entry:
  %ACTIVE1 = load i64* %ACTIVE
  %0 = icmp ne i64 %ACTIVE1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %vec2 = load <3 x double>* %vec
  %return = call double @"getcomp@FVI"(<3 x double> %vec2, i64 0)
  %return3 = call i64 @"isfinite@IF"(double %return)
  %return4 = call i64 @"not@II"(i64 %return3)
  %return6 = call double @"getcomp@FVI"(<3 x double> %vec2, i64 1)
  %return7 = call i64 @"isfinite@IF"(double %return6)
  %return8 = call i64 @"not@II"(i64 %return7)
  %return9 = call i64 @"or@III"(i64 %return4, i64 %return8)
  %return12 = call i64 @"isnan@IF"(double %return)
  %return13 = call i64 @"or@III"(i64 %return9, i64 %return12)
  %return16 = call i64 @"isnan@IF"(double %return6)
  %return17 = call i64 @"or@III"(i64 %return13, i64 %return16)
  %return19 = call double @"length@FV"(<3 x double> %vec2)
  %return20 = fcmp ogt double %return19, 1.000000e+03
  %return21 = zext i1 %return20 to i64
  %return22 = call i64 @"or@III"(i64 %return17, i64 %return21)
  %1 = icmp ne i64 %return22, 0
  %. = select i1 %1, i64 1, i64 0
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %merge = phi i64 [ 0, %__llvm_entry ], [ %., %true ]
  ret i64 %merge
}

declare i64 @"isfinite@IF"(double) nounwind readnone

declare i64 @"or@III"(i64, i64) nounwind readnone

declare i64 @"isnan@IF"(double) nounwind readnone

declare double @"length@FV"(<3 x double>) nounwind

declare i64 @"removepoint@III"(i64, i64) nounwind

define private void @"V_SYM@VVI"(<3 x double>* %p, <3 x double>* %pivot, i64* %num) nounwind alwaysinline {
__llvm_entry:
  %num1 = load i64* %num
  %return = call i64 @"not@II"(i64 %num1)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = call double @"div@FF"(double 1.000000e+00, double 3.000000e+00)
  %return3 = fcmp ogt double %return2, %output
  br i1 %return3, label %true5, label %end

false:                                            ; preds = %__llvm_entry
  %1 = icmp ne i64 %num1, 0
  br i1 %1, label %true20, label %end

end:                                              ; preds = %false, %end26, %true, %end11
  ret void

true5:                                            ; preds = %true
  %return7 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return8 = fcmp ogt double %return7, 5.000000e-01
  br i1 %return8, label %true10, label %end11

true10:                                           ; preds = %true5
  br label %end11

end11:                                            ; preds = %true10, %true5
  %ang.0 = phi double [ 2.400000e+02, %true10 ], [ 1.200000e+02, %true5 ]
  %p12 = load <3 x double>* %p
  %cast = call <3 x double> @"set@VI"(i64 0)
  %return14 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %ang.0)
  %cast15 = call <3 x double> @"set@VI"(i64 1)
  %pivot16 = load <3 x double>* %pivot
  %return17 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return14, <3 x double> %cast15, <3 x double> %pivot16)
  %output18 = call <3 x double> @"mul@V4"(<3 x double> %p12, <16 x double> %return17)
  store <3 x double> %output18, <3 x double>* %p
  br label %end

true20:                                           ; preds = %false
  %return22 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return23 = fcmp oge double %return22, 2.000000e-01
  br i1 %return23, label %true25, label %end26

true25:                                           ; preds = %true20
  %return27 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return29 = fcmp olt double 2.000000e-01, %return27
  %return30 = zext i1 %return29 to i64
  %cast31 = sitofp i64 %return30 to double
  %return32 = fcmp ole double %cast31, 4.000000e-01
  br i1 %return32, label %true34, label %false35

end26:                                            ; preds = %false53, %true61, %true52, %true43, %true34, %true20
  %ang.1 = phi double [ 7.200000e+01, %true34 ], [ 1.440000e+02, %true43 ], [ 2.160000e+02, %true52 ], [ 2.880000e+02, %true61 ], [ 0.000000e+00, %false53 ], [ 0.000000e+00, %true20 ]
  %p63 = load <3 x double>* %p
  %cast64 = call <3 x double> @"set@VI"(i64 0)
  %return66 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %ang.1)
  %cast67 = call <3 x double> @"set@VI"(i64 1)
  %pivot68 = load <3 x double>* %pivot
  %return69 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast64, <3 x double> %return66, <3 x double> %cast67, <3 x double> %pivot68)
  %output70 = call <3 x double> @"mul@V4"(<3 x double> %p63, <16 x double> %return69)
  store <3 x double> %output70, <3 x double>* %p
  br label %end

true34:                                           ; preds = %true25
  br label %end26

false35:                                          ; preds = %true25
  %return38 = fcmp olt double 4.000000e-01, %return27
  %return39 = zext i1 %return38 to i64
  %cast40 = sitofp i64 %return39 to double
  %return41 = fcmp ole double %cast40, 6.000000e-01
  br i1 %return41, label %true43, label %false44

true43:                                           ; preds = %false35
  br label %end26

false44:                                          ; preds = %false35
  %return47 = fcmp olt double 6.000000e-01, %return27
  %return48 = zext i1 %return47 to i64
  %cast49 = sitofp i64 %return48 to double
  %return50 = fcmp ole double %cast49, 8.000000e-01
  br i1 %return50, label %true52, label %false53

true52:                                           ; preds = %false44
  br label %end26

false53:                                          ; preds = %false44
  %return56 = fcmp olt double 8.000000e-01, %return27
  %return57 = zext i1 %return56 to i64
  %cast58 = sitofp i64 %return57 to double
  %return59 = fcmp ole double %cast58, 1.000000e+00
  br i1 %return59, label %true61, label %end26

true61:                                           ; preds = %false53
  br label %end26
}

declare <3 x double> @"set@VI"(i64) nounwind readnone

declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) nounwind

define private void @"precalc_utils@IVV"(i64* %type, <3 x double>* %p, <3 x double>* %precalc) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %type1 = load i64* %type
  %return = call i64 @"eq@III"(i64 %type1, i64 9)
  %return3 = call i64 @"eq@III"(i64 %type1, i64 10)
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  %return6 = call i64 @"eq@III"(i64 %type1, i64 11)
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  %return9 = call i64 @"eq@III"(i64 %type1, i64 19)
  %return10 = call i64 @"or@III"(i64 %return7, i64 %return9)
  %return12 = call i64 @"eq@III"(i64 %type1, i64 21)
  %return13 = call i64 @"or@III"(i64 %return10, i64 %return12)
  %return15 = call i64 @"eq@III"(i64 %type1, i64 30)
  %return16 = call i64 @"or@III"(i64 %return13, i64 %return15)
  %return18 = call i64 @"eq@III"(i64 %type1, i64 35)
  %return19 = call i64 @"or@III"(i64 %return16, i64 %return18)
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %p20 = load <3 x double>* %p
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %p21 = load <3 x double>* %p
  store <3 x double> %p21, <3 x double>* %1
  %precalc22 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %cast = call <3 x double> @"set@VF"(double %precalc22)
  %output = call <3 x double> @"div@VV"(<3 x double> %p20, <3 x double> %cast)
  store <3 x double> %output, <3 x double>* %precalc
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) nounwind readnone

define private void @"affine@VVUUU"(<3 x double>* %outp, <3 x double>* %p, <2 x double>* %x, <2 x double>* %y, <2 x double>* %o) nounwind alwaysinline {
__llvm_entry:
  %outp1 = load <3 x double>* %outp
  %x2 = load <2 x double>* %x
  %return = call double @"getcomp@FUI"(<2 x double> %x2, i64 0)
  %p3 = load <3 x double>* %p
  %return4 = call double @"getcomp@FVI"(<3 x double> %p3, i64 0)
  %output = fmul double %return, %return4
  %y5 = load <2 x double>* %y
  %return6 = call double @"getcomp@FUI"(<2 x double> %y5, i64 0)
  %return8 = call double @"getcomp@FVI"(<3 x double> %p3, i64 1)
  %output9 = fmul double %return6, %return8
  %output10 = fadd double %output, %output9
  %o11 = load <2 x double>* %o
  %return12 = call double @"getcomp@FUI"(<2 x double> %o11, i64 0)
  %output13 = fadd double %output10, %return12
  %return15 = call double @"getcomp@FUI"(<2 x double> %x2, i64 1)
  %output18 = fmul double %return15, %return4
  %return20 = call double @"getcomp@FUI"(<2 x double> %y5, i64 1)
  %output23 = fmul double %return20, %return8
  %output24 = fadd double %output18, %output23
  %return26 = call double @"getcomp@FUI"(<2 x double> %o11, i64 1)
  %output27 = fadd double %output24, %return26
  %return28 = call <3 x double> @"set@VFFF"(double %output13, double %output27, double 0.000000e+00)
  %output29 = call <3 x double> @"add@VV"(<3 x double> %outp1, <3 x double> %return28)
  store <3 x double> %output29, <3 x double>* %outp
  ret void
}

declare double @"getcomp@FUI"(<2 x double>, i64) nounwind readnone

declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) nounwind readnone

define private void @"affinePOST@VUUU"(<3 x double>* %p, <2 x double>* %x, <2 x double>* %y, <2 x double>* %o) nounwind alwaysinline {
__llvm_entry:
  %x1 = load <2 x double>* %x
  %return = call double @"getcomp@FUI"(<2 x double> %x1, i64 0)
  %p2 = load <3 x double>* %p
  %return3 = call double @"getcomp@FVI"(<3 x double> %p2, i64 0)
  %output = fmul double %return, %return3
  %y4 = load <2 x double>* %y
  %return5 = call double @"getcomp@FUI"(<2 x double> %y4, i64 0)
  %return7 = call double @"getcomp@FVI"(<3 x double> %p2, i64 1)
  %output8 = fmul double %return5, %return7
  %output9 = fadd double %output, %output8
  %o10 = load <2 x double>* %o
  %return11 = call double @"getcomp@FUI"(<2 x double> %o10, i64 0)
  %output12 = fadd double %output9, %return11
  %return14 = call double @"getcomp@FUI"(<2 x double> %x1, i64 1)
  %output17 = fmul double %return14, %return3
  %return19 = call double @"getcomp@FUI"(<2 x double> %y4, i64 1)
  %output22 = fmul double %return19, %return7
  %output23 = fadd double %output17, %output22
  %return25 = call double @"getcomp@FUI"(<2 x double> %o10, i64 1)
  %output26 = fadd double %output23, %return25
  %return27 = call <3 x double> @"set@VFFF"(double %output12, double %output26, double 0.000000e+00)
  store <3 x double> %return27, <3 x double>* %p
  ret void
}

define private void @"V_SINUSOIDAL@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %w1 = load double* %w
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %output = fmul double %w1, %return3
  %tmp = load <3 x double>* %p
  %return4 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return4, 1
  store <3 x double> %output6, <3 x double>* %p
  %w7 = load double* %w
  %_p8 = load <3 x double>* %_p
  %return9 = call double @"getcomp@FVI"(<3 x double> %_p8, i64 1)
  %return10 = call double @"sin@FF"(double %return9)
  %output11 = fmul double %w7, %return10
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output6, double %output11, i64 1)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %p
  ret void
}

define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) alwaysinline {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) nounwind readnone

define private void @"V_SPHERICAL@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e-10
  %output3 = call double @"div@FF"(double %w1, double %output)
  %_p5 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p5, i64 0)
  %output6 = fmul double %output3, %return
  %tmp = load <3 x double>* %p
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output6, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output9, <3 x double>* %p
  %_p11 = load <3 x double>* %_p
  %return12 = call double @"getcomp@FVI"(<3 x double> %_p11, i64 1)
  %output13 = fmul double %output3, %return12
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output9, double %output13, i64 1)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %p
  ret void
}

define private void @"V_SWIRL@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %return = call double @"sin@FF"(double %precalc)
  %return4 = call double @"cos@FF"(double %precalc)
  %_p6 = load <3 x double>* %_p
  %return7 = call double @"getcomp@FVI"(<3 x double> %_p6, i64 0)
  %output = fmul double %return, %return7
  %return10 = call double @"getcomp@FVI"(<3 x double> %_p6, i64 1)
  %output11 = fmul double %return4, %return10
  %output12 = fsub double %output, %output11
  %output16 = fmul double %return4, %return7
  %output20 = fmul double %return, %return10
  %output21 = fadd double %output16, %output20
  %w22 = load double* %w
  %output24 = fmul double %w22, %output12
  %tmp = load <3 x double>* %p
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %p
  %w28 = load double* %w
  %output30 = fmul double %w28, %output21
  %return32 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output27, double %output30, i64 1)
  %output34 = extractvalue { double, <3 x double> } %return32, 1
  store <3 x double> %output34, <3 x double>* %p
  ret void
}

define private void @"V_HORSESHOE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e-10
  %output3 = call double @"div@FF"(double %w1, double %output)
  %_p4 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p4, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p4, i64 1)
  %output7 = fsub double %return, %return6
  %output12 = fadd double %return, %return6
  %output13 = fmul double %output7, %output12
  %output15 = fmul double %output13, %output3
  %tmp = load <3 x double>* %p
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %p
  %_p19 = load <3 x double>* %_p
  %return20 = call double @"getcomp@FVI"(<3 x double> %_p19, i64 0)
  %output21 = fmul double 2.000000e+00, %return20
  %return23 = call double @"getcomp@FVI"(<3 x double> %_p19, i64 1)
  %output24 = fmul double %output21, %return23
  %output26 = fmul double %output24, %output3
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output18, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  ret void
}

define private void @"V_POLAR@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double %precalc, 0x3FD45F306DC9C883
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output4 = fsub double %precalc3, 1.000000e+00
  %w5 = load double* %w
  %output7 = fmul double %w5, %output
  %tmp = load <3 x double>* %p
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output9, <3 x double>* %p
  %w10 = load double* %w
  %output12 = fmul double %w10, %output4
  %return14 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output9, double %output12, i64 1)
  %output16 = extractvalue { double, <3 x double> } %return14, 1
  store <3 x double> %output16, <3 x double>* %p
  ret void
}

define private void @"V_HANDKERCHIEF@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca i8*
  %5 = alloca <3 x double>
  %6 = alloca i8*
  %7 = alloca <3 x double>
  %8 = alloca i8*
  %9 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w2 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p3 = load <3 x double>* %_p
  store <3 x double> %_p3, <3 x double>* %3
  %precalc4 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output = fmul double %w2, %precalc4
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %4
  %_p6 = load <3 x double>* %_p
  store <3 x double> %_p6, <3 x double>* %5
  %precalc7 = call double @"precalc@FSV"(i8** %4, <3 x double>* %5)
  %output8 = fadd double %precalc, %precalc7
  %return = call double @"sin@FF"(double %output8)
  %output9 = fmul double %output, %return
  %tmp = load <3 x double>* %p
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %p
  %w13 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %6
  %_p14 = load <3 x double>* %_p
  store <3 x double> %_p14, <3 x double>* %7
  %precalc15 = call double @"precalc@FSV"(i8** %6, <3 x double>* %7)
  %output16 = fmul double %w13, %precalc15
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %8
  %_p18 = load <3 x double>* %_p
  store <3 x double> %_p18, <3 x double>* %9
  %precalc19 = call double @"precalc@FSV"(i8** %8, <3 x double>* %9)
  %output20 = fsub double %precalc, %precalc19
  %return21 = call double @"cos@FF"(double %output20)
  %output22 = fmul double %output16, %return21
  %tmp23 = load <3 x double>* %p
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp23, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  ret void
}

define private void @"V_HEART@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca i8*
  %5 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %2
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output = fmul double %precalc, %precalc3
  %return = call double @"sin@FF"(double %output)
  %return6 = call double @"cos@FF"(double %output)
  %w7 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %4
  %_p8 = load <3 x double>* %_p
  store <3 x double> %_p8, <3 x double>* %5
  %precalc9 = call double @"precalc@FSV"(i8** %4, <3 x double>* %5)
  %output10 = fmul double %w7, %precalc9
  %output12 = fmul double %output10, %return
  %output15 = fmul double %output12, %return
  %tmp = load <3 x double>* %p
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %p
  %return20 = call double @"neg@FF"(double %output12)
  %output22 = fmul double %return20, %return6
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output18, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  ret void
}

define private void @"V_DISC@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = call double @"div@FF"(double 1.000000e+00, double 0x400921FB4D12D84A)
  %output2 = fmul double %precalc, %output
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p3 = load <3 x double>* %_p
  store <3 x double> %_p3, <3 x double>* %3
  %precalc4 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output5 = fmul double 0x400921FB4D12D84A, %precalc4
  store double %output5, double* %4
  call void @"sincos@FFF"(double* %4, double* %sr, double* %cr)
  %w7 = load double* %w
  %sr8 = load double* %sr
  %output9 = fmul double %w7, %sr8
  %output11 = fmul double %output9, %output2
  %tmp = load <3 x double>* %p
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output13 = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output13, <3 x double>* %p
  %w14 = load double* %w
  %cr15 = load double* %cr
  %output16 = fmul double %w14, %cr15
  %output18 = fmul double %output16, %output2
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output13, double %output18, i64 1)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %p
  ret void
}

define private void @"V_SPIRAL@VVVF"(<3 x double>* %p, <3 x double>* %_p, <3 x double>* %precalc, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc2, 1.000000e-10
  %w3 = load double* %w
  %output5 = call double @"div@FF"(double %w3, double %output)
  store double %output, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %precalc8 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc8, i64 1)
  %sr9 = load double* %sr
  %output10 = fadd double %return, %sr9
  %output11 = fmul double %output5, %output10
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %precalc16 = load <3 x double>* %precalc
  %return17 = call double @"getcomp@FVI"(<3 x double> %precalc16, i64 0)
  %cr18 = load double* %cr
  %output19 = fsub double %return17, %cr18
  %output20 = fmul double %output5, %output19
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output20, i64 1)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %p
  ret void
}

define private void @"V_HIPERBOLIC@VVVF"(<3 x double>* %p, <3 x double>* %_p, <3 x double>* %precalc, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc2, 1.000000e-10
  %w3 = load double* %w
  %precalc4 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc4, i64 0)
  %output5 = fmul double %w3, %return
  %output7 = call double @"div@FF"(double %output5, double %output)
  %tmp = load <3 x double>* %p
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %p
  %w11 = load double* %w
  %precalc12 = load <3 x double>* %precalc
  %return13 = call double @"getcomp@FVI"(<3 x double> %precalc12, i64 1)
  %output14 = fmul double %w11, %return13
  %output16 = fmul double %output14, %output
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %p
  ret void
}

define private void @"V_DIAMOND@VVVF"(<3 x double>* %p, <3 x double>* %_p, <3 x double>* %precalc, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store double %precalc2, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %w4 = load double* %w
  %precalc5 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc5, i64 0)
  %cr6 = load double* %cr
  %output = fmul double %return, %cr6
  %output7 = fmul double %w4, %output
  %tmp = load <3 x double>* %p
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %p
  %w11 = load double* %w
  %precalc12 = load <3 x double>* %precalc
  %return13 = call double @"getcomp@FVI"(<3 x double> %precalc12, i64 1)
  %sr14 = load double* %sr
  %output15 = fmul double %return13, %sr14
  %output16 = fmul double %w11, %output15
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %p
  ret void
}

define private void @"V_EX@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output = fadd double %precalc, %precalc3
  %return = call double @"sin@FF"(double %output)
  %output8 = fsub double %precalc, %precalc3
  %return9 = call double @"cos@FF"(double %output8)
  %output12 = fmul double %return, %return
  %output14 = fmul double %output12, %return
  %output16 = fmul double %output14, %precalc3
  %output19 = fmul double %return9, %return9
  %output21 = fmul double %output19, %return9
  %output23 = fmul double %output21, %precalc3
  %w24 = load double* %w
  %output27 = fadd double %output16, %output23
  %output28 = fmul double %w24, %output27
  %tmp = load <3 x double>* %p
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output28, i64 0)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %p
  %w32 = load double* %w
  %output35 = fsub double %output16, %output23
  %output36 = fmul double %w32, %output35
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output31, double %output36, i64 1)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %p
  ret void
}

define private void @"V_JULIA@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double 5.000000e-01, %precalc
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return2 = fcmp olt double %return, 5.000000e-01
  br i1 %return2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output5 = fadd double %output, 0x400921FB4D12D84A
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %aa.0 = phi double [ %output5, %true ], [ %output, %__llvm_entry ]
  %w6 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p7 = load <3 x double>* %_p
  store <3 x double> %_p7, <3 x double>* %3
  %precalc8 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return9 = call double @"sqrt@FF"(double %precalc8)
  %output10 = fmul double %w6, %return9
  store double %aa.0, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %ca13 = load double* %ca
  %output14 = fmul double %output10, %ca13
  %tmp = load <3 x double>* %p
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %p
  %sa19 = load double* %sa
  %output20 = fmul double %output10, %sa19
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output17, double %output20, i64 1)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %p
  ret void
}

define private void @"V_BENT@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %return5 = fcmp olt double %return, 0.000000e+00
  br i1 %return5, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output = fmul double %return, 2.000000e+00
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nx.0 = phi double [ %output, %true ], [ %return, %__llvm_entry ]
  %return9 = fcmp olt double %return3, 0.000000e+00
  br i1 %return9, label %true11, label %end12

true11:                                           ; preds = %end
  %output14 = call double @"div@FF"(double %return3, double 2.000000e+00)
  br label %end12

end12:                                            ; preds = %true11, %end
  %ny.0 = phi double [ %output14, %true11 ], [ %return3, %end ]
  %w15 = load double* %w
  %output17 = fmul double %w15, %nx.0
  %tmp = load <3 x double>* %p
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %p
  %w21 = load double* %w
  %output23 = fmul double %w21, %ny.0
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output20, double %output23, i64 1)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %p
  ret void
}

define private void @"V_WAVES@VVFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %d, double* %e, double* %f, double* %h) nounwind alwaysinline {
__llvm_entry:
  %f1 = load double* %f
  %output = fmul double %f1, %f1
  %output3 = fadd double %output, 1.000000e-10
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output3)
  %h5 = load double* %h
  %output7 = fmul double %h5, %h5
  %output8 = fadd double %output7, 1.000000e-10
  %output9 = call double @"div@FF"(double 1.000000e+00, double %output8)
  %_p10 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p10, i64 0)
  %d11 = load double* %d
  %return13 = call double @"getcomp@FVI"(<3 x double> %_p10, i64 1)
  %output15 = fmul double %return13, %output4
  %return16 = call double @"sin@FF"(double %output15)
  %output17 = fmul double %d11, %return16
  %output18 = fadd double %return, %output17
  %e21 = load double* %e
  %output25 = fmul double %return, %output9
  %return26 = call double @"sin@FF"(double %output25)
  %output27 = fmul double %e21, %return26
  %output28 = fadd double %return13, %output27
  %w29 = load double* %w
  %output31 = fmul double %w29, %output18
  %tmp = load <3 x double>* %p
  %return32 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output31, i64 0)
  %output34 = extractvalue { double, <3 x double> } %return32, 1
  store <3 x double> %output34, <3 x double>* %p
  %w35 = load double* %w
  %output37 = fmul double %w35, %output28
  %return39 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output34, double %output37, i64 1)
  %output41 = extractvalue { double, <3 x double> } %return39, 1
  store <3 x double> %output41, <3 x double>* %p
  ret void
}

define private void @"V_FISHEYE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w2 = load double* %w
  %output = fmul double 2.000000e+00, %w2
  %output4 = fadd double %precalc, 1.000000e+00
  %output5 = call double @"div@FF"(double %output, double %output4)
  %_p7 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p7, i64 1)
  %output8 = fmul double %output5, %return
  %tmp = load <3 x double>* %p
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %p
  %_p13 = load <3 x double>* %_p
  %return14 = call double @"getcomp@FVI"(<3 x double> %_p13, i64 0)
  %output15 = fmul double %output5, %return14
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output11, double %output15, i64 1)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %p
  ret void
}

define private void @"V_POPCORN@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %d, double* %h) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %output = fmul double 3.000000e+00, %return
  %return2 = call double @"tan@FF"(double %output)
  %return4 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %output5 = fmul double 3.000000e+00, %return4
  %return6 = call double @"tan@FF"(double %output5)
  %d9 = load double* %d
  %return11 = call double @"sin@FF"(double %return2)
  %output12 = fmul double %d9, %return11
  %output13 = fadd double %return4, %output12
  %h16 = load double* %h
  %return18 = call double @"sin@FF"(double %return6)
  %output19 = fmul double %h16, %return18
  %output20 = fadd double %return, %output19
  %w21 = load double* %w
  %output23 = fmul double %w21, %output13
  %tmp = load <3 x double>* %p
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  %w27 = load double* %w
  %output29 = fmul double %w27, %output20
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %p
  ret void
}

declare double @"tan@FF"(double) nounwind readnone

define private void @"V_EXPONENTIAL@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sdy = alloca double
  %cdy = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sdy, !vex-initializer-store !3
  store double 0.000000e+00, double* %cdy, !vex-initializer-store !3
  %w1 = load double* %w
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output = fsub double %return, 1.000000e+00
  %return3 = call double @"exp@FF"(double %output)
  %output4 = fmul double %w1, %return3
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output7 = fmul double 0x400921FB4D12D84A, %return6
  store double %output7, double* %0
  call void @"sincos@FFF"(double* %0, double* %sdy, double* %cdy)
  %cdy10 = load double* %cdy
  %output11 = fmul double %output4, %cdy10
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %sdy16 = load double* %sdy
  %output17 = fmul double %output4, %sdy16
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output17, i64 1)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %p
  ret void
}

declare double @"exp@FF"(double) nounwind readnone

define private void @"V_POWER@VVVF"(<3 x double>* %p, <3 x double>* %_p, <3 x double>* %precalc, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc3 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %precalc4 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc4, i64 0)
  %return5 = call double @"pow@FFF"(double %precalc3, double %return)
  %output = fmul double %w1, %return5
  %return8 = call double @"getcomp@FVI"(<3 x double> %precalc4, i64 1)
  %output9 = fmul double %output, %return8
  %tmp = load <3 x double>* %p
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %p
  %precalc14 = load <3 x double>* %precalc
  %return15 = call double @"getcomp@FVI"(<3 x double> %precalc14, i64 0)
  %output16 = fmul double %output, %return15
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output12, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %p
  ret void
}

declare double @"pow@FFF"(double, double) nounwind readnone

define private void @"V_COSINE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %output = fmul double %return, 0x400921FB4D12D84A
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %sa, double* %ca)
  %ca3 = load double* %ca
  %_p4 = load <3 x double>* %_p
  %return5 = call double @"getcomp@FVI"(<3 x double> %_p4, i64 1)
  %return6 = call double @"cosh@FF"(double %return5)
  %output7 = fmul double %ca3, %return6
  %sa8 = load double* %sa
  %return9 = call double @"neg@FF"(double %sa8)
  %return12 = call double @"sinh@FF"(double %return5)
  %output13 = fmul double %return9, %return12
  %w14 = load double* %w
  %output16 = fmul double %w14, %output7
  %tmp = load <3 x double>* %p
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %p
  %w20 = load double* %w
  %output22 = fmul double %w20, %output13
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  ret void
}

declare double @"cosh@FF"(double) nounwind readnone

declare double @"sinh@FF"(double) nounwind readnone

define private void @"V_RINGS@VVVFF"(<3 x double>* %p, <3 x double>* %_p, <3 x double>* %precalc, double* %w, double* %d) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca double
  %d1 = load double* %d
  %output = fmul double %d1, %d1
  %output3 = fadd double %output, 1.000000e-10
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p4 = load <3 x double>* %_p
  store <3 x double> %_p4, <3 x double>* %1
  %precalc5 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w6 = load double* %w
  %output9 = fadd double %precalc5, %output3
  store double %output9, double* %2
  %output11 = fmul double 2.000000e+00, %output3
  store double %output11, double* %3
  %fmod = call double @"fmod@FFF"(double* %2, double* %3)
  %output13 = fsub double %fmod, %output3
  %output16 = fsub double 1.000000e+00, %output3
  %output17 = fmul double %precalc5, %output16
  %output18 = fadd double %output13, %output17
  %output19 = fmul double %w6, %output18
  %precalc21 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc21, i64 1)
  %output22 = fmul double %output19, %return
  %tmp = load <3 x double>* %p
  %return23 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output22, i64 0)
  %output25 = extractvalue { double, <3 x double> } %return23, 1
  store <3 x double> %output25, <3 x double>* %p
  %precalc27 = load <3 x double>* %precalc
  %return28 = call double @"getcomp@FVI"(<3 x double> %precalc27, i64 0)
  %output29 = fmul double %output19, %return28
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output25, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %p
  ret void
}

define private void @"V_FAN@VVFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %d) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %d1 = load double* %d
  %output = fmul double %d1, %d1
  %output3 = fadd double %output, 1.000000e-10
  %output4 = fmul double 0x400921FB4D12D84A, %output3
  %output7 = fmul double 5.000000e-01, %output4
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p8 = load <3 x double>* %_p
  store <3 x double> %_p8, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w9 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p10 = load <3 x double>* %_p
  store <3 x double> %_p10, <3 x double>* %3
  %precalc11 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output12 = fmul double %w9, %precalc11
  %output16 = fadd double %precalc, %d1
  store double %output16, double* %4
  store double %output4, double* %5
  %fmod = call double @"fmod@FFF"(double* %4, double* %5)
  %return = fcmp ogt double %fmod, %output7
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return21 = call double @"neg@FF"(double %output7)
  br label %end

end:                                              ; preds = %__llvm_entry, %true
  %phi = phi double [ %return21, %true ], [ %output7, %__llvm_entry ]
  %output23 = fadd double %precalc, %phi
  store double %output23, double* %6
  call void @"sincos@FFF"(double* %6, double* %sa, double* %ca)
  %ca26 = load double* %ca
  %output27 = fmul double %output12, %ca26
  %tmp = load <3 x double>* %p
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  %sa32 = load double* %sa
  %output33 = fmul double %output12, %sa32
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_BUBBLE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double 2.500000e-01, %precalc
  %output3 = fadd double %output, 1.000000e+00
  %output4 = call double @"div@FF"(double %w1, double %output3)
  %_p6 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p6, i64 0)
  %output7 = fmul double %output4, %return
  %tmp = load <3 x double>* %p
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %p
  %_p12 = load <3 x double>* %_p
  %return13 = call double @"getcomp@FVI"(<3 x double> %_p12, i64 1)
  %output14 = fmul double %output4, %return13
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %p
  ret void
}

define private void @"V_CYLINDER@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %w1 = load double* %w
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %output = fmul double %w1, %return3
  %tmp = load <3 x double>* %p
  %return4 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return4, 1
  store <3 x double> %output6, <3 x double>* %p
  %w7 = load double* %w
  %_p8 = load <3 x double>* %_p
  %return9 = call double @"getcomp@FVI"(<3 x double> %_p8, i64 1)
  %output10 = fmul double %w7, %return9
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output6, double %output10, i64 1)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  ret void
}

define private void @"V_EYEFISH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  %output = fmul double %w1, 2.000000e+00
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output3 = fadd double 1.000000e+00, %precalc
  %output4 = call double @"div@FF"(double %output, double %output3)
  %_p6 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p6, i64 0)
  %output7 = fmul double %output4, %return
  %tmp = load <3 x double>* %p
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %p
  %_p12 = load <3 x double>* %_p
  %return13 = call double @"getcomp@FVI"(<3 x double> %_p12, i64 1)
  %output14 = fmul double %output4, %return13
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %p
  ret void
}

define private void @"V_BLUR@VF"(<3 x double>* %p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  store double %output1, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %w3 = load double* %w
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output5 = fmul double %w3, %return4
  %cosr7 = load double* %cosr
  %output8 = fmul double %output5, %cosr7
  %tmp = load <3 x double>* %p
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %p
  %sinr13 = load double* %sinr
  %output14 = fmul double %output5, %sinr13
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output11, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %p
  ret void
}

define private void @"V_CURL@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %c1, double* %c2) nounwind alwaysinline {
__llvm_entry:
  %c11 = load double* %c1
  %return = fcmp oeq double %c11, 0.000000e+00
  %c23 = load double* %c2
  %return4 = fcmp oeq double %c23, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br i1 %return4, label %true6, label %false7

false:                                            ; preds = %__llvm_entry
  %_p87 = load <3 x double>* %_p
  %return88 = call double @"getcomp@FVI"(<3 x double> %_p87, i64 0)
  %output89 = fmul double %c11, %return88
  %output90 = fadd double 1.000000e+00, %output89
  br i1 %return4, label %true83, label %false84

end:                                              ; preds = %true83, %false84, %true6, %false7
  ret void

true6:                                            ; preds = %true
  %w9 = load double* %w
  %_p10 = load <3 x double>* %_p
  %return11 = call double @"getcomp@FVI"(<3 x double> %_p10, i64 0)
  %output = fmul double %w9, %return11
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %w15 = load double* %w
  %_p16 = load <3 x double>* %_p
  %return17 = call double @"getcomp@FVI"(<3 x double> %_p16, i64 1)
  %output18 = fmul double %w15, %return17
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output18, i64 1)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %p
  br label %end

false7:                                           ; preds = %true
  %_p24 = load <3 x double>* %_p
  %return25 = call double @"getcomp@FVI"(<3 x double> %_p24, i64 0)
  %return26 = call double @"sqrt@FF"(double %return25)
  %return28 = call double @"getcomp@FVI"(<3 x double> %_p24, i64 1)
  %return29 = call double @"sqrt@FF"(double %return28)
  %output30 = fsub double %return26, %return29
  %output31 = fmul double %c23, %output30
  %output32 = fadd double 1.000000e+00, %output31
  %output34 = fmul double %c23, 2.000000e+00
  %output37 = fmul double %output34, %return25
  %output40 = fmul double %output37, %return28
  %w41 = load double* %w
  %output44 = fmul double %output32, %output32
  %output47 = fmul double %output40, %output40
  %output48 = fadd double %output44, %output47
  %output49 = call double @"div@FF"(double %w41, double %output48)
  %output53 = fmul double %return25, %output32
  %output57 = fmul double %return28, %output40
  %output58 = fadd double %output53, %output57
  %output60 = fmul double %output58, %output49
  %tmp61 = load <3 x double>* %p
  %return62 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp61, double %output60, i64 0)
  %output64 = extractvalue { double, <3 x double> } %return62, 1
  store <3 x double> %output64, <3 x double>* %p
  %_p65 = load <3 x double>* %_p
  %return66 = call double @"getcomp@FVI"(<3 x double> %_p65, i64 1)
  %output68 = fmul double %return66, %output32
  %return70 = call double @"getcomp@FVI"(<3 x double> %_p65, i64 0)
  %output72 = fmul double %return70, %output40
  %output73 = fsub double %output68, %output72
  %output75 = fmul double %output73, %output49
  %return77 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output64, double %output75, i64 1)
  %output79 = extractvalue { double, <3 x double> } %return77, 1
  store <3 x double> %output79, <3 x double>* %p
  br label %end

true83:                                           ; preds = %false
  %return93 = call double @"getcomp@FVI"(<3 x double> %_p87, i64 1)
  %output94 = fmul double %c11, %return93
  %w95 = load double* %w
  %output98 = fmul double %output90, %output90
  %output101 = fmul double %output94, %output94
  %output102 = fadd double %output98, %output101
  %output103 = call double @"div@FF"(double %w95, double %output102)
  %output107 = fmul double %return88, %output90
  %output111 = fmul double %return93, %output94
  %output112 = fadd double %output107, %output111
  %output114 = fmul double %output112, %output103
  %tmp115 = load <3 x double>* %p
  %return116 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp115, double %output114, i64 0)
  %output118 = extractvalue { double, <3 x double> } %return116, 1
  store <3 x double> %output118, <3 x double>* %p
  %_p119 = load <3 x double>* %_p
  %return120 = call double @"getcomp@FVI"(<3 x double> %_p119, i64 1)
  %output122 = fmul double %return120, %output90
  %return124 = call double @"getcomp@FVI"(<3 x double> %_p119, i64 0)
  %output126 = fmul double %return124, %output94
  %output127 = fsub double %output122, %output126
  %output129 = fmul double %output127, %output103
  %return131 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output118, double %output129, i64 1)
  %output133 = extractvalue { double, <3 x double> } %return131, 1
  store <3 x double> %output133, <3 x double>* %p
  br label %end

false84:                                          ; preds = %false
  %return142 = call double @"sqrt@FF"(double %return88)
  %return144 = call double @"getcomp@FVI"(<3 x double> %_p87, i64 1)
  %return145 = call double @"sqrt@FF"(double %return144)
  %output146 = fsub double %return142, %return145
  %output147 = fmul double %c23, %output146
  %output148 = fadd double %output90, %output147
  %output152 = fmul double %c11, %return144
  %output154 = fmul double %c23, 2.000000e+00
  %output157 = fmul double %output154, %return88
  %output160 = fmul double %output157, %return144
  %output161 = fadd double %output152, %output160
  %w162 = load double* %w
  %output165 = fmul double %output148, %output148
  %output168 = fmul double %output161, %output161
  %output169 = fadd double %output165, %output168
  %output170 = call double @"div@FF"(double %w162, double %output169)
  %output174 = fmul double %return88, %output148
  %output178 = fmul double %return144, %output161
  %output179 = fadd double %output174, %output178
  %output181 = fmul double %output179, %output170
  %tmp182 = load <3 x double>* %p
  %return183 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp182, double %output181, i64 0)
  %output185 = extractvalue { double, <3 x double> } %return183, 1
  store <3 x double> %output185, <3 x double>* %p
  %_p186 = load <3 x double>* %_p
  %return187 = call double @"getcomp@FVI"(<3 x double> %_p186, i64 1)
  %output189 = fmul double %return187, %output148
  %return191 = call double @"getcomp@FVI"(<3 x double> %_p186, i64 0)
  %output193 = fmul double %return191, %output161
  %output194 = fsub double %output189, %output193
  %output196 = fmul double %output194, %output170
  %return198 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output185, double %output196, i64 1)
  %output200 = extractvalue { double, <3 x double> } %return198, 1
  store <3 x double> %output200, <3 x double>* %p
  br label %end
}

define private void @"V_NGON@VVFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %pow, double* %sides, double* %corners, double* %circle) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %return = call double @"neg@FF"(double 5.000000e-01)
  %pow1 = load double* %pow
  %output = fmul double %return, %pow1
  %sides2 = load double* %sides
  %output3 = call double @"div@FF"(double 0x401921FB4D12D84A, double %sides2)
  %output5 = call double @"div@FF"(double 1.000000e+00, double %output3)
  %_p6 = load <3 x double>* %_p
  %return7 = call double @"getcomp@FVI"(<3 x double> %_p6, i64 0)
  %return8 = fcmp oeq double %return7, 0.000000e+00
  %return9 = zext i1 %return8 to i64
  %return11 = call double @"getcomp@FVI"(<3 x double> %_p6, i64 1)
  %return12 = fcmp oeq double %return11, 0.000000e+00
  %return13 = zext i1 %return12 to i64
  %return14 = call i64 @"and@III"(i64 %return9, i64 %return13)
  %4 = icmp ne i64 %return14, 0
  br i1 %4, label %end, label %false

false:                                            ; preds = %__llvm_entry
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p15 = load <3 x double>* %_p
  store <3 x double> %_p15, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %return17 = call double @"pow@FFF"(double %precalc, double %output)
  br label %end

end:                                              ; preds = %__llvm_entry, %false
  %phi18 = phi double [ %return17, %false ], [ 0.000000e+00, %__llvm_entry ]
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  %_p19 = load <3 x double>* %_p
  store <3 x double> %_p19, <3 x double>* %3
  %precalc20 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output25 = fmul double %precalc20, %output5
  %return26 = call double @"floor@FF"(double %output25)
  %output27 = fmul double %output3, %return26
  %output28 = fsub double %precalc20, %output27
  %output31 = fmul double 5.000000e-01, %output3
  %return32 = fcmp ogt double %output28, %output31
  br i1 %return32, label %true34, label %end35

true34:                                           ; preds = %end
  %output38 = fsub double %output28, %output3
  br label %end35

end35:                                            ; preds = %true34, %end
  %phi.0 = phi double [ %output38, %true34 ], [ %output28, %end ]
  %corners39 = load double* %corners
  %return41 = call double @"cos@FF"(double %phi.0)
  %output42 = call double @"div@FF"(double 1.000000e+00, double %return41)
  %output43 = fsub double %output42, 1.000000e+00
  %output44 = fmul double %corners39, %output43
  %circle45 = load double* %circle
  %output46 = fadd double %output44, %circle45
  %w47 = load double* %w
  %output48 = fmul double %output46, %w47
  %output50 = fmul double %output48, %phi18
  %_p52 = load <3 x double>* %_p
  %return53 = call double @"getcomp@FVI"(<3 x double> %_p52, i64 0)
  %output54 = fmul double %output50, %return53
  %tmp = load <3 x double>* %p
  %return55 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output54, i64 0)
  %output57 = extractvalue { double, <3 x double> } %return55, 1
  store <3 x double> %output57, <3 x double>* %p
  %_p59 = load <3 x double>* %_p
  %return60 = call double @"getcomp@FVI"(<3 x double> %_p59, i64 1)
  %output61 = fmul double %output50, %return60
  %return63 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output57, double %output61, i64 1)
  %output65 = extractvalue { double, <3 x double> } %return63, 1
  store <3 x double> %output65, <3 x double>* %p
  ret void
}

declare i64 @"and@III"(i64, i64) nounwind readnone

define private void @"V_PDJ@VVFP"(<3 x double>* %p, <3 x double>* %_p, double* %w, <4 x double>* %pp) nounwind alwaysinline {
__llvm_entry:
  %pp1 = load <4 x double>* %pp
  %return = call double @"getcomp@FPI"(<4 x double> %pp1, i64 1)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output = fmul double %return, %return3
  %return4 = call double @"cos@FF"(double %output)
  %return6 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 2)
  %output9 = fmul double %return6, %return3
  %return10 = call double @"sin@FF"(double %output9)
  %return12 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 0)
  %return14 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output15 = fmul double %return12, %return14
  %return16 = call double @"sin@FF"(double %output15)
  %return18 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 3)
  %output21 = fmul double %return18, %return14
  %return22 = call double @"cos@FF"(double %output21)
  %w23 = load double* %w
  %output26 = fsub double %return16, %return4
  %output27 = fmul double %w23, %output26
  %tmp = load <3 x double>* %p
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  %w31 = load double* %w
  %output34 = fsub double %return10, %return22
  %output35 = fmul double %w31, %output34
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output35, i64 1)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %p
  ret void
}

declare double @"getcomp@FPI"(<4 x double>, i64) nounwind readnone

define private void @"V_BLOB@VVVFFFF"(<3 x double>* %p, <3 x double>* %_p, <3 x double>* %precalc, double* %w, double* %pp1, double* %pp2, double* %pp3) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %2
  %_p4 = load <3 x double>* %_p
  store <3 x double> %_p4, <3 x double>* %3
  %precalc5 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %pp16 = load double* %pp1
  %pp27 = load double* %pp2
  %output = fsub double %pp16, %pp27
  %pp311 = load double* %pp3
  %output13 = fmul double %pp311, %precalc5
  %return = call double @"sin@FF"(double %output13)
  %output14 = fmul double 5.000000e-01, %return
  %output15 = fadd double 5.000000e-01, %output14
  %output16 = fmul double %output, %output15
  %output17 = fadd double %pp27, %output16
  %output18 = fmul double %precalc2, %output17
  %w19 = load double* %w
  %precalc20 = load <3 x double>* %precalc
  %return21 = call double @"getcomp@FVI"(<3 x double> %precalc20, i64 0)
  %output22 = fmul double %w19, %return21
  %output24 = fmul double %output22, %output18
  %tmp = load <3 x double>* %p
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %p
  %w28 = load double* %w
  %precalc29 = load <3 x double>* %precalc
  %return30 = call double @"getcomp@FVI"(<3 x double> %precalc29, i64 1)
  %output31 = fmul double %w28, %return30
  %output33 = fmul double %output31, %output18
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output27, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_JULIAN@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %power, double* %jdist) nounwind alwaysinline {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %power1 = load double* %power
  %jdist2 = load double* %jdist
  %output = call double @"div@FF"(double %jdist2, double %power1)
  %output4 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output6 = fmul double %power1, %return
  %return7 = call double @"trunc@FF"(double %output6)
  %cast = fptosi double %return7 to i64
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %0
  %_p8 = load <3 x double>* %_p
  store <3 x double> %_p8, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %cast10 = sitofp i64 %cast to double
  %output11 = fmul double 0x401921FB4D12D84A, %cast10
  %output12 = fadd double %precalc, %output11
  %power13 = load double* %power
  %output14 = call double @"div@FF"(double %output12, double %power13)
  %w15 = load double* %w
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %2
  %_p16 = load <3 x double>* %_p
  store <3 x double> %_p16, <3 x double>* %3
  %precalc17 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return19 = call double @"pow@FFF"(double %precalc17, double %output4)
  %output20 = fmul double %w15, %return19
  store double %output14, double* %4
  call void @"sincos@FFF"(double* %4, double* %sina, double* %cosa)
  %cosa23 = load double* %cosa
  %output24 = fmul double %output20, %cosa23
  %tmp = load <3 x double>* %p
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %p
  %sina29 = load double* %sina
  %output30 = fmul double %output20, %sina29
  %return32 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output27, double %output30, i64 1)
  %output34 = extractvalue { double, <3 x double> } %return32, 1
  store <3 x double> %output34, <3 x double>* %p
  ret void
}

declare double @"trunc@FF"(double) nounwind readnone

define private void @"V_JULIASCOPE@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %power, double* %jdist) nounwind alwaysinline {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca i8*
  %4 = alloca <3 x double>
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %power1 = load double* %power
  %jdist2 = load double* %jdist
  %output = call double @"div@FF"(double %jdist2, double %power1)
  %output4 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output6 = fmul double %power1, %return
  %return7 = call double @"trunc@FF"(double %output6)
  %cast = fptosi double %return7 to i64
  %return9 = and i64 %cast, 1
  %return10 = call i64 @"eq@III"(i64 %return9, i64 0)
  %5 = icmp ne i64 %return10, 0
  %cast12 = sitofp i64 %cast to double
  %output13 = fmul double 0x401921FB4D12D84A, %cast12
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %0
  %_p14 = load <3 x double>* %_p
  store <3 x double> %_p14, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  br i1 %5, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output15 = fadd double %output13, %precalc
  %power16 = load double* %power
  %output17 = call double @"div@FF"(double %output15, double %power16)
  br label %end

false:                                            ; preds = %__llvm_entry
  %output23 = fsub double %output13, %precalc
  %power24 = load double* %power
  %output25 = call double @"div@FF"(double %output23, double %power24)
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi double [ %output17, %true ], [ %output25, %false ]
  store double %phi, double* %2
  call void @"sincos@FFF"(double* %2, double* %sina, double* %cosa)
  %w27 = load double* %w
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %3
  %_p28 = load <3 x double>* %_p
  store <3 x double> %_p28, <3 x double>* %4
  %precalc29 = call double @"precalc@FSV"(i8** %3, <3 x double>* %4)
  %return31 = call double @"pow@FFF"(double %precalc29, double %output4)
  %output32 = fmul double %w27, %return31
  %cosa34 = load double* %cosa
  %output35 = fmul double %output32, %cosa34
  %tmp = load <3 x double>* %p
  %return36 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output35, i64 0)
  %output38 = extractvalue { double, <3 x double> } %return36, 1
  store <3 x double> %output38, <3 x double>* %p
  %sina40 = load double* %sina
  %output41 = fmul double %output32, %sina40
  %return43 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output38, double %output41, i64 1)
  %output45 = extractvalue { double, <3 x double> } %return43, 1
  store <3 x double> %output45, <3 x double>* %p
  ret void
}

define private void @"V_GAUSSIAN@VF"(<3 x double>* %p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  %w2 = load double* %w
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output5 = fadd double %return3, %return4
  %return6 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output7 = fadd double %output5, %return6
  %return8 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output9 = fadd double %output7, %return8
  %output10 = fsub double %output9, 2.000000e+00
  %output11 = fmul double %w2, %output10
  %return14 = call double @"cos@FF"(double %output1)
  %output15 = fmul double %output11, %return14
  %tmp = load <3 x double>* %p
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %p
  %return21 = call double @"sin@FF"(double %output1)
  %output22 = fmul double %output11, %return21
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output18, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  ret void
}

define private void @"V_FAN2@VVFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %fan2) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %fan21 = load <2 x double>* %fan2
  %return = call double @"getcomp@FUI"(<2 x double> %fan21, i64 1)
  %return3 = call double @"getcomp@FUI"(<2 x double> %fan21, i64 0)
  %output = fmul double %return3, %return3
  %output6 = fadd double %output, 1.000000e-10
  %output7 = fmul double 0x400921FB4D12D84A, %output6
  %output9 = fmul double 5.000000e-01, %output7
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p10 = load <3 x double>* %_p
  store <3 x double> %_p10, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w11 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p12 = load <3 x double>* %_p
  store <3 x double> %_p12, <3 x double>* %3
  %precalc13 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output14 = fmul double %w11, %precalc13
  %output17 = fadd double %precalc, %return
  %output23 = call double @"div@FF"(double %output17, double %output7)
  %cast = fptosi double %output23 to i64
  %cast24 = sitofp i64 %cast to double
  %output25 = fmul double %output7, %cast24
  %output26 = fsub double %output17, %output25
  %return29 = fcmp ogt double %output26, %output9
  br i1 %return29, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output33 = fsub double %precalc, %output9
  br label %end

false:                                            ; preds = %__llvm_entry
  %output36 = fadd double %precalc, %output9
  br label %end

end:                                              ; preds = %false, %true
  %phi = phi double [ %output33, %true ], [ %output36, %false ]
  store double %phi, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %sa39 = load double* %sa
  %output40 = fmul double %output14, %sa39
  %tmp = load <3 x double>* %p
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output40, i64 0)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %p
  %ca45 = load double* %ca
  %output46 = fmul double %output14, %ca45
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output43, double %output46, i64 1)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %p
  ret void
}

define private void @"V_RINGS2@VVVFF"(<3 x double>* %p, <3 x double>* %_p, <3 x double>* %precalc, double* %w, double* %rings2val) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %rings2val3 = load double* %rings2val
  %output = fmul double %rings2val3, %rings2val3
  %return = call double @"neg@FF"(double 2.000000e+00)
  %output7 = fmul double %return, %output
  %output10 = fadd double %precalc2, %output
  %output12 = fmul double 2.000000e+00, %output
  %output13 = call double @"div@FF"(double %output10, double %output12)
  %cast = fptosi double %output13 to i64
  %cast14 = sitofp i64 %cast to double
  %output15 = fmul double %output7, %cast14
  %output18 = fsub double 1.000000e+00, %output
  %output19 = fmul double %precalc2, %output18
  %output20 = fadd double %output15, %output19
  %output21 = fadd double %precalc2, %output20
  %w22 = load double* %w
  %precalc23 = load <3 x double>* %precalc
  %return24 = call double @"getcomp@FVI"(<3 x double> %precalc23, i64 0)
  %output25 = fmul double %w22, %return24
  %output27 = fmul double %output25, %output21
  %tmp = load <3 x double>* %p
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  %w31 = load double* %w
  %precalc32 = load <3 x double>* %precalc
  %return33 = call double @"getcomp@FVI"(<3 x double> %precalc32, i64 1)
  %output34 = fmul double %w31, %return33
  %output36 = fmul double %output34, %output21
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output36, i64 1)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %p
  ret void
}

define private void @"V_RECTANGLES@VVFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %rect) nounwind alwaysinline {
__llvm_entry:
  %rect1 = load <2 x double>* %rect
  %return = call double @"getcomp@FUI"(<2 x double> %rect1, i64 0)
  %return2 = fcmp oeq double %return, 0.000000e+00
  %w4 = load double* %w
  %_p5 = load <3 x double>* %_p
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p5, i64 0)
  br i1 %return2, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = fmul double %w4, %return6
  %tmp = load <3 x double>* %p
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output9, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %output15 = call double @"div@FF"(double %return6, double %return)
  %return16 = call i64 @"floor@IF"(double %output15)
  %output17 = mul i64 2, %return16
  %output18 = add i64 %output17, 1
  %rect19 = load <2 x double>* %rect
  %return20 = call double @"getcomp@FUI"(<2 x double> %rect19, i64 0)
  %cast = sitofp i64 %output18 to double
  %output21 = fmul double %cast, %return20
  %_p22 = load <3 x double>* %_p
  %return23 = call double @"getcomp@FVI"(<3 x double> %_p22, i64 0)
  %output24 = fsub double %output21, %return23
  %output25 = fmul double %w4, %output24
  %tmp26 = load <3 x double>* %p
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp26, double %output25, i64 0)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %rect30 = load <2 x double>* %rect
  %return31 = call double @"getcomp@FUI"(<2 x double> %rect30, i64 1)
  %return32 = fcmp oeq double %return31, 0.000000e+00
  %w37 = load double* %w
  %_p38 = load <3 x double>* %_p
  %return39 = call double @"getcomp@FVI"(<3 x double> %_p38, i64 1)
  br i1 %return32, label %true34, label %false35

true34:                                           ; preds = %end
  %output40 = fmul double %w37, %return39
  %tmp41 = load <3 x double>* %p
  %return42 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp41, double %output40, i64 1)
  %output44 = extractvalue { double, <3 x double> } %return42, 1
  store <3 x double> %output44, <3 x double>* %p
  br label %end36

false35:                                          ; preds = %end
  %output50 = call double @"div@FF"(double %return39, double %return31)
  %return51 = call i64 @"floor@IF"(double %output50)
  %output52 = mul i64 2, %return51
  %output53 = add i64 %output52, 1
  %rect54 = load <2 x double>* %rect
  %return55 = call double @"getcomp@FUI"(<2 x double> %rect54, i64 1)
  %cast56 = sitofp i64 %output53 to double
  %output57 = fmul double %cast56, %return55
  %_p58 = load <3 x double>* %_p
  %return59 = call double @"getcomp@FVI"(<3 x double> %_p58, i64 1)
  %output60 = fsub double %output57, %return59
  %output61 = fmul double %w37, %output60
  %tmp62 = load <3 x double>* %p
  %return63 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp62, double %output61, i64 1)
  %output65 = extractvalue { double, <3 x double> } %return63, 1
  store <3 x double> %output65, <3 x double>* %p
  br label %end36

end36:                                            ; preds = %false35, %true34
  ret void
}

declare i64 @"floor@IF"(double) nounwind

define private void @"V_RADIALBLUR@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %spin, double* %zoom) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %w1 = load double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = fadd double %return, %return2
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output4 = fadd double %output, %return3
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output6 = fadd double %output4, %return5
  %output7 = fsub double %output6, 2.000000e+00
  %output8 = fmul double %w1, %output7
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p9 = load <3 x double>* %_p
  store <3 x double> %_p9, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  %_p10 = load <3 x double>* %_p
  store <3 x double> %_p10, <3 x double>* %3
  %precalc11 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %spin12 = load double* %spin
  %output14 = fmul double %spin12, %output8
  %output15 = fadd double %precalc11, %output14
  store double %output15, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %zoom17 = load double* %zoom
  %output19 = fmul double %zoom17, %output8
  %output20 = fsub double %output19, 1.000000e+00
  %ca22 = load double* %ca
  %output23 = fmul double %precalc, %ca22
  %_p25 = load <3 x double>* %_p
  %return26 = call double @"getcomp@FVI"(<3 x double> %_p25, i64 0)
  %output27 = fmul double %output20, %return26
  %output28 = fadd double %output23, %output27
  %tmp = load <3 x double>* %p
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output28, i64 0)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %p
  %sa33 = load double* %sa
  %output34 = fmul double %precalc, %sa33
  %_p36 = load <3 x double>* %_p
  %return37 = call double @"getcomp@FVI"(<3 x double> %_p36, i64 1)
  %output38 = fmul double %output20, %return37
  %output39 = fadd double %output34, %output38
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output31, double %output39, i64 1)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %p
  ret void
}

define private void @"V_PIE@VFFFF"(<3 x double>* %p, double* %w, double* %slices, double* %thickness, double* %rotation) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %slices1 = load double* %slices
  %output = fmul double %return, %slices1
  %cast = fptosi double %output to i64
  %cast2 = sitofp i64 %cast to double
  %rotation3 = load double* %rotation
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %thickness6 = load double* %thickness
  %output7 = fmul double %return5, %thickness6
  %output8 = fadd double %cast2, %output7
  %output9 = fmul double 0x401921FB4D12D84A, %output8
  %slices10 = load double* %slices
  %output11 = call double @"div@FF"(double %output9, double %slices10)
  %output12 = fadd double %rotation3, %output11
  %w13 = load double* %w
  %return14 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output15 = fmul double %w13, %return14
  store double %output12, double* %0
  call void @"sincos@FFF"(double* %0, double* %sa, double* %ca)
  %ca18 = load double* %ca
  %output19 = fmul double %output15, %ca18
  %tmp = load <3 x double>* %p
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output19, i64 0)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %p
  %sa24 = load double* %sa
  %output25 = fmul double %output15, %sa24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output22, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %p
  ret void
}

define private void @"V_ARCH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %w1 = load double* %w
  %output = fmul double %return, %w1
  %output2 = fmul double %output, 0x400921FB4D12D84A
  store double %output2, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %_p4 = load <3 x double>* %_p
  %return5 = call double @"getcomp@FVI"(<3 x double> %_p4, i64 0)
  %w6 = load double* %w
  %sinr7 = load double* %sinr
  %output8 = fmul double %w6, %sinr7
  %output9 = fadd double %return5, %output8
  %tmp = load <3 x double>* %p
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %p
  %_p13 = load <3 x double>* %_p
  %return14 = call double @"getcomp@FVI"(<3 x double> %_p13, i64 1)
  %w15 = load double* %w
  %sinr16 = load double* %sinr
  %output18 = fmul double %sinr16, %sinr16
  %output19 = fmul double %w15, %output18
  %cosr20 = load double* %cosr
  %output21 = call double @"div@FF"(double %output19, double %cosr20)
  %output22 = fadd double %return14, %output21
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output12, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  ret void
}

define private void @"V_TANGENT@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %w1 = load double* %w
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %return5 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %return6 = call double @"cos@FF"(double %return5)
  %output = call double @"div@FF"(double %return3, double %return6)
  %output7 = fmul double %w1, %output
  %tmp = load <3 x double>* %p
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %p
  %w11 = load double* %w
  %_p12 = load <3 x double>* %_p
  %return13 = call double @"getcomp@FVI"(<3 x double> %_p12, i64 1)
  %return14 = call double @"tan@FF"(double %return13)
  %output15 = fmul double %w11, %return14
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output15, i64 1)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %p
  ret void
}

define private void @"V_SQUARE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %w1 = load double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = fsub double %return, 5.000000e-01
  %output2 = fmul double %w1, %output
  %tmp = load <3 x double>* %p
  %return3 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output2, i64 0)
  %output5 = extractvalue { double, <3 x double> } %return3, 1
  store <3 x double> %output5, <3 x double>* %p
  %w6 = load double* %w
  %return7 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output8 = fsub double %return7, 5.000000e-01
  %output9 = fmul double %w6, %output8
  %tmp10 = load <3 x double>* %p
  %return11 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp10, double %output9, i64 0)
  %output13 = extractvalue { double, <3 x double> } %return11, 1
  store <3 x double> %output13, <3 x double>* %p
  ret void
}

define private void @"V_RAYS@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = fmul double %w1, %return
  %output2 = fmul double %output, 0x400921FB4D12D84A
  %w3 = load double* %w
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p4 = load <3 x double>* %_p
  store <3 x double> %_p4, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output5 = fadd double %precalc, 1.000000e-10
  %output6 = call double @"div@FF"(double %w3, double %output5)
  %w7 = load double* %w
  %return9 = call double @"tan@FF"(double %output2)
  %output10 = fmul double %w7, %return9
  %output12 = fmul double %output10, %output6
  %_p14 = load <3 x double>* %_p
  %return15 = call double @"getcomp@FVI"(<3 x double> %_p14, i64 0)
  %return16 = call double @"cos@FF"(double %return15)
  %output17 = fmul double %output12, %return16
  %tmp = load <3 x double>* %p
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %p
  %_p22 = load <3 x double>* %_p
  %return23 = call double @"getcomp@FVI"(<3 x double> %_p22, i64 1)
  %return24 = call double @"sin@FF"(double %return23)
  %output25 = fmul double %output12, %return24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output20, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %p
  ret void
}

define private void @"V_BLADE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %w1 = load double* %w
  %output = fmul double %return, %w1
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output3 = fmul double %output, %precalc
  store double %output3, double* %2
  call void @"sincos@FFF"(double* %2, double* %sinr, double* %cosr)
  %w5 = load double* %w
  %_p6 = load <3 x double>* %_p
  %return7 = call double @"getcomp@FVI"(<3 x double> %_p6, i64 0)
  %output8 = fmul double %w5, %return7
  %cosr9 = load double* %cosr
  %sinr10 = load double* %sinr
  %output11 = fadd double %cosr9, %sinr10
  %output12 = fmul double %output8, %output11
  %tmp = load <3 x double>* %p
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %p
  %w16 = load double* %w
  %_p17 = load <3 x double>* %_p
  %return18 = call double @"getcomp@FVI"(<3 x double> %_p17, i64 0)
  %output19 = fmul double %w16, %return18
  %cosr20 = load double* %cosr
  %sinr21 = load double* %sinr
  %output22 = fsub double %cosr20, %sinr21
  %output23 = fmul double %output19, %output22
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output23, i64 1)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %p
  ret void
}

define private void @"V_SECANT2@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double %w1, %precalc
  %return = call double @"cos@FF"(double %output)
  %output7 = call double @"div@FF"(double 1.000000e+00, double %return)
  %w8 = load double* %w
  %_p9 = load <3 x double>* %_p
  %return10 = call double @"getcomp@FVI"(<3 x double> %_p9, i64 0)
  %output11 = fmul double %w8, %return10
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %return16 = fcmp olt double %return, 0.000000e+00
  %w18 = load double* %w
  br i1 %return16, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output20 = fadd double %output7, 1.000000e+00
  br label %end

false:                                            ; preds = %__llvm_entry
  %output24 = fsub double %output7, 1.000000e+00
  br label %end

end:                                              ; preds = %false, %true
  %output20.sink = phi double [ %output20, %true ], [ %output24, %false ]
  %output21 = fmul double %w18, %output20.sink
  %tmp26 = load <3 x double>* %p
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp26, double %output21, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %p
  ret void
}

define private void @"V_TWINTRIAN@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %w1 = load double* %w
  %output = fmul double %return, %w1
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output3 = fmul double %output, %precalc
  store double %output3, double* %2
  call void @"sincos@FFF"(double* %2, double* %sinr, double* %cosr)
  %sinr5 = load double* %sinr
  %output7 = fmul double %sinr5, %sinr5
  %return8 = call double @"log10@FF"(double %output7)
  %cosr9 = load double* %cosr
  %output10 = fadd double %return8, %cosr9
  %return12 = call i64 @"isfinite@IF"(double %output10)
  %return13 = call i64 @"not@II"(i64 %return12)
  %return15 = call i64 @"isnan@IF"(double %output10)
  %return16 = call i64 @"or@III"(i64 %return13, i64 %return15)
  %3 = icmp ne i64 %return16, 0
  br i1 %3, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return17 = call double @"neg@FF"(double 3.000000e+01)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %diff.0 = phi double [ %return17, %true ], [ %output10, %__llvm_entry ]
  %w18 = load double* %w
  %_p19 = load <3 x double>* %_p
  %return20 = call double @"getcomp@FVI"(<3 x double> %_p19, i64 0)
  %output21 = fmul double %w18, %return20
  %output23 = fmul double %output21, %diff.0
  %tmp = load <3 x double>* %p
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  %w27 = load double* %w
  %_p28 = load <3 x double>* %_p
  %return29 = call double @"getcomp@FVI"(<3 x double> %_p28, i64 0)
  %output30 = fmul double %w27, %return29
  %sinr32 = load double* %sinr
  %output33 = fmul double %sinr32, 0x400921FB4D12D84A
  %output34 = fsub double %diff.0, %output33
  %output35 = fmul double %output30, %output34
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output35, i64 1)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %p
  ret void
}

declare double @"log10@FF"(double) nounwind readnone

define private void @"V_CROSS@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %output8 = fmul double %return5, %return5
  %output9 = fsub double %output, %output8
  %w10 = load double* %w
  %output13 = fmul double %output9, %output9
  %output14 = fadd double %output13, 1.000000e-10
  %output15 = call double @"div@FF"(double 1.000000e+00, double %output14)
  %return16 = call double @"sqrt@FF"(double %output15)
  %output17 = fmul double %w10, %return16
  %output21 = fmul double %return, %output17
  %tmp = load <3 x double>* %p
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %p
  %_p25 = load <3 x double>* %_p
  %return26 = call double @"getcomp@FVI"(<3 x double> %_p25, i64 1)
  %output28 = fmul double %return26, %output17
  %return30 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output24, double %output28, i64 1)
  %output32 = extractvalue { double, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %p
  ret void
}

define private void @"V_DISC2@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %rot, double* %twist) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %disc2_sinadd = alloca double
  %disc2_cosadd = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  store double 0.000000e+00, double* %disc2_sinadd, !vex-initializer-store !3
  store double 0.000000e+00, double* %disc2_cosadd, !vex-initializer-store !3
  %rot1 = load double* %rot
  %output = fmul double %rot1, 0x400921FB4D12D84A
  %twist2 = load double* %twist
  store double %twist2, double* %0
  call void @"sincos@FFF"(double* %0, double* %disc2_sinadd, double* %disc2_cosadd)
  %disc2_cosadd3 = load double* %disc2_cosadd
  %output4 = fsub double %disc2_cosadd3, 1.000000e+00
  store double %output4, double* %disc2_cosadd
  %twist5 = load double* %twist
  %return = fcmp ogt double %twist5, 0x401921FB4D12D84A
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output8 = fadd double 1.000000e+00, %twist5
  %output9 = fsub double %output8, 0x401921FB4D12D84A
  %output12 = fmul double %output4, %output9
  store double %output12, double* %disc2_cosadd
  %disc2_sinadd13 = load double* %disc2_sinadd
  %output15 = fmul double %disc2_sinadd13, %output9
  store double %output15, double* %disc2_sinadd
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %twist16 = load double* %twist
  %return17 = call i64 @"neg@II"(i64 2)
  %cast = sitofp i64 %return17 to double
  %output18 = fmul double %cast, 0x400921FB4D12D84A
  %return19 = fcmp olt double %twist16, %output18
  br i1 %return19, label %true21, label %end22

true21:                                           ; preds = %end
  %output24 = fadd double 1.000000e+00, %twist16
  %output25 = fadd double %output24, 0x401921FB4D12D84A
  %disc2_cosadd26 = load double* %disc2_cosadd
  %output28 = fmul double %disc2_cosadd26, %output25
  store double %output28, double* %disc2_cosadd
  %disc2_sinadd29 = load double* %disc2_sinadd
  %output31 = fmul double %disc2_sinadd29, %output25
  store double %output31, double* %disc2_sinadd
  br label %end22

end22:                                            ; preds = %true21, %end
  %_p33 = load <3 x double>* %_p
  %return34 = call double @"getcomp@FVI"(<3 x double> %_p33, i64 0)
  %return36 = call double @"getcomp@FVI"(<3 x double> %_p33, i64 1)
  %output37 = fadd double %return34, %return36
  %output38 = fmul double %output, %output37
  store double %output38, double* %1
  call void @"sincos@FFF"(double* %1, double* %sinr, double* %cosr)
  %w40 = load double* %w
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %2
  %_p41 = load <3 x double>* %_p
  store <3 x double> %_p41, <3 x double>* %3
  %precalc = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output42 = fmul double %w40, %precalc
  %output43 = call double @"div@FF"(double %output42, double 0x400921FB4D12D84A)
  %sinr44 = load double* %sinr
  %disc2_cosadd45 = load double* %disc2_cosadd
  %output46 = fadd double %sinr44, %disc2_cosadd45
  %output48 = fmul double %output46, %output43
  %tmp = load <3 x double>* %p
  %return49 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output48, i64 0)
  %output51 = extractvalue { double, <3 x double> } %return49, 1
  store <3 x double> %output51, <3 x double>* %p
  %cosr52 = load double* %cosr
  %disc2_sinadd53 = load double* %disc2_sinadd
  %output54 = fadd double %cosr52, %disc2_sinadd53
  %output56 = fmul double %output54, %output43
  %return58 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output51, double %output56, i64 1)
  %output60 = extractvalue { double, <3 x double> } %return58, 1
  store <3 x double> %output60, <3 x double>* %p
  ret void
}

define private void @"V_SUPERSHAPE@VVFFFFV"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %ss_rnd, double* %ss_m, double* %ss_holes, <3 x double>* %ss_n) nounwind alwaysinline {
__llvm_entry:
  %st = alloca double
  %ct = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca i8*
  %4 = alloca <3 x double>
  store double 0.000000e+00, double* %st, !vex-initializer-store !3
  store double 0.000000e+00, double* %ct, !vex-initializer-store !3
  %ss_m1 = load double* %ss_m
  %output = call double @"div@FF"(double %ss_m1, double 4.000000e+00)
  %return = call double @"neg@FF"(double 1.000000e+00)
  %ss_n2 = load <3 x double>* %ss_n
  %return3 = call double @"getcomp@FVI"(<3 x double> %ss_n2, i64 0)
  %output4 = call double @"div@FF"(double %return, double %return3)
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %0
  %_p6 = load <3 x double>* %_p
  store <3 x double> %_p6, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output7 = fmul double %output, %precalc
  %output8 = fadd double %output7, 7.853981e-01
  store double %output8, double* %2
  call void @"sincos@FFF"(double* %2, double* %st, double* %ct)
  %ct10 = load double* %ct
  %return11 = call double @"abs@FF"(double %ct10)
  %ss_n13 = load <3 x double>* %ss_n
  %return14 = call double @"getcomp@FVI"(<3 x double> %ss_n13, i64 1)
  %return15 = call double @"pow@FFF"(double %return11, double %return14)
  %st16 = load double* %st
  %return17 = call double @"abs@FF"(double %st16)
  %ss_n19 = load <3 x double>* %ss_n
  %return20 = call double @"getcomp@FVI"(<3 x double> %ss_n19, i64 2)
  %return21 = call double @"pow@FFF"(double %return17, double %return20)
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %3
  %_p22 = load <3 x double>* %_p
  store <3 x double> %_p22, <3 x double>* %4
  %precalc23 = call double @"precalc@FSV"(i8** %3, <3 x double>* %4)
  %w24 = load double* %w
  %ss_rnd25 = load double* %ss_rnd
  %return26 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output27 = fmul double %ss_rnd25, %return26
  %ss_rnd28 = load double* %ss_rnd
  %output29 = fsub double 1.000000e+00, %ss_rnd28
  %output31 = fmul double %output29, %precalc23
  %output32 = fadd double %output27, %output31
  %ss_holes33 = load double* %ss_holes
  %output34 = fsub double %output32, %ss_holes33
  %output35 = fmul double %w24, %output34
  %output38 = fadd double %return15, %return21
  %return40 = call double @"pow@FFF"(double %output38, double %output4)
  %output41 = fmul double %output35, %return40
  %output43 = call double @"div@FF"(double %output41, double %precalc23)
  %_p45 = load <3 x double>* %_p
  %return46 = call double @"getcomp@FVI"(<3 x double> %_p45, i64 0)
  %output47 = fmul double %output43, %return46
  %tmp = load <3 x double>* %p
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output47, i64 0)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %p
  %_p52 = load <3 x double>* %_p
  %return53 = call double @"getcomp@FVI"(<3 x double> %_p52, i64 1)
  %output54 = fmul double %output43, %return53
  %return56 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output50, double %output54, i64 1)
  %output58 = extractvalue { double, <3 x double> } %return56, 1
  store <3 x double> %output58, <3 x double>* %p
  ret void
}

declare double @"abs@FF"(double) nounwind

define private void @"V_FLOWER@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %petals, double* %holes) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w2 = load double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %holes3 = load double* %holes
  %output = fsub double %return, %holes3
  %output4 = fmul double %w2, %output
  %petals5 = load double* %petals
  %output7 = fmul double %petals5, %precalc
  %return8 = call double @"cos@FF"(double %output7)
  %output9 = fmul double %output4, %return8
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p10 = load <3 x double>* %_p
  store <3 x double> %_p10, <3 x double>* %3
  %precalc11 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output12 = call double @"div@FF"(double %output9, double %precalc11)
  %_p14 = load <3 x double>* %_p
  %return15 = call double @"getcomp@FVI"(<3 x double> %_p14, i64 0)
  %output16 = fmul double %output12, %return15
  %tmp = load <3 x double>* %p
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %p
  %_p21 = load <3 x double>* %_p
  %return22 = call double @"getcomp@FVI"(<3 x double> %_p21, i64 1)
  %output23 = fmul double %output12, %return22
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %output23, i64 1)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %p
  ret void
}

define private void @"V_CONIC@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %eccentricity, double* %holes) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output = call double @"div@FF"(double %return, double %precalc)
  %w4 = load double* %w
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %holes6 = load double* %holes
  %output7 = fsub double %return5, %holes6
  %output8 = fmul double %w4, %output7
  %eccentricity9 = load double* %eccentricity
  %output10 = fmul double %output8, %eccentricity9
  %output13 = fmul double %eccentricity9, %output
  %output14 = fadd double 1.000000e+00, %output13
  %output15 = call double @"div@FF"(double %output10, double %output14)
  %output17 = call double @"div@FF"(double %output15, double %precalc)
  %_p19 = load <3 x double>* %_p
  %return20 = call double @"getcomp@FVI"(<3 x double> %_p19, i64 0)
  %output21 = fmul double %output17, %return20
  %tmp = load <3 x double>* %p
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %p
  %_p26 = load <3 x double>* %_p
  %return27 = call double @"getcomp@FVI"(<3 x double> %_p26, i64 1)
  %output28 = fmul double %output17, %return27
  %return30 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output24, double %output28, i64 1)
  %output32 = extractvalue { double, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %p
  ret void
}

define private void @"V_PARABOLA@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %height, double* %width) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store double %precalc, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %height3 = load double* %height
  %w4 = load double* %w
  %output = fmul double %height3, %w4
  %sr5 = load double* %sr
  %output6 = fmul double %output, %sr5
  %output8 = fmul double %output6, %sr5
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output9 = fmul double %output8, %return
  %tmp = load <3 x double>* %p
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %p
  %width13 = load double* %width
  %w14 = load double* %w
  %output15 = fmul double %width13, %w14
  %cr16 = load double* %cr
  %output17 = fmul double %output15, %cr16
  %return18 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output19 = fmul double %output17, %return18
  %tmp20 = load <3 x double>* %p
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp20, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  ret void
}

define private void @"V_BENT2@VVFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %bent2) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %return5 = fcmp olt double %return, 0.000000e+00
  br i1 %return5, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %bent28 = load <2 x double>* %bent2
  %return9 = call double @"getcomp@FUI"(<2 x double> %bent28, i64 0)
  %output = fmul double %return, %return9
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nx.0 = phi double [ %output, %true ], [ %return, %__llvm_entry ]
  %return11 = fcmp olt double %return3, 0.000000e+00
  br i1 %return11, label %true13, label %end14

true13:                                           ; preds = %end
  %bent216 = load <2 x double>* %bent2
  %return17 = call double @"getcomp@FUI"(<2 x double> %bent216, i64 1)
  %output18 = fmul double %return3, %return17
  br label %end14

end14:                                            ; preds = %true13, %end
  %ny.0 = phi double [ %output18, %true13 ], [ %return3, %end ]
  %w19 = load double* %w
  %output21 = fmul double %w19, %nx.0
  %tmp = load <3 x double>* %p
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %p
  %w25 = load double* %w
  %output27 = fmul double %w25, %ny.0
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output24, double %output27, i64 1)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %p
  ret void
}

define private void @"V_BIPOLAR@VVFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %shift) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e+00
  %_p3 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p3, i64 0)
  %output4 = fmul double 2.000000e+00, %return
  %return5 = call double @"neg@FF"(double 0x3FF921FB4D12D84A)
  %shift6 = load double* %shift
  %output7 = fmul double %return5, %shift6
  %return9 = call double @"getcomp@FVI"(<3 x double> %_p3, i64 1)
  %output10 = fmul double 2.000000e+00, %return9
  %output12 = fsub double %precalc, 1.000000e+00
  %return13 = call double @"atan2@FFF"(double %output10, double %output12)
  %output14 = fmul double 5.000000e-01, %return13
  %output16 = fadd double %output14, %output7
  %return18 = fcmp ogt double %output16, 0x3FF921FB4D12D84A
  br i1 %return18, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output22 = fadd double %output16, 0x3FF921FB4D12D84A
  store double %output22, double* %2
  store double 0x400921FB4D12D84A, double* %3
  %fmod = call double @"fmod@FFF"(double* %2, double* %3)
  %output23 = fadd double %return5, %fmod
  br label %end

false:                                            ; preds = %__llvm_entry
  %return26 = fcmp olt double %output16, %return5
  br i1 %return26, label %true28, label %end

end:                                              ; preds = %false, %true28, %true
  %y.0 = phi double [ %output23, %true ], [ %output33, %true28 ], [ %output16, %false ]
  %w34 = load double* %w
  %output35 = fmul double %w34, 2.500000e-01
  %output36 = fmul double %output35, 0x3FE45F306DC9C883
  %output39 = fadd double %output, %output4
  %output42 = fsub double %output, %output4
  %output43 = call double @"div@FF"(double %output39, double %output42)
  %return44 = call double @"log@FF"(double %output43)
  %output45 = fmul double %output36, %return44
  %tmp = load <3 x double>* %p
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output45, i64 0)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  store <3 x double> %output48, <3 x double>* %p
  %w49 = load double* %w
  %output50 = fmul double %w49, 0x3FE45F306DC9C883
  %output52 = fmul double %output50, %y.0
  %return54 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output48, double %output52, i64 1)
  %output56 = extractvalue { double, <3 x double> } %return54, 1
  store <3 x double> %output56, <3 x double>* %p
  ret void

true28:                                           ; preds = %false
  %output31 = fsub double 0x3FF921FB4D12D84A, %output16
  store double %output31, double* %4
  store double 0x400921FB4D12D84A, double* %5
  %fmod32 = call double @"fmod@FFF"(double* %4, double* %5)
  %output33 = fsub double 0x3FF921FB4D12D84A, %fmod32
  br label %end
}

declare double @"log@FF"(double) nounwind readnone

define private void @"V_BOARDERS@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %return2 = call double @"rint@FF"(double %return)
  %return4 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %return5 = call double @"rint@FF"(double %return4)
  %output = fsub double %return, %return2
  %output12 = fsub double %return4, %return5
  %return13 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return14 = fcmp oge double %return13, 7.500000e-01
  br i1 %return14, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output17 = fmul double %output, 5.000000e-01
  %output19 = fadd double %output17, %return2
  %tmp = load <3 x double>* %p
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output19, i64 0)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %p
  %output24 = fmul double %output12, 5.000000e-01
  %output26 = fadd double %output24, %return5
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output22, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %return32 = call double @"abs@FF"(double %output)
  %return34 = call double @"abs@FF"(double %output12)
  %return35 = fcmp oge double %return32, %return34
  br i1 %return35, label %true37, label %false38

end:                                              ; preds = %true101, %false102, %true43, %false44, %true
  ret void

true37:                                           ; preds = %false
  %return41 = fcmp oge double %output, 0.000000e+00
  %w46 = load double* %w
  %output48 = fmul double %output, 5.000000e-01
  %output50 = fadd double %output48, %return2
  br i1 %return41, label %true43, label %false44

false38:                                          ; preds = %false
  %return99 = fcmp oge double %output12, 0.000000e+00
  %w104 = load double* %w
  %output106 = fmul double %output12, 5.000000e-01
  %output108 = fadd double %output106, %return5
  br i1 %return99, label %true101, label %false102

true43:                                           ; preds = %true37
  %output51 = fadd double %output50, 2.500000e-01
  %output52 = fmul double %w46, %output51
  %tmp53 = load <3 x double>* %p
  %return54 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp53, double %output52, i64 0)
  %output56 = extractvalue { double, <3 x double> } %return54, 1
  store <3 x double> %output56, <3 x double>* %p
  %w57 = load double* %w
  %output59 = fmul double %output12, 5.000000e-01
  %output61 = fadd double %output59, %return5
  %output63 = fmul double 2.500000e-01, %output12
  %output65 = call double @"div@FF"(double %output63, double %output)
  %output66 = fadd double %output61, %output65
  %output67 = fmul double %w57, %output66
  %return69 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output56, double %output67, i64 1)
  %output71 = extractvalue { double, <3 x double> } %return69, 1
  store <3 x double> %output71, <3 x double>* %p
  br label %end

false44:                                          ; preds = %true37
  %output77 = fsub double %output50, 2.500000e-01
  %output78 = fmul double %w46, %output77
  %tmp79 = load <3 x double>* %p
  %return80 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp79, double %output78, i64 0)
  %output82 = extractvalue { double, <3 x double> } %return80, 1
  store <3 x double> %output82, <3 x double>* %p
  %w83 = load double* %w
  %output85 = fmul double %output12, 5.000000e-01
  %output87 = fadd double %output85, %return5
  %output89 = fmul double 2.500000e-01, %output12
  %output91 = call double @"div@FF"(double %output89, double %output)
  %output92 = fsub double %output87, %output91
  %output93 = fmul double %w83, %output92
  %return95 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output82, double %output93, i64 1)
  %output97 = extractvalue { double, <3 x double> } %return95, 1
  store <3 x double> %output97, <3 x double>* %p
  br label %end

true101:                                          ; preds = %false38
  %output109 = fadd double %output108, 2.500000e-01
  %output110 = fmul double %w104, %output109
  %tmp111 = load <3 x double>* %p
  %return112 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp111, double %output110, i64 1)
  %output114 = extractvalue { double, <3 x double> } %return112, 1
  store <3 x double> %output114, <3 x double>* %p
  %w115 = load double* %w
  %output117 = fmul double %output, 5.000000e-01
  %output119 = fadd double %output117, %return2
  %output122 = call double @"div@FF"(double %output, double %output12)
  %output123 = fmul double %output122, 2.500000e-01
  %output124 = fadd double %output119, %output123
  %output125 = fmul double %w115, %output124
  %return127 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output114, double %output125, i64 0)
  %output129 = extractvalue { double, <3 x double> } %return127, 1
  store <3 x double> %output129, <3 x double>* %p
  br label %end

false102:                                         ; preds = %false38
  %output135 = fsub double %output108, 2.500000e-01
  %output136 = fmul double %w104, %output135
  %tmp137 = load <3 x double>* %p
  %return138 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp137, double %output136, i64 1)
  %output140 = extractvalue { double, <3 x double> } %return138, 1
  store <3 x double> %output140, <3 x double>* %p
  %w141 = load double* %w
  %output143 = fmul double %output, 5.000000e-01
  %output145 = fadd double %output143, %return2
  %output148 = call double @"div@FF"(double %output, double %output12)
  %output149 = fmul double %output148, 2.500000e-01
  %output150 = fsub double %output145, %output149
  %output151 = fmul double %w141, %output150
  %return153 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output140, double %output151, i64 0)
  %output155 = extractvalue { double, <3 x double> } %return153, 1
  store <3 x double> %output155, <3 x double>* %p
  br label %end
}

declare double @"rint@FF"(double) nounwind readnone

define private void @"V_BUTTERFLY@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %w1 = load double* %w
  %output = fmul double %w1, 0x3FF4D8D7A58FA311
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output3 = fmul double %return, 2.000000e+00
  %return8 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output9 = fmul double %return, %return8
  %return10 = call double @"abs@FF"(double %output9)
  %_p11 = load <3 x double>* %_p
  %return12 = call double @"getcomp@FVI"(<3 x double> %_p11, i64 0)
  %output15 = fmul double %return12, %return12
  %output16 = fadd double 1.000000e-10, %output15
  %output19 = fmul double %output3, %output3
  %output20 = fadd double %output16, %output19
  %output21 = call double @"div@FF"(double %return10, double %output20)
  %return22 = call double @"sqrt@FF"(double %output21)
  %output23 = fmul double %output, %return22
  %output27 = fmul double %output23, %return12
  %tmp = load <3 x double>* %p
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  %output33 = fmul double %output23, %output3
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_CELL@VVFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %size) nounwind alwaysinline {
__llvm_entry:
  %size1 = load double* %size
  %output = call double @"div@FF"(double 1.000000e+00, double %size1)
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output4 = fmul double %return, %output
  %return5 = call double @"floor@FF"(double %output4)
  %return7 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output9 = fmul double %return7, %output
  %return10 = call double @"floor@FF"(double %output9)
  %output15 = fmul double %return5, %size1
  %output16 = fsub double %return, %output15
  %output21 = fmul double %return10, %size1
  %output22 = fsub double %return7, %output21
  %return24 = fcmp oge double %return10, 0.000000e+00
  %return27 = fcmp oge double %return5, 0.000000e+00
  br i1 %return24, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output33 = fmul double %return10, 2.000000e+00
  br i1 %return27, label %true29, label %false30

false:                                            ; preds = %__llvm_entry
  %output49 = fmul double 2.000000e+00, %return10
  %output50 = fadd double %output49, 1.000000e+00
  %return51 = call double @"neg@FF"(double %output50)
  br i1 %return27, label %true45, label %false46

end:                                              ; preds = %true45, %false46, %true29, %false30
  %y.0 = phi double [ %output33, %true29 ], [ %output33, %false30 ], [ %return51, %true45 ], [ %return51, %false46 ]
  %x.0 = phi double [ %output35, %true29 ], [ %return41, %false30 ], [ %output53, %true45 ], [ %return61, %false46 ]
  %size64 = load double* %size
  %output65 = fmul double %x.0, %size64
  %output66 = fadd double %output16, %output65
  %tmp = load <3 x double>* %p
  %return67 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output66, i64 0)
  %output69 = extractvalue { double, <3 x double> } %return67, 1
  store <3 x double> %output69, <3 x double>* %p
  %size72 = load double* %size
  %output73 = fmul double %y.0, %size72
  %output74 = fadd double %output22, %output73
  %return75 = call double @"neg@FF"(double %output74)
  %return77 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output69, double %return75, i64 1)
  %output79 = extractvalue { double, <3 x double> } %return77, 1
  store <3 x double> %output79, <3 x double>* %p
  ret void

true29:                                           ; preds = %true
  %output35 = fmul double %return5, 2.000000e+00
  br label %end

false30:                                          ; preds = %true
  %output39 = fmul double 2.000000e+00, %return5
  %output40 = fadd double %output39, 1.000000e+00
  %return41 = call double @"neg@FF"(double %output40)
  br label %end

true45:                                           ; preds = %false
  %output53 = fmul double %return5, 2.000000e+00
  br label %end

false46:                                          ; preds = %false
  %output59 = fmul double 2.000000e+00, %return5
  %output60 = fadd double %output59, 1.000000e+00
  %return61 = call double @"neg@FF"(double %output60)
  br label %end
}

define private void @"V_CPOW@VVFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %power, double* %pow_r, double* %pow_i) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %2
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return = call double @"log@FF"(double %precalc3)
  %output = fmul double 5.000000e-01, %return
  %power4 = load double* %power
  %output5 = call double @"div@FF"(double 0x401921FB4D12D84A, double %power4)
  %pow_r6 = load double* %pow_r
  %output8 = call double @"div@FF"(double %pow_r6, double %power4)
  %pow_i9 = load double* %pow_i
  %output11 = call double @"div@FF"(double %pow_i9, double %power4)
  %output14 = fmul double %output8, %precalc
  %output17 = fmul double %output11, %output
  %output18 = fadd double %output14, %output17
  %return21 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output22 = fmul double %power4, %return21
  %return23 = call double @"floor@FF"(double %output22)
  %output24 = fmul double %output5, %return23
  %output25 = fadd double %output18, %output24
  %w26 = load double* %w
  %output29 = fmul double %output8, %output
  %output32 = fmul double %output11, %precalc
  %output33 = fsub double %output29, %output32
  %return34 = call double @"exp@FF"(double %output33)
  %output35 = fmul double %w26, %return34
  store double %output25, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %ca38 = load double* %ca
  %output39 = fmul double %output35, %ca38
  %tmp = load <3 x double>* %p
  %return40 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output39, i64 0)
  %output42 = extractvalue { double, <3 x double> } %return40, 1
  store <3 x double> %output42, <3 x double>* %p
  %sa44 = load double* %sa
  %output45 = fmul double %output35, %sa44
  %return47 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output42, double %output45, i64 1)
  %output49 = extractvalue { double, <3 x double> } %return47, 1
  store <3 x double> %output49, <3 x double>* %p
  ret void
}

define private void @"V_EDISC@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %snv = alloca double
  %csv = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %snv, !vex-initializer-store !3
  store double 0.000000e+00, double* %csv, !vex-initializer-store !3
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output = fmul double 2.000000e+00, %return
  %output5 = fadd double %precalc, %output
  %return6 = call double @"sqrt@FF"(double %output5)
  %output9 = fsub double %precalc, %output
  %return10 = call double @"sqrt@FF"(double %output9)
  %output13 = fadd double %return6, %return10
  %output14 = fmul double %output13, 5.000000e-01
  %output17 = fsub double %output14, 1.000000e+00
  %return18 = call double @"sqrt@FF"(double %output17)
  %output19 = fadd double %output14, %return18
  %return20 = call double @"log@FF"(double %output19)
  %output24 = call double @"div@FF"(double %return, double %output14)
  %return25 = call double @"acos@FF"(double %output24)
  %return26 = call double @"neg@FF"(double %return25)
  %w27 = load double* %w
  %output28 = call double @"div@FF"(double %w27, double 0x402724046ECF9681)
  store double %return20, double* %2
  call void @"sincos@FFF"(double* %2, double* %snv, double* %csv)
  %return31 = call double @"sinh@FF"(double %return26)
  %return33 = call double @"cosh@FF"(double %return26)
  %_p34 = load <3 x double>* %_p
  %return35 = call double @"getcomp@FVI"(<3 x double> %_p34, i64 1)
  %return36 = fcmp ogt double %return35, 0.000000e+00
  br i1 %return36, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %snv38 = load double* %snv
  %return39 = call double @"neg@FF"(double %snv38)
  store double %return39, double* %snv
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %output42 = fmul double %output28, %return33
  %csv43 = load double* %csv
  %output44 = fmul double %output42, %csv43
  %tmp45 = load <3 x double>* %p
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp45, double %output44, i64 0)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  store <3 x double> %output48, <3 x double>* %p
  %output51 = fmul double %output28, %return31
  %snv52 = load double* %snv
  %output53 = fmul double %output51, %snv52
  %return55 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output48, double %output53, i64 1)
  %output57 = extractvalue { double, <3 x double> } %return55, 1
  store <3 x double> %output57, <3 x double>* %p
  ret void
}

declare double @"acos@FF"(double) nounwind readnone

define private void @"V_ELLIPTIC@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e+00
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output3 = fmul double 2.000000e+00, %return
  %output6 = fadd double %output, %output3
  %return7 = call double @"sqrt@FF"(double %output6)
  %output10 = fsub double %output, %output3
  %return11 = call double @"sqrt@FF"(double %output10)
  %output12 = fadd double %return7, %return11
  %output13 = fmul double 5.000000e-01, %output12
  %output17 = call double @"div@FF"(double %return, double %output13)
  %output20 = fmul double %output17, %output17
  %output21 = fsub double 1.000000e+00, %output20
  %output23 = fsub double %output13, 1.000000e+00
  %w24 = load double* %w
  %output25 = call double @"div@FF"(double %w24, double 0x3FF921FB4D12D84A)
  %return27 = fcmp olt double %output21, 0.000000e+00
  br i1 %return27, label %end, label %false

false:                                            ; preds = %__llvm_entry
  %return30 = call double @"sqrt@FF"(double %output21)
  br label %end

end:                                              ; preds = %__llvm_entry, %false
  %phi = phi double [ %return30, %false ], [ 0.000000e+00, %__llvm_entry ]
  %return32 = fcmp olt double %output23, 0.000000e+00
  br i1 %return32, label %end36, label %false35

false35:                                          ; preds = %end
  %return38 = call double @"sqrt@FF"(double %output23)
  br label %end36

end36:                                            ; preds = %end, %false35
  %phi39 = phi double [ %return38, %false35 ], [ 0.000000e+00, %end ]
  %return43 = call double @"atan2@FFF"(double %output17, double %phi)
  %output44 = fmul double %output25, %return43
  %tmp45 = load <3 x double>* %p
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp45, double %output44, i64 0)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  store <3 x double> %output48, <3 x double>* %p
  %_p49 = load <3 x double>* %_p
  %return50 = call double @"getcomp@FVI"(<3 x double> %_p49, i64 1)
  %return51 = fcmp ogt double %return50, 0.000000e+00
  %output59 = fadd double %output13, %phi39
  %return60 = call double @"log@FF"(double %output59)
  br i1 %return51, label %end55, label %false54

false54:                                          ; preds = %end36
  %return67 = call double @"neg@FF"(double %return60)
  br label %end55

end55:                                            ; preds = %end36, %false54
  %return60.sink = phi double [ %return67, %false54 ], [ %return60, %end36 ]
  %output61 = fmul double %output25, %return60.sink
  %tmp70 = load <3 x double>* %p
  %return71 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp70, double %output61, i64 1)
  %output73 = extractvalue { double, <3 x double> } %return71, 1
  store <3 x double> %output73, <3 x double>* %p
  ret void
}

define private void @"V_NOISE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  store double %output1, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %w3 = load double* %w
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output5 = fmul double %w3, %return4
  %_p6 = load <3 x double>* %_p
  %return7 = call double @"getcomp@FVI"(<3 x double> %_p6, i64 0)
  %output9 = fmul double %return7, %output5
  %cosr10 = load double* %cosr
  %output11 = fmul double %output9, %cosr10
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %_p15 = load <3 x double>* %_p
  %return16 = call double @"getcomp@FVI"(<3 x double> %_p15, i64 1)
  %output18 = fmul double %return16, %output5
  %sinr19 = load double* %sinr
  %output20 = fmul double %output18, %sinr19
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output20, i64 1)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %p
  ret void
}

define private void @"V_ESCHER@VVFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %beta) nounwind alwaysinline {
__llvm_entry:
  %seb = alloca double
  %ceb = alloca double
  %sn = alloca double
  %cn = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  %5 = alloca double
  store double 0.000000e+00, double* %seb, !vex-initializer-store !3
  store double 0.000000e+00, double* %ceb, !vex-initializer-store !3
  store double 0.000000e+00, double* %sn, !vex-initializer-store !3
  store double 0.000000e+00, double* %cn, !vex-initializer-store !3
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %2
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return = call double @"log@FF"(double %precalc3)
  %output = fmul double 5.000000e-01, %return
  %beta4 = load double* %beta
  store double %beta4, double* %4
  call void @"sincos@FFF"(double* %4, double* %seb, double* %ceb)
  %ceb5 = load double* %ceb
  %output6 = fadd double 1.000000e+00, %ceb5
  %output7 = fmul double 5.000000e-01, %output6
  %seb8 = load double* %seb
  %output9 = fmul double 5.000000e-01, %seb8
  %w10 = load double* %w
  %output13 = fmul double %output7, %output
  %output16 = fmul double %output9, %precalc
  %output17 = fsub double %output13, %output16
  %return18 = call double @"exp@FF"(double %output17)
  %output19 = fmul double %w10, %return18
  %output22 = fmul double %output7, %precalc
  %output25 = fmul double %output9, %output
  %output26 = fadd double %output22, %output25
  store double %output26, double* %5
  call void @"sincos@FFF"(double* %5, double* %sn, double* %cn)
  %cn29 = load double* %cn
  %output30 = fmul double %output19, %cn29
  %tmp = load <3 x double>* %p
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output30, i64 0)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %p
  %sn35 = load double* %sn
  %output36 = fmul double %output19, %sn35
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output33, double %output36, i64 1)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %p
  ret void
}

define private void @"V_FOCI@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sn = alloca double
  %cn = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sn, !vex-initializer-store !3
  store double 0.000000e+00, double* %cn, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %return2 = call double @"exp@FF"(double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 2.500000e-01, double %output)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  store double %return6, double* %0
  call void @"sincos@FFF"(double* %0, double* %sn, double* %cn)
  %w7 = load double* %w
  %output10 = fadd double %output, %output4
  %cn11 = load double* %cn
  %output12 = fsub double %output10, %cn11
  %output13 = call double @"div@FF"(double %w7, double %output12)
  %output17 = fsub double %output, %output4
  %output18 = fmul double %output13, %output17
  %tmp19 = load <3 x double>* %p
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp19, double %output18, i64 0)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %p
  %sn24 = load double* %sn
  %output25 = fmul double %output13, %sn24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output22, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %p
  ret void
}

define private void @"V_LAZYSUSAN@VVFFFFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %spin, double* %twist, double* %space, <2 x double>* %lazy) nounwind alwaysinline {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %lazy2 = load <2 x double>* %lazy
  %return3 = call double @"getcomp@FUI"(<2 x double> %lazy2, i64 0)
  %output = fsub double %return, %return3
  %return5 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %return7 = call double @"getcomp@FUI"(<2 x double> %lazy2, i64 1)
  %output8 = fsub double %return5, %return7
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %return11 = call <3 x double> @"set@VFFF"(double %output, double %output8, double 0.000000e+00)
  store <3 x double> %return11, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w13 = load double* %w
  %return14 = fcmp olt double %precalc, %w13
  br i1 %return14, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  store <3 x double> %return11, <3 x double>* %3
  %precalc19 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %spin20 = load double* %spin
  %output21 = fadd double %precalc19, %spin20
  %twist22 = load double* %twist
  %w23 = load double* %w
  %output25 = fsub double %w23, %precalc
  %output26 = fmul double %twist22, %output25
  %output27 = fadd double %output21, %output26
  store double %output27, double* %4
  call void @"sincos@FFF"(double* %4, double* %sina, double* %cosa)
  %w29 = load double* %w
  %output31 = fmul double %w29, %precalc
  %cosa33 = load double* %cosa
  %output34 = fmul double %output31, %cosa33
  %lazy35 = load <2 x double>* %lazy
  %return36 = call double @"getcomp@FUI"(<2 x double> %lazy35, i64 0)
  %output37 = fadd double %output34, %return36
  %tmp = load <3 x double>* %p
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output37, i64 0)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %p
  %sina42 = load double* %sina
  %output43 = fmul double %output31, %sina42
  %lazy44 = load <2 x double>* %lazy
  %return45 = call double @"getcomp@FUI"(<2 x double> %lazy44, i64 1)
  %output46 = fadd double %output43, %return45
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output40, double %output46, i64 1)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %space52 = load double* %space
  %output54 = call double @"div@FF"(double %space52, double %precalc)
  %output55 = fadd double 1.000000e+00, %output54
  %output56 = fmul double %w13, %output55
  %output59 = fmul double %output56, %output
  %lazy60 = load <2 x double>* %lazy
  %return61 = call double @"getcomp@FUI"(<2 x double> %lazy60, i64 0)
  %output62 = fadd double %output59, %return61
  %tmp63 = load <3 x double>* %p
  %return64 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp63, double %output62, i64 0)
  %output66 = extractvalue { double, <3 x double> } %return64, 1
  store <3 x double> %output66, <3 x double>* %p
  %output69 = fmul double %output56, %output8
  %lazy70 = load <2 x double>* %lazy
  %return71 = call double @"getcomp@FUI"(<2 x double> %lazy70, i64 1)
  %output72 = fadd double %output69, %return71
  %return74 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output66, double %output72, i64 1)
  %output76 = extractvalue { double, <3 x double> } %return74, 1
  store <3 x double> %output76, <3 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

define private void @"V_LOONIE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w3 = load double* %w
  %output = fmul double %w3, %w3
  %return = fcmp olt double %precalc, %output
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output11 = call double @"div@FF"(double %output, double %precalc)
  %output12 = fsub double %output11, 1.000000e+00
  %return13 = call double @"sqrt@FF"(double %output12)
  %output14 = fmul double %w3, %return13
  %_p16 = load <3 x double>* %_p
  %return17 = call double @"getcomp@FVI"(<3 x double> %_p16, i64 0)
  %output18 = fmul double %output14, %return17
  %tmp = load <3 x double>* %p
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %p
  %_p23 = load <3 x double>* %_p
  %return24 = call double @"getcomp@FVI"(<3 x double> %_p23, i64 1)
  %output25 = fmul double %output14, %return24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %_p31 = load <3 x double>* %_p
  %return32 = call double @"getcomp@FVI"(<3 x double> %_p31, i64 0)
  %output33 = fmul double %w3, %return32
  %tmp34 = load <3 x double>* %p
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp34, double %output33, i64 0)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  %w38 = load double* %w
  %_p39 = load <3 x double>* %_p
  %return40 = call double @"getcomp@FVI"(<3 x double> %_p39, i64 1)
  %output41 = fmul double %w38, %return40
  %return43 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output37, double %output41, i64 1)
  %output45 = extractvalue { double, <3 x double> } %return43, 1
  store <3 x double> %output45, <3 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

define private void @"V_PREBLUR@VF"(<3 x double>* %p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinA = alloca double
  %cosA = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinA, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosA, !vex-initializer-store !3
  %w1 = load double* %w
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output = fadd double %return, %return2
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output4 = fadd double %output, %return3
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output6 = fadd double %output4, %return5
  %output7 = fsub double %output6, 2.000000e+00
  %output8 = fmul double %w1, %output7
  %return9 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output10 = fmul double %return9, 2.000000e+00
  %output11 = fmul double %output10, 0x400921FB4D12D84A
  store double %output11, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinA, double* %cosA)
  %p13 = load <3 x double>* %p
  %return14 = call double @"getcomp@FVI"(<3 x double> %p13, i64 0)
  %cosA16 = load double* %cosA
  %output17 = fmul double %output8, %cosA16
  %output18 = fadd double %return14, %output17
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %p13, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %p
  %return23 = call double @"getcomp@FVI"(<3 x double> %output21, i64 1)
  %sinA25 = load double* %sinA
  %output26 = fmul double %output8, %sinA25
  %output27 = fadd double %return23, %output26
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output27, i64 1)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %p
  ret void
}

define private void @"V_MODULUS@VVFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %m) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %m1 = load <2 x double>* %m
  %return = call double @"getcomp@FUI"(<2 x double> %m1, i64 0)
  %output = fmul double 2.000000e+00, %return
  %return3 = call double @"getcomp@FUI"(<2 x double> %m1, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %_p5 = load <3 x double>* %_p
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p5, i64 0)
  %return9 = fcmp ogt double %return6, %return
  br i1 %return9, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %w11 = load double* %w
  %output18 = fadd double %return6, %return
  store double %output18, double* %0
  store double %output, double* %1
  %fmod = call double @"fmod@FFF"(double* %0, double* %1)
  %output20 = fadd double %return, %fmod
  %output21 = fmul double %w11, %output20
  %tmp = load <3 x double>* %p
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %p25 = load <3 x double>* %p
  %return26 = call double @"getcomp@FVI"(<3 x double> %p25, i64 0)
  %return29 = fcmp olt double %return26, %return
  %w34 = load double* %w
  br i1 %return29, label %true31, label %false32

end:                                              ; preds = %true31, %false32, %true
  %_p58 = load <3 x double>* %_p
  %return59 = call double @"getcomp@FVI"(<3 x double> %_p58, i64 1)
  %m60 = load <2 x double>* %m
  %return61 = call double @"getcomp@FUI"(<2 x double> %m60, i64 1)
  %return62 = fcmp ogt double %return59, %return61
  br i1 %return62, label %true64, label %false65

true31:                                           ; preds = %false
  %output41 = fadd double %return, %return6
  store double %output41, double* %2
  store double %output, double* %3
  %fmod43 = call double @"fmod@FFF"(double* %2, double* %3)
  %output44 = fsub double %return, %fmod43
  %output45 = fmul double %w34, %output44
  %tmp46 = load <3 x double>* %p
  %return47 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp46, double %output45, i64 0)
  %output49 = extractvalue { double, <3 x double> } %return47, 1
  store <3 x double> %output49, <3 x double>* %p
  br label %end

false32:                                          ; preds = %false
  %output53 = fmul double %w34, %return6
  %return55 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %p25, double %output53, i64 0)
  %output57 = extractvalue { double, <3 x double> } %return55, 1
  store <3 x double> %output57, <3 x double>* %p
  br label %end

true64:                                           ; preds = %end
  %w67 = load double* %w
  %output74 = fadd double %return59, %return61
  store double %output74, double* %4
  store double %output4, double* %5
  %fmod76 = call double @"fmod@FFF"(double* %4, double* %5)
  %output77 = fadd double %return61, %fmod76
  %output78 = fmul double %w67, %output77
  %tmp79 = load <3 x double>* %p
  %return80 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp79, double %output78, i64 1)
  %output82 = extractvalue { double, <3 x double> } %return80, 1
  store <3 x double> %output82, <3 x double>* %p
  br label %end66

false65:                                          ; preds = %end
  %p83 = load <3 x double>* %p
  %return84 = call double @"getcomp@FVI"(<3 x double> %p83, i64 0)
  %return86 = call double @"getcomp@FUI"(<2 x double> %m60, i64 0)
  %return87 = fcmp olt double %return84, %return86
  %w92 = load double* %w
  br i1 %return87, label %true89, label %false90

end66:                                            ; preds = %true89, %false90, %true64
  ret void

true89:                                           ; preds = %false65
  %output99 = fadd double %return61, %return59
  store double %output99, double* %6
  store double %output4, double* %7
  %fmod101 = call double @"fmod@FFF"(double* %6, double* %7)
  %output102 = fsub double %return61, %fmod101
  %output103 = fmul double %w92, %output102
  %tmp104 = load <3 x double>* %p
  %return105 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp104, double %output103, i64 1)
  %output107 = extractvalue { double, <3 x double> } %return105, 1
  store <3 x double> %output107, <3 x double>* %p
  br label %end66

false90:                                          ; preds = %false65
  %output111 = fmul double %w92, %return59
  %return113 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %p83, double %output111, i64 1)
  %output115 = extractvalue { double, <3 x double> } %return113, 1
  store <3 x double> %output115, <3 x double>* %p
  br label %end66
}

define private void @"V_OSCOPE@VVFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %freq, double* %amp, double* %damp, double* %sep) nounwind alwaysinline {
__llvm_entry:
  %freq1 = load double* %freq
  %output = fmul double 0x401921FB4D12D84A, %freq1
  %damp2 = load double* %damp
  %return = fcmp oeq double %damp2, 0.000000e+00
  %amp4 = load double* %amp
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_p6 = load <3 x double>* %_p
  %return7 = call double @"getcomp@FVI"(<3 x double> %_p6, i64 0)
  %output8 = fmul double %output, %return7
  %return9 = call double @"cos@FF"(double %output8)
  %output10 = fmul double %amp4, %return9
  %sep11 = load double* %sep
  %output12 = fadd double %output10, %sep11
  br label %end

false:                                            ; preds = %__llvm_entry
  %_p14 = load <3 x double>* %_p
  %return15 = call double @"getcomp@FVI"(<3 x double> %_p14, i64 0)
  %return16 = call double @"abs@FF"(double %return15)
  %return17 = call double @"neg@FF"(double %return16)
  %damp18 = load double* %damp
  %output19 = fmul double %return17, %damp18
  %return20 = call double @"exp@FF"(double %output19)
  %output21 = fmul double %amp4, %return20
  %_p23 = load <3 x double>* %_p
  %return24 = call double @"getcomp@FVI"(<3 x double> %_p23, i64 0)
  %output25 = fmul double %output, %return24
  %return26 = call double @"cos@FF"(double %output25)
  %output27 = fmul double %output21, %return26
  %sep28 = load double* %sep
  %output29 = fadd double %output27, %sep28
  br label %end

end:                                              ; preds = %false, %true
  %tt.0 = phi double [ %output12, %true ], [ %output29, %false ]
  %_p30 = load <3 x double>* %_p
  %return31 = call double @"getcomp@FVI"(<3 x double> %_p30, i64 1)
  %return32 = call double @"abs@FF"(double %return31)
  %return34 = fcmp ole double %return32, %tt.0
  %w39 = load double* %w
  %_p40 = load <3 x double>* %_p
  %return41 = call double @"getcomp@FVI"(<3 x double> %_p40, i64 0)
  %output42 = fmul double %w39, %return41
  %tmp = load <3 x double>* %p
  %return43 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output42, i64 0)
  %output45 = extractvalue { double, <3 x double> } %return43, 1
  store <3 x double> %output45, <3 x double>* %p
  %w46 = load double* %w
  %_p47 = load <3 x double>* %_p
  %return48 = call double @"getcomp@FVI"(<3 x double> %_p47, i64 1)
  br i1 %return34, label %true36, label %false37

true36:                                           ; preds = %end
  %return49 = call double @"neg@FF"(double %return48)
  %output50 = fmul double %w46, %return49
  %return52 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output45, double %output50, i64 1)
  %output54 = extractvalue { double, <3 x double> } %return52, 1
  store <3 x double> %output54, <3 x double>* %p
  br label %end38

false37:                                          ; preds = %end
  %output66 = fmul double %w46, %return48
  %return68 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output45, double %output66, i64 1)
  %output70 = extractvalue { double, <3 x double> } %return68, 1
  store <3 x double> %output70, <3 x double>* %p
  br label %end38

end38:                                            ; preds = %false37, %true36
  ret void
}

define private void @"V_POLAR2@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %w1 = load double* %w
  %output = call double @"div@FF"(double %w1, double 0x400921FB4D12D84A)
  store i8* getelementptr inbounds ([5 x i8]* @109, i64 0, i64 0), i8** %0
  %_p3 = load <3 x double>* %_p
  store <3 x double> %_p3, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output4 = fmul double %output, %precalc
  %tmp = load <3 x double>* %p
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output4, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output6, <3 x double>* %p
  %output8 = call double @"div@FF"(double %output, double 2.000000e+00)
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %2
  %_p9 = load <3 x double>* %_p
  store <3 x double> %_p9, <3 x double>* %3
  %precalc10 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return11 = call double @"log@FF"(double %precalc10)
  %output12 = fmul double %output8, %return11
  %tmp13 = load <3 x double>* %p
  %return14 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp13, double %output12, i64 1)
  %output16 = extractvalue { double, <3 x double> } %return14, 1
  store <3 x double> %output16, <3 x double>* %p
  ret void
}

define private void @"V_POPCORN2@VVFFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %pop2c, <2 x double>* %pop2) nounwind alwaysinline {
__llvm_entry:
  %w1 = load double* %w
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %pop23 = load <2 x double>* %pop2
  %return4 = call double @"getcomp@FUI"(<2 x double> %pop23, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %pop2c7 = load double* %pop2c
  %output = fmul double %return6, %pop2c7
  %return8 = call double @"tan@FF"(double %output)
  %return9 = call double @"sin@FF"(double %return8)
  %output10 = fmul double %return4, %return9
  %output11 = fadd double %return, %output10
  %output12 = fmul double %w1, %output11
  %tmp = load <3 x double>* %p
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %p
  %w16 = load double* %w
  %_p17 = load <3 x double>* %_p
  %return18 = call double @"getcomp@FVI"(<3 x double> %_p17, i64 1)
  %pop219 = load <2 x double>* %pop2
  %return20 = call double @"getcomp@FUI"(<2 x double> %pop219, i64 1)
  %return22 = call double @"getcomp@FVI"(<3 x double> %_p17, i64 0)
  %pop2c23 = load double* %pop2c
  %output24 = fmul double %return22, %pop2c23
  %return25 = call double @"tan@FF"(double %output24)
  %return26 = call double @"sin@FF"(double %return25)
  %output27 = fmul double %return20, %return26
  %output28 = fadd double %return18, %output27
  %output29 = fmul double %w16, %output28
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %p
  ret void
}

define private void @"V_SCRY@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %2
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %w5 = load double* %w
  %output = fadd double %w5, 1.000000e-10
  %output6 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output7 = fadd double %precalc, %output6
  %output8 = fmul double %precalc3, %output7
  %output9 = call double @"div@FF"(double 1.000000e+00, double %output8)
  %_p10 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p10, i64 0)
  %output12 = fmul double %return, %output9
  %tmp = load <3 x double>* %p
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %p
  %_p16 = load <3 x double>* %_p
  %return17 = call double @"getcomp@FVI"(<3 x double> %_p16, i64 1)
  %output19 = fmul double %return17, %output9
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  ret void
}

define private void @"V_SEPARATION@VVFUU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %sep, <2 x double>* %ins) nounwind alwaysinline {
__llvm_entry:
  %sep1 = load <2 x double>* %sep
  %return = call double @"getcomp@FUI"(<2 x double> %sep1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %sep1, i64 1)
  %output8 = fmul double %return5, %return5
  %_p9 = load <3 x double>* %_p
  %return10 = call double @"getcomp@FVI"(<3 x double> %_p9, i64 0)
  %return11 = fcmp ogt double %return10, 0.000000e+00
  %w13 = load double* %w
  %output18 = fmul double %return10, %return10
  %output20 = fadd double %output18, %output
  %return21 = call double @"sqrt@FF"(double %output20)
  %ins24 = load <2 x double>* %ins
  %return25 = call double @"getcomp@FUI"(<2 x double> %ins24, i64 0)
  %output26 = fmul double %return10, %return25
  br i1 %return11, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output27 = fsub double %return21, %output26
  %output28 = fmul double %w13, %output27
  %tmp = load <3 x double>* %p
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output28, i64 0)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %output46 = fadd double %return21, %output26
  %return47 = call double @"neg@FF"(double %output46)
  %output48 = fmul double %w13, %return47
  %tmp49 = load <3 x double>* %p
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp49, double %output48, i64 0)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %_p53 = load <3 x double>* %_p
  %return54 = call double @"getcomp@FVI"(<3 x double> %_p53, i64 1)
  %return55 = fcmp ogt double %return54, 0.000000e+00
  %w60 = load double* %w
  %output65 = fmul double %return54, %return54
  %output67 = fadd double %output65, %output8
  %return68 = call double @"sqrt@FF"(double %output67)
  %ins71 = load <2 x double>* %ins
  %return72 = call double @"getcomp@FUI"(<2 x double> %ins71, i64 1)
  %output73 = fmul double %return54, %return72
  br i1 %return55, label %true57, label %false58

true57:                                           ; preds = %end
  %output74 = fsub double %return68, %output73
  %output75 = fmul double %w60, %output74
  %tmp76 = load <3 x double>* %p
  %return77 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp76, double %output75, i64 1)
  %output79 = extractvalue { double, <3 x double> } %return77, 1
  store <3 x double> %output79, <3 x double>* %p
  br label %end59

false58:                                          ; preds = %end
  %output94 = fadd double %return68, %output73
  %return95 = call double @"neg@FF"(double %output94)
  %output96 = fmul double %w60, %return95
  %tmp97 = load <3 x double>* %p
  %return98 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp97, double %output96, i64 1)
  %output100 = extractvalue { double, <3 x double> } %return98, 1
  store <3 x double> %output100, <3 x double>* %p
  br label %end59

end59:                                            ; preds = %false58, %true57
  ret void
}

define private void @"V_SPLIT@VVFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %split) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %split2 = load <2 x double>* %split
  %return3 = call double @"getcomp@FUI"(<2 x double> %split2, i64 0)
  %output = fmul double %return, %return3
  %output4 = fmul double %output, 0x400921FB4D12D84A
  %return5 = call double @"cos@FF"(double %output4)
  %return6 = fcmp oge double %return5, 0.000000e+00
  %w8 = load double* %w
  %return10 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  br i1 %return6, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output11 = fmul double %w8, %return10
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 1)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %return18 = call double @"neg@FF"(double %return10)
  %output19 = fmul double %w8, %return18
  %tmp20 = load <3 x double>* %p
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp20, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %_p24 = load <3 x double>* %_p
  %return25 = call double @"getcomp@FVI"(<3 x double> %_p24, i64 1)
  %split26 = load <2 x double>* %split
  %return27 = call double @"getcomp@FUI"(<2 x double> %split26, i64 1)
  %output28 = fmul double %return25, %return27
  %output29 = fmul double %output28, 0x400921FB4D12D84A
  %return30 = call double @"cos@FF"(double %output29)
  %return31 = fcmp oge double %return30, 0.000000e+00
  %w36 = load double* %w
  %return38 = call double @"getcomp@FVI"(<3 x double> %_p24, i64 0)
  br i1 %return31, label %true33, label %false34

true33:                                           ; preds = %end
  %output39 = fmul double %w36, %return38
  %tmp40 = load <3 x double>* %p
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp40, double %output39, i64 0)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %p
  br label %end35

false34:                                          ; preds = %end
  %return47 = call double @"neg@FF"(double %return38)
  %output48 = fmul double %w36, %return47
  %tmp49 = load <3 x double>* %p
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp49, double %output48, i64 0)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %p
  br label %end35

end35:                                            ; preds = %false34, %true33
  ret void
}

define private void @"V_SPLITS@VVFU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %splits) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %return2 = fcmp oge double %return, 0.000000e+00
  %w4 = load double* %w
  %splits7 = load <2 x double>* %splits
  %return8 = call double @"getcomp@FUI"(<2 x double> %splits7, i64 0)
  br i1 %return2, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = fadd double %return, %return8
  %output9 = fmul double %w4, %output
  %tmp = load <3 x double>* %p
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %p
  br label %end

false:                                            ; preds = %__llvm_entry
  %output18 = fsub double %return, %return8
  %output19 = fmul double %w4, %output18
  %tmp20 = load <3 x double>* %p
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp20, double %output19, i64 0)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  br label %end

end:                                              ; preds = %false, %true
  %_p24 = load <3 x double>* %_p
  %return25 = call double @"getcomp@FVI"(<3 x double> %_p24, i64 1)
  %return26 = fcmp oge double %return25, 0.000000e+00
  %w31 = load double* %w
  %splits34 = load <2 x double>* %splits
  %return35 = call double @"getcomp@FUI"(<2 x double> %splits34, i64 1)
  br i1 %return26, label %true28, label %false29

true28:                                           ; preds = %end
  %output36 = fadd double %return25, %return35
  %output37 = fmul double %w31, %output36
  %tmp38 = load <3 x double>* %p
  %return39 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp38, double %output37, i64 1)
  %output41 = extractvalue { double, <3 x double> } %return39, 1
  store <3 x double> %output41, <3 x double>* %p
  br label %end30

false29:                                          ; preds = %end
  %output47 = fsub double %return25, %return35
  %output48 = fmul double %w31, %output47
  %tmp49 = load <3 x double>* %p
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp49, double %output48, i64 1)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %p
  br label %end30

end30:                                            ; preds = %false29, %true28
  ret void
}

define private void @"V_STRIPES@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %space, double* %warp) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %output = fadd double %return, 5.000000e-01
  %return2 = call double @"floor@FF"(double %output)
  %output6 = fsub double %return, %return2
  %w7 = load double* %w
  %space9 = load double* %space
  %output10 = fsub double 1.000000e+00, %space9
  %output11 = fmul double %output6, %output10
  %output13 = fadd double %output11, %return2
  %output14 = fmul double %w7, %output13
  %tmp = load <3 x double>* %p
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %p
  %w18 = load double* %w
  %_p19 = load <3 x double>* %_p
  %return20 = call double @"getcomp@FVI"(<3 x double> %_p19, i64 1)
  %output23 = fmul double %output6, %output6
  %warp24 = load double* %warp
  %output25 = fmul double %output23, %warp24
  %output26 = fadd double %return20, %output25
  %output27 = fmul double %w18, %output26
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output17, double %output27, i64 1)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %p
  ret void
}

define private void @"V_WEDGE@VVFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %swirl, double* %angle, double* %hole, double* %count) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %swirl4 = load double* %swirl
  %output = fmul double %swirl4, %precalc
  %output6 = fadd double %precalc3, %output
  %count7 = load double* %count
  %output9 = fmul double %count7, %output6
  %output10 = fadd double %output9, 0x400921FB4D12D84A
  %output11 = fmul double %output10, 0x3FD45F306DC9C883
  %output12 = fmul double %output11, 5.000000e-01
  %return = call double @"floor@FF"(double %output12)
  %angle13 = load double* %angle
  %output15 = fmul double %angle13, %count7
  %output16 = fmul double %output15, 0x3FD45F306DC9C883
  %output17 = fmul double %output16, 5.000000e-01
  %output18 = fsub double 1.000000e+00, %output17
  %output21 = fmul double %output6, %output18
  %output24 = fmul double %return, %angle13
  %output25 = fadd double %output21, %output24
  store double %output25, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %w27 = load double* %w
  %hole29 = load double* %hole
  %output30 = fadd double %precalc, %hole29
  %output31 = fmul double %w27, %output30
  %ca33 = load double* %ca
  %output34 = fmul double %output31, %ca33
  %tmp = load <3 x double>* %p
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output34, i64 0)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  %sa39 = load double* %sa
  %output40 = fmul double %output31, %sa39
  %return42 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output37, double %output40, i64 1)
  %output44 = extractvalue { double, <3 x double> } %return42, 1
  store <3 x double> %output44, <3 x double>* %p
  ret void
}

define private void @"V_WEDGEJULIA@VVFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %power, double* %angle, double* %dist, double* %count) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %angle1 = load double* %angle
  %count2 = load double* %count
  %output = fmul double %angle1, %count2
  %output3 = fmul double %output, 0x3FD45F306DC9C883
  %output4 = fmul double %output3, 5.000000e-01
  %output5 = fsub double 1.000000e+00, %output4
  %power6 = load double* %power
  %return = call double @"abs@FF"(double %power6)
  %dist7 = load double* %dist
  %power8 = load double* %power
  %output9 = call double @"div@FF"(double %dist7, double %power8)
  %output10 = call double @"div@FF"(double %output9, double 2.000000e+00)
  %w11 = load double* %w
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p12 = load <3 x double>* %_p
  store <3 x double> %_p12, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %return14 = call double @"pow@FFF"(double %precalc, double %output10)
  %output15 = fmul double %w11, %return14
  %return17 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %output18 = fmul double %return, %return17
  %cast = fptosi double %output18 to i64
  %cast19 = sitofp i64 %cast to double
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  %_p20 = load <3 x double>* %_p
  store <3 x double> %_p20, <3 x double>* %3
  %precalc21 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output23 = fmul double 0x401921FB4D12D84A, %cast19
  %output24 = fadd double %precalc21, %output23
  %power25 = load double* %power
  %output26 = call double @"div@FF"(double %output24, double %power25)
  %count27 = load double* %count
  %output29 = fmul double %count27, %output26
  %output30 = fadd double %output29, 0x400921FB4D12D84A
  %output31 = fmul double %output30, 0x3FD45F306DC9C883
  %output32 = fmul double %output31, 5.000000e-01
  %return33 = call double @"floor@FF"(double %output32)
  %output36 = fmul double %output26, %output5
  %angle38 = load double* %angle
  %output39 = fmul double %return33, %angle38
  %output40 = fadd double %output36, %output39
  store double %output40, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %ca43 = load double* %ca
  %output44 = fmul double %output15, %ca43
  %tmp = load <3 x double>* %p
  %return45 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output44, i64 0)
  %output47 = extractvalue { double, <3 x double> } %return45, 1
  store <3 x double> %output47, <3 x double>* %p
  %sa49 = load double* %sa
  %output50 = fmul double %output15, %sa49
  %return52 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output47, double %output50, i64 1)
  %output54 = extractvalue { double, <3 x double> } %return52, 1
  store <3 x double> %output54, <3 x double>* %p
  ret void
}

define private void @"V_WEDGESPH@VVFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %swirl, double* %angle, double* %hole, double* %count) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e-10
  %output2 = call double @"div@FF"(double 1.000000e+00, double %output)
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  %_p3 = load <3 x double>* %_p
  store <3 x double> %_p3, <3 x double>* %3
  %precalc4 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %swirl5 = load double* %swirl
  %output7 = fmul double %swirl5, %output2
  %output8 = fadd double %precalc4, %output7
  %count9 = load double* %count
  %output11 = fmul double %count9, %output8
  %output12 = fadd double %output11, 0x400921FB4D12D84A
  %output13 = fmul double %output12, 0x3FD45F306DC9C883
  %output14 = fmul double %output13, 5.000000e-01
  %return = call double @"floor@FF"(double %output14)
  %angle15 = load double* %angle
  %output17 = fmul double %angle15, %count9
  %output18 = fmul double %output17, 0x3FD45F306DC9C883
  %output19 = fmul double %output18, 5.000000e-01
  %output20 = fsub double 1.000000e+00, %output19
  %output23 = fmul double %output8, %output20
  %output26 = fmul double %return, %angle15
  %output27 = fadd double %output23, %output26
  store double %output27, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %w29 = load double* %w
  %hole31 = load double* %hole
  %output32 = fadd double %output2, %hole31
  %output33 = fmul double %w29, %output32
  %ca35 = load double* %ca
  %output36 = fmul double %output33, %ca35
  %tmp = load <3 x double>* %p
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output36, i64 0)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %p
  %sa41 = load double* %sa
  %output42 = fmul double %output33, %sa41
  %return44 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output39, double %output42, i64 1)
  %output46 = extractvalue { double, <3 x double> } %return44, 1
  store <3 x double> %output46, <3 x double>* %p
  ret void
}

define private void @"V_WHORL@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %inside, double* %outside) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @108, i64 0, i64 0), i8** %0
  %_p1 = load <3 x double>* %_p
  store <3 x double> %_p1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %w3 = load double* %w
  %return = fcmp olt double %precalc, %w3
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  %_p5 = load <3 x double>* %_p
  store <3 x double> %_p5, <3 x double>* %3
  %precalc6 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %inside7 = load double* %inside
  %w8 = load double* %w
  %output = fsub double %w8, %precalc
  %output10 = call double @"div@FF"(double %inside7, double %output)
  %output11 = fadd double %precalc6, %output10
  br label %end

false:                                            ; preds = %__llvm_entry
  %outside14 = load double* %outside
  %w15 = load double* %w
  %output17 = fsub double %w15, %precalc
  %output18 = call double @"div@FF"(double %outside14, double %output17)
  %output19 = fadd double %precalc6, %output18
  br label %end

end:                                              ; preds = %false, %true
  %aa.0 = phi double [ %output11, %true ], [ %output19, %false ]
  store double %aa.0, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %w21 = load double* %w
  %output23 = fmul double %w21, %precalc
  %ca24 = load double* %ca
  %output25 = fmul double %output23, %ca24
  %tmp = load <3 x double>* %p
  %return26 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output25, i64 0)
  %output28 = extractvalue { double, <3 x double> } %return26, 1
  store <3 x double> %output28, <3 x double>* %p
  %w29 = load double* %w
  %output31 = fmul double %w29, %precalc
  %sa32 = load double* %sa
  %output33 = fmul double %output31, %sa32
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output28, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_WAVES2@VVFUU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %scl, <2 x double>* %freq) nounwind alwaysinline {
__llvm_entry:
  %w1 = load double* %w
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %scl3 = load <2 x double>* %scl
  %return4 = call double @"getcomp@FUI"(<2 x double> %scl3, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %freq7 = load <2 x double>* %freq
  %return8 = call double @"getcomp@FUI"(<2 x double> %freq7, i64 0)
  %output = fmul double %return6, %return8
  %return9 = call double @"sin@FF"(double %output)
  %output10 = fmul double %return4, %return9
  %output11 = fadd double %return, %output10
  %output12 = fmul double %w1, %output11
  %tmp = load <3 x double>* %p
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %p
  %w16 = load double* %w
  %_p17 = load <3 x double>* %_p
  %return18 = call double @"getcomp@FVI"(<3 x double> %_p17, i64 1)
  %scl19 = load <2 x double>* %scl
  %return20 = call double @"getcomp@FUI"(<2 x double> %scl19, i64 1)
  %return22 = call double @"getcomp@FVI"(<3 x double> %_p17, i64 0)
  %freq23 = load <2 x double>* %freq
  %return24 = call double @"getcomp@FUI"(<2 x double> %freq23, i64 1)
  %output25 = fmul double %return22, %return24
  %return26 = call double @"sin@FF"(double %output25)
  %output27 = fmul double %return20, %return26
  %output28 = fadd double %return18, %output27
  %output29 = fmul double %w16, %output28
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %p
  ret void
}

define private void @"V_COTHEEXP@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %expsin = alloca double
  %expcos = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %expsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %expcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %return2 = call double @"exp@FF"(double %return)
  %p3 = load <3 x double>* %p
  %return4 = call double @"getcomp@FVI"(<3 x double> %p3, i64 1)
  store double %return4, double* %0
  call void @"sincos@FFF"(double* %0, double* %expsin, double* %expcos)
  %w5 = load double* %w
  %output = fmul double %w5, %return2
  %expcos7 = load double* %expcos
  %output8 = fmul double %output, %expcos7
  %tmp = load <3 x double>* %p
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %p
  %w12 = load double* %w
  %output14 = fmul double %w12, %return2
  %expsin15 = load double* %expsin
  %output16 = fmul double %output14, %expsin15
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output11, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %p
  ret void
}

define private void @"V_COTHELOG@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %w1 = load double* %w
  %output = fmul double %w1, 5.000000e-01
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %return = call double @"log@FF"(double %precalc)
  %output3 = fmul double %output, %return
  %tmp = load <3 x double>* %p
  %return4 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output3, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return4, 1
  store <3 x double> %output6, <3 x double>* %p
  %w7 = load double* %w
  store i8* getelementptr inbounds ([7 x i8]* @110, i64 0, i64 0), i8** %2
  %_p8 = load <3 x double>* %_p
  store <3 x double> %_p8, <3 x double>* %3
  %precalc9 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output10 = fmul double %w7, %precalc9
  %tmp11 = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp11, double %output10, i64 1)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  ret void
}

define private void @"V_COTHESIN@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinacos = alloca double
  %0 = alloca double
  %sinsin = alloca double
  store double 0.000000e+00, double* %sinsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sinacos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinsin, double* %sinacos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double* %w
  %sinsin9 = load double* %sinsin
  %output = fmul double %w8, %sinsin9
  %output11 = fmul double %output, %return7
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %w15 = load double* %w
  %sinacos16 = load double* %sinacos
  %output17 = fmul double %w15, %sinacos16
  %output19 = fmul double %output17, %return4
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  ret void
}

define private void @"V_COTHECOS@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %coscos = alloca double
  %0 = alloca double
  %cossin = alloca double
  store double 0.000000e+00, double* %cossin, !vex-initializer-store !3
  store double 0.000000e+00, double* %coscos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cossin, double* %coscos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double* %w
  %coscos9 = load double* %coscos
  %output = fmul double %w8, %coscos9
  %output11 = fmul double %output, %return7
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %w15 = load double* %w
  %cossin16 = load double* %cossin
  %output17 = fmul double %w15, %cossin16
  %output19 = fmul double %output17, %return4
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  ret void
}

define private void @"V_COTHETAN@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %tancos = alloca double
  %0 = alloca double
  %tansin = alloca double
  store double 0.000000e+00, double* %tansin, !vex-initializer-store !3
  store double 0.000000e+00, double* %tancos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %tansin, double* %tancos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %tancos10 = load double* %tancos
  %output12 = fadd double %tancos10, %return9
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %w14 = load double* %w
  %output16 = fmul double %w14, %output13
  %output18 = fmul double %output16, %return5
  %tmp = load <3 x double>* %p
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %p
  %w22 = load double* %w
  %output24 = fmul double %w22, %output13
  %output26 = fmul double %output24, %return9
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  ret void
}

define private void @"V_COTHESEC@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %seccos = alloca double
  %0 = alloca double
  %secsin = alloca double
  store double 0.000000e+00, double* %secsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %seccos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %secsin, double* %seccos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %return9 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output = fmul double 2.000000e+00, %return9
  %return10 = call double @"cos@FF"(double %output)
  %output13 = fmul double 2.000000e+00, %return3
  %return14 = call double @"cosh@FF"(double %output13)
  %output15 = fadd double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double* %w
  %output19 = fmul double %w17, %output16
  %seccos20 = load double* %seccos
  %output21 = fmul double %output19, %seccos20
  %output23 = fmul double %output21, %return7
  %tmp = load <3 x double>* %p
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  %w27 = load double* %w
  %output29 = fmul double %w27, %output16
  %secsin30 = load double* %secsin
  %output31 = fmul double %output29, %secsin30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_COTHECSC@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %csccos = alloca double
  %0 = alloca double
  %cscsin = alloca double
  store double 0.000000e+00, double* %cscsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %csccos, !vex-initializer-store !3
  %p1 = load <3 x double>* %p
  %return = call double @"getcomp@FVI"(<3 x double> %p1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cscsin, double* %csccos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %output = fmul double 2.000000e+00, %return3
  %return10 = call double @"cosh@FF"(double %output)
  %return12 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output13 = fmul double 2.000000e+00, %return12
  %return14 = call double @"cos@FF"(double %output13)
  %output15 = fsub double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double* %w
  %output19 = fmul double %w17, %output16
  %cscsin20 = load double* %cscsin
  %output21 = fmul double %output19, %cscsin20
  %output23 = fmul double %output21, %return7
  %tmp = load <3 x double>* %p
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  %w27 = load double* %w
  %output29 = fmul double %w27, %output16
  %csccos30 = load double* %csccos
  %output31 = fmul double %output29, %csccos30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_COTHECOT@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %cotcos = alloca double
  %0 = alloca double
  %cotsin = alloca double
  store double 0.000000e+00, double* %cotsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cotcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %cotsin, double* %cotcos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %cotcos11 = load double* %cotcos
  %output12 = fsub double %return9, %cotcos11
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %w14 = load double* %w
  %output16 = fmul double %w14, %output13
  %cotsin17 = load double* %cotsin
  %output18 = fmul double %output16, %cotsin17
  %tmp = load <3 x double>* %p
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %p
  %w22 = load double* %w
  %output24 = fmul double %w22, %output13
  %return25 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return25 to double
  %output26 = fmul double %output24, %cast
  %output28 = fmul double %output26, %return5
  %return30 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output28, i64 1)
  %output32 = extractvalue { double, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %p
  ret void
}

define private void @"V_COTHESINH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sinhcos = alloca double
  %0 = alloca double
  %sinhsin = alloca double
  store double 0.000000e+00, double* %sinhsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sinhcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinhsin, double* %sinhcos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double* %w
  %output = fmul double %w8, %return4
  %sinhcos10 = load double* %sinhcos
  %output11 = fmul double %output, %sinhcos10
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %w15 = load double* %w
  %output17 = fmul double %w15, %return7
  %sinhsin18 = load double* %sinhsin
  %output19 = fmul double %output17, %sinhsin18
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  ret void
}

define private void @"V_COTHECOSH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %coshcos = alloca double
  %0 = alloca double
  %coshsin = alloca double
  store double 0.000000e+00, double* %coshsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %coshcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %coshsin, double* %coshcos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %w8 = load double* %w
  %output = fmul double %w8, %return7
  %coshcos10 = load double* %coshcos
  %output11 = fmul double %output, %coshcos10
  %tmp = load <3 x double>* %p
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %p
  %w15 = load double* %w
  %output17 = fmul double %w15, %return4
  %coshsin18 = load double* %coshsin
  %output19 = fmul double %output17, %coshsin18
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %p
  ret void
}

define private void @"V_COTHETANH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %tanhcos = alloca double
  %0 = alloca double
  %tanhsin = alloca double
  store double 0.000000e+00, double* %tanhsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %tanhcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %tanhsin, double* %tanhcos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %tanhcos8 = load double* %tanhcos
  %output10 = fadd double %tanhcos8, %return7
  %output11 = call double @"div@FF"(double 1.000000e+00, double %output10)
  %w12 = load double* %w
  %output14 = fmul double %w12, %output11
  %output16 = fmul double %output14, %return4
  %tmp = load <3 x double>* %p
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %p
  %w20 = load double* %w
  %output22 = fmul double %w20, %output11
  %tanhsin23 = load double* %tanhsin
  %output24 = fmul double %output22, %tanhsin23
  %return26 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %output24, i64 1)
  %output28 = extractvalue { double, <3 x double> } %return26, 1
  store <3 x double> %output28, <3 x double>* %p
  ret void
}

define private void @"V_COTHESECH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %sechcos = alloca double
  %0 = alloca double
  %sechsin = alloca double
  store double 0.000000e+00, double* %sechsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sechcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sechsin, double* %sechcos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %return9 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output = fmul double 2.000000e+00, %return9
  %return10 = call double @"cos@FF"(double %output)
  %output13 = fmul double 2.000000e+00, %return3
  %return14 = call double @"cosh@FF"(double %output13)
  %output15 = fadd double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double* %w
  %output19 = fmul double %w17, %output16
  %sechcos20 = load double* %sechcos
  %output21 = fmul double %output19, %sechcos20
  %output23 = fmul double %output21, %return7
  %tmp = load <3 x double>* %p
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  %w27 = load double* %w
  %output29 = fmul double %w27, %output16
  %sechsin30 = load double* %sechsin
  %output31 = fmul double %output29, %sechsin30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_COTHECSCH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %cschcos = alloca double
  %0 = alloca double
  %cschsin = alloca double
  store double 0.000000e+00, double* %cschsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cschcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cschsin, double* %cschcos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %output = fmul double 2.000000e+00, %return3
  %return10 = call double @"cosh@FF"(double %output)
  %return12 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output13 = fmul double 2.000000e+00, %return12
  %return14 = call double @"cos@FF"(double %output13)
  %output15 = fsub double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %w17 = load double* %w
  %output19 = fmul double %w17, %output16
  %output21 = fmul double %output19, %return4
  %cschcos22 = load double* %cschcos
  %output23 = fmul double %output21, %cschcos22
  %tmp = load <3 x double>* %p
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %p
  %w27 = load double* %w
  %output29 = fmul double %w27, %output16
  %output31 = fmul double %output29, %return7
  %cschsin32 = load double* %cschsin
  %output33 = fmul double %output31, %cschsin32
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_COTHECOTH@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %cothcos = alloca double
  %0 = alloca double
  %cothsin = alloca double
  store double 0.000000e+00, double* %cothsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cothcos, !vex-initializer-store !3
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %cothsin, double* %cothcos)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %cothcos11 = load double* %cothcos
  %output12 = fsub double %return9, %cothcos11
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %w14 = load double* %w
  %output16 = fmul double %w14, %output13
  %output18 = fmul double %output16, %return5
  %tmp = load <3 x double>* %p
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %p
  %w22 = load double* %w
  %output24 = fmul double %w22, %output13
  %cothsin25 = load double* %cothsin
  %output26 = fmul double %output24, %cothsin25
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  ret void
}

define private void @"V_AUGER@VVFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %freq, double* %scale, double* %sym, double* %ww) nounwind alwaysinline {
__llvm_entry:
  %freq1 = load double* %freq
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output = fmul double %freq1, %return
  %return3 = call double @"sin@FF"(double %output)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output7 = fmul double %freq1, %return6
  %return8 = call double @"sin@FF"(double %output7)
  %ww11 = load double* %ww
  %scale12 = load double* %scale
  %output14 = fmul double %scale12, %return3
  %output15 = call double @"div@FF"(double %output14, double 2.000000e+00)
  %return18 = call double @"abs@FF"(double %return6)
  %output20 = fmul double %return18, %return3
  %output21 = fadd double %output15, %output20
  %output22 = fmul double %ww11, %output21
  %output23 = fadd double %return6, %output22
  %_p24 = load <3 x double>* %_p
  %return25 = call double @"getcomp@FVI"(<3 x double> %_p24, i64 0)
  %ww26 = load double* %ww
  %scale27 = load double* %scale
  %output29 = fmul double %scale27, %return8
  %output30 = call double @"div@FF"(double %output29, double 2.000000e+00)
  %return33 = call double @"abs@FF"(double %return25)
  %output35 = fmul double %return33, %return8
  %output36 = fadd double %output30, %output35
  %output37 = fmul double %ww26, %output36
  %output38 = fadd double %return25, %output37
  %w39 = load double* %w
  %_p40 = load <3 x double>* %_p
  %return41 = call double @"getcomp@FVI"(<3 x double> %_p40, i64 0)
  %sym42 = load double* %sym
  %output46 = fmul double %output23, %return41
  %output47 = fmul double %sym42, %output46
  %output48 = fadd double %return41, %output47
  %output49 = fmul double %w39, %output48
  %tmp = load <3 x double>* %p
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output49, i64 0)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %p
  %w53 = load double* %w
  %output55 = fmul double %w53, %output38
  %return57 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output52, double %output55, i64 1)
  %output59 = extractvalue { double, <3 x double> } %return57, 1
  store <3 x double> %output59, <3 x double>* %p
  ret void
}

define private void @"V_FLUX@VVFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %spread) nounwind alwaysinline {
__llvm_entry:
  %_p1 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p1, i64 0)
  %w2 = load double* %w
  %output = fadd double %return, %w2
  %output6 = fsub double %return, %w2
  %spread8 = load double* %spread
  %output9 = fadd double 2.000000e+00, %spread8
  %output10 = fmul double %w2, %output9
  %return12 = call double @"getcomp@FVI"(<3 x double> %_p1, i64 1)
  %output15 = fmul double %return12, %return12
  %output18 = fmul double %output, %output
  %output19 = fadd double %output15, %output18
  %return20 = call double @"sqrt@FF"(double %output19)
  %output28 = fmul double %output6, %output6
  %output29 = fadd double %output15, %output28
  %return30 = call double @"sqrt@FF"(double %output29)
  %output31 = call double @"div@FF"(double %return20, double %return30)
  %return32 = call double @"sqrt@FF"(double %output31)
  %output33 = fmul double %output10, %return32
  %return37 = call double @"atan2@FFF"(double %return12, double %output6)
  %return41 = call double @"atan2@FFF"(double %return12, double %output)
  %output42 = fsub double %return37, %return41
  %output43 = fmul double %output42, 5.000000e-01
  %return46 = call double @"cos@FF"(double %output43)
  %output47 = fmul double %output33, %return46
  %tmp = load <3 x double>* %p
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output47, i64 0)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %p
  %return53 = call double @"sin@FF"(double %output43)
  %output54 = fmul double %output33, %return53
  %return56 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output50, double %output54, i64 1)
  %output58 = extractvalue { double, <3 x double> } %return56, 1
  store <3 x double> %output58, <3 x double>* %p
  ret void
}

define private void @"V_MOBIUS@VVFPP"(<3 x double>* %p, <3 x double>* %_p, double* %w, <4 x double>* %re, <4 x double>* %im) nounwind alwaysinline {
__llvm_entry:
  %re1 = load <4 x double>* %re
  %return = call double @"getcomp@FPI"(<4 x double> %re1, i64 0)
  %_p2 = load <3 x double>* %_p
  %return3 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %output = fmul double %return, %return3
  %im4 = load <4 x double>* %im
  %return5 = call double @"getcomp@FPI"(<4 x double> %im4, i64 0)
  %return7 = call double @"getcomp@FVI"(<3 x double> %_p2, i64 1)
  %output8 = fmul double %return5, %return7
  %output9 = fsub double %output, %output8
  %return11 = call double @"getcomp@FPI"(<4 x double> %re1, i64 1)
  %output12 = fadd double %output9, %return11
  %output17 = fmul double %return, %return7
  %output22 = fmul double %return5, %return3
  %output23 = fadd double %output17, %output22
  %return25 = call double @"getcomp@FPI"(<4 x double> %im4, i64 1)
  %output26 = fadd double %output23, %return25
  %return28 = call double @"getcomp@FPI"(<4 x double> %re1, i64 2)
  %output31 = fmul double %return28, %return3
  %return33 = call double @"getcomp@FPI"(<4 x double> %im4, i64 2)
  %output36 = fmul double %return33, %return7
  %output37 = fsub double %output31, %output36
  %return39 = call double @"getcomp@FPI"(<4 x double> %re1, i64 3)
  %output40 = fadd double %output37, %return39
  %output45 = fmul double %return28, %return7
  %output50 = fmul double %return33, %return3
  %output51 = fadd double %output45, %output50
  %return53 = call double @"getcomp@FPI"(<4 x double> %im4, i64 3)
  %output54 = fadd double %output51, %return53
  %w55 = load double* %w
  %output58 = fmul double %output40, %output40
  %output61 = fmul double %output54, %output54
  %output62 = fadd double %output58, %output61
  %output63 = call double @"div@FF"(double %w55, double %output62)
  %output67 = fmul double %output12, %output40
  %output70 = fmul double %output26, %output54
  %output71 = fadd double %output67, %output70
  %output72 = fmul double %output63, %output71
  %tmp = load <3 x double>* %p
  %return73 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output72, i64 0)
  %output75 = extractvalue { double, <3 x double> } %return73, 1
  store <3 x double> %output75, <3 x double>* %p
  %output79 = fmul double %output26, %output40
  %output82 = fmul double %output12, %output54
  %output83 = fsub double %output79, %output82
  %output84 = fmul double %output63, %output83
  %return86 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output75, double %output84, i64 1)
  %output88 = extractvalue { double, <3 x double> } %return86, 1
  store <3 x double> %output88, <3 x double>* %p
  ret void
}

define private void @"V_CURVE@VVFUU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %l, <2 x double>* %a) nounwind alwaysinline {
__llvm_entry:
  %l1 = load <2 x double>* %l
  %return = call double @"getcomp@FUI"(<2 x double> %l1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %l1, i64 1)
  %output8 = fmul double %return5, %return5
  %return10 = fcmp olt double %output, 1.000000e-20
  br i1 %return10, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return13 = fcmp olt double %output8, 1.000000e-20
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  br label %end16

end16:                                            ; preds = %true15, %end
  %w17 = load double* %w
  %_p18 = load <3 x double>* %_p
  %return19 = call double @"getcomp@FVI"(<3 x double> %_p18, i64 0)
  %a20 = load <2 x double>* %a
  %return21 = call double @"getcomp@FUI"(<2 x double> %a20, i64 0)
  %return23 = call double @"getcomp@FVI"(<3 x double> %_p18, i64 1)
  %output26 = fmul double %return23, %return23
  %l27 = load <2 x double>* %l
  %return28 = call double @"getcomp@FUI"(<2 x double> %l27, i64 0)
  %output29 = call double @"div@FF"(double %output26, double %return28)
  %return30 = call double @"exp@FF"(double %output29)
  %output31 = fmul double %return21, %return30
  %output32 = fadd double %return19, %output31
  %output33 = fmul double %w17, %output32
  %tmp = load <3 x double>* %p
  %return34 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output33, i64 0)
  %output36 = extractvalue { double, <3 x double> } %return34, 1
  store <3 x double> %output36, <3 x double>* %p
  %w37 = load double* %w
  %_p38 = load <3 x double>* %_p
  %return39 = call double @"getcomp@FVI"(<3 x double> %_p38, i64 1)
  %a40 = load <2 x double>* %a
  %return41 = call double @"getcomp@FUI"(<2 x double> %a40, i64 1)
  %return43 = call double @"getcomp@FVI"(<3 x double> %_p38, i64 0)
  %output46 = fmul double %return43, %return43
  %l47 = load <2 x double>* %l
  %return48 = call double @"getcomp@FUI"(<2 x double> %l47, i64 1)
  %output49 = call double @"div@FF"(double %output46, double %return48)
  %return50 = call double @"exp@FF"(double %output49)
  %output51 = fmul double %return41, %return50
  %output52 = fadd double %return39, %output51
  %output53 = fmul double %w37, %output52
  %return55 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output36, double %output53, i64 1)
  %output57 = extractvalue { double, <3 x double> } %return55, 1
  store <3 x double> %output57, <3 x double>* %p
  ret void
}

define private void @"V_PERSPECTIVE@VVFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %angle, double* %dist) nounwind alwaysinline {
__llvm_entry:
  %angle1 = load double* %angle
  %output = fmul double %angle1, 0x400921FB4D12D84A
  %output2 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"sin@FF"(double %output2)
  %dist4 = load double* %dist
  %return6 = call double @"cos@FF"(double %output2)
  %output7 = fmul double %dist4, %return6
  %_p9 = load <3 x double>* %_p
  %return10 = call double @"getcomp@FVI"(<3 x double> %_p9, i64 1)
  %output12 = fmul double %return10, %return
  %output13 = fsub double %dist4, %output12
  %output14 = call double @"div@FF"(double 1.000000e+00, double %output13)
  %w15 = load double* %w
  %output17 = fmul double %w15, %dist4
  %return19 = call double @"getcomp@FVI"(<3 x double> %_p9, i64 0)
  %output20 = fmul double %output17, %return19
  %output22 = fmul double %output20, %output14
  %tmp = load <3 x double>* %p
  %return23 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output22, i64 0)
  %output25 = extractvalue { double, <3 x double> } %return23, 1
  store <3 x double> %output25, <3 x double>* %p
  %w26 = load double* %w
  %output28 = fmul double %w26, %output7
  %_p29 = load <3 x double>* %_p
  %return30 = call double @"getcomp@FVI"(<3 x double> %_p29, i64 1)
  %output31 = fmul double %output28, %return30
  %output33 = fmul double %output31, %output14
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output25, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %p
  ret void
}

define private void @"V_BWRAPS@VVFFFFFF"(<3 x double>* %p, <3 x double>* %_p, double* %w, double* %cellsize, double* %space, double* %gain, double* %innertwist, double* %outertwist) nounwind alwaysinline {
__llvm_entry:
  %ss = alloca double
  %cc = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %ss, !vex-initializer-store !3
  store double 0.000000e+00, double* %cc, !vex-initializer-store !3
  %cellsize1 = load double* %cellsize
  %space2 = load double* %space
  %output = fmul double %space2, %space2
  %output4 = fadd double 1.000000e+00, %output
  %output5 = call double @"div@FF"(double %cellsize1, double %output4)
  %output6 = fmul double 5.000000e-01, %output5
  %gain7 = load double* %gain
  %return = call double @"sqrt@FF"(double %gain7)
  %output9 = call double @"div@FF"(double %return, double %cellsize1)
  %output10 = fadd double %output9, 1.000000e-06
  %output13 = fmul double %output10, %output6
  %return15 = fcmp ogt double %output13, 2.000000e+00
  br i1 %return15, label %end, label %false

false:                                            ; preds = %__llvm_entry
  %output18 = fmul double %output13, 1.000000e+00
  %output21 = fmul double %output13, %output13
  %output22 = call double @"div@FF"(double %output21, double 4.000000e+00)
  %output23 = fadd double %output22, 1.000000e+00
  %output24 = call double @"div@FF"(double %output18, double %output23)
  br label %end

end:                                              ; preds = %__llvm_entry, %false
  %phi = phi double [ %output24, %false ], [ 1.000000e+00, %__llvm_entry ]
  %output27 = fmul double %output6, %output6
  %output30 = call double @"div@FF"(double %output6, double %phi)
  %_p31 = load <3 x double>* %_p
  %return32 = call double @"getcomp@FVI"(<3 x double> %_p31, i64 0)
  %return34 = call double @"getcomp@FVI"(<3 x double> %_p31, i64 1)
  %cellsize35 = load double* %cellsize
  %return36 = fcmp oeq double %cellsize35, 0.000000e+00
  br i1 %return36, label %true38, label %false39

true38:                                           ; preds = %end
  %w41 = load double* %w
  %output43 = fmul double %w41, %return32
  %tmp = load <3 x double>* %p
  %return44 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output43, i64 0)
  %output46 = extractvalue { double, <3 x double> } %return44, 1
  store <3 x double> %output46, <3 x double>* %p
  %w47 = load double* %w
  %output49 = fmul double %w47, %return34
  %return51 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output46, double %output49, i64 1)
  %output53 = extractvalue { double, <3 x double> } %return51, 1
  store <3 x double> %output53, <3 x double>* %p
  br label %end40

false39:                                          ; preds = %end
  %output56 = call double @"div@FF"(double %return32, double %cellsize35)
  %return57 = call double @"floor@FF"(double %output56)
  %output58 = fadd double %return57, 5.000000e-01
  %output60 = fmul double %output58, %cellsize35
  %output63 = call double @"div@FF"(double %return34, double %cellsize35)
  %return64 = call double @"floor@FF"(double %output63)
  %output65 = fadd double %return64, 5.000000e-01
  %output67 = fmul double %output65, %cellsize35
  %output70 = fsub double %return32, %output60
  %output73 = fsub double %return34, %output67
  %output76 = fmul double %output70, %output70
  %output79 = fmul double %output73, %output73
  %output80 = fadd double %output76, %output79
  %return82 = fcmp ogt double %output80, %output27
  br i1 %return82, label %true84, label %false85

end40:                                            ; preds = %true84, %false85, %true38
  ret void

true84:                                           ; preds = %false39
  %w87 = load double* %w
  %output89 = fmul double %w87, %return32
  %tmp90 = load <3 x double>* %p
  %return91 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp90, double %output89, i64 0)
  %output93 = extractvalue { double, <3 x double> } %return91, 1
  store <3 x double> %output93, <3 x double>* %p
  %w94 = load double* %w
  %output96 = fmul double %w94, %return34
  %return98 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output93, double %output96, i64 1)
  %output100 = extractvalue { double, <3 x double> } %return98, 1
  store <3 x double> %output100, <3 x double>* %p
  br label %end40

false85:                                          ; preds = %false39
  %output103 = fmul double %output70, %output10
  %output106 = fmul double %output73, %output10
  %output110 = fmul double %output103, %output103
  %output113 = fmul double %output106, %output106
  %output114 = fadd double %output110, %output113
  %output115 = call double @"div@FF"(double %output114, double 4.000000e+00)
  %output116 = fadd double %output115, 1.000000e+00
  %output117 = call double @"div@FF"(double %output30, double %output116)
  %output120 = fmul double %output103, %output117
  %output123 = fmul double %output106, %output117
  %output126 = fmul double %output120, %output120
  %output129 = fmul double %output123, %output123
  %output130 = fadd double %output126, %output129
  %output132 = call double @"div@FF"(double %output130, double %output27)
  %innertwist133 = load double* %innertwist
  %output135 = fsub double 1.000000e+00, %output132
  %output136 = fmul double %innertwist133, %output135
  %outertwist137 = load double* %outertwist
  %output139 = fmul double %outertwist137, %output132
  %output140 = fadd double %output136, %output139
  store double %output140, double* %0
  call void @"sincos@FFF"(double* %0, double* %ss, double* %cc)
  %cc143 = load double* %cc
  %output145 = fmul double %cc143, %output120
  %output146 = fadd double %output60, %output145
  %ss147 = load double* %ss
  %output149 = fmul double %ss147, %output123
  %output150 = fadd double %output146, %output149
  %output154 = fmul double %ss147, %output120
  %output155 = fsub double %output67, %output154
  %output158 = fmul double %cc143, %output123
  %output159 = fadd double %output155, %output158
  %w160 = load double* %w
  %output162 = fmul double %w160, %output150
  %tmp163 = load <3 x double>* %p
  %return164 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp163, double %output162, i64 0)
  %output166 = extractvalue { double, <3 x double> } %return164, 1
  store <3 x double> %output166, <3 x double>* %p
  %w167 = load double* %w
  %output169 = fmul double %w167, %output159
  %return171 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output166, double %output169, i64 1)
  %output173 = extractvalue { double, <3 x double> } %return171, 1
  store <3 x double> %output173, <3 x double>* %p
  br label %end40
}

define private void @"V_HEMISPHERE@VVF"(<3 x double>* %p, <3 x double>* %_p, double* %w) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %w1 = load double* %w
  store i8* getelementptr inbounds ([6 x i8]* @107, i64 0, i64 0), i8** %0
  %_p2 = load <3 x double>* %_p
  store <3 x double> %_p2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e+00
  %return = call double @"sqrt@FF"(double %output)
  %output3 = call double @"div@FF"(double %w1, double %return)
  %_p4 = load <3 x double>* %_p
  %return5 = call double @"getcomp@FVI"(<3 x double> %_p4, i64 0)
  %output7 = fmul double %return5, %output3
  %tmp = load <3 x double>* %p
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %p
  %_p11 = load <3 x double>* %_p
  %return12 = call double @"getcomp@FVI"(<3 x double> %_p11, i64 1)
  %output14 = fmul double %return12, %output3
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %p
  ret void
}

define private void @"V_POLYNOMIAL@VVFUUU"(<3 x double>* %p, <3 x double>* %_p, double* %w, <2 x double>* %pow, <2 x double>* %lc, <2 x double>* %sc) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %w1 = load double* %w
  %_p2 = load <3 x double>* %_p
  %return = call double @"getcomp@FVI"(<3 x double> %_p2, i64 0)
  %return3 = call double @"abs@FF"(double %return)
  %output = fmul double %w1, %return3
  %pow4 = load <2 x double>* %pow
  %return5 = call double @"getcomp@FUI"(<2 x double> %pow4, i64 0)
  %return6 = call double @"pow@FFF"(double %output, double %return5)
  %w7 = load double* %w
  %_p8 = load <3 x double>* %_p
  %return9 = call double @"getcomp@FVI"(<3 x double> %_p8, i64 1)
  %return10 = call double @"abs@FF"(double %return9)
  %output11 = fmul double %w7, %return10
  %pow12 = load <2 x double>* %pow
  %return13 = call double @"getcomp@FUI"(<2 x double> %pow12, i64 1)
  %return14 = call double @"pow@FFF"(double %output11, double %return13)
  %_p16 = load <3 x double>* %_p
  %return17 = call double @"getcomp@FVI"(<3 x double> %_p16, i64 0)
  store double %return17, double* %0
  %sgn = call double @"sgn@FF"(double* %0)
  %output18 = fmul double %return6, %sgn
  %lc19 = load <2 x double>* %lc
  %return20 = call double @"getcomp@FUI"(<2 x double> %lc19, i64 0)
  %_p21 = load <3 x double>* %_p
  %return22 = call double @"getcomp@FVI"(<3 x double> %_p21, i64 0)
  %output23 = fmul double %return20, %return22
  %sc24 = load <2 x double>* %sc
  %return25 = call double @"getcomp@FUI"(<2 x double> %sc24, i64 0)
  %output26 = fmul double %output23, %return25
  %output27 = fadd double %output18, %output26
  %tmp = load <3 x double>* %p
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %p
  %_p32 = load <3 x double>* %_p
  %return33 = call double @"getcomp@FVI"(<3 x double> %_p32, i64 1)
  store double %return33, double* %1
  %sgn34 = call double @"sgn@FF"(double* %1)
  %output35 = fmul double %return14, %sgn34
  %lc36 = load <2 x double>* %lc
  %return37 = call double @"getcomp@FUI"(<2 x double> %lc36, i64 1)
  %_p38 = load <3 x double>* %_p
  %return39 = call double @"getcomp@FVI"(<3 x double> %_p38, i64 1)
  %output40 = fmul double %return37, %return39
  %sc41 = load <2 x double>* %sc
  %return42 = call double @"getcomp@FUI"(<2 x double> %sc41, i64 1)
  %output43 = fmul double %output40, %return42
  %output44 = fadd double %output35, %output43
  %tmp45 = load <3 x double>* %p
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp45, double %output44, i64 1)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  store <3 x double> %output48, <3 x double>* %p
  ret void
}

define private <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %GMP, i64* %ftype, <3 x double>* %pos, i64* %idx, i64* %type, <2 x double>* %x, <2 x double>* %y, <2 x double>* %o, double* %w) nounwind alwaysinline {
__llvm_entry:
  %_p = alloca <3 x double>
  %precalc = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca <2 x double>
  %2 = alloca <2 x double>
  %3 = alloca <2 x double>
  %4 = alloca i64
  %5 = alloca <3 x double>
  %6 = alloca <3 x double>
  %7 = alloca double
  %8 = alloca <3 x double>
  %9 = alloca double
  %10 = alloca <3 x double>
  %11 = alloca double
  %12 = alloca <3 x double>
  %13 = alloca double
  %14 = alloca <3 x double>
  %15 = alloca double
  %16 = alloca <3 x double>
  %17 = alloca double
  %18 = alloca <3 x double>
  %19 = alloca double
  %20 = alloca <3 x double>
  %21 = alloca double
  %22 = alloca <3 x double>
  %23 = alloca <3 x double>
  %24 = alloca double
  %25 = alloca <3 x double>
  %26 = alloca <3 x double>
  %27 = alloca double
  %28 = alloca <3 x double>
  %29 = alloca <3 x double>
  %30 = alloca double
  %31 = alloca <3 x double>
  %32 = alloca double
  %33 = alloca <3 x double>
  %34 = alloca double
  %35 = alloca <3 x double>
  %36 = alloca double
  %37 = alloca <3 x double>
  %38 = alloca double
  %39 = alloca double
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <3 x double>
  %44 = alloca double
  %45 = alloca <3 x double>
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca <3 x double>
  %50 = alloca double
  %51 = alloca <3 x double>
  %52 = alloca <3 x double>
  %53 = alloca double
  %54 = alloca <3 x double>
  %55 = alloca double
  %56 = alloca <3 x double>
  %57 = alloca <3 x double>
  %58 = alloca double
  %59 = alloca double
  %60 = alloca <3 x double>
  %61 = alloca double
  %62 = alloca double
  %63 = alloca <3 x double>
  %64 = alloca double
  %65 = alloca <3 x double>
  %66 = alloca double
  %67 = alloca <3 x double>
  %68 = alloca double
  %69 = alloca double
  %70 = alloca <3 x double>
  %71 = alloca double
  %72 = alloca double
  %73 = alloca double
  %74 = alloca <3 x double>
  %75 = alloca double
  %76 = alloca double
  %77 = alloca double
  %78 = alloca double
  %79 = alloca double
  %80 = alloca <3 x double>
  %81 = alloca double
  %82 = alloca <4 x double>
  %83 = alloca <3 x double>
  %84 = alloca <3 x double>
  %85 = alloca double
  %86 = alloca double
  %87 = alloca double
  %88 = alloca double
  %89 = alloca <3 x double>
  %90 = alloca double
  %91 = alloca double
  %92 = alloca double
  %93 = alloca <3 x double>
  %94 = alloca double
  %95 = alloca double
  %96 = alloca double
  %97 = alloca double
  %98 = alloca <3 x double>
  %99 = alloca double
  %100 = alloca <2 x double>
  %101 = alloca <3 x double>
  %102 = alloca <3 x double>
  %103 = alloca double
  %104 = alloca double
  %105 = alloca <3 x double>
  %106 = alloca double
  %107 = alloca <2 x double>
  %108 = alloca <3 x double>
  %109 = alloca double
  %110 = alloca double
  %111 = alloca double
  %112 = alloca double
  %113 = alloca double
  %114 = alloca double
  %115 = alloca double
  %116 = alloca <3 x double>
  %117 = alloca double
  %118 = alloca <3 x double>
  %119 = alloca double
  %120 = alloca <3 x double>
  %121 = alloca double
  %122 = alloca <3 x double>
  %123 = alloca double
  %124 = alloca <3 x double>
  %125 = alloca double
  %126 = alloca <3 x double>
  %127 = alloca double
  %128 = alloca <3 x double>
  %129 = alloca double
  %130 = alloca <3 x double>
  %131 = alloca double
  %132 = alloca <3 x double>
  %133 = alloca double
  %134 = alloca double
  %135 = alloca double
  %136 = alloca <3 x double>
  %137 = alloca double
  %138 = alloca double
  %139 = alloca double
  %140 = alloca double
  %141 = alloca <3 x double>
  %142 = alloca <3 x double>
  %143 = alloca double
  %144 = alloca double
  %145 = alloca double
  %146 = alloca <3 x double>
  %147 = alloca double
  %148 = alloca double
  %149 = alloca double
  %150 = alloca <3 x double>
  %151 = alloca double
  %152 = alloca double
  %153 = alloca double
  %154 = alloca <3 x double>
  %155 = alloca double
  %156 = alloca <2 x double>
  %157 = alloca <3 x double>
  %158 = alloca double
  %159 = alloca double
  %160 = alloca <3 x double>
  %161 = alloca double
  %162 = alloca <3 x double>
  %163 = alloca double
  %164 = alloca <3 x double>
  %165 = alloca double
  %166 = alloca double
  %167 = alloca <3 x double>
  %168 = alloca double
  %169 = alloca double
  %170 = alloca double
  %171 = alloca double
  %172 = alloca <3 x double>
  %173 = alloca double
  %174 = alloca <3 x double>
  %175 = alloca double
  %176 = alloca <3 x double>
  %177 = alloca double
  %178 = alloca <3 x double>
  %179 = alloca double
  %180 = alloca double
  %181 = alloca <3 x double>
  %182 = alloca double
  %183 = alloca <3 x double>
  %184 = alloca double
  %185 = alloca double
  %186 = alloca double
  %187 = alloca double
  %188 = alloca <2 x double>
  %189 = alloca <3 x double>
  %190 = alloca double
  %191 = alloca <3 x double>
  %192 = alloca double
  %193 = alloca <2 x double>
  %194 = alloca <3 x double>
  %195 = alloca double
  %196 = alloca double
  %197 = alloca double
  %198 = alloca double
  %199 = alloca double
  %200 = alloca <3 x double>
  %201 = alloca double
  %202 = alloca <3 x double>
  %203 = alloca double
  %204 = alloca double
  %205 = alloca <2 x double>
  %206 = alloca <3 x double>
  %207 = alloca double
  %208 = alloca <3 x double>
  %209 = alloca double
  %210 = alloca <2 x double>
  %211 = alloca <2 x double>
  %212 = alloca <3 x double>
  %213 = alloca double
  %214 = alloca <2 x double>
  %215 = alloca <3 x double>
  %216 = alloca double
  %217 = alloca <2 x double>
  %218 = alloca <3 x double>
  %219 = alloca double
  %220 = alloca double
  %221 = alloca double
  %222 = alloca <3 x double>
  %223 = alloca double
  %224 = alloca double
  %225 = alloca double
  %226 = alloca double
  %227 = alloca double
  %228 = alloca <3 x double>
  %229 = alloca double
  %230 = alloca double
  %231 = alloca double
  %232 = alloca double
  %233 = alloca double
  %234 = alloca <3 x double>
  %235 = alloca double
  %236 = alloca double
  %237 = alloca double
  %238 = alloca double
  %239 = alloca double
  %240 = alloca <3 x double>
  %241 = alloca double
  %242 = alloca double
  %243 = alloca double
  %244 = alloca <3 x double>
  %245 = alloca double
  %246 = alloca <2 x double>
  %247 = alloca <2 x double>
  %248 = alloca <3 x double>
  %249 = alloca double
  %250 = alloca <3 x double>
  %251 = alloca double
  %252 = alloca <3 x double>
  %253 = alloca double
  %254 = alloca <3 x double>
  %255 = alloca double
  %256 = alloca <3 x double>
  %257 = alloca double
  %258 = alloca <3 x double>
  %259 = alloca double
  %260 = alloca <3 x double>
  %261 = alloca double
  %262 = alloca <3 x double>
  %263 = alloca double
  %264 = alloca <3 x double>
  %265 = alloca double
  %266 = alloca <3 x double>
  %267 = alloca double
  %268 = alloca <3 x double>
  %269 = alloca double
  %270 = alloca <3 x double>
  %271 = alloca double
  %272 = alloca <3 x double>
  %273 = alloca double
  %274 = alloca <3 x double>
  %275 = alloca double
  %276 = alloca <3 x double>
  %277 = alloca double
  %278 = alloca double
  %279 = alloca double
  %280 = alloca double
  %281 = alloca double
  %282 = alloca <3 x double>
  %283 = alloca double
  %284 = alloca double
  %285 = alloca <3 x double>
  %286 = alloca double
  %287 = alloca <4 x double>
  %288 = alloca <4 x double>
  %289 = alloca <3 x double>
  %290 = alloca double
  %291 = alloca <2 x double>
  %292 = alloca <2 x double>
  %293 = alloca <3 x double>
  %294 = alloca double
  %295 = alloca double
  %296 = alloca double
  %297 = alloca <3 x double>
  %298 = alloca double
  %299 = alloca double
  %300 = alloca double
  %301 = alloca double
  %302 = alloca double
  %303 = alloca double
  %304 = alloca <3 x double>
  %305 = alloca double
  %306 = alloca <3 x double>
  %307 = alloca double
  %308 = alloca <2 x double>
  %309 = alloca <2 x double>
  %310 = alloca <2 x double>
  %p = alloca <3 x double>
  store <3 x double> zeroinitializer, <3 x double>* %p, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %precalc, !vex-initializer-store !3
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %_p
  %pos1 = load <3 x double>* %pos
  store <3 x double> %pos1, <3 x double>* %0
  %x2 = load <2 x double>* %x
  store <2 x double> %x2, <2 x double>* %1
  %y3 = load <2 x double>* %y
  store <2 x double> %y3, <2 x double>* %2
  %o4 = load <2 x double>* %o
  store <2 x double> %o4, <2 x double>* %3
  call void @"affine@VVUUU"(<3 x double>* %_p, <3 x double>* %0, <2 x double>* %1, <2 x double>* %2, <2 x double>* %3)
  %type5 = load i64* %type
  store i64 %type5, i64* %4
  %_p6 = load <3 x double>* %_p
  store <3 x double> %_p6, <3 x double>* %5
  call void @"precalc_utils@IVV"(i64* %4, <3 x double>* %5, <3 x double>* %precalc)
  %type7 = load i64* %type
  %return = call i64 @"not@II"(i64 %type7)
  %311 = icmp ne i64 %return, 0
  br i1 %311, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_p8 = load <3 x double>* %_p
  %w9 = load double* %w
  %cast10 = call <3 x double> @"set@VF"(double %w9)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_p8, <3 x double> %cast10)
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return12 = call i64 @"lt@III"(i64 %type7, i64 35)
  %312 = icmp ne i64 %return12, 0
  br i1 %312, label %true13, label %false14

true13:                                           ; preds = %false
  %return17 = call i64 @"lt@III"(i64 %type7, i64 18)
  %313 = icmp ne i64 %return17, 0
  br i1 %313, label %true18, label %false19

false14:                                          ; preds = %false
  %return402 = call i64 @"lt@III"(i64 %type7, i64 70)
  %314 = icmp ne i64 %return402, 0
  br i1 %314, label %true403, label %false404

end15:                                            ; preds = %false1376, %false1158, %false404, %false883, %false576, %false380, %false155
  %_p1407 = load <3 x double>* %_p
  br label %UnifiedReturnBlock

true18:                                           ; preds = %true13
  %return22 = call i64 @"eq@III"(i64 %type7, i64 1)
  %315 = icmp ne i64 %return22, 0
  br i1 %315, label %true23, label %false24

false19:                                          ; preds = %true13
  %return172 = call i64 @"eq@III"(i64 %type7, i64 18)
  %316 = icmp ne i64 %return172, 0
  br i1 %316, label %true173, label %false174

true23:                                           ; preds = %true18
  %_p26 = load <3 x double>* %_p
  store <3 x double> %_p26, <3 x double>* %6
  %w27 = load double* %w
  store double %w27, double* %7
  call void @"V_SINUSOIDAL@VVF"(<3 x double>* %p, <3 x double>* %6, double* %7)
  %p28 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false24:                                          ; preds = %true18
  %return30 = call i64 @"eq@III"(i64 %type7, i64 2)
  %317 = icmp ne i64 %return30, 0
  br i1 %317, label %true31, label %false32

true31:                                           ; preds = %false24
  %_p34 = load <3 x double>* %_p
  store <3 x double> %_p34, <3 x double>* %8
  %w35 = load double* %w
  store double %w35, double* %9
  call void @"V_SPHERICAL@VVF"(<3 x double>* %p, <3 x double>* %8, double* %9)
  %p36 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false32:                                          ; preds = %false24
  %return38 = call i64 @"eq@III"(i64 %type7, i64 3)
  %318 = icmp ne i64 %return38, 0
  br i1 %318, label %true39, label %false40

true39:                                           ; preds = %false32
  %_p42 = load <3 x double>* %_p
  store <3 x double> %_p42, <3 x double>* %10
  %w43 = load double* %w
  store double %w43, double* %11
  call void @"V_SWIRL@VVF"(<3 x double>* %p, <3 x double>* %10, double* %11)
  %p44 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false40:                                          ; preds = %false32
  %return46 = call i64 @"eq@III"(i64 %type7, i64 4)
  %319 = icmp ne i64 %return46, 0
  br i1 %319, label %true47, label %false48

true47:                                           ; preds = %false40
  %_p50 = load <3 x double>* %_p
  store <3 x double> %_p50, <3 x double>* %12
  %w51 = load double* %w
  store double %w51, double* %13
  call void @"V_HORSESHOE@VVF"(<3 x double>* %p, <3 x double>* %12, double* %13)
  %p52 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false48:                                          ; preds = %false40
  %return54 = call i64 @"eq@III"(i64 %type7, i64 5)
  %320 = icmp ne i64 %return54, 0
  br i1 %320, label %true55, label %false56

true55:                                           ; preds = %false48
  %_p58 = load <3 x double>* %_p
  store <3 x double> %_p58, <3 x double>* %14
  %w59 = load double* %w
  store double %w59, double* %15
  call void @"V_POLAR@VVF"(<3 x double>* %p, <3 x double>* %14, double* %15)
  %p60 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false56:                                          ; preds = %false48
  %return62 = call i64 @"eq@III"(i64 %type7, i64 6)
  %321 = icmp ne i64 %return62, 0
  br i1 %321, label %true63, label %false64

true63:                                           ; preds = %false56
  %_p66 = load <3 x double>* %_p
  store <3 x double> %_p66, <3 x double>* %16
  %w67 = load double* %w
  store double %w67, double* %17
  call void @"V_HANDKERCHIEF@VVF"(<3 x double>* %p, <3 x double>* %16, double* %17)
  %p68 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false64:                                          ; preds = %false56
  %return70 = call i64 @"eq@III"(i64 %type7, i64 7)
  %322 = icmp ne i64 %return70, 0
  br i1 %322, label %true71, label %false72

true71:                                           ; preds = %false64
  %_p74 = load <3 x double>* %_p
  store <3 x double> %_p74, <3 x double>* %18
  %w75 = load double* %w
  store double %w75, double* %19
  call void @"V_HEART@VVF"(<3 x double>* %p, <3 x double>* %18, double* %19)
  %p76 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false72:                                          ; preds = %false64
  %return78 = call i64 @"eq@III"(i64 %type7, i64 8)
  %323 = icmp ne i64 %return78, 0
  br i1 %323, label %true79, label %false80

true79:                                           ; preds = %false72
  %_p82 = load <3 x double>* %_p
  store <3 x double> %_p82, <3 x double>* %20
  %w83 = load double* %w
  store double %w83, double* %21
  call void @"V_DISC@VVF"(<3 x double>* %p, <3 x double>* %20, double* %21)
  %p84 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false80:                                          ; preds = %false72
  %return86 = call i64 @"eq@III"(i64 %type7, i64 9)
  %324 = icmp ne i64 %return86, 0
  br i1 %324, label %true87, label %false88

true87:                                           ; preds = %false80
  %_p90 = load <3 x double>* %_p
  store <3 x double> %_p90, <3 x double>* %22
  %precalc91 = load <3 x double>* %precalc
  store <3 x double> %precalc91, <3 x double>* %23
  %w92 = load double* %w
  store double %w92, double* %24
  call void @"V_SPIRAL@VVVF"(<3 x double>* %p, <3 x double>* %22, <3 x double>* %23, double* %24)
  %p93 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false88:                                          ; preds = %false80
  %return95 = call i64 @"eq@III"(i64 %type7, i64 10)
  %325 = icmp ne i64 %return95, 0
  br i1 %325, label %true96, label %false97

true96:                                           ; preds = %false88
  %_p99 = load <3 x double>* %_p
  store <3 x double> %_p99, <3 x double>* %25
  %precalc100 = load <3 x double>* %precalc
  store <3 x double> %precalc100, <3 x double>* %26
  %w101 = load double* %w
  store double %w101, double* %27
  call void @"V_HIPERBOLIC@VVVF"(<3 x double>* %p, <3 x double>* %25, <3 x double>* %26, double* %27)
  %p102 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false97:                                          ; preds = %false88
  %return104 = call i64 @"eq@III"(i64 %type7, i64 11)
  %326 = icmp ne i64 %return104, 0
  br i1 %326, label %true105, label %false106

true105:                                          ; preds = %false97
  %_p108 = load <3 x double>* %_p
  store <3 x double> %_p108, <3 x double>* %28
  %precalc109 = load <3 x double>* %precalc
  store <3 x double> %precalc109, <3 x double>* %29
  %w110 = load double* %w
  store double %w110, double* %30
  call void @"V_DIAMOND@VVVF"(<3 x double>* %p, <3 x double>* %28, <3 x double>* %29, double* %30)
  %p111 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false106:                                         ; preds = %false97
  %return113 = call i64 @"eq@III"(i64 %type7, i64 12)
  %327 = icmp ne i64 %return113, 0
  br i1 %327, label %true114, label %false115

true114:                                          ; preds = %false106
  %_p117 = load <3 x double>* %_p
  store <3 x double> %_p117, <3 x double>* %31
  %w118 = load double* %w
  store double %w118, double* %32
  call void @"V_EX@VVF"(<3 x double>* %p, <3 x double>* %31, double* %32)
  %p119 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false115:                                         ; preds = %false106
  %return121 = call i64 @"eq@III"(i64 %type7, i64 13)
  %328 = icmp ne i64 %return121, 0
  br i1 %328, label %true122, label %false123

true122:                                          ; preds = %false115
  %_p125 = load <3 x double>* %_p
  store <3 x double> %_p125, <3 x double>* %33
  %w126 = load double* %w
  store double %w126, double* %34
  call void @"V_JULIA@VVF"(<3 x double>* %p, <3 x double>* %33, double* %34)
  %p127 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false123:                                         ; preds = %false115
  %return129 = call i64 @"eq@III"(i64 %type7, i64 14)
  %329 = icmp ne i64 %return129, 0
  br i1 %329, label %true130, label %false131

true130:                                          ; preds = %false123
  %_p133 = load <3 x double>* %_p
  store <3 x double> %_p133, <3 x double>* %35
  %w134 = load double* %w
  store double %w134, double* %36
  call void @"V_BENT@VVF"(<3 x double>* %p, <3 x double>* %35, double* %36)
  %p135 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false131:                                         ; preds = %false123
  %return137 = call i64 @"eq@III"(i64 %type7, i64 15)
  %330 = icmp ne i64 %return137, 0
  br i1 %330, label %true138, label %false139

true138:                                          ; preds = %false131
  %_p141 = load <3 x double>* %_p
  store <3 x double> %_p141, <3 x double>* %37
  %w142 = load double* %w
  store double %w142, double* %38
  %o143 = load <2 x double>* %o
  %return144 = call double @"getcomp@FUI"(<2 x double> %o143, i64 0)
  store double %return144, double* %39
  %x145 = load <2 x double>* %x
  %return146 = call double @"getcomp@FUI"(<2 x double> %x145, i64 1)
  store double %return146, double* %40
  %y147 = load <2 x double>* %y
  %return148 = call double @"getcomp@FUI"(<2 x double> %y147, i64 1)
  store double %return148, double* %41
  %o149 = load <2 x double>* %o
  %return150 = call double @"getcomp@FUI"(<2 x double> %o149, i64 1)
  store double %return150, double* %42
  call void @"V_WAVES@VVFFFFF"(<3 x double>* %p, <3 x double>* %37, double* %38, double* %39, double* %40, double* %41, double* %42)
  %p151 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false139:                                         ; preds = %false131
  %return153 = call i64 @"eq@III"(i64 %type7, i64 16)
  %331 = icmp ne i64 %return153, 0
  br i1 %331, label %true154, label %false155

true154:                                          ; preds = %false139
  %_p157 = load <3 x double>* %_p
  store <3 x double> %_p157, <3 x double>* %43
  %w158 = load double* %w
  store double %w158, double* %44
  call void @"V_FISHEYE@VVF"(<3 x double>* %p, <3 x double>* %43, double* %44)
  %p159 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false155:                                         ; preds = %false139
  %return161 = call i64 @"eq@III"(i64 %type7, i64 17)
  %332 = icmp ne i64 %return161, 0
  br i1 %332, label %true162, label %end15

true162:                                          ; preds = %false155
  %_p164 = load <3 x double>* %_p
  store <3 x double> %_p164, <3 x double>* %45
  %w165 = load double* %w
  store double %w165, double* %46
  %o166 = load <2 x double>* %o
  %return167 = call double @"getcomp@FUI"(<2 x double> %o166, i64 0)
  store double %return167, double* %47
  %o168 = load <2 x double>* %o
  %return169 = call double @"getcomp@FUI"(<2 x double> %o168, i64 1)
  store double %return169, double* %48
  call void @"V_POPCORN@VVFFF"(<3 x double>* %p, <3 x double>* %45, double* %46, double* %47, double* %48)
  %p170 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true173:                                          ; preds = %false19
  %_p176 = load <3 x double>* %_p
  store <3 x double> %_p176, <3 x double>* %49
  %w177 = load double* %w
  store double %w177, double* %50
  call void @"V_EXPONENTIAL@VVF"(<3 x double>* %p, <3 x double>* %49, double* %50)
  %p178 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false174:                                         ; preds = %false19
  %return180 = call i64 @"eq@III"(i64 %type7, i64 19)
  %333 = icmp ne i64 %return180, 0
  br i1 %333, label %true181, label %false182

true181:                                          ; preds = %false174
  %_p184 = load <3 x double>* %_p
  store <3 x double> %_p184, <3 x double>* %51
  %precalc185 = load <3 x double>* %precalc
  store <3 x double> %precalc185, <3 x double>* %52
  %w186 = load double* %w
  store double %w186, double* %53
  call void @"V_POWER@VVVF"(<3 x double>* %p, <3 x double>* %51, <3 x double>* %52, double* %53)
  %p187 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false182:                                         ; preds = %false174
  %return189 = call i64 @"eq@III"(i64 %type7, i64 20)
  %334 = icmp ne i64 %return189, 0
  br i1 %334, label %true190, label %false191

true190:                                          ; preds = %false182
  %_p193 = load <3 x double>* %_p
  store <3 x double> %_p193, <3 x double>* %54
  %w194 = load double* %w
  store double %w194, double* %55
  call void @"V_COSINE@VVF"(<3 x double>* %p, <3 x double>* %54, double* %55)
  %p195 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false191:                                         ; preds = %false182
  %return197 = call i64 @"eq@III"(i64 %type7, i64 21)
  %335 = icmp ne i64 %return197, 0
  br i1 %335, label %true198, label %false199

true198:                                          ; preds = %false191
  %_p201 = load <3 x double>* %_p
  store <3 x double> %_p201, <3 x double>* %56
  %precalc202 = load <3 x double>* %precalc
  store <3 x double> %precalc202, <3 x double>* %57
  %w203 = load double* %w
  store double %w203, double* %58
  %o204 = load <2 x double>* %o
  %return205 = call double @"getcomp@FUI"(<2 x double> %o204, i64 0)
  store double %return205, double* %59
  call void @"V_RINGS@VVVFF"(<3 x double>* %p, <3 x double>* %56, <3 x double>* %57, double* %58, double* %59)
  %p206 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false199:                                         ; preds = %false191
  %return208 = call i64 @"eq@III"(i64 %type7, i64 22)
  %336 = icmp ne i64 %return208, 0
  br i1 %336, label %true209, label %false210

true209:                                          ; preds = %false199
  %_p212 = load <3 x double>* %_p
  store <3 x double> %_p212, <3 x double>* %60
  %w213 = load double* %w
  store double %w213, double* %61
  %o214 = load <2 x double>* %o
  %return215 = call double @"getcomp@FUI"(<2 x double> %o214, i64 0)
  store double %return215, double* %62
  call void @"V_FAN@VVFF"(<3 x double>* %p, <3 x double>* %60, double* %61, double* %62)
  %p216 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false210:                                         ; preds = %false199
  %return218 = call i64 @"eq@III"(i64 %type7, i64 23)
  %337 = icmp ne i64 %return218, 0
  br i1 %337, label %true219, label %false220

true219:                                          ; preds = %false210
  %_p222 = load <3 x double>* %_p
  store <3 x double> %_p222, <3 x double>* %63
  %w223 = load double* %w
  store double %w223, double* %64
  call void @"V_BUBBLE@VVF"(<3 x double>* %p, <3 x double>* %63, double* %64)
  %p224 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false220:                                         ; preds = %false210
  %return226 = call i64 @"eq@III"(i64 %type7, i64 24)
  %338 = icmp ne i64 %return226, 0
  br i1 %338, label %true227, label %false228

true227:                                          ; preds = %false220
  %_p230 = load <3 x double>* %_p
  store <3 x double> %_p230, <3 x double>* %65
  %w231 = load double* %w
  store double %w231, double* %66
  call void @"V_CYLINDER@VVF"(<3 x double>* %p, <3 x double>* %65, double* %66)
  %p232 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false228:                                         ; preds = %false220
  %return234 = call i64 @"eq@III"(i64 %type7, i64 25)
  %339 = icmp ne i64 %return234, 0
  br i1 %339, label %true235, label %false236

true235:                                          ; preds = %false228
  %_p238 = load <3 x double>* %_p
  store <3 x double> %_p238, <3 x double>* %67
  %w239 = load double* %w
  store double %w239, double* %68
  call void @"V_EYEFISH@VVF"(<3 x double>* %p, <3 x double>* %67, double* %68)
  %p240 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false236:                                         ; preds = %false228
  %return242 = call i64 @"eq@III"(i64 %type7, i64 26)
  %340 = icmp ne i64 %return242, 0
  br i1 %340, label %true243, label %false244

true243:                                          ; preds = %false236
  %w246 = load double* %w
  store double %w246, double* %69
  call void @"V_BLUR@VF"(<3 x double>* %p, double* %69)
  %p247 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false244:                                         ; preds = %false236
  %return249 = call i64 @"eq@III"(i64 %type7, i64 27)
  %341 = icmp ne i64 %return249, 0
  br i1 %341, label %true250, label %false251

true250:                                          ; preds = %false244
  %ftype253 = load i64* %ftype
  %342 = icmp ne i64 %ftype253, 0
  br i1 %342, label %true254, label %false255

false251:                                         ; preds = %false244
  %return270 = call i64 @"eq@III"(i64 %type7, i64 28)
  %343 = icmp ne i64 %return270, 0
  br i1 %343, label %true271, label %false272

true254:                                          ; preds = %true250
  %GMP257 = load %gemPrm* %GMP
  %curl_c258 = extractvalue %gemPrm %GMP257, 13
  %idx259 = load i64* %idx
  %return260 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curl_c258, i64 %idx259)
  br label %end256

false255:                                         ; preds = %true250
  %return261 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @112, i64 0, i64 0))
  br label %end256

end256:                                           ; preds = %false255, %true254
  %curl_c.0 = phi <2 x double> [ %return260, %true254 ], [ %return261, %false255 ]
  %_p262 = load <3 x double>* %_p
  store <3 x double> %_p262, <3 x double>* %70
  %w263 = load double* %w
  store double %w263, double* %71
  %return265 = call double @"getcomp@FUI"(<2 x double> %curl_c.0, i64 0)
  store double %return265, double* %72
  %return267 = call double @"getcomp@FUI"(<2 x double> %curl_c.0, i64 1)
  store double %return267, double* %73
  call void @"V_CURL@VVFFF"(<3 x double>* %p, <3 x double>* %70, double* %71, double* %72, double* %73)
  %p268 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true271:                                          ; preds = %false251
  %ftype274 = load i64* %ftype
  %344 = icmp ne i64 %ftype274, 0
  br i1 %344, label %true275, label %false276

false272:                                         ; preds = %false251
  %return295 = call i64 @"eq@III"(i64 %type7, i64 29)
  %345 = icmp ne i64 %return295, 0
  br i1 %345, label %true296, label %false297

true275:                                          ; preds = %true271
  %GMP278 = load %gemPrm* %GMP
  %ngon279 = extractvalue %gemPrm %GMP278, 42
  %idx280 = load i64* %idx
  %return281 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %ngon279, i64 %idx280)
  br label %end277

false276:                                         ; preds = %true271
  %return282 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([11 x i8]* @113, i64 0, i64 0))
  br label %end277

end277:                                           ; preds = %false276, %true275
  %ngon.0 = phi <4 x double> [ %return281, %true275 ], [ %return282, %false276 ]
  %_p283 = load <3 x double>* %_p
  store <3 x double> %_p283, <3 x double>* %74
  %w284 = load double* %w
  store double %w284, double* %75
  %return286 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 0)
  store double %return286, double* %76
  %return288 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 1)
  store double %return288, double* %77
  %return290 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 2)
  store double %return290, double* %78
  %return292 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 3)
  store double %return292, double* %79
  call void @"V_NGON@VVFFFFF"(<3 x double>* %p, <3 x double>* %74, double* %75, double* %76, double* %77, double* %78, double* %79)
  %p293 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true296:                                          ; preds = %false272
  %ftype299 = load i64* %ftype
  %346 = icmp ne i64 %ftype299, 0
  br i1 %346, label %true300, label %false301

false297:                                         ; preds = %false272
  %return312 = call i64 @"eq@III"(i64 %type7, i64 30)
  %347 = icmp ne i64 %return312, 0
  br i1 %347, label %true313, label %false314

true300:                                          ; preds = %true296
  %GMP303 = load %gemPrm* %GMP
  %pdj_w = extractvalue %gemPrm %GMP303, 43
  %idx304 = load i64* %idx
  %return305 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %pdj_w, i64 %idx304)
  br label %end302

false301:                                         ; preds = %true296
  %return306 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([11 x i8]* @114, i64 0, i64 0))
  br label %end302

end302:                                           ; preds = %false301, %true300
  %pp.0 = phi <4 x double> [ %return305, %true300 ], [ %return306, %false301 ]
  %_p307 = load <3 x double>* %_p
  store <3 x double> %_p307, <3 x double>* %80
  %w308 = load double* %w
  store double %w308, double* %81
  store <4 x double> %pp.0, <4 x double>* %82
  call void @"V_PDJ@VVFP"(<3 x double>* %p, <3 x double>* %80, double* %81, <4 x double>* %82)
  %p310 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true313:                                          ; preds = %false297
  %ftype316 = load i64* %ftype
  %348 = icmp ne i64 %ftype316, 0
  br i1 %348, label %true317, label %false318

false314:                                         ; preds = %false297
  %return336 = call i64 @"eq@III"(i64 %type7, i64 31)
  %349 = icmp ne i64 %return336, 0
  br i1 %349, label %true337, label %false338

true317:                                          ; preds = %true313
  %GMP320 = load %gemPrm* %GMP
  %blob321 = extractvalue %gemPrm %GMP320, 6
  %idx322 = load i64* %idx
  %return323 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %blob321, i64 %idx322)
  br label %end319

false318:                                         ; preds = %true313
  %return324 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8]* @115, i64 0, i64 0))
  br label %end319

end319:                                           ; preds = %false318, %true317
  %blob.0 = phi <3 x double> [ %return323, %true317 ], [ %return324, %false318 ]
  %_p325 = load <3 x double>* %_p
  store <3 x double> %_p325, <3 x double>* %83
  %precalc326 = load <3 x double>* %precalc
  store <3 x double> %precalc326, <3 x double>* %84
  %w327 = load double* %w
  store double %w327, double* %85
  %return329 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 1)
  store double %return329, double* %86
  %return331 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 0)
  store double %return331, double* %87
  %return333 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 2)
  store double %return333, double* %88
  call void @"V_BLOB@VVVFFFF"(<3 x double>* %p, <3 x double>* %83, <3 x double>* %84, double* %85, double* %86, double* %87, double* %88)
  %p334 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true337:                                          ; preds = %false314
  %ftype340 = load i64* %ftype
  %350 = icmp ne i64 %ftype340, 0
  br i1 %350, label %true341, label %false342

false338:                                         ; preds = %false314
  %return357 = call i64 @"eq@III"(i64 %type7, i64 32)
  %351 = icmp ne i64 %return357, 0
  br i1 %351, label %true358, label %false359

true341:                                          ; preds = %true337
  %GMP344 = load %gemPrm* %GMP
  %julian345 = extractvalue %gemPrm %GMP344, 32
  %idx346 = load i64* %idx
  %return347 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %julian345, i64 %idx346)
  br label %end343

false342:                                         ; preds = %true337
  %return348 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8]* @116, i64 0, i64 0))
  br label %end343

end343:                                           ; preds = %false342, %true341
  %julian.0 = phi <2 x double> [ %return347, %true341 ], [ %return348, %false342 ]
  %_p349 = load <3 x double>* %_p
  store <3 x double> %_p349, <3 x double>* %89
  %w350 = load double* %w
  store double %w350, double* %90
  %return352 = call double @"getcomp@FUI"(<2 x double> %julian.0, i64 0)
  store double %return352, double* %91
  %return354 = call double @"getcomp@FUI"(<2 x double> %julian.0, i64 1)
  store double %return354, double* %92
  call void @"V_JULIAN@VVFFF"(<3 x double>* %p, <3 x double>* %89, double* %90, double* %91, double* %92)
  %p355 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true358:                                          ; preds = %false338
  %ftype361 = load i64* %ftype
  %352 = icmp ne i64 %ftype361, 0
  br i1 %352, label %true362, label %false363

false359:                                         ; preds = %false338
  %return378 = call i64 @"eq@III"(i64 %type7, i64 33)
  %353 = icmp ne i64 %return378, 0
  br i1 %353, label %true379, label %false380

true362:                                          ; preds = %true358
  %GMP365 = load %gemPrm* %GMP
  %juliascope366 = extractvalue %gemPrm %GMP365, 33
  %idx367 = load i64* %idx
  %return368 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %juliascope366, i64 %idx367)
  br label %end364

false363:                                         ; preds = %true358
  %return369 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @117, i64 0, i64 0))
  br label %end364

end364:                                           ; preds = %false363, %true362
  %juliascope.0 = phi <2 x double> [ %return368, %true362 ], [ %return369, %false363 ]
  %_p370 = load <3 x double>* %_p
  store <3 x double> %_p370, <3 x double>* %93
  %w371 = load double* %w
  store double %w371, double* %94
  %return373 = call double @"getcomp@FUI"(<2 x double> %juliascope.0, i64 0)
  store double %return373, double* %95
  %return375 = call double @"getcomp@FUI"(<2 x double> %juliascope.0, i64 1)
  store double %return375, double* %96
  call void @"V_JULIASCOPE@VVFFF"(<3 x double>* %p, <3 x double>* %93, double* %94, double* %95, double* %96)
  %p376 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true379:                                          ; preds = %false359
  %w382 = load double* %w
  store double %w382, double* %97
  call void @"V_GAUSSIAN@VF"(<3 x double>* %p, double* %97)
  %p383 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false380:                                         ; preds = %false359
  %return385 = call i64 @"eq@III"(i64 %type7, i64 34)
  %354 = icmp ne i64 %return385, 0
  br i1 %354, label %true386, label %end15

true386:                                          ; preds = %false380
  %ftype388 = load i64* %ftype
  %355 = icmp ne i64 %ftype388, 0
  br i1 %355, label %true389, label %false390

true389:                                          ; preds = %true386
  %GMP392 = load %gemPrm* %GMP
  %fan2393 = extractvalue %gemPrm %GMP392, 15
  %idx394 = load i64* %idx
  %return395 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %fan2393, i64 %idx394)
  br label %end391

false390:                                         ; preds = %true386
  %return396 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([11 x i8]* @118, i64 0, i64 0))
  br label %end391

end391:                                           ; preds = %false390, %true389
  %fan2.0 = phi <2 x double> [ %return395, %true389 ], [ %return396, %false390 ]
  %_p397 = load <3 x double>* %_p
  store <3 x double> %_p397, <3 x double>* %98
  %w398 = load double* %w
  store double %w398, double* %99
  store <2 x double> %fan2.0, <2 x double>* %100
  call void @"V_FAN2@VVFU"(<3 x double>* %p, <3 x double>* %98, double* %99, <2 x double>* %100)
  %p400 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true403:                                          ; preds = %false14
  %return407 = call i64 @"lt@III"(i64 %type7, i64 50)
  %356 = icmp ne i64 %return407, 0
  br i1 %356, label %true408, label %false409

false404:                                         ; preds = %false14
  %return910 = call i64 @"lt@III"(i64 %type7, i64 102)
  %357 = icmp ne i64 %return910, 0
  br i1 %357, label %true911, label %end15

true408:                                          ; preds = %true403
  %return412 = call i64 @"eq@III"(i64 %type7, i64 35)
  %358 = icmp ne i64 %return412, 0
  br i1 %358, label %true413, label %false414

false409:                                         ; preds = %true403
  %return621 = call i64 @"eq@III"(i64 %type7, i64 50)
  %359 = icmp ne i64 %return621, 0
  br i1 %359, label %true622, label %false623

true413:                                          ; preds = %true408
  %ftype416 = load i64* %ftype
  %360 = icmp ne i64 %ftype416, 0
  br i1 %360, label %true417, label %false418

false414:                                         ; preds = %true408
  %return430 = call i64 @"eq@III"(i64 %type7, i64 36)
  %361 = icmp ne i64 %return430, 0
  br i1 %361, label %true431, label %false432

true417:                                          ; preds = %true413
  %GMP420 = load %gemPrm* %GMP
  %rings2_val = extractvalue %gemPrm %GMP420, 0
  %idx421 = load i64* %idx
  %return422 = call double @"getcomp@F[FI"(double* %rings2_val, i64 %idx421)
  br label %end419

false418:                                         ; preds = %true413
  %return423 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8]* @119, i64 0, i64 0))
  br label %end419

end419:                                           ; preds = %false418, %true417
  %rings2val.0 = phi double [ %return422, %true417 ], [ %return423, %false418 ]
  %_p424 = load <3 x double>* %_p
  store <3 x double> %_p424, <3 x double>* %101
  %precalc425 = load <3 x double>* %precalc
  store <3 x double> %precalc425, <3 x double>* %102
  %w426 = load double* %w
  store double %w426, double* %103
  store double %rings2val.0, double* %104
  call void @"V_RINGS2@VVVFF"(<3 x double>* %p, <3 x double>* %101, <3 x double>* %102, double* %103, double* %104)
  %p428 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true431:                                          ; preds = %false414
  %ftype434 = load i64* %ftype
  %362 = icmp ne i64 %ftype434, 0
  br i1 %362, label %true435, label %false436

false432:                                         ; preds = %false414
  %return447 = call i64 @"eq@III"(i64 %type7, i64 37)
  %363 = icmp ne i64 %return447, 0
  br i1 %363, label %true448, label %false449

true435:                                          ; preds = %true431
  %GMP438 = load %gemPrm* %GMP
  %rectangles = extractvalue %gemPrm %GMP438, 16
  %idx439 = load i64* %idx
  %return440 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %rectangles, i64 %idx439)
  br label %end437

false436:                                         ; preds = %true431
  %return441 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @120, i64 0, i64 0))
  br label %end437

end437:                                           ; preds = %false436, %true435
  %rect.0 = phi <2 x double> [ %return440, %true435 ], [ %return441, %false436 ]
  %_p442 = load <3 x double>* %_p
  store <3 x double> %_p442, <3 x double>* %105
  %w443 = load double* %w
  store double %w443, double* %106
  store <2 x double> %rect.0, <2 x double>* %107
  call void @"V_RECTANGLES@VVFU"(<3 x double>* %p, <3 x double>* %105, double* %106, <2 x double>* %107)
  %p445 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true448:                                          ; preds = %false432
  %ftype451 = load i64* %ftype
  %364 = icmp ne i64 %ftype451, 0
  br i1 %364, label %true452, label %false453

false449:                                         ; preds = %false432
  %return468 = call i64 @"eq@III"(i64 %type7, i64 38)
  %365 = icmp ne i64 %return468, 0
  br i1 %365, label %true469, label %false470

true452:                                          ; preds = %true448
  %GMP455 = load %gemPrm* %GMP
  %radialblur456 = extractvalue %gemPrm %GMP455, 34
  %idx457 = load i64* %idx
  %return458 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %radialblur456, i64 %idx457)
  br label %end454

false453:                                         ; preds = %true448
  %return459 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @121, i64 0, i64 0))
  br label %end454

end454:                                           ; preds = %false453, %true452
  %radialblur.0 = phi <2 x double> [ %return458, %true452 ], [ %return459, %false453 ]
  %_p460 = load <3 x double>* %_p
  store <3 x double> %_p460, <3 x double>* %108
  %w461 = load double* %w
  store double %w461, double* %109
  %return463 = call double @"getcomp@FUI"(<2 x double> %radialblur.0, i64 0)
  store double %return463, double* %110
  %return465 = call double @"getcomp@FUI"(<2 x double> %radialblur.0, i64 1)
  store double %return465, double* %111
  call void @"V_RADIALBLUR@VVFFF"(<3 x double>* %p, <3 x double>* %108, double* %109, double* %110, double* %111)
  %p466 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true469:                                          ; preds = %false449
  %ftype472 = load i64* %ftype
  %366 = icmp ne i64 %ftype472, 0
  br i1 %366, label %true473, label %false474

false470:                                         ; preds = %false449
  %return490 = call i64 @"eq@III"(i64 %type7, i64 39)
  %367 = icmp ne i64 %return490, 0
  br i1 %367, label %true491, label %false492

true473:                                          ; preds = %true469
  %GMP476 = load %gemPrm* %GMP
  %pie477 = extractvalue %gemPrm %GMP476, 7
  %idx478 = load i64* %idx
  %return479 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %pie477, i64 %idx478)
  br label %end475

false474:                                         ; preds = %true469
  %return480 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([10 x i8]* @122, i64 0, i64 0))
  br label %end475

end475:                                           ; preds = %false474, %true473
  %pie.0 = phi <3 x double> [ %return479, %true473 ], [ %return480, %false474 ]
  %w481 = load double* %w
  store double %w481, double* %112
  %return483 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 0)
  store double %return483, double* %113
  %return485 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 1)
  store double %return485, double* %114
  %return487 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 2)
  store double %return487, double* %115
  call void @"V_PIE@VFFFF"(<3 x double>* %p, double* %112, double* %113, double* %114, double* %115)
  %p488 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true491:                                          ; preds = %false470
  %_p494 = load <3 x double>* %_p
  store <3 x double> %_p494, <3 x double>* %116
  %w495 = load double* %w
  store double %w495, double* %117
  call void @"V_ARCH@VVF"(<3 x double>* %p, <3 x double>* %116, double* %117)
  %p496 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false492:                                         ; preds = %false470
  %return498 = call i64 @"eq@III"(i64 %type7, i64 40)
  %368 = icmp ne i64 %return498, 0
  br i1 %368, label %true499, label %false500

true499:                                          ; preds = %false492
  %_p502 = load <3 x double>* %_p
  store <3 x double> %_p502, <3 x double>* %118
  %w503 = load double* %w
  store double %w503, double* %119
  call void @"V_TANGENT@VVF"(<3 x double>* %p, <3 x double>* %118, double* %119)
  %p504 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false500:                                         ; preds = %false492
  %return506 = call i64 @"eq@III"(i64 %type7, i64 41)
  %369 = icmp ne i64 %return506, 0
  br i1 %369, label %true507, label %false508

true507:                                          ; preds = %false500
  %w510 = load double* %w
  store double %w510, double* %121
  call void @"V_SQUARE@VVF"(<3 x double>* %p, <3 x double>* %120, double* %121)
  %p511 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false508:                                         ; preds = %false500
  %return513 = call i64 @"eq@III"(i64 %type7, i64 42)
  %370 = icmp ne i64 %return513, 0
  br i1 %370, label %true514, label %false515

true514:                                          ; preds = %false508
  %_p517 = load <3 x double>* %_p
  store <3 x double> %_p517, <3 x double>* %122
  %w518 = load double* %w
  store double %w518, double* %123
  call void @"V_RAYS@VVF"(<3 x double>* %p, <3 x double>* %122, double* %123)
  %p519 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false515:                                         ; preds = %false508
  %return521 = call i64 @"eq@III"(i64 %type7, i64 43)
  %371 = icmp ne i64 %return521, 0
  br i1 %371, label %true522, label %false523

true522:                                          ; preds = %false515
  %_p525 = load <3 x double>* %_p
  store <3 x double> %_p525, <3 x double>* %124
  %w526 = load double* %w
  store double %w526, double* %125
  call void @"V_BLADE@VVF"(<3 x double>* %p, <3 x double>* %124, double* %125)
  %p527 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false523:                                         ; preds = %false515
  %return529 = call i64 @"eq@III"(i64 %type7, i64 44)
  %372 = icmp ne i64 %return529, 0
  br i1 %372, label %true530, label %false531

true530:                                          ; preds = %false523
  %_p533 = load <3 x double>* %_p
  store <3 x double> %_p533, <3 x double>* %126
  %w534 = load double* %w
  store double %w534, double* %127
  call void @"V_SECANT2@VVF"(<3 x double>* %p, <3 x double>* %126, double* %127)
  %p535 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false531:                                         ; preds = %false523
  %return537 = call i64 @"eq@III"(i64 %type7, i64 45)
  %373 = icmp ne i64 %return537, 0
  br i1 %373, label %true538, label %false539

true538:                                          ; preds = %false531
  %_p541 = load <3 x double>* %_p
  store <3 x double> %_p541, <3 x double>* %128
  %w542 = load double* %w
  store double %w542, double* %129
  call void @"V_TWINTRIAN@VVF"(<3 x double>* %p, <3 x double>* %128, double* %129)
  %p543 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false539:                                         ; preds = %false531
  %return545 = call i64 @"eq@III"(i64 %type7, i64 46)
  %374 = icmp ne i64 %return545, 0
  br i1 %374, label %true546, label %false547

true546:                                          ; preds = %false539
  %_p549 = load <3 x double>* %_p
  store <3 x double> %_p549, <3 x double>* %130
  %w550 = load double* %w
  store double %w550, double* %131
  call void @"V_CROSS@VVF"(<3 x double>* %p, <3 x double>* %130, double* %131)
  %p551 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false547:                                         ; preds = %false539
  %return553 = call i64 @"eq@III"(i64 %type7, i64 47)
  %375 = icmp ne i64 %return553, 0
  br i1 %375, label %true554, label %false555

true554:                                          ; preds = %false547
  %ftype557 = load i64* %ftype
  %376 = icmp ne i64 %ftype557, 0
  br i1 %376, label %true558, label %false559

false555:                                         ; preds = %false547
  %return574 = call i64 @"eq@III"(i64 %type7, i64 48)
  %377 = icmp ne i64 %return574, 0
  br i1 %377, label %true575, label %false576

true558:                                          ; preds = %true554
  %GMP561 = load %gemPrm* %GMP
  %disc2562 = extractvalue %gemPrm %GMP561, 35
  %idx563 = load i64* %idx
  %return564 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %disc2562, i64 %idx563)
  br label %end560

false559:                                         ; preds = %true554
  %return565 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @123, i64 0, i64 0))
  br label %end560

end560:                                           ; preds = %false559, %true558
  %disc2.0 = phi <2 x double> [ %return564, %true558 ], [ %return565, %false559 ]
  %_p566 = load <3 x double>* %_p
  store <3 x double> %_p566, <3 x double>* %132
  %w567 = load double* %w
  store double %w567, double* %133
  %return569 = call double @"getcomp@FUI"(<2 x double> %disc2.0, i64 0)
  store double %return569, double* %134
  %return571 = call double @"getcomp@FUI"(<2 x double> %disc2.0, i64 1)
  store double %return571, double* %135
  call void @"V_DISC2@VVFFF"(<3 x double>* %p, <3 x double>* %132, double* %133, double* %134, double* %135)
  %p572 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true575:                                          ; preds = %false555
  %ftype578 = load i64* %ftype
  %378 = icmp ne i64 %ftype578, 0
  br i1 %378, label %true579, label %false580

false576:                                         ; preds = %false555
  %return601 = call i64 @"eq@III"(i64 %type7, i64 49)
  %379 = icmp ne i64 %return601, 0
  br i1 %379, label %true602, label %end15

true579:                                          ; preds = %true575
  %GMP582 = load %gemPrm* %GMP
  %supershape = extractvalue %gemPrm %GMP582, 8
  %idx583 = load i64* %idx
  %return584 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %supershape, i64 %idx583)
  %supershape_n = extractvalue %gemPrm %GMP582, 9
  %return587 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %supershape_n, i64 %idx583)
  br label %end581

false580:                                         ; preds = %true575
  %return588 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([17 x i8]* @124, i64 0, i64 0))
  %return589 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([18 x i8]* @125, i64 0, i64 0))
  br label %end581

end581:                                           ; preds = %false580, %true579
  %ss_n.0 = phi <3 x double> [ %return587, %true579 ], [ %return589, %false580 ]
  %ss.0 = phi <3 x double> [ %return584, %true579 ], [ %return588, %false580 ]
  %_p590 = load <3 x double>* %_p
  store <3 x double> %_p590, <3 x double>* %136
  %w591 = load double* %w
  store double %w591, double* %137
  %return593 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 1)
  store double %return593, double* %138
  %return595 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 0)
  store double %return595, double* %139
  %return597 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 2)
  store double %return597, double* %140
  store <3 x double> %ss_n.0, <3 x double>* %141
  call void @"V_SUPERSHAPE@VVFFFFV"(<3 x double>* %p, <3 x double>* %136, double* %137, double* %138, double* %139, double* %140, <3 x double>* %141)
  %p599 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true602:                                          ; preds = %false576
  %ftype604 = load i64* %ftype
  %380 = icmp ne i64 %ftype604, 0
  br i1 %380, label %true605, label %false606

true605:                                          ; preds = %true602
  %GMP608 = load %gemPrm* %GMP
  %flower609 = extractvalue %gemPrm %GMP608, 36
  %idx610 = load i64* %idx
  %return611 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %flower609, i64 %idx610)
  br label %end607

false606:                                         ; preds = %true602
  %return612 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8]* @126, i64 0, i64 0))
  br label %end607

end607:                                           ; preds = %false606, %true605
  %flower.0 = phi <2 x double> [ %return611, %true605 ], [ %return612, %false606 ]
  %_p613 = load <3 x double>* %_p
  store <3 x double> %_p613, <3 x double>* %142
  %w614 = load double* %w
  store double %w614, double* %143
  %return616 = call double @"getcomp@FUI"(<2 x double> %flower.0, i64 0)
  store double %return616, double* %144
  %return618 = call double @"getcomp@FUI"(<2 x double> %flower.0, i64 1)
  store double %return618, double* %145
  call void @"V_FLOWER@VVFFF"(<3 x double>* %p, <3 x double>* %142, double* %143, double* %144, double* %145)
  %p619 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true622:                                          ; preds = %false409
  %ftype625 = load i64* %ftype
  %381 = icmp ne i64 %ftype625, 0
  br i1 %381, label %true626, label %false627

false623:                                         ; preds = %false409
  %return642 = call i64 @"eq@III"(i64 %type7, i64 51)
  %382 = icmp ne i64 %return642, 0
  br i1 %382, label %true643, label %false644

true626:                                          ; preds = %true622
  %GMP629 = load %gemPrm* %GMP
  %conic630 = extractvalue %gemPrm %GMP629, 37
  %idx631 = load i64* %idx
  %return632 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %conic630, i64 %idx631)
  br label %end628

false627:                                         ; preds = %true622
  %return633 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @127, i64 0, i64 0))
  br label %end628

end628:                                           ; preds = %false627, %true626
  %conic.0 = phi <2 x double> [ %return632, %true626 ], [ %return633, %false627 ]
  %_p634 = load <3 x double>* %_p
  store <3 x double> %_p634, <3 x double>* %146
  %w635 = load double* %w
  store double %w635, double* %147
  %return637 = call double @"getcomp@FUI"(<2 x double> %conic.0, i64 0)
  store double %return637, double* %148
  %return639 = call double @"getcomp@FUI"(<2 x double> %conic.0, i64 1)
  store double %return639, double* %149
  call void @"V_CONIC@VVFFF"(<3 x double>* %p, <3 x double>* %146, double* %147, double* %148, double* %149)
  %p640 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true643:                                          ; preds = %false623
  %ftype646 = load i64* %ftype
  %383 = icmp ne i64 %ftype646, 0
  br i1 %383, label %true647, label %false648

false644:                                         ; preds = %false623
  %return663 = call i64 @"eq@III"(i64 %type7, i64 52)
  %384 = icmp ne i64 %return663, 0
  br i1 %384, label %true664, label %false665

true647:                                          ; preds = %true643
  %GMP650 = load %gemPrm* %GMP
  %parabola651 = extractvalue %gemPrm %GMP650, 14
  %idx652 = load i64* %idx
  %return653 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %parabola651, i64 %idx652)
  br label %end649

false648:                                         ; preds = %true643
  %return654 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([15 x i8]* @128, i64 0, i64 0))
  br label %end649

end649:                                           ; preds = %false648, %true647
  %parabola.0 = phi <2 x double> [ %return653, %true647 ], [ %return654, %false648 ]
  %_p655 = load <3 x double>* %_p
  store <3 x double> %_p655, <3 x double>* %150
  %w656 = load double* %w
  store double %w656, double* %151
  %return658 = call double @"getcomp@FUI"(<2 x double> %parabola.0, i64 0)
  store double %return658, double* %152
  %return660 = call double @"getcomp@FUI"(<2 x double> %parabola.0, i64 1)
  store double %return660, double* %153
  call void @"V_PARABOLA@VVFFF"(<3 x double>* %p, <3 x double>* %150, double* %151, double* %152, double* %153)
  %p661 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true664:                                          ; preds = %false644
  %ftype667 = load i64* %ftype
  %385 = icmp ne i64 %ftype667, 0
  br i1 %385, label %true668, label %false669

false665:                                         ; preds = %false644
  %return681 = call i64 @"eq@III"(i64 %type7, i64 53)
  %386 = icmp ne i64 %return681, 0
  br i1 %386, label %true682, label %false683

true668:                                          ; preds = %true664
  %GMP671 = load %gemPrm* %GMP
  %bent2672 = extractvalue %gemPrm %GMP671, 17
  %idx673 = load i64* %idx
  %return674 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %bent2672, i64 %idx673)
  br label %end670

false669:                                         ; preds = %true664
  %return675 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([14 x i8]* @129, i64 0, i64 0))
  br label %end670

end670:                                           ; preds = %false669, %true668
  %bent2.0 = phi <2 x double> [ %return674, %true668 ], [ %return675, %false669 ]
  %_p676 = load <3 x double>* %_p
  store <3 x double> %_p676, <3 x double>* %154
  %w677 = load double* %w
  store double %w677, double* %155
  store <2 x double> %bent2.0, <2 x double>* %156
  call void @"V_BENT2@VVFU"(<3 x double>* %p, <3 x double>* %154, double* %155, <2 x double>* %156)
  %p679 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true682:                                          ; preds = %false665
  %ftype685 = load i64* %ftype
  %387 = icmp ne i64 %ftype685, 0
  br i1 %387, label %true686, label %false687

false683:                                         ; preds = %false665
  %return698 = call i64 @"eq@III"(i64 %type7, i64 54)
  %388 = icmp ne i64 %return698, 0
  br i1 %388, label %true699, label %false700

true686:                                          ; preds = %true682
  %GMP689 = load %gemPrm* %GMP
  %bipolar_shift = extractvalue %gemPrm %GMP689, 1
  %idx690 = load i64* %idx
  %return691 = call double @"getcomp@F[FI"(double* %bipolar_shift, i64 %idx690)
  br label %end688

false687:                                         ; preds = %true682
  %return692 = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8]* @130, i64 0, i64 0))
  br label %end688

end688:                                           ; preds = %false687, %true686
  %shift.0 = phi double [ %return691, %true686 ], [ %return692, %false687 ]
  %_p693 = load <3 x double>* %_p
  store <3 x double> %_p693, <3 x double>* %157
  %w694 = load double* %w
  store double %w694, double* %158
  store double %shift.0, double* %159
  call void @"V_BIPOLAR@VVFF"(<3 x double>* %p, <3 x double>* %157, double* %158, double* %159)
  %p696 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true699:                                          ; preds = %false683
  %_p702 = load <3 x double>* %_p
  store <3 x double> %_p702, <3 x double>* %160
  %w703 = load double* %w
  store double %w703, double* %161
  call void @"V_BOARDERS@VVF"(<3 x double>* %p, <3 x double>* %160, double* %161)
  %p704 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false700:                                         ; preds = %false683
  %return706 = call i64 @"eq@III"(i64 %type7, i64 55)
  %389 = icmp ne i64 %return706, 0
  br i1 %389, label %true707, label %false708

true707:                                          ; preds = %false700
  %_p710 = load <3 x double>* %_p
  store <3 x double> %_p710, <3 x double>* %162
  %w711 = load double* %w
  store double %w711, double* %163
  call void @"V_BUTTERFLY@VVF"(<3 x double>* %p, <3 x double>* %162, double* %163)
  %p712 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false708:                                         ; preds = %false700
  %return714 = call i64 @"eq@III"(i64 %type7, i64 56)
  %390 = icmp ne i64 %return714, 0
  br i1 %390, label %true715, label %false716

true715:                                          ; preds = %false708
  %ftype718 = load i64* %ftype
  %391 = icmp ne i64 %ftype718, 0
  br i1 %391, label %true719, label %false720

false716:                                         ; preds = %false708
  %return730 = call i64 @"eq@III"(i64 %type7, i64 57)
  %392 = icmp ne i64 %return730, 0
  br i1 %392, label %true731, label %false732

true719:                                          ; preds = %true715
  %GMP722 = load %gemPrm* %GMP
  %cell_size = extractvalue %gemPrm %GMP722, 2
  %idx723 = load i64* %idx
  %return724 = call double @"getcomp@F[FI"(double* %cell_size, i64 %idx723)
  br label %end721

false720:                                         ; preds = %true715
  %return725 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8]* @131, i64 0, i64 0))
  br label %end721

end721:                                           ; preds = %false720, %true719
  %size.0 = phi double [ %return724, %true719 ], [ %return725, %false720 ]
  %_p726 = load <3 x double>* %_p
  store <3 x double> %_p726, <3 x double>* %164
  store double %size.0, double* %166
  call void @"V_CELL@VVFF"(<3 x double>* %p, <3 x double>* %164, double* %165, double* %166)
  %p728 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true731:                                          ; preds = %false716
  %ftype734 = load i64* %ftype
  %393 = icmp ne i64 %ftype734, 0
  br i1 %393, label %true735, label %false736

false732:                                         ; preds = %false716
  %return753 = call i64 @"eq@III"(i64 %type7, i64 58)
  %394 = icmp ne i64 %return753, 0
  br i1 %394, label %true754, label %false755

true735:                                          ; preds = %true731
  %GMP738 = load %gemPrm* %GMP
  %cpow739 = extractvalue %gemPrm %GMP738, 10
  %idx740 = load i64* %idx
  %return741 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %cpow739, i64 %idx740)
  br label %end737

false736:                                         ; preds = %true731
  %return742 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8]* @132, i64 0, i64 0))
  br label %end737

end737:                                           ; preds = %false736, %true735
  %cpow.0 = phi <3 x double> [ %return741, %true735 ], [ %return742, %false736 ]
  %_p743 = load <3 x double>* %_p
  store <3 x double> %_p743, <3 x double>* %167
  %w744 = load double* %w
  store double %w744, double* %168
  %return746 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 0)
  store double %return746, double* %169
  %return748 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 1)
  store double %return748, double* %170
  %return750 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 2)
  store double %return750, double* %171
  call void @"V_CPOW@VVFFFF"(<3 x double>* %p, <3 x double>* %167, double* %168, double* %169, double* %170, double* %171)
  %p751 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true754:                                          ; preds = %false732
  %_p757 = load <3 x double>* %_p
  store <3 x double> %_p757, <3 x double>* %172
  %w758 = load double* %w
  store double %w758, double* %173
  call void @"V_EDISC@VVF"(<3 x double>* %p, <3 x double>* %172, double* %173)
  %p759 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false755:                                         ; preds = %false732
  %return761 = call i64 @"eq@III"(i64 %type7, i64 59)
  %395 = icmp ne i64 %return761, 0
  br i1 %395, label %true762, label %false763

true762:                                          ; preds = %false755
  %_p765 = load <3 x double>* %_p
  store <3 x double> %_p765, <3 x double>* %174
  %w766 = load double* %w
  store double %w766, double* %175
  call void @"V_ELLIPTIC@VVF"(<3 x double>* %p, <3 x double>* %174, double* %175)
  %p767 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false763:                                         ; preds = %false755
  %return769 = call i64 @"eq@III"(i64 %type7, i64 60)
  %396 = icmp ne i64 %return769, 0
  br i1 %396, label %true770, label %false771

true770:                                          ; preds = %false763
  %_p773 = load <3 x double>* %_p
  store <3 x double> %_p773, <3 x double>* %176
  %w774 = load double* %w
  store double %w774, double* %177
  call void @"V_NOISE@VVF"(<3 x double>* %p, <3 x double>* %176, double* %177)
  %p775 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false771:                                         ; preds = %false763
  %return777 = call i64 @"eq@III"(i64 %type7, i64 61)
  %397 = icmp ne i64 %return777, 0
  br i1 %397, label %true778, label %false779

true778:                                          ; preds = %false771
  %ftype781 = load i64* %ftype
  %398 = icmp ne i64 %ftype781, 0
  br i1 %398, label %true782, label %false783

false779:                                         ; preds = %false771
  %return794 = call i64 @"eq@III"(i64 %type7, i64 62)
  %399 = icmp ne i64 %return794, 0
  br i1 %399, label %true795, label %false796

true782:                                          ; preds = %true778
  %GMP785 = load %gemPrm* %GMP
  %escher_beta = extractvalue %gemPrm %GMP785, 3
  %idx786 = load i64* %idx
  %return787 = call double @"getcomp@F[FI"(double* %escher_beta, i64 %idx786)
  br label %end784

false783:                                         ; preds = %true778
  %return788 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8]* @133, i64 0, i64 0))
  br label %end784

end784:                                           ; preds = %false783, %true782
  %beta.0 = phi double [ %return787, %true782 ], [ %return788, %false783 ]
  %_p789 = load <3 x double>* %_p
  store <3 x double> %_p789, <3 x double>* %178
  %w790 = load double* %w
  store double %w790, double* %179
  store double %beta.0, double* %180
  call void @"V_ESCHER@VVFF"(<3 x double>* %p, <3 x double>* %178, double* %179, double* %180)
  %p792 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true795:                                          ; preds = %false779
  %_p798 = load <3 x double>* %_p
  store <3 x double> %_p798, <3 x double>* %181
  %w799 = load double* %w
  store double %w799, double* %182
  call void @"V_FOCI@VVF"(<3 x double>* %p, <3 x double>* %181, double* %182)
  %p800 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false796:                                         ; preds = %false779
  %return802 = call i64 @"eq@III"(i64 %type7, i64 63)
  %400 = icmp ne i64 %return802, 0
  br i1 %400, label %true803, label %false804

true803:                                          ; preds = %false796
  %ftype806 = load i64* %ftype
  %401 = icmp ne i64 %ftype806, 0
  br i1 %401, label %true807, label %false808

false804:                                         ; preds = %false796
  %return831 = call i64 @"eq@III"(i64 %type7, i64 64)
  %402 = icmp ne i64 %return831, 0
  br i1 %402, label %true832, label %false833

true807:                                          ; preds = %true803
  %GMP810 = load %gemPrm* %GMP
  %lazysusanxyz811 = extractvalue %gemPrm %GMP810, 18
  %idx812 = load i64* %idx
  %return813 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %lazysusanxyz811, i64 %idx812)
  %lazysusan815 = extractvalue %gemPrm %GMP810, 11
  %return817 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %lazysusan815, i64 %idx812)
  br label %end809

false808:                                         ; preds = %true803
  %return818 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8]* @134, i64 0, i64 0))
  %return819 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([16 x i8]* @135, i64 0, i64 0))
  br label %end809

end809:                                           ; preds = %false808, %true807
  %lazysusanxyz.0 = phi <2 x double> [ %return813, %true807 ], [ %return818, %false808 ]
  %lazysusan.0 = phi <3 x double> [ %return817, %true807 ], [ %return819, %false808 ]
  %_p820 = load <3 x double>* %_p
  store <3 x double> %_p820, <3 x double>* %183
  %w821 = load double* %w
  store double %w821, double* %184
  %return823 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 0)
  store double %return823, double* %185
  %return825 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 1)
  store double %return825, double* %186
  %return827 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 2)
  store double %return827, double* %187
  store <2 x double> %lazysusanxyz.0, <2 x double>* %188
  call void @"V_LAZYSUSAN@VVFFFFU"(<3 x double>* %p, <3 x double>* %183, double* %184, double* %185, double* %186, double* %187, <2 x double>* %188)
  %p829 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true832:                                          ; preds = %false804
  %_p835 = load <3 x double>* %_p
  store <3 x double> %_p835, <3 x double>* %189
  %w836 = load double* %w
  store double %w836, double* %190
  call void @"V_LOONIE@VVF"(<3 x double>* %p, <3 x double>* %189, double* %190)
  %p837 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false833:                                         ; preds = %false804
  %return839 = call i64 @"eq@III"(i64 %type7, i64 66)
  %403 = icmp ne i64 %return839, 0
  br i1 %403, label %true840, label %false841

true840:                                          ; preds = %false833
  %ftype843 = load i64* %ftype
  %404 = icmp ne i64 %ftype843, 0
  br i1 %404, label %true844, label %false845

false841:                                         ; preds = %false833
  %return856 = call i64 @"eq@III"(i64 %type7, i64 67)
  %405 = icmp ne i64 %return856, 0
  br i1 %405, label %true857, label %false858

true844:                                          ; preds = %true840
  %GMP847 = load %gemPrm* %GMP
  %modulus = extractvalue %gemPrm %GMP847, 19
  %idx848 = load i64* %idx
  %return849 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %modulus, i64 %idx848)
  br label %end846

false845:                                         ; preds = %true840
  %return850 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @136, i64 0, i64 0))
  br label %end846

end846:                                           ; preds = %false845, %true844
  %mod.0 = phi <2 x double> [ %return849, %true844 ], [ %return850, %false845 ]
  %_p851 = load <3 x double>* %_p
  store <3 x double> %_p851, <3 x double>* %191
  %w852 = load double* %w
  store double %w852, double* %192
  store <2 x double> %mod.0, <2 x double>* %193
  call void @"V_MODULUS@VVFU"(<3 x double>* %p, <3 x double>* %191, double* %192, <2 x double>* %193)
  %p854 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true857:                                          ; preds = %false841
  %ftype860 = load i64* %ftype
  %406 = icmp ne i64 %ftype860, 0
  br i1 %406, label %true861, label %false862

false858:                                         ; preds = %false841
  %return881 = call i64 @"eq@III"(i64 %type7, i64 68)
  %407 = icmp ne i64 %return881, 0
  br i1 %407, label %true882, label %false883

true861:                                          ; preds = %true857
  %GMP864 = load %gemPrm* %GMP
  %oscope865 = extractvalue %gemPrm %GMP864, 44
  %idx866 = load i64* %idx
  %return867 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %oscope865, i64 %idx866)
  br label %end863

false862:                                         ; preds = %true857
  %return868 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([13 x i8]* @137, i64 0, i64 0))
  br label %end863

end863:                                           ; preds = %false862, %true861
  %oscope.0 = phi <4 x double> [ %return867, %true861 ], [ %return868, %false862 ]
  %_p869 = load <3 x double>* %_p
  store <3 x double> %_p869, <3 x double>* %194
  %w870 = load double* %w
  store double %w870, double* %195
  %return872 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 0)
  store double %return872, double* %196
  %return874 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 1)
  store double %return874, double* %197
  %return876 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 2)
  store double %return876, double* %198
  %return878 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 3)
  store double %return878, double* %199
  call void @"V_OSCOPE@VVFFFFF"(<3 x double>* %p, <3 x double>* %194, double* %195, double* %196, double* %197, double* %198, double* %199)
  %p879 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true882:                                          ; preds = %false858
  %_p885 = load <3 x double>* %_p
  store <3 x double> %_p885, <3 x double>* %200
  %w886 = load double* %w
  store double %w886, double* %201
  call void @"V_POLAR2@VVF"(<3 x double>* %p, <3 x double>* %200, double* %201)
  %p887 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false883:                                         ; preds = %false858
  %return889 = call i64 @"eq@III"(i64 %type7, i64 69)
  %408 = icmp ne i64 %return889, 0
  br i1 %408, label %true890, label %end15

true890:                                          ; preds = %false883
  %ftype892 = load i64* %ftype
  %409 = icmp ne i64 %ftype892, 0
  br i1 %409, label %true893, label %false894

true893:                                          ; preds = %true890
  %GMP896 = load %gemPrm* %GMP
  %popcorn2 = extractvalue %gemPrm %GMP896, 20
  %idx897 = load i64* %idx
  %return898 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %popcorn2, i64 %idx897)
  %popcorn2_c = extractvalue %gemPrm %GMP896, 4
  %return901 = call double @"getcomp@F[FI"(double* %popcorn2_c, i64 %idx897)
  br label %end895

false894:                                         ; preds = %true890
  %return902 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8]* @138, i64 0, i64 0))
  %return903 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8]* @139, i64 0, i64 0))
  br label %end895

end895:                                           ; preds = %false894, %true893
  %pop2.0 = phi <2 x double> [ %return898, %true893 ], [ %return902, %false894 ]
  %pop2c.0 = phi double [ %return901, %true893 ], [ %return903, %false894 ]
  %_p904 = load <3 x double>* %_p
  store <3 x double> %_p904, <3 x double>* %202
  %w905 = load double* %w
  store double %w905, double* %203
  store double %pop2c.0, double* %204
  store <2 x double> %pop2.0, <2 x double>* %205
  call void @"V_POPCORN2@VVFFU"(<3 x double>* %p, <3 x double>* %202, double* %203, double* %204, <2 x double>* %205)
  %p908 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true911:                                          ; preds = %false404
  %return914 = call i64 @"lt@III"(i64 %type7, i64 86)
  %410 = icmp ne i64 %return914, 0
  br i1 %410, label %true915, label %false916

true915:                                          ; preds = %true911
  %return919 = call i64 @"eq@III"(i64 %type7, i64 70)
  %411 = icmp ne i64 %return919, 0
  br i1 %411, label %true920, label %false921

false916:                                         ; preds = %true911
  %return1171 = call i64 @"eq@III"(i64 %type7, i64 86)
  %412 = icmp ne i64 %return1171, 0
  br i1 %412, label %true1172, label %false1173

true920:                                          ; preds = %true915
  %_p923 = load <3 x double>* %_p
  store <3 x double> %_p923, <3 x double>* %206
  %w924 = load double* %w
  store double %w924, double* %207
  call void @"V_SCRY@VVF"(<3 x double>* %p, <3 x double>* %206, double* %207)
  %p925 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false921:                                         ; preds = %true915
  %return927 = call i64 @"eq@III"(i64 %type7, i64 71)
  %413 = icmp ne i64 %return927, 0
  br i1 %413, label %true928, label %false929

true928:                                          ; preds = %false921
  %ftype931 = load i64* %ftype
  %414 = icmp ne i64 %ftype931, 0
  br i1 %414, label %true932, label %false933

false929:                                         ; preds = %false921
  %return949 = call i64 @"eq@III"(i64 %type7, i64 72)
  %415 = icmp ne i64 %return949, 0
  br i1 %415, label %true950, label %false951

true932:                                          ; preds = %true928
  %GMP935 = load %gemPrm* %GMP
  %separation = extractvalue %gemPrm %GMP935, 21
  %idx936 = load i64* %idx
  %return937 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %separation, i64 %idx936)
  %separation_inside = extractvalue %gemPrm %GMP935, 22
  %return940 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %separation_inside, i64 %idx936)
  br label %end934

false933:                                         ; preds = %true928
  %return941 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8]* @140, i64 0, i64 0))
  %return942 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([26 x i8]* @141, i64 0, i64 0))
  br label %end934

end934:                                           ; preds = %false933, %true932
  %ins.0 = phi <2 x double> [ %return940, %true932 ], [ %return942, %false933 ]
  %sep.0 = phi <2 x double> [ %return937, %true932 ], [ %return941, %false933 ]
  %_p943 = load <3 x double>* %_p
  store <3 x double> %_p943, <3 x double>* %208
  %w944 = load double* %w
  store double %w944, double* %209
  store <2 x double> %sep.0, <2 x double>* %210
  store <2 x double> %ins.0, <2 x double>* %211
  call void @"V_SEPARATION@VVFUU"(<3 x double>* %p, <3 x double>* %208, double* %209, <2 x double>* %210, <2 x double>* %211)
  %p947 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true950:                                          ; preds = %false929
  %ftype953 = load i64* %ftype
  %416 = icmp ne i64 %ftype953, 0
  br i1 %416, label %true954, label %false955

false951:                                         ; preds = %false929
  %return967 = call i64 @"eq@III"(i64 %type7, i64 73)
  %417 = icmp ne i64 %return967, 0
  br i1 %417, label %true968, label %false969

true954:                                          ; preds = %true950
  %GMP957 = load %gemPrm* %GMP
  %split958 = extractvalue %gemPrm %GMP957, 23
  %idx959 = load i64* %idx
  %return960 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %split958, i64 %idx959)
  br label %end956

false955:                                         ; preds = %true950
  %return961 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([15 x i8]* @142, i64 0, i64 0))
  br label %end956

end956:                                           ; preds = %false955, %true954
  %split.0 = phi <2 x double> [ %return960, %true954 ], [ %return961, %false955 ]
  %_p962 = load <3 x double>* %_p
  store <3 x double> %_p962, <3 x double>* %212
  %w963 = load double* %w
  store double %w963, double* %213
  store <2 x double> %split.0, <2 x double>* %214
  call void @"V_SPLIT@VVFU"(<3 x double>* %p, <3 x double>* %212, double* %213, <2 x double>* %214)
  %p965 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true968:                                          ; preds = %false951
  %ftype971 = load i64* %ftype
  %418 = icmp ne i64 %ftype971, 0
  br i1 %418, label %true972, label %false973

false969:                                         ; preds = %false951
  %return985 = call i64 @"eq@III"(i64 %type7, i64 74)
  %419 = icmp ne i64 %return985, 0
  br i1 %419, label %true986, label %false987

true972:                                          ; preds = %true968
  %GMP975 = load %gemPrm* %GMP
  %splits976 = extractvalue %gemPrm %GMP975, 24
  %idx977 = load i64* %idx
  %return978 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %splits976, i64 %idx977)
  br label %end974

false973:                                         ; preds = %true968
  %return979 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([16 x i8]* @143, i64 0, i64 0))
  br label %end974

end974:                                           ; preds = %false973, %true972
  %splits.0 = phi <2 x double> [ %return978, %true972 ], [ %return979, %false973 ]
  %_p980 = load <3 x double>* %_p
  store <3 x double> %_p980, <3 x double>* %215
  %w981 = load double* %w
  store double %w981, double* %216
  store <2 x double> %splits.0, <2 x double>* %217
  call void @"V_SPLITS@VVFU"(<3 x double>* %p, <3 x double>* %215, double* %216, <2 x double>* %217)
  %p983 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true986:                                          ; preds = %false969
  %ftype989 = load i64* %ftype
  %420 = icmp ne i64 %ftype989, 0
  br i1 %420, label %true990, label %false991

false987:                                         ; preds = %false969
  %return1006 = call i64 @"eq@III"(i64 %type7, i64 75)
  %421 = icmp ne i64 %return1006, 0
  br i1 %421, label %true1007, label %false1008

true990:                                          ; preds = %true986
  %GMP993 = load %gemPrm* %GMP
  %stripes994 = extractvalue %gemPrm %GMP993, 38
  %idx995 = load i64* %idx
  %return996 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %stripes994, i64 %idx995)
  br label %end992

false991:                                         ; preds = %true986
  %return997 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([14 x i8]* @144, i64 0, i64 0))
  br label %end992

end992:                                           ; preds = %false991, %true990
  %stripes.0 = phi <2 x double> [ %return996, %true990 ], [ %return997, %false991 ]
  %_p998 = load <3 x double>* %_p
  store <3 x double> %_p998, <3 x double>* %218
  %w999 = load double* %w
  store double %w999, double* %219
  %return1001 = call double @"getcomp@FUI"(<2 x double> %stripes.0, i64 0)
  store double %return1001, double* %220
  %return1003 = call double @"getcomp@FUI"(<2 x double> %stripes.0, i64 1)
  store double %return1003, double* %221
  call void @"V_STRIPES@VVFFF"(<3 x double>* %p, <3 x double>* %218, double* %219, double* %220, double* %221)
  %p1004 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1007:                                         ; preds = %false987
  %ftype1010 = load i64* %ftype
  %422 = icmp ne i64 %ftype1010, 0
  br i1 %422, label %true1011, label %false1012

false1008:                                        ; preds = %false987
  %return1031 = call i64 @"eq@III"(i64 %type7, i64 76)
  %423 = icmp ne i64 %return1031, 0
  br i1 %423, label %true1032, label %false1033

true1011:                                         ; preds = %true1007
  %GMP1014 = load %gemPrm* %GMP
  %wedge1015 = extractvalue %gemPrm %GMP1014, 45
  %idx1016 = load i64* %idx
  %return1017 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedge1015, i64 %idx1016)
  br label %end1013

false1012:                                        ; preds = %true1007
  %return1018 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([12 x i8]* @145, i64 0, i64 0))
  br label %end1013

end1013:                                          ; preds = %false1012, %true1011
  %wedge.0 = phi <4 x double> [ %return1017, %true1011 ], [ %return1018, %false1012 ]
  %_p1019 = load <3 x double>* %_p
  store <3 x double> %_p1019, <3 x double>* %222
  %w1020 = load double* %w
  store double %w1020, double* %223
  %return1022 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 0)
  store double %return1022, double* %224
  %return1024 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 1)
  store double %return1024, double* %225
  %return1026 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 2)
  store double %return1026, double* %226
  %return1028 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 3)
  store double %return1028, double* %227
  call void @"V_WEDGE@VVFFFFF"(<3 x double>* %p, <3 x double>* %222, double* %223, double* %224, double* %225, double* %226, double* %227)
  %p1029 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1032:                                         ; preds = %false1008
  %ftype1035 = load i64* %ftype
  %424 = icmp ne i64 %ftype1035, 0
  br i1 %424, label %true1036, label %false1037

false1033:                                        ; preds = %false1008
  %return1056 = call i64 @"eq@III"(i64 %type7, i64 77)
  %425 = icmp ne i64 %return1056, 0
  br i1 %425, label %true1057, label %false1058

true1036:                                         ; preds = %true1032
  %GMP1039 = load %gemPrm* %GMP
  %wedgejulia1040 = extractvalue %gemPrm %GMP1039, 46
  %idx1041 = load i64* %idx
  %return1042 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedgejulia1040, i64 %idx1041)
  br label %end1038

false1037:                                        ; preds = %true1032
  %return1043 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([17 x i8]* @146, i64 0, i64 0))
  br label %end1038

end1038:                                          ; preds = %false1037, %true1036
  %wedgejulia.0 = phi <4 x double> [ %return1042, %true1036 ], [ %return1043, %false1037 ]
  %_p1044 = load <3 x double>* %_p
  store <3 x double> %_p1044, <3 x double>* %228
  %w1045 = load double* %w
  store double %w1045, double* %229
  %return1047 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 0)
  store double %return1047, double* %230
  %return1049 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 1)
  store double %return1049, double* %231
  %return1051 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 2)
  store double %return1051, double* %232
  %return1053 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 3)
  store double %return1053, double* %233
  call void @"V_WEDGEJULIA@VVFFFFF"(<3 x double>* %p, <3 x double>* %228, double* %229, double* %230, double* %231, double* %232, double* %233)
  %p1054 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1057:                                         ; preds = %false1033
  %ftype1060 = load i64* %ftype
  %426 = icmp ne i64 %ftype1060, 0
  br i1 %426, label %true1061, label %false1062

false1058:                                        ; preds = %false1033
  %return1081 = call i64 @"eq@III"(i64 %type7, i64 78)
  %427 = icmp ne i64 %return1081, 0
  br i1 %427, label %true1082, label %false1083

true1061:                                         ; preds = %true1057
  %GMP1064 = load %gemPrm* %GMP
  %wedgesph1065 = extractvalue %gemPrm %GMP1064, 47
  %idx1066 = load i64* %idx
  %return1067 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedgesph1065, i64 %idx1066)
  br label %end1063

false1062:                                        ; preds = %true1057
  %return1068 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8]* @147, i64 0, i64 0))
  br label %end1063

end1063:                                          ; preds = %false1062, %true1061
  %wedgesph.0 = phi <4 x double> [ %return1067, %true1061 ], [ %return1068, %false1062 ]
  %_p1069 = load <3 x double>* %_p
  store <3 x double> %_p1069, <3 x double>* %234
  %w1070 = load double* %w
  store double %w1070, double* %235
  %return1072 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 0)
  store double %return1072, double* %236
  %return1074 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 1)
  store double %return1074, double* %237
  %return1076 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 2)
  store double %return1076, double* %238
  %return1078 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 3)
  store double %return1078, double* %239
  call void @"V_WEDGESPH@VVFFFFF"(<3 x double>* %p, <3 x double>* %234, double* %235, double* %236, double* %237, double* %238, double* %239)
  %p1079 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1082:                                         ; preds = %false1058
  %ftype1085 = load i64* %ftype
  %428 = icmp ne i64 %ftype1085, 0
  br i1 %428, label %true1086, label %false1087

false1083:                                        ; preds = %false1058
  %return1102 = call i64 @"eq@III"(i64 %type7, i64 79)
  %429 = icmp ne i64 %return1102, 0
  br i1 %429, label %true1103, label %false1104

true1086:                                         ; preds = %true1082
  %GMP1089 = load %gemPrm* %GMP
  %whorl1090 = extractvalue %gemPrm %GMP1089, 39
  %idx1091 = load i64* %idx
  %return1092 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %whorl1090, i64 %idx1091)
  br label %end1088

false1087:                                        ; preds = %true1082
  %return1093 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @148, i64 0, i64 0))
  br label %end1088

end1088:                                          ; preds = %false1087, %true1086
  %whorl.0 = phi <2 x double> [ %return1092, %true1086 ], [ %return1093, %false1087 ]
  %_p1094 = load <3 x double>* %_p
  store <3 x double> %_p1094, <3 x double>* %240
  %w1095 = load double* %w
  store double %w1095, double* %241
  %return1097 = call double @"getcomp@FUI"(<2 x double> %whorl.0, i64 0)
  store double %return1097, double* %242
  %return1099 = call double @"getcomp@FUI"(<2 x double> %whorl.0, i64 1)
  store double %return1099, double* %243
  call void @"V_WHORL@VVFFF"(<3 x double>* %p, <3 x double>* %240, double* %241, double* %242, double* %243)
  %p1100 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1103:                                         ; preds = %false1083
  %ftype1106 = load i64* %ftype
  %430 = icmp ne i64 %ftype1106, 0
  br i1 %430, label %true1107, label %false1108

false1104:                                        ; preds = %false1083
  %return1124 = call i64 @"eq@III"(i64 %type7, i64 80)
  %431 = icmp ne i64 %return1124, 0
  br i1 %431, label %true1125, label %false1126

true1107:                                         ; preds = %true1103
  %GMP1110 = load %gemPrm* %GMP
  %waves2_scale = extractvalue %gemPrm %GMP1110, 25
  %idx1111 = load i64* %idx
  %return1112 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %waves2_scale, i64 %idx1111)
  %waves2_freq = extractvalue %gemPrm %GMP1110, 26
  %return1115 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %waves2_freq, i64 %idx1111)
  br label %end1109

false1108:                                        ; preds = %true1103
  %return1116 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([21 x i8]* @149, i64 0, i64 0))
  %return1117 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8]* @150, i64 0, i64 0))
  br label %end1109

end1109:                                          ; preds = %false1108, %true1107
  %freq.0 = phi <2 x double> [ %return1115, %true1107 ], [ %return1117, %false1108 ]
  %scl.0 = phi <2 x double> [ %return1112, %true1107 ], [ %return1116, %false1108 ]
  %_p1118 = load <3 x double>* %_p
  store <3 x double> %_p1118, <3 x double>* %244
  %w1119 = load double* %w
  store double %w1119, double* %245
  store <2 x double> %scl.0, <2 x double>* %246
  store <2 x double> %freq.0, <2 x double>* %247
  call void @"V_WAVES2@VVFUU"(<3 x double>* %p, <3 x double>* %244, double* %245, <2 x double>* %246, <2 x double>* %247)
  %p1122 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1125:                                         ; preds = %false1104
  %_p1128 = load <3 x double>* %_p
  store <3 x double> %_p1128, <3 x double>* %248
  %w1129 = load double* %w
  store double %w1129, double* %249
  call void @"V_COTHEEXP@VVF"(<3 x double>* %p, <3 x double>* %248, double* %249)
  %p1130 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1126:                                        ; preds = %false1104
  %return1132 = call i64 @"eq@III"(i64 %type7, i64 81)
  %432 = icmp ne i64 %return1132, 0
  br i1 %432, label %true1133, label %false1134

true1133:                                         ; preds = %false1126
  %_p1136 = load <3 x double>* %_p
  store <3 x double> %_p1136, <3 x double>* %250
  %w1137 = load double* %w
  store double %w1137, double* %251
  call void @"V_COTHELOG@VVF"(<3 x double>* %p, <3 x double>* %250, double* %251)
  %p1138 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1134:                                        ; preds = %false1126
  %return1140 = call i64 @"eq@III"(i64 %type7, i64 82)
  %433 = icmp ne i64 %return1140, 0
  br i1 %433, label %true1141, label %false1142

true1141:                                         ; preds = %false1134
  %_p1144 = load <3 x double>* %_p
  store <3 x double> %_p1144, <3 x double>* %252
  %w1145 = load double* %w
  store double %w1145, double* %253
  call void @"V_COTHESIN@VVF"(<3 x double>* %p, <3 x double>* %252, double* %253)
  %p1146 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1142:                                        ; preds = %false1134
  %return1148 = call i64 @"eq@III"(i64 %type7, i64 83)
  %434 = icmp ne i64 %return1148, 0
  br i1 %434, label %true1149, label %false1150

true1149:                                         ; preds = %false1142
  %_p1152 = load <3 x double>* %_p
  store <3 x double> %_p1152, <3 x double>* %254
  %w1153 = load double* %w
  store double %w1153, double* %255
  call void @"V_COTHECOS@VVF"(<3 x double>* %p, <3 x double>* %254, double* %255)
  %p1154 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1150:                                        ; preds = %false1142
  %return1156 = call i64 @"eq@III"(i64 %type7, i64 84)
  %435 = icmp ne i64 %return1156, 0
  br i1 %435, label %true1157, label %false1158

true1157:                                         ; preds = %false1150
  %_p1160 = load <3 x double>* %_p
  store <3 x double> %_p1160, <3 x double>* %256
  %w1161 = load double* %w
  store double %w1161, double* %257
  call void @"V_COTHETAN@VVF"(<3 x double>* %p, <3 x double>* %256, double* %257)
  %p1162 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1158:                                        ; preds = %false1150
  %return1164 = call i64 @"eq@III"(i64 %type7, i64 85)
  %436 = icmp ne i64 %return1164, 0
  br i1 %436, label %true1165, label %end15

true1165:                                         ; preds = %false1158
  %_p1167 = load <3 x double>* %_p
  store <3 x double> %_p1167, <3 x double>* %258
  %w1168 = load double* %w
  store double %w1168, double* %259
  call void @"V_COTHESEC@VVF"(<3 x double>* %p, <3 x double>* %258, double* %259)
  %p1169 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1172:                                         ; preds = %false916
  %_p1175 = load <3 x double>* %_p
  store <3 x double> %_p1175, <3 x double>* %260
  %w1176 = load double* %w
  store double %w1176, double* %261
  call void @"V_COTHECSC@VVF"(<3 x double>* %p, <3 x double>* %260, double* %261)
  %p1177 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1173:                                        ; preds = %false916
  %return1179 = call i64 @"eq@III"(i64 %type7, i64 87)
  %437 = icmp ne i64 %return1179, 0
  br i1 %437, label %true1180, label %false1181

true1180:                                         ; preds = %false1173
  %_p1183 = load <3 x double>* %_p
  store <3 x double> %_p1183, <3 x double>* %262
  %w1184 = load double* %w
  store double %w1184, double* %263
  call void @"V_COTHECOT@VVF"(<3 x double>* %p, <3 x double>* %262, double* %263)
  %p1185 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1181:                                        ; preds = %false1173
  %return1187 = call i64 @"eq@III"(i64 %type7, i64 88)
  %438 = icmp ne i64 %return1187, 0
  br i1 %438, label %true1188, label %false1189

true1188:                                         ; preds = %false1181
  %_p1191 = load <3 x double>* %_p
  store <3 x double> %_p1191, <3 x double>* %264
  %w1192 = load double* %w
  store double %w1192, double* %265
  call void @"V_COTHESINH@VVF"(<3 x double>* %p, <3 x double>* %264, double* %265)
  %p1193 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1189:                                        ; preds = %false1181
  %return1195 = call i64 @"eq@III"(i64 %type7, i64 89)
  %439 = icmp ne i64 %return1195, 0
  br i1 %439, label %true1196, label %false1197

true1196:                                         ; preds = %false1189
  %_p1199 = load <3 x double>* %_p
  store <3 x double> %_p1199, <3 x double>* %266
  %w1200 = load double* %w
  store double %w1200, double* %267
  call void @"V_COTHECOSH@VVF"(<3 x double>* %p, <3 x double>* %266, double* %267)
  %p1201 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1197:                                        ; preds = %false1189
  %return1203 = call i64 @"eq@III"(i64 %type7, i64 90)
  %440 = icmp ne i64 %return1203, 0
  br i1 %440, label %true1204, label %false1205

true1204:                                         ; preds = %false1197
  %_p1207 = load <3 x double>* %_p
  store <3 x double> %_p1207, <3 x double>* %268
  %w1208 = load double* %w
  store double %w1208, double* %269
  call void @"V_COTHETANH@VVF"(<3 x double>* %p, <3 x double>* %268, double* %269)
  %p1209 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1205:                                        ; preds = %false1197
  %return1211 = call i64 @"eq@III"(i64 %type7, i64 91)
  %441 = icmp ne i64 %return1211, 0
  br i1 %441, label %true1212, label %false1213

true1212:                                         ; preds = %false1205
  %_p1215 = load <3 x double>* %_p
  store <3 x double> %_p1215, <3 x double>* %270
  %w1216 = load double* %w
  store double %w1216, double* %271
  call void @"V_COTHESECH@VVF"(<3 x double>* %p, <3 x double>* %270, double* %271)
  %p1217 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1213:                                        ; preds = %false1205
  %return1219 = call i64 @"eq@III"(i64 %type7, i64 92)
  %442 = icmp ne i64 %return1219, 0
  br i1 %442, label %true1220, label %false1221

true1220:                                         ; preds = %false1213
  %_p1223 = load <3 x double>* %_p
  store <3 x double> %_p1223, <3 x double>* %272
  %w1224 = load double* %w
  store double %w1224, double* %273
  call void @"V_COTHECSCH@VVF"(<3 x double>* %p, <3 x double>* %272, double* %273)
  %p1225 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1221:                                        ; preds = %false1213
  %return1227 = call i64 @"eq@III"(i64 %type7, i64 93)
  %443 = icmp ne i64 %return1227, 0
  br i1 %443, label %true1228, label %false1229

true1228:                                         ; preds = %false1221
  %_p1231 = load <3 x double>* %_p
  store <3 x double> %_p1231, <3 x double>* %274
  %w1232 = load double* %w
  store double %w1232, double* %275
  call void @"V_COTHECOTH@VVF"(<3 x double>* %p, <3 x double>* %274, double* %275)
  %p1233 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1229:                                        ; preds = %false1221
  %return1235 = call i64 @"eq@III"(i64 %type7, i64 94)
  %444 = icmp ne i64 %return1235, 0
  br i1 %444, label %true1236, label %false1237

true1236:                                         ; preds = %false1229
  %ftype1239 = load i64* %ftype
  %445 = icmp ne i64 %ftype1239, 0
  br i1 %445, label %true1240, label %false1241

false1237:                                        ; preds = %false1229
  %return1260 = call i64 @"eq@III"(i64 %type7, i64 95)
  %446 = icmp ne i64 %return1260, 0
  br i1 %446, label %true1261, label %false1262

true1240:                                         ; preds = %true1236
  %GMP1243 = load %gemPrm* %GMP
  %auger1244 = extractvalue %gemPrm %GMP1243, 48
  %idx1245 = load i64* %idx
  %return1246 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %auger1244, i64 %idx1245)
  br label %end1242

false1241:                                        ; preds = %true1236
  %return1247 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([12 x i8]* @151, i64 0, i64 0))
  br label %end1242

end1242:                                          ; preds = %false1241, %true1240
  %auger.0 = phi <4 x double> [ %return1246, %true1240 ], [ %return1247, %false1241 ]
  %_p1248 = load <3 x double>* %_p
  store <3 x double> %_p1248, <3 x double>* %276
  %w1249 = load double* %w
  store double %w1249, double* %277
  %return1251 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 0)
  store double %return1251, double* %278
  %return1253 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 1)
  store double %return1253, double* %279
  %return1255 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 2)
  store double %return1255, double* %280
  %return1257 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 3)
  store double %return1257, double* %281
  call void @"V_AUGER@VVFFFFF"(<3 x double>* %p, <3 x double>* %276, double* %277, double* %278, double* %279, double* %280, double* %281)
  %p1258 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1261:                                         ; preds = %false1237
  %ftype1264 = load i64* %ftype
  %447 = icmp ne i64 %ftype1264, 0
  br i1 %447, label %true1265, label %false1266

false1262:                                        ; preds = %false1237
  %return1277 = call i64 @"eq@III"(i64 %type7, i64 96)
  %448 = icmp ne i64 %return1277, 0
  br i1 %448, label %true1278, label %false1279

true1265:                                         ; preds = %true1261
  %GMP1268 = load %gemPrm* %GMP
  %flux_spread = extractvalue %gemPrm %GMP1268, 5
  %idx1269 = load i64* %idx
  %return1270 = call double @"getcomp@F[FI"(double* %flux_spread, i64 %idx1269)
  br label %end1267

false1266:                                        ; preds = %true1261
  %return1271 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8]* @152, i64 0, i64 0))
  br label %end1267

end1267:                                          ; preds = %false1266, %true1265
  %spread.0 = phi double [ %return1270, %true1265 ], [ %return1271, %false1266 ]
  %_p1272 = load <3 x double>* %_p
  store <3 x double> %_p1272, <3 x double>* %282
  %w1273 = load double* %w
  store double %w1273, double* %283
  store double %spread.0, double* %284
  call void @"V_FLUX@VVFF"(<3 x double>* %p, <3 x double>* %282, double* %283, double* %284)
  %p1275 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1278:                                         ; preds = %false1262
  %ftype1281 = load i64* %ftype
  %449 = icmp ne i64 %ftype1281, 0
  br i1 %449, label %true1282, label %false1283

false1279:                                        ; preds = %false1262
  %return1299 = call i64 @"eq@III"(i64 %type7, i64 97)
  %450 = icmp ne i64 %return1299, 0
  br i1 %450, label %true1300, label %false1301

true1282:                                         ; preds = %true1278
  %GMP1285 = load %gemPrm* %GMP
  %mobius_re = extractvalue %gemPrm %GMP1285, 49
  %idx1286 = load i64* %idx
  %return1287 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %mobius_re, i64 %idx1286)
  %mobius_im = extractvalue %gemPrm %GMP1285, 50
  %return1290 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %mobius_im, i64 %idx1286)
  br label %end1284

false1283:                                        ; preds = %true1278
  %return1291 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8]* @153, i64 0, i64 0))
  %return1292 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8]* @154, i64 0, i64 0))
  br label %end1284

end1284:                                          ; preds = %false1283, %true1282
  %im.0 = phi <4 x double> [ %return1290, %true1282 ], [ %return1292, %false1283 ]
  %re.0 = phi <4 x double> [ %return1287, %true1282 ], [ %return1291, %false1283 ]
  %_p1293 = load <3 x double>* %_p
  store <3 x double> %_p1293, <3 x double>* %285
  %w1294 = load double* %w
  store double %w1294, double* %286
  store <4 x double> %re.0, <4 x double>* %287
  store <4 x double> %im.0, <4 x double>* %288
  call void @"V_MOBIUS@VVFPP"(<3 x double>* %p, <3 x double>* %285, double* %286, <4 x double>* %287, <4 x double>* %288)
  %p1297 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1300:                                         ; preds = %false1279
  %ftype1303 = load i64* %ftype
  %451 = icmp ne i64 %ftype1303, 0
  br i1 %451, label %true1304, label %false1305

false1301:                                        ; preds = %false1279
  %return1321 = call i64 @"eq@III"(i64 %type7, i64 98)
  %452 = icmp ne i64 %return1321, 0
  br i1 %452, label %true1322, label %false1323

true1304:                                         ; preds = %true1300
  %GMP1307 = load %gemPrm* %GMP
  %curve_lenght = extractvalue %gemPrm %GMP1307, 27
  %idx1308 = load i64* %idx
  %return1309 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curve_lenght, i64 %idx1308)
  %curve_amp = extractvalue %gemPrm %GMP1307, 28
  %return1312 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curve_amp, i64 %idx1308)
  br label %end1306

false1305:                                        ; preds = %true1300
  %return1313 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([21 x i8]* @155, i64 0, i64 0))
  %return1314 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8]* @156, i64 0, i64 0))
  br label %end1306

end1306:                                          ; preds = %false1305, %true1304
  %amp.0 = phi <2 x double> [ %return1312, %true1304 ], [ %return1314, %false1305 ]
  %lgt.0 = phi <2 x double> [ %return1309, %true1304 ], [ %return1313, %false1305 ]
  %_p1315 = load <3 x double>* %_p
  store <3 x double> %_p1315, <3 x double>* %289
  %w1316 = load double* %w
  store double %w1316, double* %290
  store <2 x double> %lgt.0, <2 x double>* %291
  store <2 x double> %amp.0, <2 x double>* %292
  call void @"V_CURVE@VVFUU"(<3 x double>* %p, <3 x double>* %289, double* %290, <2 x double>* %291, <2 x double>* %292)
  %p1319 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1322:                                         ; preds = %false1301
  %ftype1325 = load i64* %ftype
  %453 = icmp ne i64 %ftype1325, 0
  br i1 %453, label %true1326, label %false1327

false1323:                                        ; preds = %false1301
  %return1342 = call i64 @"eq@III"(i64 %type7, i64 99)
  %454 = icmp ne i64 %return1342, 0
  br i1 %454, label %true1343, label %false1344

true1326:                                         ; preds = %true1322
  %GMP1329 = load %gemPrm* %GMP
  %persp1330 = extractvalue %gemPrm %GMP1329, 40
  %idx1331 = load i64* %idx
  %return1332 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %persp1330, i64 %idx1331)
  br label %end1328

false1327:                                        ; preds = %true1322
  %return1333 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @157, i64 0, i64 0))
  br label %end1328

end1328:                                          ; preds = %false1327, %true1326
  %persp.0 = phi <2 x double> [ %return1332, %true1326 ], [ %return1333, %false1327 ]
  %_p1334 = load <3 x double>* %_p
  store <3 x double> %_p1334, <3 x double>* %293
  %w1335 = load double* %w
  store double %w1335, double* %294
  %return1337 = call double @"getcomp@FUI"(<2 x double> %persp.0, i64 0)
  store double %return1337, double* %295
  %return1339 = call double @"getcomp@FUI"(<2 x double> %persp.0, i64 1)
  store double %return1339, double* %296
  call void @"V_PERSPECTIVE@VVFFF"(<3 x double>* %p, <3 x double>* %293, double* %294, double* %295, double* %296)
  %p1340 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1343:                                         ; preds = %false1323
  %ftype1346 = load i64* %ftype
  %455 = icmp ne i64 %ftype1346, 0
  br i1 %455, label %true1347, label %false1348

false1344:                                        ; preds = %false1323
  %return1374 = call i64 @"eq@III"(i64 %type7, i64 100)
  %456 = icmp ne i64 %return1374, 0
  br i1 %456, label %true1375, label %false1376

true1347:                                         ; preds = %true1343
  %GMP1350 = load %gemPrm* %GMP
  %bwraps1351 = extractvalue %gemPrm %GMP1350, 12
  %idx1352 = load i64* %idx
  %return1353 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %bwraps1351, i64 %idx1352)
  %bwrapstwist1355 = extractvalue %gemPrm %GMP1350, 41
  %return1357 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %bwrapstwist1355, i64 %idx1352)
  br label %end1349

false1348:                                        ; preds = %true1343
  %return1358 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8]* @158, i64 0, i64 0))
  %return1359 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8]* @159, i64 0, i64 0))
  br label %end1349

end1349:                                          ; preds = %false1348, %true1347
  %bwrapstwist.0 = phi <2 x double> [ %return1357, %true1347 ], [ %return1359, %false1348 ]
  %bwraps.0 = phi <3 x double> [ %return1353, %true1347 ], [ %return1358, %false1348 ]
  %_p1360 = load <3 x double>* %_p
  store <3 x double> %_p1360, <3 x double>* %297
  %w1361 = load double* %w
  store double %w1361, double* %298
  %return1363 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 0)
  store double %return1363, double* %299
  %return1365 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 1)
  store double %return1365, double* %300
  %return1367 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 2)
  store double %return1367, double* %301
  %return1369 = call double @"getcomp@FUI"(<2 x double> %bwrapstwist.0, i64 0)
  store double %return1369, double* %302
  %return1371 = call double @"getcomp@FUI"(<2 x double> %bwrapstwist.0, i64 1)
  store double %return1371, double* %303
  call void @"V_BWRAPS@VVFFFFFF"(<3 x double>* %p, <3 x double>* %297, double* %298, double* %299, double* %300, double* %301, double* %302, double* %303)
  %p1372 = load <3 x double>* %p
  br label %UnifiedReturnBlock

true1375:                                         ; preds = %false1344
  %_p1378 = load <3 x double>* %_p
  store <3 x double> %_p1378, <3 x double>* %304
  %w1379 = load double* %w
  store double %w1379, double* %305
  call void @"V_HEMISPHERE@VVF"(<3 x double>* %p, <3 x double>* %304, double* %305)
  %p1380 = load <3 x double>* %p
  br label %UnifiedReturnBlock

false1376:                                        ; preds = %false1344
  %return1382 = call i64 @"eq@III"(i64 %type7, i64 101)
  %457 = icmp ne i64 %return1382, 0
  br i1 %457, label %true1383, label %end15

true1383:                                         ; preds = %false1376
  %ftype1385 = load i64* %ftype
  %458 = icmp ne i64 %ftype1385, 0
  br i1 %458, label %true1386, label %false1387

true1386:                                         ; preds = %true1383
  %GMP1389 = load %gemPrm* %GMP
  %polynomial_pow = extractvalue %gemPrm %GMP1389, 29
  %idx1390 = load i64* %idx
  %return1391 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_pow, i64 %idx1390)
  %polynomial_lc = extractvalue %gemPrm %GMP1389, 30
  %return1394 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_lc, i64 %idx1390)
  %polynomial_sc = extractvalue %gemPrm %GMP1389, 31
  %return1397 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_sc, i64 %idx1390)
  br label %end1388

false1387:                                        ; preds = %true1383
  %return1398 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8]* @160, i64 0, i64 0))
  %return1399 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8]* @161, i64 0, i64 0))
  %return1400 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8]* @162, i64 0, i64 0))
  br label %end1388

end1388:                                          ; preds = %false1387, %true1386
  %sc.0 = phi <2 x double> [ %return1397, %true1386 ], [ %return1400, %false1387 ]
  %lc.0 = phi <2 x double> [ %return1394, %true1386 ], [ %return1399, %false1387 ]
  %pow.0 = phi <2 x double> [ %return1391, %true1386 ], [ %return1398, %false1387 ]
  %_p1401 = load <3 x double>* %_p
  store <3 x double> %_p1401, <3 x double>* %306
  %w1402 = load double* %w
  store double %w1402, double* %307
  store <2 x double> %pow.0, <2 x double>* %308
  store <2 x double> %lc.0, <2 x double>* %309
  store <2 x double> %sc.0, <2 x double>* %310
  call void @"V_POLYNOMIAL@VVFUUU"(<3 x double>* %p, <3 x double>* %306, double* %307, <2 x double>* %308, <2 x double>* %309, <2 x double>* %310)
  %p1406 = load <3 x double>* %p
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end1388, %true1375, %end1349, %end1328, %end1306, %end1284, %end1267, %end1242, %true1228, %true1220, %true1212, %true1204, %true1196, %true1188, %true1180, %true1172, %true1165, %true1157, %true1149, %true1141, %true1133, %true1125, %end1109, %end1088, %end1063, %end1038, %end1013, %end992, %end974, %end956, %end934, %true920, %end895, %true882, %end863, %end846, %true832, %end809, %true795, %end784, %true770, %true762, %true754, %end737, %end721, %true707, %true699, %end688, %end670, %end649, %end628, %end607, %end581, %end560, %true546, %true538, %true530, %true522, %true514, %true507, %true499, %true491, %end475, %end454, %end437, %end419, %end391, %true379, %end364, %end343, %end319, %end302, %end277, %end256, %true243, %true235, %true227, %true219, %true209, %true198, %true190, %true181, %true173, %true162, %true154, %true138, %true130, %true122, %true114, %true105, %true96, %true87, %true79, %true71, %true63, %true55, %true47, %true39, %true31, %true23, %end15, %true
  %UnifiedRetVal = phi <3 x double> [ %output, %true ], [ %_p1407, %end15 ], [ %p28, %true23 ], [ %p36, %true31 ], [ %p44, %true39 ], [ %p52, %true47 ], [ %p60, %true55 ], [ %p68, %true63 ], [ %p76, %true71 ], [ %p84, %true79 ], [ %p93, %true87 ], [ %p102, %true96 ], [ %p111, %true105 ], [ %p119, %true114 ], [ %p127, %true122 ], [ %p135, %true130 ], [ %p151, %true138 ], [ %p159, %true154 ], [ %p170, %true162 ], [ %p178, %true173 ], [ %p187, %true181 ], [ %p195, %true190 ], [ %p206, %true198 ], [ %p216, %true209 ], [ %p224, %true219 ], [ %p232, %true227 ], [ %p240, %true235 ], [ %p247, %true243 ], [ %p268, %end256 ], [ %p293, %end277 ], [ %p310, %end302 ], [ %p334, %end319 ], [ %p355, %end343 ], [ %p376, %end364 ], [ %p383, %true379 ], [ %p400, %end391 ], [ %p428, %end419 ], [ %p445, %end437 ], [ %p466, %end454 ], [ %p488, %end475 ], [ %p496, %true491 ], [ %p504, %true499 ], [ %p511, %true507 ], [ %p519, %true514 ], [ %p527, %true522 ], [ %p535, %true530 ], [ %p543, %true538 ], [ %p551, %true546 ], [ %p572, %end560 ], [ %p599, %end581 ], [ %p619, %end607 ], [ %p640, %end628 ], [ %p661, %end649 ], [ %p679, %end670 ], [ %p696, %end688 ], [ %p704, %true699 ], [ %p712, %true707 ], [ %p728, %end721 ], [ %p751, %end737 ], [ %p759, %true754 ], [ %p767, %true762 ], [ %p775, %true770 ], [ %p792, %end784 ], [ %p800, %true795 ], [ %p829, %end809 ], [ %p837, %true832 ], [ %p854, %end846 ], [ %p879, %end863 ], [ %p887, %true882 ], [ %p908, %end895 ], [ %p925, %true920 ], [ %p947, %end934 ], [ %p965, %end956 ], [ %p983, %end974 ], [ %p1004, %end992 ], [ %p1029, %end1013 ], [ %p1054, %end1038 ], [ %p1079, %end1063 ], [ %p1100, %end1088 ], [ %p1122, %end1109 ], [ %p1130, %true1125 ], [ %p1138, %true1133 ], [ %p1146, %true1141 ], [ %p1154, %true1149 ], [ %p1162, %true1157 ], [ %p1169, %true1165 ], [ %p1177, %true1172 ], [ %p1185, %true1180 ], [ %p1193, %true1188 ], [ %p1201, %true1196 ], [ %p1209, %true1204 ], [ %p1217, %true1212 ], [ %p1225, %true1220 ], [ %p1233, %true1228 ], [ %p1258, %end1242 ], [ %p1275, %end1267 ], [ %p1297, %end1284 ], [ %p1319, %end1306 ], [ %p1340, %end1328 ], [ %p1372, %end1349 ], [ %p1380, %true1375 ], [ %p1406, %end1388 ]
  ret <3 x double> %UnifiedRetVal
}

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <2 x double> @"getcomp@U[UI"(<2 x double>*, i64) nounwind readnone

declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) nounwind readnone

declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) nounwind readnone

define private void @"_TheFractalFlameAlgorithm@I[I[FFFV"(i64* %_bound_ptnum, i64** %_bound_VACTIVE, double** %_bound_CDF, double* %_bound_pscale, double* %_bound_COORD, <3 x double>* %_bound_P) nounwind alwaysinline {
__llvm_entry:
  %__tmp = alloca <3 x double>
  %SYS = alloca %gemSYS
  %GEM = alloca %gem
  %0 = alloca i64*
  %1 = alloca %gemSYS
  %v1GMP = alloca %gemPrm
  %v2GMP = alloca %gemPrm
  %v3GMP = alloca %gemPrm
  %v4GMP = alloca %gemPrm
  %2 = alloca i8**
  %3 = alloca i64*
  %4 = alloca i8**
  %5 = alloca i64*
  %6 = alloca i8**
  %7 = alloca i64*
  %8 = alloca i8**
  %9 = alloca i64*
  %__mem = alloca <3 x double>
  %10 = alloca double
  %11 = alloca %gemPrm
  %12 = alloca i64
  %13 = alloca <3 x double>
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca <2 x double>
  %17 = alloca <2 x double>
  %18 = alloca <2 x double>
  %19 = alloca double
  %20 = alloca %gemPrm
  %21 = alloca i64
  %22 = alloca <3 x double>
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca <2 x double>
  %26 = alloca <2 x double>
  %27 = alloca <2 x double>
  %28 = alloca double
  %29 = alloca %gemPrm
  %30 = alloca i64
  %31 = alloca <3 x double>
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca <2 x double>
  %35 = alloca <2 x double>
  %36 = alloca <2 x double>
  %37 = alloca double
  %38 = alloca %gemPrm
  %39 = alloca i64
  %40 = alloca <3 x double>
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca <2 x double>
  %44 = alloca <2 x double>
  %45 = alloca <2 x double>
  %46 = alloca double
  %47 = alloca <2 x double>
  %48 = alloca <2 x double>
  %49 = alloca <2 x double>
  %50 = alloca i64
  %51 = alloca <3 x double>
  %52 = alloca %gemPrm
  %53 = alloca i64
  %54 = alloca <3 x double>
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca <2 x double>
  %58 = alloca <2 x double>
  %59 = alloca <2 x double>
  %60 = alloca double
  %61 = alloca %gemPrm
  %62 = alloca i64
  %63 = alloca <3 x double>
  %64 = alloca i64
  %65 = alloca i64
  %66 = alloca <2 x double>
  %67 = alloca <2 x double>
  %68 = alloca <2 x double>
  %69 = alloca double
  %70 = alloca %gemPrm
  %71 = alloca i64
  %72 = alloca <3 x double>
  %73 = alloca i64
  %74 = alloca i64
  %75 = alloca <2 x double>
  %76 = alloca <2 x double>
  %77 = alloca <2 x double>
  %78 = alloca double
  %79 = alloca <2 x double>
  %80 = alloca <2 x double>
  %81 = alloca <2 x double>
  %82 = alloca %gemPrm
  %83 = alloca i64
  %84 = alloca <3 x double>
  %85 = alloca i64
  %86 = alloca i64
  %87 = alloca <2 x double>
  %88 = alloca <2 x double>
  %89 = alloca <2 x double>
  %90 = alloca double
  %91 = alloca <3 x double>
  %92 = alloca i64
  store <3 x double> zeroinitializer, <3 x double>* %__tmp, !vex-initializer-store !3
  %SYS1 = call %gemSYS @"gemSYS@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateF"()
  store %gemSYS %SYS1, %gemSYS* %SYS, !vex-initializer-store !3
  call void @"gemSYSBuild@Z6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%gemSYS* %SYS)
  %GEM2 = call %gem @"gem@Z3gemM36N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gtrUN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S"()
  store %gem %GEM2, %gem* %GEM, !vex-initializer-store !3
  %_bound_VACTIVE3 = load i64** %_bound_VACTIVE
  store i64* %_bound_VACTIVE3, i64** %0
  %SYS4 = load %gemSYS* %SYS
  store %gemSYS %SYS4, %gemSYS* %1
  call void @"gemBuild@Z3gemM36N6v1type[IN6v2type[IN6v3type[IN6v4type[IN5POSTL[IN8ffv1typeIN8ffv2typeIN8ffv3typeIN8ffp1typeIN3v1w[FN3v2w[FN3v3w[FN3v4w[FN3PBW[FN3CLR[FN8ONEMINUS[FN5ffv1wFN5ffv2wFN5ffv3wFN5ffp1wFN3grtFN3gtrUN3gscUN1x[UN1y[UN1o[UN2px[UN2py[UN2po[UN2fxUN2fyUN2foUN3pfxUN3pfyUN3pfoUN4sIDX[S[IZ6gemSYSM11N3TMGIN5DELPTIN5POSTFIN2FFIN6iter_fIN3symIN8sym_modeIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%gem* %GEM, i64** %0, %gemSYS* %1)
  %v1GMP5 = call %gemPrm @"gemPrm@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %gemPrm %v1GMP5, %gemPrm* %v1GMP, !vex-initializer-store !3
  %v2GMP6 = call %gemPrm @"gemPrm@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %gemPrm %v2GMP6, %gemPrm* %v2GMP, !vex-initializer-store !3
  %v3GMP7 = call %gemPrm @"gemPrm@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %gemPrm %v3GMP7, %gemPrm* %v3GMP, !vex-initializer-store !3
  %v4GMP8 = call %gemPrm @"gemPrm@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %gemPrm %v4GMP8, %gemPrm* %v4GMP, !vex-initializer-store !3
  %GEM9 = load %gem* %GEM
  %sIDX = extractvalue %gem %GEM9, 35
  store i8** %sIDX, i8*** %2
  %GEM10 = load %gem* %GEM
  %v1type = extractvalue %gem %GEM10, 0
  store i64* %v1type, i64** %3
  call void @"gemPrmBuild@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[S[I"(%gemPrm* %v1GMP, i8*** %2, i64** %3)
  %GEM11 = load %gem* %GEM
  %sIDX12 = extractvalue %gem %GEM11, 35
  store i8** %sIDX12, i8*** %4
  %GEM13 = load %gem* %GEM
  %v2type = extractvalue %gem %GEM13, 1
  store i64* %v2type, i64** %5
  call void @"gemPrmBuild@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[S[I"(%gemPrm* %v2GMP, i8*** %4, i64** %5)
  %GEM14 = load %gem* %GEM
  %sIDX15 = extractvalue %gem %GEM14, 35
  store i8** %sIDX15, i8*** %6
  %GEM16 = load %gem* %GEM
  %v3type = extractvalue %gem %GEM16, 2
  store i64* %v3type, i64** %7
  call void @"gemPrmBuild@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[S[I"(%gemPrm* %v3GMP, i8*** %6, i64** %7)
  %GEM17 = load %gem* %GEM
  %sIDX18 = extractvalue %gem %GEM17, 35
  store i8** %sIDX18, i8*** %8
  %GEM19 = load %gem* %GEM
  %v4type = extractvalue %gem %GEM19, 3
  store i64* %v4type, i64** %9
  call void @"gemPrmBuild@Z6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[S[I"(%gemPrm* %v4GMP, i8*** %8, i64** %9)
  %_bound_CDF20 = load double** %_bound_CDF
  store <3 x double> zeroinitializer, <3 x double>* %__mem, !vex-initializer-store !3
  %biunit = call <3 x double> @"biunit@V"()
  store <3 x double> %biunit, <3 x double>* %__mem
  br label %cond

cond:                                             ; preds = %end180, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output204, %end180 ]
  %PREV_CLR.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output201, %end180 ]
  %CLR.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %output201, %end180 ]
  %SYS22 = load %gemSYS* %SYS
  %iter = extractvalue %gemSYS %SYS22, 7
  %return = call i64 @"lt@III"(i64 %i.0, i64 %iter)
  %93 = icmp ne i64 %return, 0
  br i1 %93, label %body, label %end

body:                                             ; preds = %cond
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %__tmp
  %return25 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @111, i64 0, i64 0))
  %return26 = call i64 @"sample_cdf@[FFI"(double* %_bound_CDF20, double %return25)
  %GEM27 = load %gem* %GEM
  %PBW = extractvalue %gem %GEM27, 13
  %return29 = call double @"getcomp@F[FI"(double* %PBW, i64 %return26)
  %return30 = fcmp ogt double %return29, 0.000000e+00
  br i1 %return30, label %true, label %end32

end:                                              ; preds = %cond
  %FF = extractvalue %gemSYS %SYS22, 3
  %94 = icmp ne i64 %FF, 0
  br i1 %94, label %true206, label %end207

true:                                             ; preds = %body
  store double %return29, double* %10
  call void @"V_PREBLUR@VF"(<3 x double>* %__mem, double* %10)
  br label %end32

end32:                                            ; preds = %true, %body
  %GEM37 = load %gem* %GEM
  %v1w = extractvalue %gem %GEM37, 9
  %return39 = call double @"getcomp@F[FI"(double* %v1w, i64 %return26)
  %return40 = fcmp one double %return39, 0.000000e+00
  br i1 %return40, label %true42, label %end43

true42:                                           ; preds = %end32
  %__tmp44 = load <3 x double>* %__tmp
  %v1GMP45 = load %gemPrm* %v1GMP
  store %gemPrm %v1GMP45, %gemPrm* %11
  store i64 1, i64* %12
  %__mem46 = load <3 x double>* %__mem
  store <3 x double> %__mem46, <3 x double>* %13
  store i64 %return26, i64* %14
  %GEM48 = load %gem* %GEM
  %v1type49 = extractvalue %gem %GEM48, 0
  %return51 = call i64 @"getcomp@I[II"(i64* %v1type49, i64 %return26)
  store i64 %return51, i64* %15
  %GEM52 = load %gem* %GEM
  %x = extractvalue %gem %GEM52, 23
  %return54 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %x, i64 %return26)
  store <2 x double> %return54, <2 x double>* %16
  %GEM55 = load %gem* %GEM
  %y = extractvalue %gem %GEM55, 24
  %return57 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %y, i64 %return26)
  store <2 x double> %return57, <2 x double>* %17
  %GEM58 = load %gem* %GEM
  %o = extractvalue %gem %GEM58, 25
  %return60 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %o, i64 %return26)
  store <2 x double> %return60, <2 x double>* %18
  %GEM61 = load %gem* %GEM
  %v1w62 = extractvalue %gem %GEM61, 9
  %return64 = call double @"getcomp@F[FI"(double* %v1w62, i64 %return26)
  store double %return64, double* %19
  %FLAME = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %11, i64* %12, <3 x double>* %13, i64* %14, i64* %15, <2 x double>* %16, <2 x double>* %17, <2 x double>* %18, double* %19)
  %output = call <3 x double> @"add@VV"(<3 x double> %__tmp44, <3 x double> %FLAME)
  store <3 x double> %output, <3 x double>* %__tmp
  br label %end43

end43:                                            ; preds = %true42, %end32
  %GEM65 = load %gem* %GEM
  %v2w = extractvalue %gem %GEM65, 10
  %return67 = call double @"getcomp@F[FI"(double* %v2w, i64 %return26)
  %return68 = fcmp one double %return67, 0.000000e+00
  br i1 %return68, label %true70, label %end71

true70:                                           ; preds = %end43
  %__tmp72 = load <3 x double>* %__tmp
  %v2GMP73 = load %gemPrm* %v2GMP
  store %gemPrm %v2GMP73, %gemPrm* %20
  store i64 1, i64* %21
  %__mem74 = load <3 x double>* %__mem
  store <3 x double> %__mem74, <3 x double>* %22
  store i64 %return26, i64* %23
  %GEM76 = load %gem* %GEM
  %v2type77 = extractvalue %gem %GEM76, 1
  %return79 = call i64 @"getcomp@I[II"(i64* %v2type77, i64 %return26)
  store i64 %return79, i64* %24
  %GEM80 = load %gem* %GEM
  %x81 = extractvalue %gem %GEM80, 23
  %return83 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %x81, i64 %return26)
  store <2 x double> %return83, <2 x double>* %25
  %GEM84 = load %gem* %GEM
  %y85 = extractvalue %gem %GEM84, 24
  %return87 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %y85, i64 %return26)
  store <2 x double> %return87, <2 x double>* %26
  %GEM88 = load %gem* %GEM
  %o89 = extractvalue %gem %GEM88, 25
  %return91 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %o89, i64 %return26)
  store <2 x double> %return91, <2 x double>* %27
  %GEM92 = load %gem* %GEM
  %v2w93 = extractvalue %gem %GEM92, 10
  %return95 = call double @"getcomp@F[FI"(double* %v2w93, i64 %return26)
  store double %return95, double* %28
  %FLAME96 = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %20, i64* %21, <3 x double>* %22, i64* %23, i64* %24, <2 x double>* %25, <2 x double>* %26, <2 x double>* %27, double* %28)
  %output97 = call <3 x double> @"add@VV"(<3 x double> %__tmp72, <3 x double> %FLAME96)
  store <3 x double> %output97, <3 x double>* %__tmp
  br label %end71

end71:                                            ; preds = %true70, %end43
  %GEM98 = load %gem* %GEM
  %v3w = extractvalue %gem %GEM98, 11
  %return100 = call double @"getcomp@F[FI"(double* %v3w, i64 %return26)
  %return101 = fcmp one double %return100, 0.000000e+00
  br i1 %return101, label %true103, label %end104

true103:                                          ; preds = %end71
  %__tmp105 = load <3 x double>* %__tmp
  %v3GMP106 = load %gemPrm* %v3GMP
  store %gemPrm %v3GMP106, %gemPrm* %29
  store i64 1, i64* %30
  %__mem107 = load <3 x double>* %__mem
  store <3 x double> %__mem107, <3 x double>* %31
  store i64 %return26, i64* %32
  %GEM109 = load %gem* %GEM
  %v3type110 = extractvalue %gem %GEM109, 2
  %return112 = call i64 @"getcomp@I[II"(i64* %v3type110, i64 %return26)
  store i64 %return112, i64* %33
  %GEM113 = load %gem* %GEM
  %x114 = extractvalue %gem %GEM113, 23
  %return116 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %x114, i64 %return26)
  store <2 x double> %return116, <2 x double>* %34
  %GEM117 = load %gem* %GEM
  %y118 = extractvalue %gem %GEM117, 24
  %return120 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %y118, i64 %return26)
  store <2 x double> %return120, <2 x double>* %35
  %GEM121 = load %gem* %GEM
  %o122 = extractvalue %gem %GEM121, 25
  %return124 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %o122, i64 %return26)
  store <2 x double> %return124, <2 x double>* %36
  %GEM125 = load %gem* %GEM
  %v3w126 = extractvalue %gem %GEM125, 11
  %return128 = call double @"getcomp@F[FI"(double* %v3w126, i64 %return26)
  store double %return128, double* %37
  %FLAME129 = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %29, i64* %30, <3 x double>* %31, i64* %32, i64* %33, <2 x double>* %34, <2 x double>* %35, <2 x double>* %36, double* %37)
  %output130 = call <3 x double> @"add@VV"(<3 x double> %__tmp105, <3 x double> %FLAME129)
  store <3 x double> %output130, <3 x double>* %__tmp
  br label %end104

end104:                                           ; preds = %true103, %end71
  %GEM131 = load %gem* %GEM
  %v4w = extractvalue %gem %GEM131, 12
  %return133 = call double @"getcomp@F[FI"(double* %v4w, i64 %return26)
  %return134 = fcmp one double %return133, 0.000000e+00
  br i1 %return134, label %true136, label %end137

true136:                                          ; preds = %end104
  %__tmp138 = load <3 x double>* %__tmp
  %v4GMP139 = load %gemPrm* %v4GMP
  store %gemPrm %v4GMP139, %gemPrm* %38
  store i64 1, i64* %39
  %__mem140 = load <3 x double>* %__mem
  store <3 x double> %__mem140, <3 x double>* %40
  store i64 %return26, i64* %41
  %GEM142 = load %gem* %GEM
  %v4type143 = extractvalue %gem %GEM142, 3
  %return145 = call i64 @"getcomp@I[II"(i64* %v4type143, i64 %return26)
  store i64 %return145, i64* %42
  %GEM146 = load %gem* %GEM
  %x147 = extractvalue %gem %GEM146, 23
  %return149 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %x147, i64 %return26)
  store <2 x double> %return149, <2 x double>* %43
  %GEM150 = load %gem* %GEM
  %y151 = extractvalue %gem %GEM150, 24
  %return153 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %y151, i64 %return26)
  store <2 x double> %return153, <2 x double>* %44
  %GEM154 = load %gem* %GEM
  %o155 = extractvalue %gem %GEM154, 25
  %return157 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %o155, i64 %return26)
  store <2 x double> %return157, <2 x double>* %45
  %GEM158 = load %gem* %GEM
  %v4w159 = extractvalue %gem %GEM158, 12
  %return161 = call double @"getcomp@F[FI"(double* %v4w159, i64 %return26)
  store double %return161, double* %46
  %FLAME162 = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %38, i64* %39, <3 x double>* %40, i64* %41, i64* %42, <2 x double>* %43, <2 x double>* %44, <2 x double>* %45, double* %46)
  %output163 = call <3 x double> @"add@VV"(<3 x double> %__tmp138, <3 x double> %FLAME162)
  store <3 x double> %output163, <3 x double>* %__tmp
  br label %end137

end137:                                           ; preds = %true136, %end104
  %GEM164 = load %gem* %GEM
  %POSTL = extractvalue %gem %GEM164, 4
  %return166 = call i64 @"getcomp@I[II"(i64* %POSTL, i64 %return26)
  %95 = icmp ne i64 %return166, 0
  br i1 %95, label %true167, label %end168

true167:                                          ; preds = %end137
  %px = extractvalue %gem %GEM164, 26
  %return171 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %px, i64 %return26)
  store <2 x double> %return171, <2 x double>* %47
  %GEM172 = load %gem* %GEM
  %py = extractvalue %gem %GEM172, 27
  %return174 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %py, i64 %return26)
  store <2 x double> %return174, <2 x double>* %48
  %GEM175 = load %gem* %GEM
  %po = extractvalue %gem %GEM175, 28
  %return177 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %po, i64 %return26)
  store <2 x double> %return177, <2 x double>* %49
  call void @"affinePOST@VUUU"(<3 x double>* %__tmp, <2 x double>* %47, <2 x double>* %48, <2 x double>* %49)
  br label %end168

end168:                                           ; preds = %true167, %end137
  %SYS178 = load %gemSYS* %SYS
  %TMG = extractvalue %gemSYS %SYS178, 0
  %96 = icmp ne i64 %TMG, 0
  br i1 %96, label %true179, label %end180

true179:                                          ; preds = %end168
  %__tmp181 = load <3 x double>* %__tmp
  %GEM182 = load %gem* %GEM
  %gtr = extractvalue %gem %GEM182, 21
  %cast183 = call <3 x double> @"set@VU"(<2 x double> %gtr)
  %grt = extractvalue %gem %GEM182, 20
  %return185 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %grt)
  %gsc = extractvalue %gem %GEM182, 22
  %cast187 = call <3 x double> @"set@VU"(<2 x double> %gsc)
  %return189 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast183, <3 x double> %return185, <3 x double> %cast187, <3 x double> %cast)
  %output190 = call <3 x double> @"mul@V4"(<3 x double> %__tmp181, <16 x double> %return189)
  store <3 x double> %output190, <3 x double>* %__tmp
  br label %end180

end180:                                           ; preds = %true179, %end168
  %__tmp191 = load <3 x double>* %__tmp
  store <3 x double> %__tmp191, <3 x double>* %__mem
  %GEM192 = load %gem* %GEM
  %CLR193 = extractvalue %gem %GEM192, 14
  %return195 = call double @"getcomp@F[FI"(double* %CLR193, i64 %return26)
  %ONEMINUS = extractvalue %gem %GEM192, 15
  %return198 = call double @"getcomp@F[FI"(double* %ONEMINUS, i64 %return26)
  %output200 = fmul double %return198, %PREV_CLR.0
  %output201 = fadd double %return195, %output200
  %output204 = add i64 %i.0, 1
  br label %cond

true206:                                          ; preds = %end
  %cast208 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast208, <3 x double>* %__tmp
  %GEM209 = load %gem* %GEM
  %ffv1w = extractvalue %gem %GEM209, 16
  %return210 = fcmp one double %ffv1w, 0.000000e+00
  br i1 %return210, label %true212, label %end213

end207:                                           ; preds = %true272, %false, %end
  %SYS287 = load %gemSYS* %SYS
  %DELPT = extractvalue %gemSYS %SYS287, 1
  store i64 %DELPT, i64* %50
  %__mem288 = load <3 x double>* %__mem
  store <3 x double> %__mem288, <3 x double>* %51
  %chkNAN_v = call i64 @"chkNAN_v@IIV"(i64* %50, <3 x double>* %51)
  %97 = icmp ne i64 %chkNAN_v, 0
  br i1 %97, label %true289, label %false290

true212:                                          ; preds = %true206
  %v1GMP215 = load %gemPrm* %v1GMP
  store %gemPrm %v1GMP215, %gemPrm* %52
  store i64 0, i64* %53
  %__mem216 = load <3 x double>* %__mem
  store <3 x double> %__mem216, <3 x double>* %54
  store i64 0, i64* %55
  %GEM217 = load %gem* %GEM
  %ffv1type = extractvalue %gem %GEM217, 5
  store i64 %ffv1type, i64* %56
  %GEM218 = load %gem* %GEM
  %fx = extractvalue %gem %GEM218, 29
  store <2 x double> %fx, <2 x double>* %57
  %GEM219 = load %gem* %GEM
  %fy = extractvalue %gem %GEM219, 30
  store <2 x double> %fy, <2 x double>* %58
  %GEM220 = load %gem* %GEM
  %fo = extractvalue %gem %GEM220, 31
  store <2 x double> %fo, <2 x double>* %59
  %GEM221 = load %gem* %GEM
  %ffv1w222 = extractvalue %gem %GEM221, 16
  store double %ffv1w222, double* %60
  %FLAME223 = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %52, i64* %53, <3 x double>* %54, i64* %55, i64* %56, <2 x double>* %57, <2 x double>* %58, <2 x double>* %59, double* %60)
  %output224 = call <3 x double> @"add@VV"(<3 x double> %cast208, <3 x double> %FLAME223)
  store <3 x double> %output224, <3 x double>* %__tmp
  br label %end213

end213:                                           ; preds = %true212, %true206
  %GEM225 = load %gem* %GEM
  %ffv2w = extractvalue %gem %GEM225, 17
  %return226 = fcmp one double %ffv2w, 0.000000e+00
  br i1 %return226, label %true228, label %end229

true228:                                          ; preds = %end213
  %__tmp230 = load <3 x double>* %__tmp
  %v1GMP231 = load %gemPrm* %v1GMP
  store %gemPrm %v1GMP231, %gemPrm* %61
  store i64 0, i64* %62
  %__mem232 = load <3 x double>* %__mem
  store <3 x double> %__mem232, <3 x double>* %63
  store i64 0, i64* %64
  %GEM233 = load %gem* %GEM
  %ffv2type = extractvalue %gem %GEM233, 6
  store i64 %ffv2type, i64* %65
  %GEM234 = load %gem* %GEM
  %fx235 = extractvalue %gem %GEM234, 29
  store <2 x double> %fx235, <2 x double>* %66
  %GEM236 = load %gem* %GEM
  %fy237 = extractvalue %gem %GEM236, 30
  store <2 x double> %fy237, <2 x double>* %67
  %GEM238 = load %gem* %GEM
  %fo239 = extractvalue %gem %GEM238, 31
  store <2 x double> %fo239, <2 x double>* %68
  %GEM240 = load %gem* %GEM
  %ffv2w241 = extractvalue %gem %GEM240, 17
  store double %ffv2w241, double* %69
  %FLAME242 = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %61, i64* %62, <3 x double>* %63, i64* %64, i64* %65, <2 x double>* %66, <2 x double>* %67, <2 x double>* %68, double* %69)
  %output243 = call <3 x double> @"add@VV"(<3 x double> %__tmp230, <3 x double> %FLAME242)
  store <3 x double> %output243, <3 x double>* %__tmp
  br label %end229

end229:                                           ; preds = %true228, %end213
  %GEM244 = load %gem* %GEM
  %ffv3w = extractvalue %gem %GEM244, 18
  %return245 = fcmp one double %ffv3w, 0.000000e+00
  br i1 %return245, label %true247, label %end248

true247:                                          ; preds = %end229
  %__tmp249 = load <3 x double>* %__tmp
  %v1GMP250 = load %gemPrm* %v1GMP
  store %gemPrm %v1GMP250, %gemPrm* %70
  store i64 0, i64* %71
  %__mem251 = load <3 x double>* %__mem
  store <3 x double> %__mem251, <3 x double>* %72
  store i64 0, i64* %73
  %GEM252 = load %gem* %GEM
  %ffv3type = extractvalue %gem %GEM252, 7
  store i64 %ffv3type, i64* %74
  %GEM253 = load %gem* %GEM
  %fx254 = extractvalue %gem %GEM253, 29
  store <2 x double> %fx254, <2 x double>* %75
  %GEM255 = load %gem* %GEM
  %fy256 = extractvalue %gem %GEM255, 30
  store <2 x double> %fy256, <2 x double>* %76
  %GEM257 = load %gem* %GEM
  %fo258 = extractvalue %gem %GEM257, 31
  store <2 x double> %fo258, <2 x double>* %77
  %GEM259 = load %gem* %GEM
  %ffv3w260 = extractvalue %gem %GEM259, 18
  store double %ffv3w260, double* %78
  %FLAME261 = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %70, i64* %71, <3 x double>* %72, i64* %73, i64* %74, <2 x double>* %75, <2 x double>* %76, <2 x double>* %77, double* %78)
  %output262 = call <3 x double> @"add@VV"(<3 x double> %__tmp249, <3 x double> %FLAME261)
  store <3 x double> %output262, <3 x double>* %__tmp
  br label %end248

end248:                                           ; preds = %true247, %end229
  %SYS263 = load %gemSYS* %SYS
  %POSTF = extractvalue %gemSYS %SYS263, 2
  %98 = icmp ne i64 %POSTF, 0
  br i1 %98, label %true264, label %end265

true264:                                          ; preds = %end248
  %GEM266 = load %gem* %GEM
  %pfx = extractvalue %gem %GEM266, 32
  store <2 x double> %pfx, <2 x double>* %79
  %GEM267 = load %gem* %GEM
  %pfy = extractvalue %gem %GEM267, 33
  store <2 x double> %pfy, <2 x double>* %80
  %GEM268 = load %gem* %GEM
  %pfo = extractvalue %gem %GEM268, 34
  store <2 x double> %pfo, <2 x double>* %81
  call void @"affinePOST@VUUU"(<3 x double>* %__tmp, <2 x double>* %79, <2 x double>* %80, <2 x double>* %81)
  br label %end265

end265:                                           ; preds = %true264, %end248
  %GEM269 = load %gem* %GEM
  %ffp1w = extractvalue %gem %GEM269, 19
  %return270 = fcmp one double %ffp1w, 0.000000e+00
  br i1 %return270, label %true272, label %false

true272:                                          ; preds = %end265
  %v1GMP274 = load %gemPrm* %v1GMP
  store %gemPrm %v1GMP274, %gemPrm* %82
  store i64 0, i64* %83
  %__tmp275 = load <3 x double>* %__tmp
  store <3 x double> %__tmp275, <3 x double>* %84
  store i64 0, i64* %85
  %GEM276 = load %gem* %GEM
  %ffp1type = extractvalue %gem %GEM276, 8
  store i64 %ffp1type, i64* %86
  %GEM277 = load %gem* %GEM
  %fx278 = extractvalue %gem %GEM277, 29
  store <2 x double> %fx278, <2 x double>* %87
  %GEM279 = load %gem* %GEM
  %fy280 = extractvalue %gem %GEM279, 30
  store <2 x double> %fy280, <2 x double>* %88
  %GEM281 = load %gem* %GEM
  %fo282 = extractvalue %gem %GEM281, 31
  store <2 x double> %fo282, <2 x double>* %89
  %GEM283 = load %gem* %GEM
  %ffp1w284 = extractvalue %gem %GEM283, 19
  store double %ffp1w284, double* %90
  %FLAME285 = call <3 x double> @"FLAME@VZ6gemPrmM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PIVIIUUUF"(%gemPrm* %82, i64* %83, <3 x double>* %84, i64* %85, i64* %86, <2 x double>* %87, <2 x double>* %88, <2 x double>* %89, double* %90)
  store <3 x double> %FLAME285, <3 x double>* %__mem
  br label %end207

false:                                            ; preds = %end265
  %__tmp286 = load <3 x double>* %__tmp
  store <3 x double> %__tmp286, <3 x double>* %__mem
  br label %end207

true289:                                          ; preds = %end207
  %_bound_ptnum292 = load i64* %_bound_ptnum
  %return293 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum292)
  br label %end291

false290:                                         ; preds = %end207
  %SYS294 = load %gemSYS* %SYS
  %sym = extractvalue %gemSYS %SYS294, 5
  %99 = icmp ne i64 %sym, 0
  br i1 %99, label %true295, label %end296

end291:                                           ; preds = %end301, %true289
  ret void

true295:                                          ; preds = %false290
  %return297 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8]* @163, i64 0, i64 0))
  store <3 x double> %return297, <3 x double>* %91
  %SYS298 = load %gemSYS* %SYS
  %sym_mode = extractvalue %gemSYS %SYS298, 6
  store i64 %sym_mode, i64* %92
  call void @"V_SYM@VVI"(<3 x double>* %__mem, <3 x double>* %91, i64* %92)
  br label %end296

end296:                                           ; preds = %true295, %false290
  %SYS299 = load %gemSYS* %SYS
  %domb = extractvalue %gemSYS %SYS299, 8
  %100 = icmp ne i64 %domb, 0
  br i1 %100, label %true300, label %end301

true300:                                          ; preds = %end296
  %mb_modulate = extractvalue %gemSYS %SYS299, 10
  %output304 = fmul double 1.000000e-03, %mb_modulate
  %_bound_ptnum305 = load i64* %_bound_ptnum
  %return308 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* getelementptr inbounds ([12 x i8]* @164, i64 0, i64 0), i64 %_bound_ptnum305, double %mb_modulate, i8* getelementptr inbounds ([4 x i8]* @165, i64 0, i64 0))
  br label %end301

end301:                                           ; preds = %true300, %end296
  %pscl.0 = phi double [ %output304, %true300 ], [ 1.000000e-03, %end296 ]
  %__mem309 = load <3 x double>* %__mem
  store <3 x double> %__mem309, <3 x double>* %_bound_P
  store double %CLR.0, double* %_bound_COORD
  store double %pscl.0, double* %_bound_pscale
  br label %end291
}

define private i64 @"sample_cdf@[FFI"(double* %rw01, double %rw12) alwaysinline {
__llvm_entry:
  %rw24 = call { i64, double, double } @"sample_cdf@[FFIFF"(double* %rw01, double %rw12)
  %rw25 = extractvalue { i64, double, double } %rw24, 0
  ret i64 %rw25
}

declare { i64, double, double } @"sample_cdf@[FFIFF"(double*, double) nounwind readnone

declare i64 @"setpointattrib@IISIFS"(i64, i8*, i64, double, i8*) nounwind

define void @TheFractalFlameAlgorithm(i64 %ptnum, i64* %VACTIVE, double* %CDF, double %pscale, double %COORD, <3 x double> %P) nounwind {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<COORD>" = alloca double
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64*
  %2 = alloca double*
  store double %pscale, double* %"<pscale>"
  store double %COORD, double* %"<COORD>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store i64* %VACTIVE, i64** %1
  store double* %CDF, double** %2
  call void @"_TheFractalFlameAlgorithm@I[I[FFFV"(i64* %0, i64** %1, double** %2, double* %"<pscale>", double* %"<COORD>", <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @166, i64 0, i64 0), i64 %ptnum) nounwind readonly
  %evalue4 = load double* %"<pscale>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8]* @167, i64 0, i64 0), double %evalue4) nounwind readonly
  %evalue6 = load double* %"<COORD>"
  %gvalue7 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8]* @168, i64 0, i64 0), double %evalue6) nounwind readonly
  %evalue8 = load <3 x double>* %"<P>"
  %gvalue9 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @169, i64 0, i64 0), <3 x double> %evalue8) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  store double %gvalue5, double* @pscale
  store double %gvalue7, double* @COORD
  store <3 x double> %gvalue9, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TheFractalFlameAlgorithm(i64 0, i64* getelementptr inbounds ([0 x i64]* @48, i64 0, i64 0), double* getelementptr inbounds ([0 x double]* @49, i64 0, i64 0), double 0.000000e+00, double 0.000000e+00, <3 x double> zeroinitializer)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.696"}
!2 = metadata !{metadata !"64"}
!3 = metadata !{metadata !""}

;_code_end
