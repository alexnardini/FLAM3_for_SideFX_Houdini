;_name	TFFAmbcalc
; ModuleID = 'TFFAmbcalc'

@0 = private constant [7 x i8] c"../fps\00"
@1 = private constant [13 x i8] c"../mbsamples\00"
@2 = private constant [11 x i8] c"../shutter\00"
@3 = private constant [10 x i8] c"iteration\00"
@4 = private constant [22 x i8] c"Tstep_mult_compensate\00"
@Time = external global double
@Tstep = external global double
@Tstep_mult = external global double
@5 = private constant [5 x i8] c"Time\00"
@6 = private constant [6 x i8] c"Tstep\00"
@7 = private constant [11 x i8] c"Tstep_mult\00"

define private void @"_TFFAmbcalc@FFF"(double* %_bound_Time, double* %_bound_Tstep, double* %_bound_Tstep_mult) nounwind alwaysinline {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([7 x i8]* @0, i64 0, i64 0))
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @1, i64 0, i64 0))
  %return2 = call double @"chf@FS"(i8* getelementptr inbounds ([11 x i8]* @2, i64 0, i64 0))
  %_bound_Time3 = load double* %_bound_Time
  %cast = sitofp i64 %return to double
  %output = call double @"div@FF"(double 1.000000e+00, double %cast)
  %output7 = fmul double %output, %return2
  %return8 = call i64 @"detail@IIS"(i64 1, i8* getelementptr inbounds ([10 x i8]* @3, i64 0, i64 0))
  %output9 = add i64 %return8, 1
  %cast11 = sitofp i64 %output9 to double
  %cast13 = sitofp i64 %return1 to double
  %output16 = fsub double %_bound_Time3, %output7
  %output19 = fadd double %_bound_Time3, %output7
  %return20 = call double @"fit@FFFFFF"(double %cast11, double 1.000000e+00, double %cast13, double %output16, double %output19)
  %return25 = call double @"neg@FF"(double 9.000000e-01)
  %return26 = call double @"fit@FFFFFF"(double %cast11, double 1.000000e+00, double %cast13, double %return25, double 9.000000e-01)
  %return27 = call double @"abs@FF"(double %return26)
  %output28 = fsub double 1.000000e+00, %return27
  %return29 = call double @"detail@FIS"(i64 2, i8* getelementptr inbounds ([22 x i8]* @4, i64 0, i64 0))
  store double %return20, double* %_bound_Tstep
  %output33 = fmul double %output28, %return29
  store double %output33, double* %_bound_Tstep_mult
  ret void
}

declare i64 @"chi@IS"(i8*) nounwind readnone

declare double @"chf@FS"(i8*) nounwind readnone

declare double @"div@FF"(double, double) nounwind readnone

declare i64 @"detail@IIS"(i64, i8*) nounwind

declare double @"fit@FFFFFF"(double, double, double, double, double) nounwind

declare double @"neg@FF"(double) nounwind readnone

declare double @"abs@FF"(double) nounwind

declare double @"detail@FIS"(i64, i8*) nounwind

define void @TFFAmbcalc(double %Time, double %Tstep, double %Tstep_mult) nounwind {
__llvm_entry:
  %"<Tstep>" = alloca double
  %"<Tstep_mult>" = alloca double
  %0 = alloca double
  store double %Tstep, double* %"<Tstep>"
  store double %Tstep_mult, double* %"<Tstep_mult>"
  store double %Time, double* %0
  call void @"_TFFAmbcalc@FFF"(double* %0, double* %"<Tstep>", double* %"<Tstep_mult>")
  %gvalue = call double @"_export@FSF"(i8* getelementptr inbounds ([5 x i8]* @5, i64 0, i64 0), double %Time) nounwind readonly
  %evalue2 = load double* %"<Tstep>"
  %gvalue3 = call double @"_export@FSF"(i8* getelementptr inbounds ([6 x i8]* @6, i64 0, i64 0), double %evalue2) nounwind readonly
  %evalue4 = load double* %"<Tstep_mult>"
  %gvalue5 = call double @"_export@FSF"(i8* getelementptr inbounds ([11 x i8]* @7, i64 0, i64 0), double %evalue4) nounwind readonly
  store double %gvalue, double* @Time
  store double %gvalue3, double* @Tstep
  store double %gvalue5, double* @Tstep_mult
  ret void
}

declare double @"_export@FSF"(i8*, double)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAmbcalc(double 0.000000e+00, double 0.000000e+00, double 0.000000e+00)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.499"}
!2 = metadata !{metadata !"64"}

;_code_end
