;_name	TFFAcamhandles
; ModuleID = 'TFFAcamhandles'
source_filename = "TFFAcamhandles"

@0 = private constant [5 x i8] c"fcam\00"
@1 = private constant [6 x i8] c"/near\00"
@2 = private constant [2 x i8] c"P\00"
@3 = private constant [7 x i8] c"orient\00"
@4 = private constant [4 x i8] c"set\00"
@5 = private constant [3 x i8] c"Cd\00"
@6 = private constant [7 x i8] c"pscale\00"
@orient = external global <4 x double>

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAcamhandles@P"(<4 x double>* %_bound_orient) #0 {
__llvm_entry:
  %return = call i8* @"chs@SS"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i64 0, i64 0))
  %return2 = call i8* @"concat@SSS"(i8* %return, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i64 0, i64 0))
  %return3 = call double @"ch@FS"(i8* %return2)
  %output = fadd double %return3, 5.000000e-02
  %return4 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return4 to double
  %return5 = call <3 x double> @"set@VFFF"(double 5.000000e-01, double 5.000000e-01, double %cast)
  %return8 = call <3 x double> @"fromNDC@VSV"(i8* %return, <3 x double> %return5)
  %return9 = call <3 x double> @"point@VISI"(i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i64 0, i64 0), i64 0)
  %output12 = call <3 x double> @"sub@VV"(<3 x double> %return9, <3 x double> %return8)
  %return13 = call <3 x double> @"normalize@VV"(<3 x double> %output12)
  %return17 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double 5.000000e-01, double %cast)
  %return18 = call <3 x double> @"fromNDC@VSV"(i8* %return, <3 x double> %return17)
  %return22 = call <3 x double> @"set@VFFF"(double 5.000000e-01, double 1.000000e+00, double %cast)
  %return23 = call <3 x double> @"fromNDC@VSV"(i8* %return, <3 x double> %return22)
  %output26 = call <3 x double> @"add@VV"(<3 x double> %return8, <3 x double> %return13)
  %output29 = call <3 x double> @"sub@VV"(<3 x double> %return18, <3 x double> %return8)
  %return30 = call <3 x double> @"normalize@VV"(<3 x double> %output29)
  %output33 = call <3 x double> @"sub@VV"(<3 x double> %return23, <3 x double> %return8)
  %return34 = call <3 x double> @"normalize@VV"(<3 x double> %output33)
  %output37 = call <3 x double> @"sub@VV"(<3 x double> %output26, <3 x double> %return8)
  %return38 = call <3 x double> @"normalize@VV"(<3 x double> %output37)
  %return42 = call <9 x double> @"set@3VVV"(<3 x double> %return30, <3 x double> %return34, <3 x double> %return38)
  %return44 = call <4 x double> @"quaternion@P3"(<9 x double> %return42)
  store <4 x double> %return44, <4 x double>* %_bound_orient
  %cast48 = call <3 x double> @"set@VF"(double %output)
  %output49 = call <3 x double> @"mul@VV"(<3 x double> %return13, <3 x double> %cast48)
  %output50 = call <3 x double> @"sub@VV"(<3 x double> %return9, <3 x double> %output49)
  %return52 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output50)
  %return54 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output50)
  %return57 = call double @"distance@FVV"(<3 x double> %return9, <3 x double> %output50)
  %_bound_orient59 = load <4 x double>, <4 x double>* %_bound_orient
  %return60 = call i64 @"setpointattrib@IISIPS"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %return52, <4 x double> %_bound_orient59, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %return62 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0), i64 %return52, <3 x double> <double 1.000000e+00, double 7.000000e-01, double 0.000000e+00>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %output65 = fmul double 1.900000e-01, %return57
  %return66 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), i64 %return52, double %output65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %_bound_orient68 = load <4 x double>, <4 x double>* %_bound_orient
  %return69 = call i64 @"setpointattrib@IISIPS"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), i64 %return54, <4 x double> %_bound_orient68, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %return71 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i64 0, i64 0), i64 %return54, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %output74 = fmul double 2.200000e-01, %return57
  %return75 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @6, i64 0, i64 0), i64 %return54, double %output74, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i64 0, i64 0))
  %return76 = call i64 @"removepoint@III"(i64 0, i64 0)
  ret void
}

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #1

; Function Attrs: nounwind readnone
declare double @"ch@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"fromNDC@VSV"(i8*, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"point@VISI"(i64, i8*, i64) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"sub@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <3 x double> @"normalize@VV"(<3 x double>) #2

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <9 x double> @"set@3VVV"(<3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"quaternion@P3"(<9 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
declare double @"distance@FVV"(<3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIPS"(i64, i8*, i64, <4 x double>, i8*) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIFS"(i64, i8*, i64, double, i8*) #2

; Function Attrs: nounwind
declare i64 @"removepoint@III"(i64, i64) #2

; Function Attrs: nounwind
define void @TFFAcamhandles(<4 x double> %orient) #2 {
__llvm_entry:
  %"<orient>" = alloca <4 x double>
  store <4 x double> %orient, <4 x double>* %"<orient>"
  call void @"_TFFAcamhandles@P"(<4 x double>* %"<orient>")
  %evalue = load <4 x double>, <4 x double>* %"<orient>"
  %gvalue = call <4 x double> @"_export@PSP"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0), <4 x double> %evalue) #3
  store <4 x double> %gvalue, <4 x double>* @orient
  ret void
}

declare <4 x double> @"_export@PSP"(i8*, <4 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAcamhandles(<4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00>)
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"21.0.440"}
!2 = !{!"64"}

;_code_end
