;_name	TheFractalFlameAlgorithm
; ModuleID = 'TheFractalFlameAlgorithm'

%genomeSYS = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, double }
%genome = type { i64, i64, i64, i64*, i64*, i64*, i64*, i64*, i64*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double*, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, <2 x double>, <2 x double>, <3 x double>*, i8** }
%genomeParametrics = type { double*, double*, double*, double*, double*, double*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <3 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <2 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>*, <4 x double>* }

@0 = private constant [14 x i8] c"../dotmglobal\00"
@1 = private constant [16 x i8] c"../dofinalflame\00"
@2 = private constant [14 x i8] c"../_dofpost_2\00"
@3 = private constant [13 x i8] c"../usepscale\00"
@4 = private constant [13 x i8] c"../pscaleviz\00"
@5 = private constant [10 x i8] c"../usermp\00"
@6 = private constant [15 x i8] c"../palettemode\00"
@7 = private constant [17 x i8] c"../blendwithvcol\00"
@8 = private constant [13 x i8] c"../flamefunc\00"
@9 = private constant [16 x i8] c"../delinvalidpt\00"
@10 = private constant [12 x i8] c"../symmetry\00"
@11 = private constant [14 x i8] c"../rotational\00"
@12 = private constant [14 x i8] c"../sym_global\00"
@13 = private constant [8 x i8] c"../iter\00"
@14 = private constant [8 x i8] c"../domb\00"
@15 = private constant [9 x i8] c"../vizmb\00"
@16 = private constant [11 x i8] c"Tstep_mult\00"
@17 = private constant [7 x i8] c"../iw_\00"
@18 = private constant [8 x i8] c"../col_\00"
@19 = private constant [17 x i8] c"../cvaroverride_\00"
@20 = private constant [11 x i8] c"../pscale_\00"
@21 = private constant [18 x i8] c"../preblurweight_\00"
@22 = private constant [13 x i8] c"../v1weight_\00"
@23 = private constant [11 x i8] c"../v1type_\00"
@24 = private constant [13 x i8] c"../v2weight_\00"
@25 = private constant [11 x i8] c"../v2type_\00"
@26 = private constant [13 x i8] c"../v3weight_\00"
@27 = private constant [11 x i8] c"../v3type_\00"
@28 = private constant [13 x i8] c"../v4weight_\00"
@29 = private constant [11 x i8] c"../v4type_\00"
@30 = private constant [6 x i8] c"../a_\00"
@31 = private constant [6 x i8] c"../b_\00"
@32 = private constant [6 x i8] c"../d_\00"
@33 = private constant [6 x i8] c"../e_\00"
@34 = private constant [6 x i8] c"../f_\00"
@35 = private constant [6 x i8] c"../h_\00"
@36 = private constant [11 x i8] c"../dopost_\00"
@37 = private constant [3 x i8] c"_2\00"
@38 = private constant [7 x i8] c"../ftr\00"
@39 = private constant [7 x i8] c"../frt\00"
@40 = private constant [7 x i8] c"../fsc\00"
@41 = private constant [14 x i8] c"../ffv1weight\00"
@42 = private constant [12 x i8] c"../ffv1type\00"
@43 = private constant [14 x i8] c"../ffv2weight\00"
@44 = private constant [12 x i8] c"../ffv2type\00"
@45 = private constant [14 x i8] c"../ffv3weight\00"
@46 = private constant [12 x i8] c"../ffv3type\00"
@47 = private constant [9 x i8] c"../_fa_2\00"
@48 = private constant [9 x i8] c"../_fb_2\00"
@49 = private constant [9 x i8] c"../_fd_2\00"
@50 = private constant [9 x i8] c"../_fe_2\00"
@51 = private constant [9 x i8] c"../_ff_2\00"
@52 = private constant [9 x i8] c"../_fh_2\00"
@53 = private constant [10 x i8] c"../_fpa_2\00"
@54 = private constant [10 x i8] c"../_fpb_2\00"
@55 = private constant [10 x i8] c"../_fpd_2\00"
@56 = private constant [10 x i8] c"../_fpe_2\00"
@57 = private constant [10 x i8] c"../_fpf_2\00"
@58 = private constant [10 x i8] c"../_fph_2\00"
@59 = private constant [0 x i64] zeroinitializer
@60 = private constant [0 x double] zeroinitializer
@61 = private constant [0 x <3 x double>] zeroinitializer
@62 = private constant [0 x i8*] zeroinitializer
@63 = private constant [21 x i64] [i64 27, i64 28, i64 29, i64 30, i64 31, i64 32, i64 34, i64 35, i64 36, i64 37, i64 38, i64 47, i64 48, i64 49, i64 50, i64 51, i64 52, i64 53, i64 56, i64 57, i64 61]
@64 = private constant [20 x i64] [i64 63, i64 66, i64 67, i64 69, i64 71, i64 72, i64 73, i64 74, i64 75, i64 76, i64 77, i64 78, i64 79, i64 94, i64 95, i64 96, i64 97, i64 98, i64 99, i64 101]
@65 = private constant [4 x i8] c"../\00"
@66 = private constant [7 x i8] c"curlc_\00"
@67 = private constant [6 x i8] c"ngon_\00"
@68 = private constant [6 x i8] c"pdjw_\00"
@69 = private constant [6 x i8] c"blob_\00"
@70 = private constant [8 x i8] c"julian_\00"
@71 = private constant [12 x i8] c"juliascope_\00"
@72 = private constant [6 x i8] c"fan2_\00"
@73 = private constant [11 x i8] c"rings2val_\00"
@74 = private constant [12 x i8] c"rectangles_\00"
@75 = private constant [12 x i8] c"radialblur_\00"
@76 = private constant [5 x i8] c"pie_\00"
@77 = private constant [7 x i8] c"disc2_\00"
@78 = private constant [12 x i8] c"supershape_\00"
@79 = private constant [13 x i8] c"supershapen_\00"
@80 = private constant [8 x i8] c"flower_\00"
@81 = private constant [7 x i8] c"conic_\00"
@82 = private constant [10 x i8] c"parabola_\00"
@83 = private constant [9 x i8] c"bent2xy_\00"
@84 = private constant [14 x i8] c"bipolarshift_\00"
@85 = private constant [10 x i8] c"cellsize_\00"
@86 = private constant [6 x i8] c"cpow_\00"
@87 = private constant [12 x i8] c"escherbeta_\00"
@88 = private constant [14 x i8] c"lazysusanxyz_\00"
@89 = private constant [11 x i8] c"lazysusan_\00"
@90 = private constant [12 x i8] c"modulusXYZ_\00"
@91 = private constant [8 x i8] c"oscope_\00"
@92 = private constant [13 x i8] c"popcorn2xyz_\00"
@93 = private constant [11 x i8] c"popcorn2c_\00"
@94 = private constant [15 x i8] c"separationxyz_\00"
@95 = private constant [21 x i8] c"separationinsidexyz_\00"
@96 = private constant [10 x i8] c"splitxyz_\00"
@97 = private constant [11 x i8] c"splitsxyz_\00"
@98 = private constant [9 x i8] c"stripes_\00"
@99 = private constant [7 x i8] c"wedge_\00"
@100 = private constant [12 x i8] c"wedgejulia_\00"
@101 = private constant [10 x i8] c"wedgesph_\00"
@102 = private constant [7 x i8] c"whorl_\00"
@103 = private constant [16 x i8] c"waves2scalexyz_\00"
@104 = private constant [15 x i8] c"waves2freqxyz_\00"
@105 = private constant [7 x i8] c"auger_\00"
@106 = private constant [12 x i8] c"fluxspread_\00"
@107 = private constant [10 x i8] c"mobiusre_\00"
@108 = private constant [10 x i8] c"mobiusim_\00"
@109 = private constant [16 x i8] c"curvexyzlenght_\00"
@110 = private constant [13 x i8] c"curvexyzamp_\00"
@111 = private constant [7 x i8] c"persp_\00"
@112 = private constant [8 x i8] c"bwraps_\00"
@113 = private constant [13 x i8] c"bwrapstwist_\00"
@114 = private constant [15 x i8] c"polynomialpow_\00"
@115 = private constant [14 x i8] c"polynomiallc_\00"
@116 = private constant [14 x i8] c"polynomialsc_\00"
@117 = private constant [0 x <2 x double>] zeroinitializer
@118 = private constant [0 x <4 x double>] zeroinitializer
@119 = private constant [6 x i8] c"SUMSQ\00"
@120 = private constant [5 x i8] c"SQRT\00"
@121 = private constant [5 x i8] c"ATAN\00"
@122 = private constant [7 x i8] c"ATANYX\00"
@123 = private constant [8 x i8] c"twister\00"
@124 = private constant [6 x i8] c"LOCAL\00"
@125 = private constant [12 x i8] c"../_curlc_2\00"
@126 = private constant [11 x i8] c"../_ngon_2\00"
@127 = private constant [11 x i8] c"../_pdjw_2\00"
@128 = private constant [11 x i8] c"../_blob_2\00"
@129 = private constant [13 x i8] c"../_julian_2\00"
@130 = private constant [17 x i8] c"../_juliascope_2\00"
@131 = private constant [11 x i8] c"../_fan2_2\00"
@132 = private constant [16 x i8] c"../_rings2val_2\00"
@133 = private constant [17 x i8] c"../_rectangles_2\00"
@134 = private constant [17 x i8] c"../_radialblur_2\00"
@135 = private constant [10 x i8] c"../_pie_2\00"
@136 = private constant [12 x i8] c"../_disc2_2\00"
@137 = private constant [17 x i8] c"../_supershape_2\00"
@138 = private constant [18 x i8] c"../_supershapen_2\00"
@139 = private constant [13 x i8] c"../_flower_2\00"
@140 = private constant [12 x i8] c"../_conic_2\00"
@141 = private constant [15 x i8] c"../_parabola_2\00"
@142 = private constant [14 x i8] c"../_bent2xy_2\00"
@143 = private constant [19 x i8] c"../_bipolarshift_2\00"
@144 = private constant [15 x i8] c"../_cellsize_2\00"
@145 = private constant [11 x i8] c"../_cpow_2\00"
@146 = private constant [17 x i8] c"../_escherbeta_2\00"
@147 = private constant [19 x i8] c"../_lazysusanxyz_2\00"
@148 = private constant [16 x i8] c"../_lazysusan_2\00"
@149 = private constant [17 x i8] c"../_modulusXYZ_2\00"
@150 = private constant [13 x i8] c"../_oscope_2\00"
@151 = private constant [18 x i8] c"../_popcorn2xyz_2\00"
@152 = private constant [16 x i8] c"../_popcorn2c_2\00"
@153 = private constant [20 x i8] c"../_separationxyz_2\00"
@154 = private constant [26 x i8] c"../_separationinsidexyz_2\00"
@155 = private constant [15 x i8] c"../_splitxyz_2\00"
@156 = private constant [16 x i8] c"../_splitsxyz_2\00"
@157 = private constant [14 x i8] c"../_stripes_2\00"
@158 = private constant [12 x i8] c"../_wedge_2\00"
@159 = private constant [17 x i8] c"../_wedgejulia_2\00"
@160 = private constant [15 x i8] c"../_wedgesph_2\00"
@161 = private constant [12 x i8] c"../_whorl_2\00"
@162 = private constant [21 x i8] c"../_waves2scalexyz_2\00"
@163 = private constant [20 x i8] c"../_waves2freqxyz_2\00"
@164 = private constant [12 x i8] c"../_auger_2\00"
@165 = private constant [17 x i8] c"../_fluxspread_2\00"
@166 = private constant [15 x i8] c"../_mobiusre_2\00"
@167 = private constant [15 x i8] c"../_mobiusim_2\00"
@168 = private constant [21 x i8] c"../_curvexyzlenght_2\00"
@169 = private constant [18 x i8] c"../_curvexyzamp_2\00"
@170 = private constant [12 x i8] c"../_persp_2\00"
@171 = private constant [13 x i8] c"../_bwraps_2\00"
@172 = private constant [18 x i8] c"../_bwrapstwist_2\00"
@173 = private constant [20 x i8] c"../_polynomialpow_2\00"
@174 = private constant [19 x i8] c"../_polynomiallc_2\00"
@175 = private constant [19 x i8] c"../_polynomialsc_2\00"
@176 = private constant [11 x i8] c"../palette\00"
@177 = private constant [15 x i8] c"../palettehsv_\00"
@178 = private constant [10 x i8] c"../vblend\00"
@179 = private constant [6 x i8] c"FINAL\00"
@180 = private constant [13 x i8] c"../symgpivot\00"
@181 = private constant [7 x i8] c"iter_n\00"
@182 = private constant [4 x i8] c"set\00"
@183 = private constant [12 x i8] c"mb_modulate\00"
@ptnum = external global i64
@pscale = external global double
@Cd = external global <3 x double>
@P = external global <3 x double>
@184 = private constant [6 x i8] c"ptnum\00"
@185 = private constant [7 x i8] c"pscale\00"
@186 = private constant [3 x i8] c"Cd\00"
@187 = private constant [2 x i8] c"P\00"

define private void @"genomeSYSBuild@Z9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%genomeSYS* %this) nounwind alwaysinline {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8]* @0, i64 0, i64 0))
  %tmp = load %genomeSYS* %this
  %0 = insertvalue %genomeSYS %tmp, i64 %return, 0
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8]* @1, i64 0, i64 0))
  %1 = insertvalue %genomeSYS %0, i64 %return1, 3
  store %genomeSYS %1, %genomeSYS* %this
  %FF = extractvalue %genomeSYS %1, 3
  %2 = icmp ne i64 %FF, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return4 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8]* @2, i64 0, i64 0))
  %3 = insertvalue %genomeSYS %1, i64 %return4, 2
  store %genomeSYS %3, %genomeSYS* %this
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return6 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @3, i64 0, i64 0))
  %tmp7 = load %genomeSYS* %this
  %4 = insertvalue %genomeSYS %tmp7, i64 %return6, 4
  %return8 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @4, i64 0, i64 0))
  %5 = insertvalue %genomeSYS %4, i64 %return8, 5
  %return10 = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8]* @5, i64 0, i64 0))
  %6 = insertvalue %genomeSYS %5, i64 %return10, 6
  %return12 = call i64 @"chi@IS"(i8* getelementptr inbounds ([15 x i8]* @6, i64 0, i64 0))
  %7 = insertvalue %genomeSYS %6, i64 %return12, 7
  store %genomeSYS %7, %genomeSYS* %this
  %return14 = call i64 @"chi@IS"(i8* getelementptr inbounds ([17 x i8]* @7, i64 0, i64 0))
  %tmp15 = load %genomeSYS* %this
  %8 = insertvalue %genomeSYS %tmp15, i64 %return14, 8
  %return16 = call i64 @"chi@IS"(i8* getelementptr inbounds ([13 x i8]* @8, i64 0, i64 0))
  %9 = insertvalue %genomeSYS %8, i64 %return16, 9
  %return18 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8]* @9, i64 0, i64 0))
  %10 = insertvalue %genomeSYS %9, i64 %return18, 1
  %return20 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @10, i64 0, i64 0))
  %11 = insertvalue %genomeSYS %10, i64 %return20, 10
  store %genomeSYS %11, %genomeSYS* %this
  %this22 = load %genomeSYS* %this
  %symmetry = extractvalue %genomeSYS %this22, 10
  %12 = icmp ne i64 %symmetry, 0
  br i1 %12, label %true23, label %end24

true23:                                           ; preds = %end
  %return25 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8]* @11, i64 0, i64 0))
  %13 = insertvalue %genomeSYS %this22, i64 %return25, 11
  %return27 = call i64 @"chi@IS"(i8* getelementptr inbounds ([14 x i8]* @12, i64 0, i64 0))
  %14 = insertvalue %genomeSYS %13, i64 %return27, 12
  store %genomeSYS %14, %genomeSYS* %this
  br label %end24

end24:                                            ; preds = %true23, %end
  %return29 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8]* @13, i64 0, i64 0))
  %tmp30 = load %genomeSYS* %this
  %15 = insertvalue %genomeSYS %tmp30, i64 %return29, 13
  %return31 = call i64 @"chi@IS"(i8* getelementptr inbounds ([8 x i8]* @14, i64 0, i64 0))
  %16 = insertvalue %genomeSYS %15, i64 %return31, 14
  %17 = insertvalue %genomeSYS %16, double 1.000000e+00, 16
  store %genomeSYS %17, %genomeSYS* %this
  %domb = extractvalue %genomeSYS %17, 14
  %18 = icmp ne i64 %domb, 0
  br i1 %18, label %true35, label %end36

true35:                                           ; preds = %end24
  %return37 = call i64 @"chi@IS"(i8* getelementptr inbounds ([9 x i8]* @15, i64 0, i64 0))
  %19 = insertvalue %genomeSYS %17, i64 %return37, 15
  store %genomeSYS %19, %genomeSYS* %this
  %return39 = call double @"detail@FISI"(i64 1, i8* getelementptr inbounds ([11 x i8]* @16, i64 0, i64 0), i64 0)
  %tmp40 = load %genomeSYS* %this
  %20 = insertvalue %genomeSYS %tmp40, double %return39, 16
  store %genomeSYS %20, %genomeSYS* %this
  br label %end36

end36:                                            ; preds = %true35, %end24
  ret void
}

declare i64 @"chi@IS"(i8*) nounwind readnone

declare double @"detail@FISI"(i64, i8*, i64) nounwind

define private %genomeSYS @"genomeSYS@Z9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateFIIIIIIIIIIIIIIIIF"(i64* %TMG, i64* %DELINVALIDPT, i64* %POSTF, i64* %FF, i64* %USEPSCALE, i64* %USEPSCALEVIZ, i64* %USEPALETTE, i64* %PALETTEMODE, i64* %BLENDWITHVCOL, i64* %iter_f, i64* %symmetry, i64* %sym_mode, i64* %sym_global, i64* %iter, i64* %domb, i64* %vizmb, double* %mb_modulate) nounwind alwaysinline {
__llvm_entry:
  %TMG1 = load i64* %TMG
  %0 = insertvalue %genomeSYS undef, i64 %TMG1, 0
  %DELINVALIDPT2 = load i64* %DELINVALIDPT
  %1 = insertvalue %genomeSYS %0, i64 %DELINVALIDPT2, 1
  %POSTF4 = load i64* %POSTF
  %2 = insertvalue %genomeSYS %1, i64 %POSTF4, 2
  %FF6 = load i64* %FF
  %3 = insertvalue %genomeSYS %2, i64 %FF6, 3
  %USEPSCALE8 = load i64* %USEPSCALE
  %4 = insertvalue %genomeSYS %3, i64 %USEPSCALE8, 4
  %USEPSCALEVIZ10 = load i64* %USEPSCALEVIZ
  %5 = insertvalue %genomeSYS %4, i64 %USEPSCALEVIZ10, 5
  %USEPALETTE12 = load i64* %USEPALETTE
  %6 = insertvalue %genomeSYS %5, i64 %USEPALETTE12, 6
  %PALETTEMODE14 = load i64* %PALETTEMODE
  %7 = insertvalue %genomeSYS %6, i64 %PALETTEMODE14, 7
  %BLENDWITHVCOL16 = load i64* %BLENDWITHVCOL
  %8 = insertvalue %genomeSYS %7, i64 %BLENDWITHVCOL16, 8
  %iter_f18 = load i64* %iter_f
  %9 = insertvalue %genomeSYS %8, i64 %iter_f18, 9
  %symmetry20 = load i64* %symmetry
  %10 = insertvalue %genomeSYS %9, i64 %symmetry20, 10
  %sym_mode22 = load i64* %sym_mode
  %11 = insertvalue %genomeSYS %10, i64 %sym_mode22, 11
  %sym_global24 = load i64* %sym_global
  %12 = insertvalue %genomeSYS %11, i64 %sym_global24, 12
  %iter26 = load i64* %iter
  %13 = insertvalue %genomeSYS %12, i64 %iter26, 13
  %domb28 = load i64* %domb
  %14 = insertvalue %genomeSYS %13, i64 %domb28, 14
  %vizmb30 = load i64* %vizmb
  %15 = insertvalue %genomeSYS %14, i64 %vizmb30, 15
  %mb_modulate32 = load double* %mb_modulate
  %16 = insertvalue %genomeSYS %15, double %mb_modulate32, 16
  ret %genomeSYS %16
}

define private %genomeSYS @"genomeSYS@Z9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateF"() nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca double
  %16 = alloca i64
  store i64 0, i64* %16
  store i64 0, i64* %0
  store i64 0, i64* %1
  store i64 0, i64* %2
  store i64 0, i64* %3
  store i64 0, i64* %4
  store i64 0, i64* %5
  store i64 0, i64* %6
  store i64 0, i64* %7
  store i64 0, i64* %8
  store i64 0, i64* %9
  store i64 0, i64* %10
  store i64 0, i64* %11
  store i64 0, i64* %12
  store i64 0, i64* %13
  store i64 0, i64* %14
  store double 0.000000e+00, double* %15
  %genomeSYS = call %genomeSYS @"genomeSYS@Z9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateFIIIIIIIIIIIIIIIIF"(i64* %16, i64* %0, i64* %1, i64* %2, i64* %3, i64* %4, i64* %5, i64* %6, i64* %7, i64* %8, i64* %9, i64* %10, i64* %11, i64* %12, i64* %13, i64* %14, double* %15)
  ret %genomeSYS %genomeSYS
}

define private void @"genomeBuild@Z6genomeM48N8ffv1typeIN8ffv2typeIN8ffv3typeIN6v1type[IN6v2type[IN6v3type[IN6v4type[IN13cvar_override[IN5POSTL[IN2IW[FN1a[FN1b[FN1d[FN1e[FN1f[FN1h[FN7vpscale[FN8v1weight[FN8v2weight[FN8v3weight[FN8v4weight[FN8PBWEIGHT[FN2ap[FN2bp[FN2dp[FN2ep[FN2fp[FN2hp[FN3grtFN10ffv1weightFN10ffv2weightFN10ffv3weightFN2faFN2fbFN2fdFN2feFN2ffFN2fhFN3fa2FN3fb2FN3fd2FN3fe2FN3ff2FN3fh2FN3gtrUN3gscUN4vcol[VN4sIDX[S[IZ9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%genome* %this, i64** %VACTIVE, %genomeSYS* %SYS) nounwind alwaysinline {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %iter, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output274, %iter ]
  %SYS2 = load %genomeSYS* %SYS
  %iter_f = extractvalue %genomeSYS %SYS2, 9
  %return = call i64 @"lt@III"(i64 %i.0, i64 %iter_f)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %VACTIVE3 = load i64** %VACTIVE
  %return5 = call i64 @"getcomp@I[II"(i64* %VACTIVE3, i64 %i.0)
  %return6 = call i64 @"not@II"(i64 %return5)
  %1 = icmp ne i64 %return6, 0
  br i1 %1, label %iter, label %end7

end:                                              ; preds = %cond
  %TMG = extractvalue %genomeSYS %SYS2, 0
  %2 = icmp ne i64 %TMG, 0
  br i1 %2, label %true276, label %end277

iter:                                             ; preds = %true203, %false204, %body
  %output274 = add i64 %i.0, 1
  br label %cond

end7:                                             ; preds = %body
  %output = add i64 %i.0, 1
  %return10 = call i8* @"itoa@SI"(i64 %output)
  %this11 = load %genome* %this
  %sIDX = extractvalue %genome %this11, 47
  %output13 = call i8** @"append@[SS"(i8** %sIDX, i8* %return10)
  %tmp = load %genome* %this
  %3 = insertvalue %genome %tmp, i8** %output13, 47
  store %genome %3, %genome* %this
  %sIDX15 = extractvalue %genome %3, 47
  %return16 = call i64 @"len@I[S"(i8** %sIDX15)
  %IW = extractvalue %genome %3, 9
  %return19 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([7 x i8]* @17, i64 0, i64 0), i8* %return10)
  %return20 = call double @"chf@FS"(i8* %return19)
  %output21 = call double* @"append@[FF"(double* %IW, double %return20)
  %tmp22 = load %genome* %this
  %4 = insertvalue %genome %tmp22, double* %output21, 9
  store %genome %4, %genome* %this
  %vcol = extractvalue %genome %4, 46
  %return25 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([8 x i8]* @18, i64 0, i64 0), i8* %return10)
  %return26 = call <3 x double> @"chv@VS"(i8* %return25)
  %output27 = call <3 x double>* @"append@[VV"(<3 x double>* %vcol, <3 x double> %return26)
  %tmp28 = load %genome* %this
  %5 = insertvalue %genome %tmp28, <3 x double>* %output27, 46
  store %genome %5, %genome* %this
  %cvar_override = extractvalue %genome %5, 7
  %return31 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([17 x i8]* @19, i64 0, i64 0), i8* %return10)
  %return32 = call i64 @"chi@IS"(i8* %return31)
  %output33 = call i64* @"append@[II"(i64* %cvar_override, i64 %return32)
  %tmp34 = load %genome* %this
  %6 = insertvalue %genome %tmp34, i64* %output33, 7
  store %genome %6, %genome* %this
  %SYS35 = load %genomeSYS* %SYS
  %USEPSCALE = extractvalue %genomeSYS %SYS35, 4
  %7 = icmp ne i64 %USEPSCALE, 0
  br i1 %7, label %true36, label %end37

true36:                                           ; preds = %end7
  %vpscale = extractvalue %genome %6, 16
  %return40 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @20, i64 0, i64 0), i8* %return10)
  %return41 = call double @"chf@FS"(i8* %return40)
  %output42 = call double* @"append@[FF"(double* %vpscale, double %return41)
  %tmp43 = load %genome* %this
  %8 = insertvalue %genome %tmp43, double* %output42, 16
  store %genome %8, %genome* %this
  br label %end37

end37:                                            ; preds = %true36, %end7
  %this44 = load %genome* %this
  %PBWEIGHT = extractvalue %genome %this44, 21
  %return46 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([18 x i8]* @21, i64 0, i64 0), i8* %return10)
  %return47 = call double @"chf@FS"(i8* %return46)
  %output48 = call double* @"append@[FF"(double* %PBWEIGHT, double %return47)
  %tmp49 = load %genome* %this
  %9 = insertvalue %genome %tmp49, double* %output48, 21
  store %genome %9, %genome* %this
  %v1weight = extractvalue %genome %9, 17
  %return52 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @22, i64 0, i64 0), i8* %return10)
  %return53 = call double @"chf@FS"(i8* %return52)
  %output54 = call double* @"append@[FF"(double* %v1weight, double %return53)
  %tmp55 = load %genome* %this
  %10 = insertvalue %genome %tmp55, double* %output54, 17
  store %genome %10, %genome* %this
  %v1weight57 = extractvalue %genome %10, 17
  %return58 = call i64 @"neg@II"(i64 1)
  %return59 = call double @"getcomp@F[FI"(double* %v1weight57, i64 %return58)
  %return60 = fcmp one double %return59, 0.000000e+00
  %v1type = extractvalue %genome %10, 3
  br i1 %return60, label %true62, label %false

true62:                                           ; preds = %end37
  %return66 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @23, i64 0, i64 0), i8* %return10)
  %return67 = call i8* @"chs@SS"(i8* %return66)
  %return68 = call i64 @"atoi@IS"(i8* %return67)
  %output69 = call i64* @"append@[II"(i64* %v1type, i64 %return68)
  %tmp70 = load %genome* %this
  %11 = insertvalue %genome %tmp70, i64* %output69, 3
  store %genome %11, %genome* %this
  br label %end63

false:                                            ; preds = %end37
  %output74 = call i64* @"resize@[II"(i64* %v1type, i64 %return16)
  %12 = insertvalue %genome %10, i64* %output74, 3
  store %genome %12, %genome* %this
  br label %end63

end63:                                            ; preds = %false, %true62
  %this76 = load %genome* %this
  %v2weight = extractvalue %genome %this76, 18
  %return78 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @24, i64 0, i64 0), i8* %return10)
  %return79 = call double @"chf@FS"(i8* %return78)
  %output80 = call double* @"append@[FF"(double* %v2weight, double %return79)
  %tmp81 = load %genome* %this
  %13 = insertvalue %genome %tmp81, double* %output80, 18
  store %genome %13, %genome* %this
  %v2weight83 = extractvalue %genome %13, 18
  %return85 = call double @"getcomp@F[FI"(double* %v2weight83, i64 %return58)
  %return86 = fcmp one double %return85, 0.000000e+00
  %v2type = extractvalue %genome %13, 4
  br i1 %return86, label %true88, label %false89

true88:                                           ; preds = %end63
  %return93 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @25, i64 0, i64 0), i8* %return10)
  %return94 = call i8* @"chs@SS"(i8* %return93)
  %return95 = call i64 @"atoi@IS"(i8* %return94)
  %output96 = call i64* @"append@[II"(i64* %v2type, i64 %return95)
  %tmp97 = load %genome* %this
  %14 = insertvalue %genome %tmp97, i64* %output96, 4
  store %genome %14, %genome* %this
  br label %end90

false89:                                          ; preds = %end63
  %output101 = call i64* @"resize@[II"(i64* %v2type, i64 %return16)
  %15 = insertvalue %genome %13, i64* %output101, 4
  store %genome %15, %genome* %this
  br label %end90

end90:                                            ; preds = %false89, %true88
  %this103 = load %genome* %this
  %v3weight = extractvalue %genome %this103, 19
  %return105 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @26, i64 0, i64 0), i8* %return10)
  %return106 = call double @"chf@FS"(i8* %return105)
  %output107 = call double* @"append@[FF"(double* %v3weight, double %return106)
  %tmp108 = load %genome* %this
  %16 = insertvalue %genome %tmp108, double* %output107, 19
  store %genome %16, %genome* %this
  %v3weight110 = extractvalue %genome %16, 19
  %return112 = call double @"getcomp@F[FI"(double* %v3weight110, i64 %return58)
  %return113 = fcmp one double %return112, 0.000000e+00
  %v3type = extractvalue %genome %16, 5
  br i1 %return113, label %true115, label %false116

true115:                                          ; preds = %end90
  %return120 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @27, i64 0, i64 0), i8* %return10)
  %return121 = call i8* @"chs@SS"(i8* %return120)
  %return122 = call i64 @"atoi@IS"(i8* %return121)
  %output123 = call i64* @"append@[II"(i64* %v3type, i64 %return122)
  %tmp124 = load %genome* %this
  %17 = insertvalue %genome %tmp124, i64* %output123, 5
  store %genome %17, %genome* %this
  br label %end117

false116:                                         ; preds = %end90
  %output128 = call i64* @"resize@[II"(i64* %v3type, i64 %return16)
  %18 = insertvalue %genome %16, i64* %output128, 5
  store %genome %18, %genome* %this
  br label %end117

end117:                                           ; preds = %false116, %true115
  %this130 = load %genome* %this
  %v4weight = extractvalue %genome %this130, 20
  %return132 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([13 x i8]* @28, i64 0, i64 0), i8* %return10)
  %return133 = call double @"chf@FS"(i8* %return132)
  %output134 = call double* @"append@[FF"(double* %v4weight, double %return133)
  %tmp135 = load %genome* %this
  %19 = insertvalue %genome %tmp135, double* %output134, 20
  store %genome %19, %genome* %this
  %v4weight137 = extractvalue %genome %19, 20
  %return139 = call double @"getcomp@F[FI"(double* %v4weight137, i64 %return58)
  %return140 = fcmp one double %return139, 0.000000e+00
  %v4type = extractvalue %genome %19, 6
  br i1 %return140, label %true142, label %false143

true142:                                          ; preds = %end117
  %return147 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @29, i64 0, i64 0), i8* %return10)
  %return148 = call i8* @"chs@SS"(i8* %return147)
  %return149 = call i64 @"atoi@IS"(i8* %return148)
  %output150 = call i64* @"append@[II"(i64* %v4type, i64 %return149)
  %tmp151 = load %genome* %this
  %20 = insertvalue %genome %tmp151, i64* %output150, 6
  store %genome %20, %genome* %this
  br label %end144

false143:                                         ; preds = %end117
  %output155 = call i64* @"resize@[II"(i64* %v4type, i64 %return16)
  %21 = insertvalue %genome %19, i64* %output155, 6
  store %genome %21, %genome* %this
  br label %end144

end144:                                           ; preds = %false143, %true142
  %this157 = load %genome* %this
  %a = extractvalue %genome %this157, 10
  %return159 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @30, i64 0, i64 0), i8* %return10)
  %return160 = call double @"chf@FS"(i8* %return159)
  %output161 = call double* @"append@[FF"(double* %a, double %return160)
  %tmp162 = load %genome* %this
  %22 = insertvalue %genome %tmp162, double* %output161, 10
  store %genome %22, %genome* %this
  %b = extractvalue %genome %22, 11
  %return165 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @31, i64 0, i64 0), i8* %return10)
  %return166 = call double @"chf@FS"(i8* %return165)
  %output167 = call double* @"append@[FF"(double* %b, double %return166)
  %tmp168 = load %genome* %this
  %23 = insertvalue %genome %tmp168, double* %output167, 11
  store %genome %23, %genome* %this
  %d = extractvalue %genome %23, 12
  %return171 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @32, i64 0, i64 0), i8* %return10)
  %return172 = call double @"chf@FS"(i8* %return171)
  %output173 = call double* @"append@[FF"(double* %d, double %return172)
  %tmp174 = load %genome* %this
  %24 = insertvalue %genome %tmp174, double* %output173, 12
  store %genome %24, %genome* %this
  %e = extractvalue %genome %24, 13
  %return177 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @33, i64 0, i64 0), i8* %return10)
  %return178 = call double @"chf@FS"(i8* %return177)
  %output179 = call double* @"append@[FF"(double* %e, double %return178)
  %tmp180 = load %genome* %this
  %25 = insertvalue %genome %tmp180, double* %output179, 13
  store %genome %25, %genome* %this
  %f = extractvalue %genome %25, 14
  %return183 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @34, i64 0, i64 0), i8* %return10)
  %return184 = call double @"chf@FS"(i8* %return183)
  %output185 = call double* @"append@[FF"(double* %f, double %return184)
  %tmp186 = load %genome* %this
  %26 = insertvalue %genome %tmp186, double* %output185, 14
  store %genome %26, %genome* %this
  %h = extractvalue %genome %26, 15
  %return189 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8]* @35, i64 0, i64 0), i8* %return10)
  %return190 = call double @"chf@FS"(i8* %return189)
  %output191 = call double* @"append@[FF"(double* %h, double %return190)
  %tmp192 = load %genome* %this
  %27 = insertvalue %genome %tmp192, double* %output191, 15
  store %genome %27, %genome* %this
  %POSTL = extractvalue %genome %27, 8
  %return195 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([11 x i8]* @36, i64 0, i64 0), i8* %return10)
  %return196 = call i64 @"chi@IS"(i8* %return195)
  %output197 = call i64* @"append@[II"(i64* %POSTL, i64 %return196)
  %tmp198 = load %genome* %this
  %28 = insertvalue %genome %tmp198, i64* %output197, 8
  store %genome %28, %genome* %this
  %POSTL200 = extractvalue %genome %28, 8
  %return202 = call i64 @"getcomp@I[II"(i64* %POSTL200, i64 %return58)
  %29 = icmp ne i64 %return202, 0
  %ap = extractvalue %genome %28, 22
  br i1 %29, label %true203, label %false204

true203:                                          ; preds = %end144
  %return208 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([6 x i8]* @30, i64 0, i64 0), i8* %return10, i8* getelementptr inbounds ([3 x i8]* @37, i64 0, i64 0))
  %return209 = call double @"chf@FS"(i8* %return208)
  %output210 = call double* @"append@[FF"(double* %ap, double %return209)
  %tmp211 = load %genome* %this
  %30 = insertvalue %genome %tmp211, double* %output210, 22
  store %genome %30, %genome* %this
  %bp = extractvalue %genome %30, 23
  %return214 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([6 x i8]* @31, i64 0, i64 0), i8* %return10, i8* getelementptr inbounds ([3 x i8]* @37, i64 0, i64 0))
  %return215 = call double @"chf@FS"(i8* %return214)
  %output216 = call double* @"append@[FF"(double* %bp, double %return215)
  %tmp217 = load %genome* %this
  %31 = insertvalue %genome %tmp217, double* %output216, 23
  store %genome %31, %genome* %this
  %dp = extractvalue %genome %31, 24
  %return220 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([6 x i8]* @32, i64 0, i64 0), i8* %return10, i8* getelementptr inbounds ([3 x i8]* @37, i64 0, i64 0))
  %return221 = call double @"chf@FS"(i8* %return220)
  %output222 = call double* @"append@[FF"(double* %dp, double %return221)
  %tmp223 = load %genome* %this
  %32 = insertvalue %genome %tmp223, double* %output222, 24
  store %genome %32, %genome* %this
  %ep = extractvalue %genome %32, 25
  %return226 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([6 x i8]* @33, i64 0, i64 0), i8* %return10, i8* getelementptr inbounds ([3 x i8]* @37, i64 0, i64 0))
  %return227 = call double @"chf@FS"(i8* %return226)
  %output228 = call double* @"append@[FF"(double* %ep, double %return227)
  %tmp229 = load %genome* %this
  %33 = insertvalue %genome %tmp229, double* %output228, 25
  store %genome %33, %genome* %this
  %fp = extractvalue %genome %33, 26
  %return232 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([6 x i8]* @34, i64 0, i64 0), i8* %return10, i8* getelementptr inbounds ([3 x i8]* @37, i64 0, i64 0))
  %return233 = call double @"chf@FS"(i8* %return232)
  %output234 = call double* @"append@[FF"(double* %fp, double %return233)
  %tmp235 = load %genome* %this
  %34 = insertvalue %genome %tmp235, double* %output234, 26
  store %genome %34, %genome* %this
  %hp = extractvalue %genome %34, 27
  %return238 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([6 x i8]* @35, i64 0, i64 0), i8* %return10, i8* getelementptr inbounds ([3 x i8]* @37, i64 0, i64 0))
  %return239 = call double @"chf@FS"(i8* %return238)
  %output240 = call double* @"append@[FF"(double* %hp, double %return239)
  %tmp241 = load %genome* %this
  %35 = insertvalue %genome %tmp241, double* %output240, 27
  store %genome %35, %genome* %this
  br label %iter

false204:                                         ; preds = %end144
  %output245 = call double* @"resize@[FI"(double* %ap, i64 %return16)
  %36 = insertvalue %genome %28, double* %output245, 22
  %bp248 = extractvalue %genome %36, 23
  %output250 = call double* @"resize@[FI"(double* %bp248, i64 %return16)
  %37 = insertvalue %genome %36, double* %output250, 23
  %dp253 = extractvalue %genome %37, 24
  %output255 = call double* @"resize@[FI"(double* %dp253, i64 %return16)
  %38 = insertvalue %genome %37, double* %output255, 24
  %ep258 = extractvalue %genome %38, 25
  %output260 = call double* @"resize@[FI"(double* %ep258, i64 %return16)
  %39 = insertvalue %genome %38, double* %output260, 25
  store %genome %39, %genome* %this
  %this262 = load %genome* %this
  %fp263 = extractvalue %genome %this262, 26
  %output265 = call double* @"resize@[FI"(double* %fp263, i64 %return16)
  %40 = insertvalue %genome %this262, double* %output265, 26
  %hp268 = extractvalue %genome %40, 27
  %output270 = call double* @"resize@[FI"(double* %hp268, i64 %return16)
  %41 = insertvalue %genome %40, double* %output270, 27
  store %genome %41, %genome* %this
  br label %iter

true276:                                          ; preds = %end
  %return278 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([7 x i8]* @38, i64 0, i64 0))
  %tmp279 = load %genome* %this
  %42 = insertvalue %genome %tmp279, <2 x double> %return278, 44
  %return280 = call double @"chf@FS"(i8* getelementptr inbounds ([7 x i8]* @39, i64 0, i64 0))
  %43 = insertvalue %genome %42, double %return280, 28
  %return282 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([7 x i8]* @40, i64 0, i64 0))
  %44 = insertvalue %genome %43, <2 x double> %return282, 45
  store %genome %44, %genome* %this
  br label %end277

end277:                                           ; preds = %true276, %end
  %SYS284 = load %genomeSYS* %SYS
  %FF = extractvalue %genomeSYS %SYS284, 3
  %45 = icmp ne i64 %FF, 0
  br i1 %45, label %true285, label %end286

true285:                                          ; preds = %end277
  %return287 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8]* @41, i64 0, i64 0))
  %tmp288 = load %genome* %this
  %46 = insertvalue %genome %tmp288, double %return287, 29
  store %genome %46, %genome* %this
  %ffv1weight = extractvalue %genome %46, 29
  %return290 = fcmp one double %ffv1weight, 0.000000e+00
  br i1 %return290, label %true292, label %end293

end286:                                           ; preds = %end311, %true327, %end277
  ret void

true292:                                          ; preds = %true285
  %return294 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @42, i64 0, i64 0))
  %47 = insertvalue %genome %46, i64 %return294, 0
  store %genome %47, %genome* %this
  br label %end293

end293:                                           ; preds = %true292, %true285
  %return296 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8]* @43, i64 0, i64 0))
  %tmp297 = load %genome* %this
  %48 = insertvalue %genome %tmp297, double %return296, 30
  store %genome %48, %genome* %this
  %ffv2weight = extractvalue %genome %48, 30
  %return299 = fcmp one double %ffv2weight, 0.000000e+00
  br i1 %return299, label %true301, label %end302

true301:                                          ; preds = %end293
  %return303 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @44, i64 0, i64 0))
  %49 = insertvalue %genome %48, i64 %return303, 1
  store %genome %49, %genome* %this
  br label %end302

end302:                                           ; preds = %true301, %end293
  %return305 = call double @"chf@FS"(i8* getelementptr inbounds ([14 x i8]* @45, i64 0, i64 0))
  %tmp306 = load %genome* %this
  %50 = insertvalue %genome %tmp306, double %return305, 31
  store %genome %50, %genome* %this
  %ffv3weight = extractvalue %genome %50, 31
  %return308 = fcmp one double %ffv3weight, 0.000000e+00
  br i1 %return308, label %true310, label %end311

true310:                                          ; preds = %end302
  %return312 = call i64 @"chi@IS"(i8* getelementptr inbounds ([12 x i8]* @46, i64 0, i64 0))
  %51 = insertvalue %genome %50, i64 %return312, 2
  store %genome %51, %genome* %this
  br label %end311

end311:                                           ; preds = %true310, %end302
  %return314 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8]* @47, i64 0, i64 0))
  %tmp315 = load %genome* %this
  %52 = insertvalue %genome %tmp315, double %return314, 32
  %return316 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8]* @48, i64 0, i64 0))
  %53 = insertvalue %genome %52, double %return316, 33
  %return318 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8]* @49, i64 0, i64 0))
  %54 = insertvalue %genome %53, double %return318, 34
  %return320 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8]* @50, i64 0, i64 0))
  %55 = insertvalue %genome %54, double %return320, 35
  store %genome %55, %genome* %this
  %return322 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8]* @51, i64 0, i64 0))
  %tmp323 = load %genome* %this
  %56 = insertvalue %genome %tmp323, double %return322, 36
  %return324 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8]* @52, i64 0, i64 0))
  %57 = insertvalue %genome %56, double %return324, 37
  store %genome %57, %genome* %this
  %SYS326 = load %genomeSYS* %SYS
  %POSTF = extractvalue %genomeSYS %SYS326, 2
  %58 = icmp ne i64 %POSTF, 0
  br i1 %58, label %true327, label %end286

true327:                                          ; preds = %end311
  %return329 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @53, i64 0, i64 0))
  %59 = insertvalue %genome %57, double %return329, 38
  %return331 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @54, i64 0, i64 0))
  %60 = insertvalue %genome %59, double %return331, 39
  %return333 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @55, i64 0, i64 0))
  %61 = insertvalue %genome %60, double %return333, 40
  %return335 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @56, i64 0, i64 0))
  %62 = insertvalue %genome %61, double %return335, 41
  store %genome %62, %genome* %this
  %return337 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @57, i64 0, i64 0))
  %tmp338 = load %genome* %this
  %63 = insertvalue %genome %tmp338, double %return337, 42
  %return339 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @58, i64 0, i64 0))
  %64 = insertvalue %genome %63, double %return339, 43
  store %genome %64, %genome* %this
  br label %end286
}

declare i64 @"lt@III"(i64, i64) nounwind readnone

declare i64 @"getcomp@I[II"(i64*, i64) nounwind readnone

declare i64 @"not@II"(i64) nounwind readnone

declare i8* @"itoa@SI"(i64) nounwind readnone

declare i8** @"append@[SS"(i8**, i8*) nounwind

declare i64 @"len@I[S"(i8**) nounwind readnone

declare i8* @"concat@SSS"(i8*, i8*) nounwind readnone

declare double @"chf@FS"(i8*) nounwind readnone

declare double* @"append@[FF"(double*, double) nounwind

declare <3 x double> @"chv@VS"(i8*) nounwind readnone

declare <3 x double>* @"append@[VV"(<3 x double>*, <3 x double>) nounwind

declare i64* @"append@[II"(i64*, i64) nounwind

declare i64 @"neg@II"(i64) nounwind readnone

declare double @"getcomp@F[FI"(double*, i64) nounwind readnone

declare i8* @"chs@SS"(i8*) nounwind readnone

declare i64 @"atoi@IS"(i8*) nounwind readnone

declare i64* @"resize@[II"(i64*, i64) nounwind readnone

declare i8* @"concat@SSS:S"(i8*, i8*, i8*) nounwind readnone

declare double* @"resize@[FI"(double*, i64) nounwind readnone

declare <2 x double> @"chu@US"(i8*) nounwind readnone

define private %genome @"genome@Z6genomeM48N8ffv1typeIN8ffv2typeIN8ffv3typeIN6v1type[IN6v2type[IN6v3type[IN6v4type[IN13cvar_override[IN5POSTL[IN2IW[FN1a[FN1b[FN1d[FN1e[FN1f[FN1h[FN7vpscale[FN8v1weight[FN8v2weight[FN8v3weight[FN8v4weight[FN8PBWEIGHT[FN2ap[FN2bp[FN2dp[FN2ep[FN2fp[FN2hp[FN3grtFN10ffv1weightFN10ffv2weightFN10ffv3weightFN2faFN2fbFN2fdFN2feFN2ffFN2fhFN3fa2FN3fb2FN3fd2FN3fe2FN3ff2FN3fh2FN3gtrUN3gscUN4vcol[VN4sIDX[SIII[I[I[I[I[I[I[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[FFFFFFFFFFFFFFFFFUU[V[S"(i64* %ffv1type, i64* %ffv2type, i64* %ffv3type, i64** %v1type, i64** %v2type, i64** %v3type, i64** %v4type, i64** %cvar_override, i64** %POSTL, double** %IW, double** %a, double** %b, double** %d, double** %e, double** %f, double** %h, double** %vpscale, double** %v1weight, double** %v2weight, double** %v3weight, double** %v4weight, double** %PBWEIGHT, double** %ap, double** %bp, double** %dp, double** %ep, double** %fp, double** %hp, double* %grt, double* %ffv1weight, double* %ffv2weight, double* %ffv3weight, double* %fa, double* %fb, double* %fd, double* %fe, double* %ff, double* %fh, double* %fa2, double* %fb2, double* %fd2, double* %fe2, double* %ff2, double* %fh2, <2 x double>* %gtr, <2 x double>* %gsc, <3 x double>** %vcol, i8*** %sIDX) nounwind alwaysinline {
__llvm_entry:
  %ffv1type1 = load i64* %ffv1type
  %0 = insertvalue %genome undef, i64 %ffv1type1, 0
  %ffv2type2 = load i64* %ffv2type
  %1 = insertvalue %genome %0, i64 %ffv2type2, 1
  %ffv3type4 = load i64* %ffv3type
  %2 = insertvalue %genome %1, i64 %ffv3type4, 2
  %v1type6 = load i64** %v1type
  %3 = insertvalue %genome %2, i64* %v1type6, 3
  %v2type8 = load i64** %v2type
  %4 = insertvalue %genome %3, i64* %v2type8, 4
  %v3type10 = load i64** %v3type
  %5 = insertvalue %genome %4, i64* %v3type10, 5
  %v4type12 = load i64** %v4type
  %6 = insertvalue %genome %5, i64* %v4type12, 6
  %cvar_override14 = load i64** %cvar_override
  %7 = insertvalue %genome %6, i64* %cvar_override14, 7
  %POSTL16 = load i64** %POSTL
  %8 = insertvalue %genome %7, i64* %POSTL16, 8
  %IW18 = load double** %IW
  %9 = insertvalue %genome %8, double* %IW18, 9
  %a20 = load double** %a
  %10 = insertvalue %genome %9, double* %a20, 10
  %b22 = load double** %b
  %11 = insertvalue %genome %10, double* %b22, 11
  %d24 = load double** %d
  %12 = insertvalue %genome %11, double* %d24, 12
  %e26 = load double** %e
  %13 = insertvalue %genome %12, double* %e26, 13
  %f28 = load double** %f
  %14 = insertvalue %genome %13, double* %f28, 14
  %h30 = load double** %h
  %15 = insertvalue %genome %14, double* %h30, 15
  %vpscale32 = load double** %vpscale
  %16 = insertvalue %genome %15, double* %vpscale32, 16
  %v1weight34 = load double** %v1weight
  %17 = insertvalue %genome %16, double* %v1weight34, 17
  %v2weight36 = load double** %v2weight
  %18 = insertvalue %genome %17, double* %v2weight36, 18
  %v3weight38 = load double** %v3weight
  %19 = insertvalue %genome %18, double* %v3weight38, 19
  %v4weight40 = load double** %v4weight
  %20 = insertvalue %genome %19, double* %v4weight40, 20
  %PBWEIGHT42 = load double** %PBWEIGHT
  %21 = insertvalue %genome %20, double* %PBWEIGHT42, 21
  %ap44 = load double** %ap
  %22 = insertvalue %genome %21, double* %ap44, 22
  %bp46 = load double** %bp
  %23 = insertvalue %genome %22, double* %bp46, 23
  %dp48 = load double** %dp
  %24 = insertvalue %genome %23, double* %dp48, 24
  %ep50 = load double** %ep
  %25 = insertvalue %genome %24, double* %ep50, 25
  %fp52 = load double** %fp
  %26 = insertvalue %genome %25, double* %fp52, 26
  %hp54 = load double** %hp
  %27 = insertvalue %genome %26, double* %hp54, 27
  %grt56 = load double* %grt
  %28 = insertvalue %genome %27, double %grt56, 28
  %ffv1weight58 = load double* %ffv1weight
  %29 = insertvalue %genome %28, double %ffv1weight58, 29
  %ffv2weight60 = load double* %ffv2weight
  %30 = insertvalue %genome %29, double %ffv2weight60, 30
  %ffv3weight62 = load double* %ffv3weight
  %31 = insertvalue %genome %30, double %ffv3weight62, 31
  %fa64 = load double* %fa
  %32 = insertvalue %genome %31, double %fa64, 32
  %fb66 = load double* %fb
  %33 = insertvalue %genome %32, double %fb66, 33
  %fd68 = load double* %fd
  %34 = insertvalue %genome %33, double %fd68, 34
  %fe70 = load double* %fe
  %35 = insertvalue %genome %34, double %fe70, 35
  %ff72 = load double* %ff
  %36 = insertvalue %genome %35, double %ff72, 36
  %fh74 = load double* %fh
  %37 = insertvalue %genome %36, double %fh74, 37
  %fa276 = load double* %fa2
  %38 = insertvalue %genome %37, double %fa276, 38
  %fb278 = load double* %fb2
  %39 = insertvalue %genome %38, double %fb278, 39
  %fd280 = load double* %fd2
  %40 = insertvalue %genome %39, double %fd280, 40
  %fe282 = load double* %fe2
  %41 = insertvalue %genome %40, double %fe282, 41
  %ff284 = load double* %ff2
  %42 = insertvalue %genome %41, double %ff284, 42
  %fh286 = load double* %fh2
  %43 = insertvalue %genome %42, double %fh286, 43
  %gtr88 = load <2 x double>* %gtr
  %44 = insertvalue %genome %43, <2 x double> %gtr88, 44
  %gsc90 = load <2 x double>* %gsc
  %45 = insertvalue %genome %44, <2 x double> %gsc90, 45
  %vcol92 = load <3 x double>** %vcol
  %46 = insertvalue %genome %45, <3 x double>* %vcol92, 46
  %sIDX94 = load i8*** %sIDX
  %47 = insertvalue %genome %46, i8** %sIDX94, 47
  ret %genome %47
}

define private %genome @"genome@Z6genomeM48N8ffv1typeIN8ffv2typeIN8ffv3typeIN6v1type[IN6v2type[IN6v3type[IN6v4type[IN13cvar_override[IN5POSTL[IN2IW[FN1a[FN1b[FN1d[FN1e[FN1f[FN1h[FN7vpscale[FN8v1weight[FN8v2weight[FN8v3weight[FN8v4weight[FN8PBWEIGHT[FN2ap[FN2bp[FN2dp[FN2ep[FN2fp[FN2hp[FN3grtFN10ffv1weightFN10ffv2weightFN10ffv3weightFN2faFN2fbFN2fdFN2feFN2ffFN2fhFN3fa2FN3fb2FN3fd2FN3fe2FN3ff2FN3fh2FN3gtrUN3gscUN4vcol[VN4sIDX[S"() nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca i64*
  %3 = alloca i64*
  %4 = alloca i64*
  %5 = alloca i64*
  %6 = alloca i64*
  %7 = alloca i64*
  %8 = alloca double*
  %9 = alloca double*
  %10 = alloca double*
  %11 = alloca double*
  %12 = alloca double*
  %13 = alloca double*
  %14 = alloca double*
  %15 = alloca double*
  %16 = alloca double*
  %17 = alloca double*
  %18 = alloca double*
  %19 = alloca double*
  %20 = alloca double*
  %21 = alloca double*
  %22 = alloca double*
  %23 = alloca double*
  %24 = alloca double*
  %25 = alloca double*
  %26 = alloca double*
  %27 = alloca double
  %28 = alloca double
  %29 = alloca double
  %30 = alloca double
  %31 = alloca double
  %32 = alloca double
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca double
  %38 = alloca double
  %39 = alloca double
  %40 = alloca double
  %41 = alloca double
  %42 = alloca double
  %43 = alloca <2 x double>
  %44 = alloca <2 x double>
  %45 = alloca <3 x double>*
  %46 = alloca i8**
  %47 = alloca i64
  store i64 0, i64* %47
  store i64 0, i64* %0
  store i64 0, i64* %1
  store i64* getelementptr inbounds ([0 x i64]* @59, i64 0, i64 0), i64** %2
  store i64* getelementptr inbounds ([0 x i64]* @59, i64 0, i64 0), i64** %3
  store i64* getelementptr inbounds ([0 x i64]* @59, i64 0, i64 0), i64** %4
  store i64* getelementptr inbounds ([0 x i64]* @59, i64 0, i64 0), i64** %5
  store i64* getelementptr inbounds ([0 x i64]* @59, i64 0, i64 0), i64** %6
  store i64* getelementptr inbounds ([0 x i64]* @59, i64 0, i64 0), i64** %7
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %8
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %9
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %10
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %11
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %12
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %13
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %14
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %15
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %16
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %17
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %18
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %19
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %20
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %21
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %22
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %23
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %24
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %25
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %26
  store double 0.000000e+00, double* %27
  store double 0.000000e+00, double* %28
  store double 0.000000e+00, double* %29
  store double 0.000000e+00, double* %30
  store double 0.000000e+00, double* %31
  store double 0.000000e+00, double* %32
  store double 0.000000e+00, double* %33
  store double 0.000000e+00, double* %34
  store double 0.000000e+00, double* %35
  store double 0.000000e+00, double* %36
  store double 0.000000e+00, double* %37
  store double 0.000000e+00, double* %38
  store double 0.000000e+00, double* %39
  store double 0.000000e+00, double* %40
  store double 0.000000e+00, double* %41
  store double 0.000000e+00, double* %42
  store <2 x double> zeroinitializer, <2 x double>* %43
  store <2 x double> zeroinitializer, <2 x double>* %44
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %45
  store i8** getelementptr inbounds ([0 x i8*]* @62, i64 0, i64 0), i8*** %46
  %genome = call %genome @"genome@Z6genomeM48N8ffv1typeIN8ffv2typeIN8ffv3typeIN6v1type[IN6v2type[IN6v3type[IN6v4type[IN13cvar_override[IN5POSTL[IN2IW[FN1a[FN1b[FN1d[FN1e[FN1f[FN1h[FN7vpscale[FN8v1weight[FN8v2weight[FN8v3weight[FN8v4weight[FN8PBWEIGHT[FN2ap[FN2bp[FN2dp[FN2ep[FN2fp[FN2hp[FN3grtFN10ffv1weightFN10ffv2weightFN10ffv3weightFN2faFN2fbFN2fdFN2feFN2ffFN2fhFN3fa2FN3fb2FN3fd2FN3fe2FN3ff2FN3fh2FN3gtrUN3gscUN4vcol[VN4sIDX[SIII[I[I[I[I[I[I[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[F[FFFFFFFFFFFFFFFFFUU[V[S"(i64* %47, i64* %0, i64* %1, i64** %2, i64** %3, i64** %4, i64** %5, i64** %6, i64** %7, double** %8, double** %9, double** %10, double** %11, double** %12, double** %13, double** %14, double** %15, double** %16, double** %17, double** %18, double** %19, double** %20, double** %21, double** %22, double** %23, double** %24, double** %25, double** %26, double* %27, double* %28, double* %29, double* %30, double* %31, double* %32, double* %33, double* %34, double* %35, double* %36, double* %37, double* %38, double* %39, double* %40, double* %41, double* %42, <2 x double>* %43, <2 x double>* %44, <3 x double>** %45, i8*** %46)
  ret %genome %genome
}

define private void @"genomeParametricsBuild@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PS[S[I"(%genomeParametrics* %this, i8** %MODE, i8*** %sIDX, i64** %GEMTYPE) nounwind alwaysinline {
__llvm_entry:
  %GEMTYPE1 = load i64** %GEMTYPE
  %return = call i64 @"len@I[I"(i64* %GEMTYPE1)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %this3 = load %genomeParametrics* %this
  %rings2_val = extractvalue %genomeParametrics %this3, 0
  %output = call double* @"resize@[FI"(double* %rings2_val, i64 %return)
  %1 = insertvalue %genomeParametrics %this3, double* %output, 0
  %rings2_val6 = extractvalue %genomeParametrics %1, 0
  %2 = insertvalue %genomeParametrics %1, double* %rings2_val6, 5
  %3 = insertvalue %genomeParametrics %2, double* %rings2_val6, 4
  %4 = insertvalue %genomeParametrics %3, double* %rings2_val6, 3
  store %genomeParametrics %4, %genomeParametrics* %this
  %tmp10 = load %genomeParametrics* %this
  %5 = insertvalue %genomeParametrics %tmp10, double* %rings2_val6, 2
  %6 = insertvalue %genomeParametrics %5, double* %rings2_val6, 1
  %blob = extractvalue %genomeParametrics %6, 6
  %output14 = call <3 x double>* @"resize@[VI"(<3 x double>* %blob, i64 %return)
  %7 = insertvalue %genomeParametrics %6, <3 x double>* %output14, 6
  %blob17 = extractvalue %genomeParametrics %7, 6
  %8 = insertvalue %genomeParametrics %7, <3 x double>* %blob17, 11
  store %genomeParametrics %8, %genomeParametrics* %this
  %tmp19 = load %genomeParametrics* %this
  %9 = insertvalue %genomeParametrics %tmp19, <3 x double>* %blob17, 10
  %10 = insertvalue %genomeParametrics %9, <3 x double>* %blob17, 9
  %11 = insertvalue %genomeParametrics %10, <3 x double>* %blob17, 8
  %12 = insertvalue %genomeParametrics %11, <3 x double>* %blob17, 7
  store %genomeParametrics %12, %genomeParametrics* %this
  %this23 = load %genomeParametrics* %this
  %curl_c = extractvalue %genomeParametrics %this23, 13
  %output25 = call <2 x double>* @"resize@[UI"(<2 x double>* %curl_c, i64 %return)
  %13 = insertvalue %genomeParametrics %this23, <2 x double>* %output25, 13
  %curl_c28 = extractvalue %genomeParametrics %13, 13
  %14 = insertvalue %genomeParametrics %13, <2 x double>* %curl_c28, 41
  %15 = insertvalue %genomeParametrics %14, <2 x double>* %curl_c28, 40
  %16 = insertvalue %genomeParametrics %15, <2 x double>* %curl_c28, 39
  store %genomeParametrics %16, %genomeParametrics* %this
  %tmp32 = load %genomeParametrics* %this
  %17 = insertvalue %genomeParametrics %tmp32, <2 x double>* %curl_c28, 38
  %18 = insertvalue %genomeParametrics %17, <2 x double>* %curl_c28, 37
  %19 = insertvalue %genomeParametrics %18, <2 x double>* %curl_c28, 36
  %20 = insertvalue %genomeParametrics %19, <2 x double>* %curl_c28, 35
  store %genomeParametrics %20, %genomeParametrics* %this
  %tmp36 = load %genomeParametrics* %this
  %21 = insertvalue %genomeParametrics %tmp36, <2 x double>* %curl_c28, 34
  %22 = insertvalue %genomeParametrics %21, <2 x double>* %curl_c28, 33
  %23 = insertvalue %genomeParametrics %22, <2 x double>* %curl_c28, 32
  %24 = insertvalue %genomeParametrics %23, <2 x double>* %curl_c28, 31
  store %genomeParametrics %24, %genomeParametrics* %this
  %tmp40 = load %genomeParametrics* %this
  %25 = insertvalue %genomeParametrics %tmp40, <2 x double>* %curl_c28, 30
  %26 = insertvalue %genomeParametrics %25, <2 x double>* %curl_c28, 29
  %27 = insertvalue %genomeParametrics %26, <2 x double>* %curl_c28, 28
  %28 = insertvalue %genomeParametrics %27, <2 x double>* %curl_c28, 27
  store %genomeParametrics %28, %genomeParametrics* %this
  %tmp44 = load %genomeParametrics* %this
  %29 = insertvalue %genomeParametrics %tmp44, <2 x double>* %curl_c28, 26
  %30 = insertvalue %genomeParametrics %29, <2 x double>* %curl_c28, 25
  %31 = insertvalue %genomeParametrics %30, <2 x double>* %curl_c28, 24
  %32 = insertvalue %genomeParametrics %31, <2 x double>* %curl_c28, 23
  store %genomeParametrics %32, %genomeParametrics* %this
  %tmp48 = load %genomeParametrics* %this
  %33 = insertvalue %genomeParametrics %tmp48, <2 x double>* %curl_c28, 22
  %34 = insertvalue %genomeParametrics %33, <2 x double>* %curl_c28, 21
  %35 = insertvalue %genomeParametrics %34, <2 x double>* %curl_c28, 20
  %36 = insertvalue %genomeParametrics %35, <2 x double>* %curl_c28, 19
  store %genomeParametrics %36, %genomeParametrics* %this
  %tmp52 = load %genomeParametrics* %this
  %37 = insertvalue %genomeParametrics %tmp52, <2 x double>* %curl_c28, 18
  %38 = insertvalue %genomeParametrics %37, <2 x double>* %curl_c28, 17
  %39 = insertvalue %genomeParametrics %38, <2 x double>* %curl_c28, 16
  %40 = insertvalue %genomeParametrics %39, <2 x double>* %curl_c28, 15
  store %genomeParametrics %40, %genomeParametrics* %this
  %tmp56 = load %genomeParametrics* %this
  %41 = insertvalue %genomeParametrics %tmp56, <2 x double>* %curl_c28, 14
  %ngon = extractvalue %genomeParametrics %41, 42
  %output59 = call <4 x double>* @"resize@[PI"(<4 x double>* %ngon, i64 %return)
  %42 = insertvalue %genomeParametrics %41, <4 x double>* %output59, 42
  %ngon62 = extractvalue %genomeParametrics %42, 42
  %43 = insertvalue %genomeParametrics %42, <4 x double>* %ngon62, 50
  %44 = insertvalue %genomeParametrics %43, <4 x double>* %ngon62, 49
  store %genomeParametrics %44, %genomeParametrics* %this
  %tmp65 = load %genomeParametrics* %this
  %45 = insertvalue %genomeParametrics %tmp65, <4 x double>* %ngon62, 48
  %46 = insertvalue %genomeParametrics %45, <4 x double>* %ngon62, 47
  %47 = insertvalue %genomeParametrics %46, <4 x double>* %ngon62, 46
  %48 = insertvalue %genomeParametrics %47, <4 x double>* %ngon62, 45
  store %genomeParametrics %48, %genomeParametrics* %this
  %tmp69 = load %genomeParametrics* %this
  %49 = insertvalue %genomeParametrics %tmp69, <4 x double>* %ngon62, 44
  %50 = insertvalue %genomeParametrics %49, <4 x double>* %ngon62, 43
  store %genomeParametrics %50, %genomeParametrics* %this
  br label %cond

end:                                              ; preds = %cond, %__llvm_entry
  ret void

cond:                                             ; preds = %iter, %true
  %i.0 = phi i64 [ 0, %true ], [ %output816, %iter ]
  %return73 = call i64 @"lt@III"(i64 %i.0, i64 %return)
  %51 = icmp ne i64 %return73, 0
  br i1 %51, label %body, label %end

body:                                             ; preds = %cond
  %sIDX75 = load i8*** %sIDX
  %return77 = call i8* @"getcomp@S[SI"(i8** %sIDX75, i64 %i.0)
  %GEMTYPE78 = load i64** %GEMTYPE
  %return80 = call i64 @"getcomp@I[II"(i64* %GEMTYPE78, i64 %i.0)
  %return83 = call i64 @"find@I[II"(i64* getelementptr inbounds ([21 x i64]* @63, i64 0, i64 0), i64 %return80)
  %return84 = call i64 @"ge@III"(i64 %return83, i64 0)
  %52 = icmp ne i64 %return84, 0
  br i1 %52, label %true85, label %false

iter:                                             ; preds = %false758, %false594, %false, %false389, %false215, %true782, %true757, %true742, %true717, %true692, %true677, %true662, %true637, %true622, %true608, %true593, %true578, %true563, %true548, %true533, %true508, %true483, %true468, %true453, %true428, %true403, %true388, %true373, %true358, %true343, %true328, %true313, %true298, %true273, %true258, %true243, %true229, %true214, %true199, %true184, %true169, %true154, %true139, %true124, %true109, %true94
  %output816 = add i64 %i.0, 1
  br label %cond

true85:                                           ; preds = %body
  %return88 = call i64 @"lt@III"(i64 %return80, i64 38)
  %53 = icmp ne i64 %return88, 0
  br i1 %53, label %true89, label %false90

false:                                            ; preds = %body
  %return417 = call i64 @"find@I[II"(i64* getelementptr inbounds ([20 x i64]* @64, i64 0, i64 0), i64 %return80)
  %return418 = call i64 @"ge@III"(i64 %return417, i64 0)
  %54 = icmp ne i64 %return418, 0
  br i1 %54, label %true419, label %iter

true89:                                           ; preds = %true85
  %return93 = call i64 @"eq@III"(i64 %return80, i64 27)
  %55 = icmp ne i64 %return93, 0
  br i1 %55, label %true94, label %false95

false90:                                          ; preds = %true85
  %return242 = call i64 @"eq@III"(i64 %return80, i64 38)
  %56 = icmp ne i64 %return242, 0
  br i1 %56, label %true243, label %false244

true94:                                           ; preds = %true89
  %return100 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @66, i64 0, i64 0), i8* %return77)
  %return101 = call <2 x double> @"chu@US"(i8* %return100)
  %tmp102 = load %genomeParametrics* %this
  %tmp103 = extractvalue %genomeParametrics %tmp102, 13
  %return104 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp103, <2 x double> %return101, i64 %i.0)
  %output106 = extractvalue { <2 x double>, <2 x double>* } %return104, 1
  %57 = insertvalue %genomeParametrics %tmp102, <2 x double>* %output106, 13
  store %genomeParametrics %57, %genomeParametrics* %this
  br label %iter

false95:                                          ; preds = %true89
  %return108 = call i64 @"eq@III"(i64 %return80, i64 28)
  %58 = icmp ne i64 %return108, 0
  br i1 %58, label %true109, label %false110

true109:                                          ; preds = %false95
  %return115 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @67, i64 0, i64 0), i8* %return77)
  %return116 = call <4 x double> @"chp@PS"(i8* %return115)
  %tmp117 = load %genomeParametrics* %this
  %tmp118 = extractvalue %genomeParametrics %tmp117, 42
  %return119 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp118, <4 x double> %return116, i64 %i.0)
  %output121 = extractvalue { <4 x double>, <4 x double>* } %return119, 1
  %59 = insertvalue %genomeParametrics %tmp117, <4 x double>* %output121, 42
  store %genomeParametrics %59, %genomeParametrics* %this
  br label %iter

false110:                                         ; preds = %false95
  %return123 = call i64 @"eq@III"(i64 %return80, i64 29)
  %60 = icmp ne i64 %return123, 0
  br i1 %60, label %true124, label %false125

true124:                                          ; preds = %false110
  %return130 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @68, i64 0, i64 0), i8* %return77)
  %return131 = call <4 x double> @"chp@PS"(i8* %return130)
  %tmp132 = load %genomeParametrics* %this
  %tmp133 = extractvalue %genomeParametrics %tmp132, 43
  %return134 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp133, <4 x double> %return131, i64 %i.0)
  %output136 = extractvalue { <4 x double>, <4 x double>* } %return134, 1
  %61 = insertvalue %genomeParametrics %tmp132, <4 x double>* %output136, 43
  store %genomeParametrics %61, %genomeParametrics* %this
  br label %iter

false125:                                         ; preds = %false110
  %return138 = call i64 @"eq@III"(i64 %return80, i64 30)
  %62 = icmp ne i64 %return138, 0
  br i1 %62, label %true139, label %false140

true139:                                          ; preds = %false125
  %return145 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @69, i64 0, i64 0), i8* %return77)
  %return146 = call <3 x double> @"chv@VS"(i8* %return145)
  %tmp147 = load %genomeParametrics* %this
  %tmp148 = extractvalue %genomeParametrics %tmp147, 6
  %return149 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp148, <3 x double> %return146, i64 %i.0)
  %output151 = extractvalue { <3 x double>, <3 x double>* } %return149, 1
  %63 = insertvalue %genomeParametrics %tmp147, <3 x double>* %output151, 6
  store %genomeParametrics %63, %genomeParametrics* %this
  br label %iter

false140:                                         ; preds = %false125
  %return153 = call i64 @"eq@III"(i64 %return80, i64 31)
  %64 = icmp ne i64 %return153, 0
  br i1 %64, label %true154, label %false155

true154:                                          ; preds = %false140
  %return160 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @70, i64 0, i64 0), i8* %return77)
  %return161 = call <2 x double> @"chu@US"(i8* %return160)
  %tmp162 = load %genomeParametrics* %this
  %tmp163 = extractvalue %genomeParametrics %tmp162, 32
  %return164 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp163, <2 x double> %return161, i64 %i.0)
  %output166 = extractvalue { <2 x double>, <2 x double>* } %return164, 1
  %65 = insertvalue %genomeParametrics %tmp162, <2 x double>* %output166, 32
  store %genomeParametrics %65, %genomeParametrics* %this
  br label %iter

false155:                                         ; preds = %false140
  %return168 = call i64 @"eq@III"(i64 %return80, i64 32)
  %66 = icmp ne i64 %return168, 0
  br i1 %66, label %true169, label %false170

true169:                                          ; preds = %false155
  %return175 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @71, i64 0, i64 0), i8* %return77)
  %return176 = call <2 x double> @"chu@US"(i8* %return175)
  %tmp177 = load %genomeParametrics* %this
  %tmp178 = extractvalue %genomeParametrics %tmp177, 33
  %return179 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp178, <2 x double> %return176, i64 %i.0)
  %output181 = extractvalue { <2 x double>, <2 x double>* } %return179, 1
  %67 = insertvalue %genomeParametrics %tmp177, <2 x double>* %output181, 33
  store %genomeParametrics %67, %genomeParametrics* %this
  br label %iter

false170:                                         ; preds = %false155
  %return183 = call i64 @"eq@III"(i64 %return80, i64 34)
  %68 = icmp ne i64 %return183, 0
  br i1 %68, label %true184, label %false185

true184:                                          ; preds = %false170
  %return190 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @72, i64 0, i64 0), i8* %return77)
  %return191 = call <2 x double> @"chu@US"(i8* %return190)
  %tmp192 = load %genomeParametrics* %this
  %tmp193 = extractvalue %genomeParametrics %tmp192, 15
  %return194 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp193, <2 x double> %return191, i64 %i.0)
  %output196 = extractvalue { <2 x double>, <2 x double>* } %return194, 1
  %69 = insertvalue %genomeParametrics %tmp192, <2 x double>* %output196, 15
  store %genomeParametrics %69, %genomeParametrics* %this
  br label %iter

false185:                                         ; preds = %false170
  %return198 = call i64 @"eq@III"(i64 %return80, i64 35)
  %70 = icmp ne i64 %return198, 0
  br i1 %70, label %true199, label %false200

true199:                                          ; preds = %false185
  %return205 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @73, i64 0, i64 0), i8* %return77)
  %return206 = call double @"chf@FS"(i8* %return205)
  %tmp207 = load %genomeParametrics* %this
  %tmp208 = extractvalue %genomeParametrics %tmp207, 0
  %return209 = call { double, double* } @"setcomp@F[FFI"(double* %tmp208, double %return206, i64 %i.0)
  %output211 = extractvalue { double, double* } %return209, 1
  %71 = insertvalue %genomeParametrics %tmp207, double* %output211, 0
  store %genomeParametrics %71, %genomeParametrics* %this
  br label %iter

false200:                                         ; preds = %false185
  %return213 = call i64 @"eq@III"(i64 %return80, i64 36)
  %72 = icmp ne i64 %return213, 0
  br i1 %72, label %true214, label %false215

true214:                                          ; preds = %false200
  %return220 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @74, i64 0, i64 0), i8* %return77)
  %return221 = call <2 x double> @"chu@US"(i8* %return220)
  %tmp222 = load %genomeParametrics* %this
  %tmp223 = extractvalue %genomeParametrics %tmp222, 16
  %return224 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp223, <2 x double> %return221, i64 %i.0)
  %output226 = extractvalue { <2 x double>, <2 x double>* } %return224, 1
  %73 = insertvalue %genomeParametrics %tmp222, <2 x double>* %output226, 16
  store %genomeParametrics %73, %genomeParametrics* %this
  br label %iter

false215:                                         ; preds = %false200
  %return228 = call i64 @"eq@III"(i64 %return80, i64 37)
  %74 = icmp ne i64 %return228, 0
  br i1 %74, label %true229, label %iter

true229:                                          ; preds = %false215
  %return234 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @75, i64 0, i64 0), i8* %return77)
  %return235 = call <2 x double> @"chu@US"(i8* %return234)
  %tmp236 = load %genomeParametrics* %this
  %tmp237 = extractvalue %genomeParametrics %tmp236, 34
  %return238 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp237, <2 x double> %return235, i64 %i.0)
  %output240 = extractvalue { <2 x double>, <2 x double>* } %return238, 1
  %75 = insertvalue %genomeParametrics %tmp236, <2 x double>* %output240, 34
  store %genomeParametrics %75, %genomeParametrics* %this
  br label %iter

true243:                                          ; preds = %false90
  %return249 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @76, i64 0, i64 0), i8* %return77)
  %return250 = call <3 x double> @"chv@VS"(i8* %return249)
  %tmp251 = load %genomeParametrics* %this
  %tmp252 = extractvalue %genomeParametrics %tmp251, 7
  %return253 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp252, <3 x double> %return250, i64 %i.0)
  %output255 = extractvalue { <3 x double>, <3 x double>* } %return253, 1
  %76 = insertvalue %genomeParametrics %tmp251, <3 x double>* %output255, 7
  store %genomeParametrics %76, %genomeParametrics* %this
  br label %iter

false244:                                         ; preds = %false90
  %return257 = call i64 @"eq@III"(i64 %return80, i64 47)
  %77 = icmp ne i64 %return257, 0
  br i1 %77, label %true258, label %false259

true258:                                          ; preds = %false244
  %return264 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @77, i64 0, i64 0), i8* %return77)
  %return265 = call <2 x double> @"chu@US"(i8* %return264)
  %tmp266 = load %genomeParametrics* %this
  %tmp267 = extractvalue %genomeParametrics %tmp266, 35
  %return268 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp267, <2 x double> %return265, i64 %i.0)
  %output270 = extractvalue { <2 x double>, <2 x double>* } %return268, 1
  %78 = insertvalue %genomeParametrics %tmp266, <2 x double>* %output270, 35
  store %genomeParametrics %78, %genomeParametrics* %this
  br label %iter

false259:                                         ; preds = %false244
  %return272 = call i64 @"eq@III"(i64 %return80, i64 48)
  %79 = icmp ne i64 %return272, 0
  br i1 %79, label %true273, label %false274

true273:                                          ; preds = %false259
  %return279 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @78, i64 0, i64 0), i8* %return77)
  %return280 = call <3 x double> @"chv@VS"(i8* %return279)
  %tmp281 = load %genomeParametrics* %this
  %tmp282 = extractvalue %genomeParametrics %tmp281, 8
  %return283 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp282, <3 x double> %return280, i64 %i.0)
  %output285 = extractvalue { <3 x double>, <3 x double>* } %return283, 1
  %80 = insertvalue %genomeParametrics %tmp281, <3 x double>* %output285, 8
  %return289 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8]* @79, i64 0, i64 0), i8* %return77)
  %return290 = call <3 x double> @"chv@VS"(i8* %return289)
  %tmp292 = extractvalue %genomeParametrics %80, 9
  %return293 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp292, <3 x double> %return290, i64 %i.0)
  %output295 = extractvalue { <3 x double>, <3 x double>* } %return293, 1
  %81 = insertvalue %genomeParametrics %80, <3 x double>* %output295, 9
  store %genomeParametrics %81, %genomeParametrics* %this
  br label %iter

false274:                                         ; preds = %false259
  %return297 = call i64 @"eq@III"(i64 %return80, i64 49)
  %82 = icmp ne i64 %return297, 0
  br i1 %82, label %true298, label %false299

true298:                                          ; preds = %false274
  %return304 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @80, i64 0, i64 0), i8* %return77)
  %return305 = call <2 x double> @"chu@US"(i8* %return304)
  %tmp306 = load %genomeParametrics* %this
  %tmp307 = extractvalue %genomeParametrics %tmp306, 36
  %return308 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp307, <2 x double> %return305, i64 %i.0)
  %output310 = extractvalue { <2 x double>, <2 x double>* } %return308, 1
  %83 = insertvalue %genomeParametrics %tmp306, <2 x double>* %output310, 36
  store %genomeParametrics %83, %genomeParametrics* %this
  br label %iter

false299:                                         ; preds = %false274
  %return312 = call i64 @"eq@III"(i64 %return80, i64 50)
  %84 = icmp ne i64 %return312, 0
  br i1 %84, label %true313, label %false314

true313:                                          ; preds = %false299
  %return319 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @81, i64 0, i64 0), i8* %return77)
  %return320 = call <2 x double> @"chu@US"(i8* %return319)
  %tmp321 = load %genomeParametrics* %this
  %tmp322 = extractvalue %genomeParametrics %tmp321, 37
  %return323 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp322, <2 x double> %return320, i64 %i.0)
  %output325 = extractvalue { <2 x double>, <2 x double>* } %return323, 1
  %85 = insertvalue %genomeParametrics %tmp321, <2 x double>* %output325, 37
  store %genomeParametrics %85, %genomeParametrics* %this
  br label %iter

false314:                                         ; preds = %false299
  %return327 = call i64 @"eq@III"(i64 %return80, i64 51)
  %86 = icmp ne i64 %return327, 0
  br i1 %86, label %true328, label %false329

true328:                                          ; preds = %false314
  %return334 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @82, i64 0, i64 0), i8* %return77)
  %return335 = call <2 x double> @"chu@US"(i8* %return334)
  %tmp336 = load %genomeParametrics* %this
  %tmp337 = extractvalue %genomeParametrics %tmp336, 14
  %return338 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp337, <2 x double> %return335, i64 %i.0)
  %output340 = extractvalue { <2 x double>, <2 x double>* } %return338, 1
  %87 = insertvalue %genomeParametrics %tmp336, <2 x double>* %output340, 14
  store %genomeParametrics %87, %genomeParametrics* %this
  br label %iter

false329:                                         ; preds = %false314
  %return342 = call i64 @"eq@III"(i64 %return80, i64 52)
  %88 = icmp ne i64 %return342, 0
  br i1 %88, label %true343, label %false344

true343:                                          ; preds = %false329
  %return349 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @83, i64 0, i64 0), i8* %return77)
  %return350 = call <2 x double> @"chu@US"(i8* %return349)
  %tmp351 = load %genomeParametrics* %this
  %tmp352 = extractvalue %genomeParametrics %tmp351, 17
  %return353 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp352, <2 x double> %return350, i64 %i.0)
  %output355 = extractvalue { <2 x double>, <2 x double>* } %return353, 1
  %89 = insertvalue %genomeParametrics %tmp351, <2 x double>* %output355, 17
  store %genomeParametrics %89, %genomeParametrics* %this
  br label %iter

false344:                                         ; preds = %false329
  %return357 = call i64 @"eq@III"(i64 %return80, i64 53)
  %90 = icmp ne i64 %return357, 0
  br i1 %90, label %true358, label %false359

true358:                                          ; preds = %false344
  %return364 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8]* @84, i64 0, i64 0), i8* %return77)
  %return365 = call double @"chf@FS"(i8* %return364)
  %tmp366 = load %genomeParametrics* %this
  %tmp367 = extractvalue %genomeParametrics %tmp366, 1
  %return368 = call { double, double* } @"setcomp@F[FFI"(double* %tmp367, double %return365, i64 %i.0)
  %output370 = extractvalue { double, double* } %return368, 1
  %91 = insertvalue %genomeParametrics %tmp366, double* %output370, 1
  store %genomeParametrics %91, %genomeParametrics* %this
  br label %iter

false359:                                         ; preds = %false344
  %return372 = call i64 @"eq@III"(i64 %return80, i64 56)
  %92 = icmp ne i64 %return372, 0
  br i1 %92, label %true373, label %false374

true373:                                          ; preds = %false359
  %return379 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @85, i64 0, i64 0), i8* %return77)
  %return380 = call double @"chf@FS"(i8* %return379)
  %tmp381 = load %genomeParametrics* %this
  %tmp382 = extractvalue %genomeParametrics %tmp381, 2
  %return383 = call { double, double* } @"setcomp@F[FFI"(double* %tmp382, double %return380, i64 %i.0)
  %output385 = extractvalue { double, double* } %return383, 1
  %93 = insertvalue %genomeParametrics %tmp381, double* %output385, 2
  store %genomeParametrics %93, %genomeParametrics* %this
  br label %iter

false374:                                         ; preds = %false359
  %return387 = call i64 @"eq@III"(i64 %return80, i64 57)
  %94 = icmp ne i64 %return387, 0
  br i1 %94, label %true388, label %false389

true388:                                          ; preds = %false374
  %return394 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @86, i64 0, i64 0), i8* %return77)
  %return395 = call <3 x double> @"chv@VS"(i8* %return394)
  %tmp396 = load %genomeParametrics* %this
  %tmp397 = extractvalue %genomeParametrics %tmp396, 10
  %return398 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp397, <3 x double> %return395, i64 %i.0)
  %output400 = extractvalue { <3 x double>, <3 x double>* } %return398, 1
  %95 = insertvalue %genomeParametrics %tmp396, <3 x double>* %output400, 10
  store %genomeParametrics %95, %genomeParametrics* %this
  br label %iter

false389:                                         ; preds = %false374
  %return402 = call i64 @"eq@III"(i64 %return80, i64 61)
  %96 = icmp ne i64 %return402, 0
  br i1 %96, label %true403, label %iter

true403:                                          ; preds = %false389
  %return408 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @87, i64 0, i64 0), i8* %return77)
  %return409 = call double @"chf@FS"(i8* %return408)
  %tmp410 = load %genomeParametrics* %this
  %tmp411 = extractvalue %genomeParametrics %tmp410, 3
  %return412 = call { double, double* } @"setcomp@F[FFI"(double* %tmp411, double %return409, i64 %i.0)
  %output414 = extractvalue { double, double* } %return412, 1
  %97 = insertvalue %genomeParametrics %tmp410, double* %output414, 3
  store %genomeParametrics %97, %genomeParametrics* %this
  br label %iter

true419:                                          ; preds = %false
  %return422 = call i64 @"lt@III"(i64 %return80, i64 78)
  %98 = icmp ne i64 %return422, 0
  br i1 %98, label %true423, label %false424

true423:                                          ; preds = %true419
  %return427 = call i64 @"eq@III"(i64 %return80, i64 63)
  %99 = icmp ne i64 %return427, 0
  br i1 %99, label %true428, label %false429

false424:                                         ; preds = %true419
  %return621 = call i64 @"eq@III"(i64 %return80, i64 78)
  %100 = icmp ne i64 %return621, 0
  br i1 %100, label %true622, label %false623

true428:                                          ; preds = %true423
  %return434 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8]* @88, i64 0, i64 0), i8* %return77)
  %return435 = call <2 x double> @"chu@US"(i8* %return434)
  %tmp436 = load %genomeParametrics* %this
  %tmp437 = extractvalue %genomeParametrics %tmp436, 18
  %return438 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp437, <2 x double> %return435, i64 %i.0)
  %output440 = extractvalue { <2 x double>, <2 x double>* } %return438, 1
  %101 = insertvalue %genomeParametrics %tmp436, <2 x double>* %output440, 18
  %return444 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @89, i64 0, i64 0), i8* %return77)
  %return445 = call <2 x double> @"chu@US"(i8* %return444)
  %cast = call <3 x double> @"set@VU"(<2 x double> %return445)
  %tmp447 = extractvalue %genomeParametrics %101, 11
  %return448 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp447, <3 x double> %cast, i64 %i.0)
  %output450 = extractvalue { <3 x double>, <3 x double>* } %return448, 1
  %102 = insertvalue %genomeParametrics %101, <3 x double>* %output450, 11
  store %genomeParametrics %102, %genomeParametrics* %this
  br label %iter

false429:                                         ; preds = %true423
  %return452 = call i64 @"eq@III"(i64 %return80, i64 66)
  %103 = icmp ne i64 %return452, 0
  br i1 %103, label %true453, label %false454

true453:                                          ; preds = %false429
  %return459 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @90, i64 0, i64 0), i8* %return77)
  %return460 = call <2 x double> @"chu@US"(i8* %return459)
  %tmp461 = load %genomeParametrics* %this
  %tmp462 = extractvalue %genomeParametrics %tmp461, 19
  %return463 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp462, <2 x double> %return460, i64 %i.0)
  %output465 = extractvalue { <2 x double>, <2 x double>* } %return463, 1
  %104 = insertvalue %genomeParametrics %tmp461, <2 x double>* %output465, 19
  store %genomeParametrics %104, %genomeParametrics* %this
  br label %iter

false454:                                         ; preds = %false429
  %return467 = call i64 @"eq@III"(i64 %return80, i64 67)
  %105 = icmp ne i64 %return467, 0
  br i1 %105, label %true468, label %false469

true468:                                          ; preds = %false454
  %return474 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @91, i64 0, i64 0), i8* %return77)
  %return475 = call <4 x double> @"chp@PS"(i8* %return474)
  %tmp476 = load %genomeParametrics* %this
  %tmp477 = extractvalue %genomeParametrics %tmp476, 44
  %return478 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp477, <4 x double> %return475, i64 %i.0)
  %output480 = extractvalue { <4 x double>, <4 x double>* } %return478, 1
  %106 = insertvalue %genomeParametrics %tmp476, <4 x double>* %output480, 44
  store %genomeParametrics %106, %genomeParametrics* %this
  br label %iter

false469:                                         ; preds = %false454
  %return482 = call i64 @"eq@III"(i64 %return80, i64 69)
  %107 = icmp ne i64 %return482, 0
  br i1 %107, label %true483, label %false484

true483:                                          ; preds = %false469
  %return489 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8]* @92, i64 0, i64 0), i8* %return77)
  %return490 = call <2 x double> @"chu@US"(i8* %return489)
  %tmp491 = load %genomeParametrics* %this
  %tmp492 = extractvalue %genomeParametrics %tmp491, 20
  %return493 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp492, <2 x double> %return490, i64 %i.0)
  %output495 = extractvalue { <2 x double>, <2 x double>* } %return493, 1
  %108 = insertvalue %genomeParametrics %tmp491, <2 x double>* %output495, 20
  %return499 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @93, i64 0, i64 0), i8* %return77)
  %return500 = call double @"chf@FS"(i8* %return499)
  %tmp502 = extractvalue %genomeParametrics %108, 4
  %return503 = call { double, double* } @"setcomp@F[FFI"(double* %tmp502, double %return500, i64 %i.0)
  %output505 = extractvalue { double, double* } %return503, 1
  %109 = insertvalue %genomeParametrics %108, double* %output505, 4
  store %genomeParametrics %109, %genomeParametrics* %this
  br label %iter

false484:                                         ; preds = %false469
  %return507 = call i64 @"eq@III"(i64 %return80, i64 71)
  %110 = icmp ne i64 %return507, 0
  br i1 %110, label %true508, label %false509

true508:                                          ; preds = %false484
  %return514 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8]* @94, i64 0, i64 0), i8* %return77)
  %return515 = call <2 x double> @"chu@US"(i8* %return514)
  %tmp516 = load %genomeParametrics* %this
  %tmp517 = extractvalue %genomeParametrics %tmp516, 21
  %return518 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp517, <2 x double> %return515, i64 %i.0)
  %output520 = extractvalue { <2 x double>, <2 x double>* } %return518, 1
  %111 = insertvalue %genomeParametrics %tmp516, <2 x double>* %output520, 21
  %return524 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8]* @95, i64 0, i64 0), i8* %return77)
  %return525 = call <2 x double> @"chu@US"(i8* %return524)
  %tmp527 = extractvalue %genomeParametrics %111, 22
  %return528 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp527, <2 x double> %return525, i64 %i.0)
  %output530 = extractvalue { <2 x double>, <2 x double>* } %return528, 1
  %112 = insertvalue %genomeParametrics %111, <2 x double>* %output530, 22
  store %genomeParametrics %112, %genomeParametrics* %this
  br label %iter

false509:                                         ; preds = %false484
  %return532 = call i64 @"eq@III"(i64 %return80, i64 72)
  %113 = icmp ne i64 %return532, 0
  br i1 %113, label %true533, label %false534

true533:                                          ; preds = %false509
  %return539 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @96, i64 0, i64 0), i8* %return77)
  %return540 = call <2 x double> @"chu@US"(i8* %return539)
  %tmp541 = load %genomeParametrics* %this
  %tmp542 = extractvalue %genomeParametrics %tmp541, 23
  %return543 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp542, <2 x double> %return540, i64 %i.0)
  %output545 = extractvalue { <2 x double>, <2 x double>* } %return543, 1
  %114 = insertvalue %genomeParametrics %tmp541, <2 x double>* %output545, 23
  store %genomeParametrics %114, %genomeParametrics* %this
  br label %iter

false534:                                         ; preds = %false509
  %return547 = call i64 @"eq@III"(i64 %return80, i64 73)
  %115 = icmp ne i64 %return547, 0
  br i1 %115, label %true548, label %false549

true548:                                          ; preds = %false534
  %return554 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @97, i64 0, i64 0), i8* %return77)
  %return555 = call <2 x double> @"chu@US"(i8* %return554)
  %tmp556 = load %genomeParametrics* %this
  %tmp557 = extractvalue %genomeParametrics %tmp556, 24
  %return558 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp557, <2 x double> %return555, i64 %i.0)
  %output560 = extractvalue { <2 x double>, <2 x double>* } %return558, 1
  %116 = insertvalue %genomeParametrics %tmp556, <2 x double>* %output560, 24
  store %genomeParametrics %116, %genomeParametrics* %this
  br label %iter

false549:                                         ; preds = %false534
  %return562 = call i64 @"eq@III"(i64 %return80, i64 74)
  %117 = icmp ne i64 %return562, 0
  br i1 %117, label %true563, label %false564

true563:                                          ; preds = %false549
  %return569 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @98, i64 0, i64 0), i8* %return77)
  %return570 = call <2 x double> @"chu@US"(i8* %return569)
  %tmp571 = load %genomeParametrics* %this
  %tmp572 = extractvalue %genomeParametrics %tmp571, 38
  %return573 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp572, <2 x double> %return570, i64 %i.0)
  %output575 = extractvalue { <2 x double>, <2 x double>* } %return573, 1
  %118 = insertvalue %genomeParametrics %tmp571, <2 x double>* %output575, 38
  store %genomeParametrics %118, %genomeParametrics* %this
  br label %iter

false564:                                         ; preds = %false549
  %return577 = call i64 @"eq@III"(i64 %return80, i64 75)
  %119 = icmp ne i64 %return577, 0
  br i1 %119, label %true578, label %false579

true578:                                          ; preds = %false564
  %return584 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @99, i64 0, i64 0), i8* %return77)
  %return585 = call <4 x double> @"chp@PS"(i8* %return584)
  %tmp586 = load %genomeParametrics* %this
  %tmp587 = extractvalue %genomeParametrics %tmp586, 45
  %return588 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp587, <4 x double> %return585, i64 %i.0)
  %output590 = extractvalue { <4 x double>, <4 x double>* } %return588, 1
  %120 = insertvalue %genomeParametrics %tmp586, <4 x double>* %output590, 45
  store %genomeParametrics %120, %genomeParametrics* %this
  br label %iter

false579:                                         ; preds = %false564
  %return592 = call i64 @"eq@III"(i64 %return80, i64 76)
  %121 = icmp ne i64 %return592, 0
  br i1 %121, label %true593, label %false594

true593:                                          ; preds = %false579
  %return599 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @100, i64 0, i64 0), i8* %return77)
  %return600 = call <4 x double> @"chp@PS"(i8* %return599)
  %tmp601 = load %genomeParametrics* %this
  %tmp602 = extractvalue %genomeParametrics %tmp601, 46
  %return603 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp602, <4 x double> %return600, i64 %i.0)
  %output605 = extractvalue { <4 x double>, <4 x double>* } %return603, 1
  %122 = insertvalue %genomeParametrics %tmp601, <4 x double>* %output605, 46
  store %genomeParametrics %122, %genomeParametrics* %this
  br label %iter

false594:                                         ; preds = %false579
  %return607 = call i64 @"eq@III"(i64 %return80, i64 77)
  %123 = icmp ne i64 %return607, 0
  br i1 %123, label %true608, label %iter

true608:                                          ; preds = %false594
  %return613 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @101, i64 0, i64 0), i8* %return77)
  %return614 = call <4 x double> @"chp@PS"(i8* %return613)
  %tmp615 = load %genomeParametrics* %this
  %tmp616 = extractvalue %genomeParametrics %tmp615, 47
  %return617 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp616, <4 x double> %return614, i64 %i.0)
  %output619 = extractvalue { <4 x double>, <4 x double>* } %return617, 1
  %124 = insertvalue %genomeParametrics %tmp615, <4 x double>* %output619, 47
  store %genomeParametrics %124, %genomeParametrics* %this
  br label %iter

true622:                                          ; preds = %false424
  %return628 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @102, i64 0, i64 0), i8* %return77)
  %return629 = call <2 x double> @"chu@US"(i8* %return628)
  %tmp630 = load %genomeParametrics* %this
  %tmp631 = extractvalue %genomeParametrics %tmp630, 39
  %return632 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp631, <2 x double> %return629, i64 %i.0)
  %output634 = extractvalue { <2 x double>, <2 x double>* } %return632, 1
  %125 = insertvalue %genomeParametrics %tmp630, <2 x double>* %output634, 39
  store %genomeParametrics %125, %genomeParametrics* %this
  br label %iter

false623:                                         ; preds = %false424
  %return636 = call i64 @"eq@III"(i64 %return80, i64 79)
  %126 = icmp ne i64 %return636, 0
  br i1 %126, label %true637, label %false638

true637:                                          ; preds = %false623
  %return643 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8]* @103, i64 0, i64 0), i8* %return77)
  %return644 = call <2 x double> @"chu@US"(i8* %return643)
  %tmp645 = load %genomeParametrics* %this
  %tmp646 = extractvalue %genomeParametrics %tmp645, 25
  %return647 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp646, <2 x double> %return644, i64 %i.0)
  %output649 = extractvalue { <2 x double>, <2 x double>* } %return647, 1
  %127 = insertvalue %genomeParametrics %tmp645, <2 x double>* %output649, 25
  %return653 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8]* @104, i64 0, i64 0), i8* %return77)
  %return654 = call <2 x double> @"chu@US"(i8* %return653)
  %tmp656 = extractvalue %genomeParametrics %127, 26
  %return657 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp656, <2 x double> %return654, i64 %i.0)
  %output659 = extractvalue { <2 x double>, <2 x double>* } %return657, 1
  %128 = insertvalue %genomeParametrics %127, <2 x double>* %output659, 26
  store %genomeParametrics %128, %genomeParametrics* %this
  br label %iter

false638:                                         ; preds = %false623
  %return661 = call i64 @"eq@III"(i64 %return80, i64 94)
  %129 = icmp ne i64 %return661, 0
  br i1 %129, label %true662, label %false663

true662:                                          ; preds = %false638
  %return668 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @105, i64 0, i64 0), i8* %return77)
  %return669 = call <4 x double> @"chp@PS"(i8* %return668)
  %tmp670 = load %genomeParametrics* %this
  %tmp671 = extractvalue %genomeParametrics %tmp670, 48
  %return672 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp671, <4 x double> %return669, i64 %i.0)
  %output674 = extractvalue { <4 x double>, <4 x double>* } %return672, 1
  %130 = insertvalue %genomeParametrics %tmp670, <4 x double>* %output674, 48
  store %genomeParametrics %130, %genomeParametrics* %this
  br label %iter

false663:                                         ; preds = %false638
  %return676 = call i64 @"eq@III"(i64 %return80, i64 95)
  %131 = icmp ne i64 %return676, 0
  br i1 %131, label %true677, label %false678

true677:                                          ; preds = %false663
  %return683 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8]* @106, i64 0, i64 0), i8* %return77)
  %return684 = call double @"chf@FS"(i8* %return683)
  %tmp685 = load %genomeParametrics* %this
  %tmp686 = extractvalue %genomeParametrics %tmp685, 5
  %return687 = call { double, double* } @"setcomp@F[FFI"(double* %tmp686, double %return684, i64 %i.0)
  %output689 = extractvalue { double, double* } %return687, 1
  %132 = insertvalue %genomeParametrics %tmp685, double* %output689, 5
  store %genomeParametrics %132, %genomeParametrics* %this
  br label %iter

false678:                                         ; preds = %false663
  %return691 = call i64 @"eq@III"(i64 %return80, i64 96)
  %133 = icmp ne i64 %return691, 0
  br i1 %133, label %true692, label %false693

true692:                                          ; preds = %false678
  %return698 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @107, i64 0, i64 0), i8* %return77)
  %return699 = call <4 x double> @"chp@PS"(i8* %return698)
  %tmp700 = load %genomeParametrics* %this
  %tmp701 = extractvalue %genomeParametrics %tmp700, 49
  %return702 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp701, <4 x double> %return699, i64 %i.0)
  %output704 = extractvalue { <4 x double>, <4 x double>* } %return702, 1
  %134 = insertvalue %genomeParametrics %tmp700, <4 x double>* %output704, 49
  %return708 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @108, i64 0, i64 0), i8* %return77)
  %return709 = call <4 x double> @"chp@PS"(i8* %return708)
  %tmp711 = extractvalue %genomeParametrics %134, 50
  %return712 = call { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>* %tmp711, <4 x double> %return709, i64 %i.0)
  %output714 = extractvalue { <4 x double>, <4 x double>* } %return712, 1
  %135 = insertvalue %genomeParametrics %134, <4 x double>* %output714, 50
  store %genomeParametrics %135, %genomeParametrics* %this
  br label %iter

false693:                                         ; preds = %false678
  %return716 = call i64 @"eq@III"(i64 %return80, i64 97)
  %136 = icmp ne i64 %return716, 0
  br i1 %136, label %true717, label %false718

true717:                                          ; preds = %false693
  %return723 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8]* @109, i64 0, i64 0), i8* %return77)
  %return724 = call <2 x double> @"chu@US"(i8* %return723)
  %tmp725 = load %genomeParametrics* %this
  %tmp726 = extractvalue %genomeParametrics %tmp725, 27
  %return727 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp726, <2 x double> %return724, i64 %i.0)
  %output729 = extractvalue { <2 x double>, <2 x double>* } %return727, 1
  %137 = insertvalue %genomeParametrics %tmp725, <2 x double>* %output729, 27
  %return733 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8]* @110, i64 0, i64 0), i8* %return77)
  %return734 = call <2 x double> @"chu@US"(i8* %return733)
  %tmp736 = extractvalue %genomeParametrics %137, 28
  %return737 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp736, <2 x double> %return734, i64 %i.0)
  %output739 = extractvalue { <2 x double>, <2 x double>* } %return737, 1
  %138 = insertvalue %genomeParametrics %137, <2 x double>* %output739, 28
  store %genomeParametrics %138, %genomeParametrics* %this
  br label %iter

false718:                                         ; preds = %false693
  %return741 = call i64 @"eq@III"(i64 %return80, i64 98)
  %139 = icmp ne i64 %return741, 0
  br i1 %139, label %true742, label %false743

true742:                                          ; preds = %false718
  %return748 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @111, i64 0, i64 0), i8* %return77)
  %return749 = call <2 x double> @"chu@US"(i8* %return748)
  %tmp750 = load %genomeParametrics* %this
  %tmp751 = extractvalue %genomeParametrics %tmp750, 40
  %return752 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp751, <2 x double> %return749, i64 %i.0)
  %output754 = extractvalue { <2 x double>, <2 x double>* } %return752, 1
  %140 = insertvalue %genomeParametrics %tmp750, <2 x double>* %output754, 40
  store %genomeParametrics %140, %genomeParametrics* %this
  br label %iter

false743:                                         ; preds = %false718
  %return756 = call i64 @"eq@III"(i64 %return80, i64 99)
  %141 = icmp ne i64 %return756, 0
  br i1 %141, label %true757, label %false758

true757:                                          ; preds = %false743
  %return763 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @112, i64 0, i64 0), i8* %return77)
  %return764 = call <3 x double> @"chv@VS"(i8* %return763)
  %tmp765 = load %genomeParametrics* %this
  %tmp766 = extractvalue %genomeParametrics %tmp765, 12
  %return767 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %tmp766, <3 x double> %return764, i64 %i.0)
  %output769 = extractvalue { <3 x double>, <3 x double>* } %return767, 1
  %142 = insertvalue %genomeParametrics %tmp765, <3 x double>* %output769, 12
  %return773 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8]* @113, i64 0, i64 0), i8* %return77)
  %return774 = call <2 x double> @"chu@US"(i8* %return773)
  %tmp776 = extractvalue %genomeParametrics %142, 41
  %return777 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp776, <2 x double> %return774, i64 %i.0)
  %output779 = extractvalue { <2 x double>, <2 x double>* } %return777, 1
  %143 = insertvalue %genomeParametrics %142, <2 x double>* %output779, 41
  store %genomeParametrics %143, %genomeParametrics* %this
  br label %iter

false758:                                         ; preds = %false743
  %return781 = call i64 @"eq@III"(i64 %return80, i64 101)
  %144 = icmp ne i64 %return781, 0
  br i1 %144, label %true782, label %iter

true782:                                          ; preds = %false758
  %return787 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8]* @114, i64 0, i64 0), i8* %return77)
  %return788 = call <2 x double> @"chu@US"(i8* %return787)
  %tmp789 = load %genomeParametrics* %this
  %tmp790 = extractvalue %genomeParametrics %tmp789, 29
  %return791 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp790, <2 x double> %return788, i64 %i.0)
  %output793 = extractvalue { <2 x double>, <2 x double>* } %return791, 1
  %145 = insertvalue %genomeParametrics %tmp789, <2 x double>* %output793, 29
  %return797 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8]* @115, i64 0, i64 0), i8* %return77)
  %return798 = call <2 x double> @"chu@US"(i8* %return797)
  %tmp800 = extractvalue %genomeParametrics %145, 30
  %return801 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp800, <2 x double> %return798, i64 %i.0)
  %output803 = extractvalue { <2 x double>, <2 x double>* } %return801, 1
  %146 = insertvalue %genomeParametrics %145, <2 x double>* %output803, 30
  %return807 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([4 x i8]* @65, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8]* @116, i64 0, i64 0), i8* %return77)
  %return808 = call <2 x double> @"chu@US"(i8* %return807)
  %tmp810 = extractvalue %genomeParametrics %146, 31
  %return811 = call { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>* %tmp810, <2 x double> %return808, i64 %i.0)
  %output813 = extractvalue { <2 x double>, <2 x double>* } %return811, 1
  %147 = insertvalue %genomeParametrics %146, <2 x double>* %output813, 31
  store %genomeParametrics %147, %genomeParametrics* %this
  br label %iter
}

declare i64 @"len@I[I"(i64*) nounwind readnone

declare <3 x double>* @"resize@[VI"(<3 x double>*, i64) nounwind readnone

declare <2 x double>* @"resize@[UI"(<2 x double>*, i64) nounwind readnone

declare <4 x double>* @"resize@[PI"(<4 x double>*, i64) nounwind readnone

declare i8* @"getcomp@S[SI"(i8**, i64) nounwind readnone

declare i64 @"find@I[II"(i64*, i64) nounwind

declare i64 @"ge@III"(i64, i64) nounwind readnone

declare i64 @"eq@III"(i64, i64) nounwind readnone

declare { <2 x double>, <2 x double>* } @"setcomp@U[UUI"(<2 x double>*, <2 x double>, i64) nounwind readnone

declare <4 x double> @"chp@PS"(i8*) nounwind readnone

declare { <4 x double>, <4 x double>* } @"setcomp@P[PPI"(<4 x double>*, <4 x double>, i64) nounwind readnone

declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) nounwind readnone

declare { double, double* } @"setcomp@F[FFI"(double*, double, i64) nounwind readnone

declare <3 x double> @"set@VU"(<2 x double>) nounwind readnone

define private %genomeParametrics @"genomeParametrics@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[F[F[F[F[F[F[V[V[V[V[V[V[V[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[P[P[P[P[P[P[P[P[P"(double** %rings2_val, double** %bipolar_shift, double** %cell_size, double** %escher_beta, double** %popcorn2_c, double** %flux_spread, <3 x double>** %blob, <3 x double>** %pie, <3 x double>** %supershape, <3 x double>** %supershape_n, <3 x double>** %cpow, <3 x double>** %lazysusan, <3 x double>** %bwraps, <2 x double>** %curl_c, <2 x double>** %parabola, <2 x double>** %fan2, <2 x double>** %rectangles, <2 x double>** %bent2, <2 x double>** %lazysusanxyz, <2 x double>** %modulus, <2 x double>** %popcorn2, <2 x double>** %separation, <2 x double>** %separation_inside, <2 x double>** %split, <2 x double>** %splits, <2 x double>** %waves2_scale, <2 x double>** %waves2_freq, <2 x double>** %curve_lenght, <2 x double>** %curve_amp, <2 x double>** %polynomial_pow, <2 x double>** %polynomial_lc, <2 x double>** %polynomial_sc, <2 x double>** %julian, <2 x double>** %juliascope, <2 x double>** %radialblur, <2 x double>** %disc2, <2 x double>** %flower, <2 x double>** %conic, <2 x double>** %stripes, <2 x double>** %whorl, <2 x double>** %persp, <2 x double>** %bwrapstwist, <4 x double>** %ngon, <4 x double>** %pdj_w, <4 x double>** %oscope, <4 x double>** %wedge, <4 x double>** %wedgejulia, <4 x double>** %wedgesph, <4 x double>** %auger, <4 x double>** %mobius_re, <4 x double>** %mobius_im) nounwind alwaysinline {
__llvm_entry:
  %rings2_val1 = load double** %rings2_val
  %0 = insertvalue %genomeParametrics undef, double* %rings2_val1, 0
  %bipolar_shift2 = load double** %bipolar_shift
  %1 = insertvalue %genomeParametrics %0, double* %bipolar_shift2, 1
  %cell_size4 = load double** %cell_size
  %2 = insertvalue %genomeParametrics %1, double* %cell_size4, 2
  %escher_beta6 = load double** %escher_beta
  %3 = insertvalue %genomeParametrics %2, double* %escher_beta6, 3
  %popcorn2_c8 = load double** %popcorn2_c
  %4 = insertvalue %genomeParametrics %3, double* %popcorn2_c8, 4
  %flux_spread10 = load double** %flux_spread
  %5 = insertvalue %genomeParametrics %4, double* %flux_spread10, 5
  %blob12 = load <3 x double>** %blob
  %6 = insertvalue %genomeParametrics %5, <3 x double>* %blob12, 6
  %pie14 = load <3 x double>** %pie
  %7 = insertvalue %genomeParametrics %6, <3 x double>* %pie14, 7
  %supershape16 = load <3 x double>** %supershape
  %8 = insertvalue %genomeParametrics %7, <3 x double>* %supershape16, 8
  %supershape_n18 = load <3 x double>** %supershape_n
  %9 = insertvalue %genomeParametrics %8, <3 x double>* %supershape_n18, 9
  %cpow20 = load <3 x double>** %cpow
  %10 = insertvalue %genomeParametrics %9, <3 x double>* %cpow20, 10
  %lazysusan22 = load <3 x double>** %lazysusan
  %11 = insertvalue %genomeParametrics %10, <3 x double>* %lazysusan22, 11
  %bwraps24 = load <3 x double>** %bwraps
  %12 = insertvalue %genomeParametrics %11, <3 x double>* %bwraps24, 12
  %curl_c26 = load <2 x double>** %curl_c
  %13 = insertvalue %genomeParametrics %12, <2 x double>* %curl_c26, 13
  %parabola28 = load <2 x double>** %parabola
  %14 = insertvalue %genomeParametrics %13, <2 x double>* %parabola28, 14
  %fan230 = load <2 x double>** %fan2
  %15 = insertvalue %genomeParametrics %14, <2 x double>* %fan230, 15
  %rectangles32 = load <2 x double>** %rectangles
  %16 = insertvalue %genomeParametrics %15, <2 x double>* %rectangles32, 16
  %bent234 = load <2 x double>** %bent2
  %17 = insertvalue %genomeParametrics %16, <2 x double>* %bent234, 17
  %lazysusanxyz36 = load <2 x double>** %lazysusanxyz
  %18 = insertvalue %genomeParametrics %17, <2 x double>* %lazysusanxyz36, 18
  %modulus38 = load <2 x double>** %modulus
  %19 = insertvalue %genomeParametrics %18, <2 x double>* %modulus38, 19
  %popcorn240 = load <2 x double>** %popcorn2
  %20 = insertvalue %genomeParametrics %19, <2 x double>* %popcorn240, 20
  %separation42 = load <2 x double>** %separation
  %21 = insertvalue %genomeParametrics %20, <2 x double>* %separation42, 21
  %separation_inside44 = load <2 x double>** %separation_inside
  %22 = insertvalue %genomeParametrics %21, <2 x double>* %separation_inside44, 22
  %split46 = load <2 x double>** %split
  %23 = insertvalue %genomeParametrics %22, <2 x double>* %split46, 23
  %splits48 = load <2 x double>** %splits
  %24 = insertvalue %genomeParametrics %23, <2 x double>* %splits48, 24
  %waves2_scale50 = load <2 x double>** %waves2_scale
  %25 = insertvalue %genomeParametrics %24, <2 x double>* %waves2_scale50, 25
  %waves2_freq52 = load <2 x double>** %waves2_freq
  %26 = insertvalue %genomeParametrics %25, <2 x double>* %waves2_freq52, 26
  %curve_lenght54 = load <2 x double>** %curve_lenght
  %27 = insertvalue %genomeParametrics %26, <2 x double>* %curve_lenght54, 27
  %curve_amp56 = load <2 x double>** %curve_amp
  %28 = insertvalue %genomeParametrics %27, <2 x double>* %curve_amp56, 28
  %polynomial_pow58 = load <2 x double>** %polynomial_pow
  %29 = insertvalue %genomeParametrics %28, <2 x double>* %polynomial_pow58, 29
  %polynomial_lc60 = load <2 x double>** %polynomial_lc
  %30 = insertvalue %genomeParametrics %29, <2 x double>* %polynomial_lc60, 30
  %polynomial_sc62 = load <2 x double>** %polynomial_sc
  %31 = insertvalue %genomeParametrics %30, <2 x double>* %polynomial_sc62, 31
  %julian64 = load <2 x double>** %julian
  %32 = insertvalue %genomeParametrics %31, <2 x double>* %julian64, 32
  %juliascope66 = load <2 x double>** %juliascope
  %33 = insertvalue %genomeParametrics %32, <2 x double>* %juliascope66, 33
  %radialblur68 = load <2 x double>** %radialblur
  %34 = insertvalue %genomeParametrics %33, <2 x double>* %radialblur68, 34
  %disc270 = load <2 x double>** %disc2
  %35 = insertvalue %genomeParametrics %34, <2 x double>* %disc270, 35
  %flower72 = load <2 x double>** %flower
  %36 = insertvalue %genomeParametrics %35, <2 x double>* %flower72, 36
  %conic74 = load <2 x double>** %conic
  %37 = insertvalue %genomeParametrics %36, <2 x double>* %conic74, 37
  %stripes76 = load <2 x double>** %stripes
  %38 = insertvalue %genomeParametrics %37, <2 x double>* %stripes76, 38
  %whorl78 = load <2 x double>** %whorl
  %39 = insertvalue %genomeParametrics %38, <2 x double>* %whorl78, 39
  %persp80 = load <2 x double>** %persp
  %40 = insertvalue %genomeParametrics %39, <2 x double>* %persp80, 40
  %bwrapstwist82 = load <2 x double>** %bwrapstwist
  %41 = insertvalue %genomeParametrics %40, <2 x double>* %bwrapstwist82, 41
  %ngon84 = load <4 x double>** %ngon
  %42 = insertvalue %genomeParametrics %41, <4 x double>* %ngon84, 42
  %pdj_w86 = load <4 x double>** %pdj_w
  %43 = insertvalue %genomeParametrics %42, <4 x double>* %pdj_w86, 43
  %oscope88 = load <4 x double>** %oscope
  %44 = insertvalue %genomeParametrics %43, <4 x double>* %oscope88, 44
  %wedge90 = load <4 x double>** %wedge
  %45 = insertvalue %genomeParametrics %44, <4 x double>* %wedge90, 45
  %wedgejulia92 = load <4 x double>** %wedgejulia
  %46 = insertvalue %genomeParametrics %45, <4 x double>* %wedgejulia92, 46
  %wedgesph94 = load <4 x double>** %wedgesph
  %47 = insertvalue %genomeParametrics %46, <4 x double>* %wedgesph94, 47
  %auger96 = load <4 x double>** %auger
  %48 = insertvalue %genomeParametrics %47, <4 x double>* %auger96, 48
  %mobius_re98 = load <4 x double>** %mobius_re
  %49 = insertvalue %genomeParametrics %48, <4 x double>* %mobius_re98, 49
  %mobius_im100 = load <4 x double>** %mobius_im
  %50 = insertvalue %genomeParametrics %49, <4 x double>* %mobius_im100, 50
  ret %genomeParametrics %50
}

define private %genomeParametrics @"genomeParametrics@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"() nounwind alwaysinline {
__llvm_entry:
  %0 = alloca double*
  %1 = alloca double*
  %2 = alloca double*
  %3 = alloca double*
  %4 = alloca double*
  %5 = alloca <3 x double>*
  %6 = alloca <3 x double>*
  %7 = alloca <3 x double>*
  %8 = alloca <3 x double>*
  %9 = alloca <3 x double>*
  %10 = alloca <3 x double>*
  %11 = alloca <3 x double>*
  %12 = alloca <2 x double>*
  %13 = alloca <2 x double>*
  %14 = alloca <2 x double>*
  %15 = alloca <2 x double>*
  %16 = alloca <2 x double>*
  %17 = alloca <2 x double>*
  %18 = alloca <2 x double>*
  %19 = alloca <2 x double>*
  %20 = alloca <2 x double>*
  %21 = alloca <2 x double>*
  %22 = alloca <2 x double>*
  %23 = alloca <2 x double>*
  %24 = alloca <2 x double>*
  %25 = alloca <2 x double>*
  %26 = alloca <2 x double>*
  %27 = alloca <2 x double>*
  %28 = alloca <2 x double>*
  %29 = alloca <2 x double>*
  %30 = alloca <2 x double>*
  %31 = alloca <2 x double>*
  %32 = alloca <2 x double>*
  %33 = alloca <2 x double>*
  %34 = alloca <2 x double>*
  %35 = alloca <2 x double>*
  %36 = alloca <2 x double>*
  %37 = alloca <2 x double>*
  %38 = alloca <2 x double>*
  %39 = alloca <2 x double>*
  %40 = alloca <2 x double>*
  %41 = alloca <4 x double>*
  %42 = alloca <4 x double>*
  %43 = alloca <4 x double>*
  %44 = alloca <4 x double>*
  %45 = alloca <4 x double>*
  %46 = alloca <4 x double>*
  %47 = alloca <4 x double>*
  %48 = alloca <4 x double>*
  %49 = alloca <4 x double>*
  %50 = alloca double*
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %50
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %0
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %1
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %2
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %3
  store double* getelementptr inbounds ([0 x double]* @60, i64 0, i64 0), double** %4
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %5
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %6
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %7
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %8
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %9
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %10
  store <3 x double>* getelementptr inbounds ([0 x <3 x double>]* @61, i64 0, i64 0), <3 x double>** %11
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %12
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %13
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %14
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %15
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %16
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %17
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %18
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %19
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %20
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %21
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %22
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %23
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %24
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %25
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %26
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %27
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %28
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %29
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %30
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %31
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %32
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %33
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %34
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %35
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %36
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %37
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %38
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %39
  store <2 x double>* getelementptr inbounds ([0 x <2 x double>]* @117, i64 0, i64 0), <2 x double>** %40
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %41
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %42
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %43
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %44
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %45
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %46
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %47
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %48
  store <4 x double>* getelementptr inbounds ([0 x <4 x double>]* @118, i64 0, i64 0), <4 x double>** %49
  %genomeParametrics = call %genomeParametrics @"genomeParametrics@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P[F[F[F[F[F[F[V[V[V[V[V[V[V[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[U[P[P[P[P[P[P[P[P[P"(double** %50, double** %0, double** %1, double** %2, double** %3, double** %4, <3 x double>** %5, <3 x double>** %6, <3 x double>** %7, <3 x double>** %8, <3 x double>** %9, <3 x double>** %10, <3 x double>** %11, <2 x double>** %12, <2 x double>** %13, <2 x double>** %14, <2 x double>** %15, <2 x double>** %16, <2 x double>** %17, <2 x double>** %18, <2 x double>** %19, <2 x double>** %20, <2 x double>** %21, <2 x double>** %22, <2 x double>** %23, <2 x double>** %24, <2 x double>** %25, <2 x double>** %26, <2 x double>** %27, <2 x double>** %28, <2 x double>** %29, <2 x double>** %30, <2 x double>** %31, <2 x double>** %32, <2 x double>** %33, <2 x double>** %34, <2 x double>** %35, <2 x double>** %36, <2 x double>** %37, <2 x double>** %38, <2 x double>** %39, <2 x double>** %40, <4 x double>** %41, <4 x double>** %42, <4 x double>** %43, <4 x double>** %44, <4 x double>** %45, <4 x double>** %46, <4 x double>** %47, <4 x double>** %48, <4 x double>** %49)
  ret %genomeParametrics %genomeParametrics
}

define private double @"sgn@FF"(double* %n) nounwind alwaysinline {
__llvm_entry:
  %n1 = load double* %n
  %return = fcmp olt double %n1, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %return3 = call i64 @"neg@II"(i64 1)
  br label %end

false:                                            ; preds = %__llvm_entry
  %return5 = fcmp ogt double %n1, 0.000000e+00
  %. = select i1 %return5, i64 1, i64 0
  br label %end

end:                                              ; preds = %false, %true
  %phi10 = phi i64 [ %return3, %true ], [ %., %false ]
  %cast = sitofp i64 %phi10 to double
  ret double %cast
}

define private void @"sincos@FFF"(double* %a, double* %sa, double* %ca) nounwind alwaysinline {
__llvm_entry:
  %a1 = load double* %a
  %return = call double @"sin@FF"(double %a1)
  store double %return, double* %sa
  %a2 = load double* %a
  %return3 = call double @"cos@FF"(double %a2)
  store double %return3, double* %ca
  ret void
}

declare double @"sin@FF"(double) nounwind readnone

declare double @"cos@FF"(double) nounwind readnone

define private double @"fmod@FFF"(double* %a, double* %b) nounwind alwaysinline {
__llvm_entry:
  %a1 = load double* %a
  %b3 = load double* %b
  %output = call double @"div@FF"(double %a1, double %b3)
  %return = call double @"floor@FF"(double %output)
  %output5 = fmul double %return, %b3
  %output6 = fsub double %a1, %output5
  ret double %output6
}

declare double @"div@FF"(double, double) nounwind readnone

declare double @"floor@FF"(double) nounwind readnone

define private double @"precalc@FSV"(i8** %type, <3 x double>* %pos) nounwind alwaysinline {
__llvm_entry:
  %type1 = load i8** %type
  %return = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0))
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %pos2 = load <3 x double>* %pos
  %return3 = call double @"getcomp@FVI"(<3 x double> %pos2, i64 0)
  %output = fmul double %return3, %return3
  %return7 = call double @"getcomp@FVI"(<3 x double> %pos2, i64 1)
  %output10 = fmul double %return7, %return7
  %output11 = fadd double %output, %output10
  br label %UnifiedReturnBlock

false:                                            ; preds = %__llvm_entry
  %return13 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0))
  %1 = icmp ne i64 %return13, 0
  br i1 %1, label %true14, label %false15

true14:                                           ; preds = %false
  %pos17 = load <3 x double>* %pos
  %return18 = call double @"getcomp@FVI"(<3 x double> %pos17, i64 0)
  %output21 = fmul double %return18, %return18
  %return23 = call double @"getcomp@FVI"(<3 x double> %pos17, i64 1)
  %output26 = fmul double %return23, %return23
  %output27 = fadd double %output21, %output26
  %return28 = call double @"sqrt@FF"(double %output27)
  br label %UnifiedReturnBlock

false15:                                          ; preds = %false
  %return30 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0))
  %2 = icmp ne i64 %return30, 0
  br i1 %2, label %true31, label %false32

true31:                                           ; preds = %false15
  %pos34 = load <3 x double>* %pos
  %return35 = call double @"getcomp@FVI"(<3 x double> %pos34, i64 0)
  %return37 = call double @"getcomp@FVI"(<3 x double> %pos34, i64 1)
  %return38 = call double @"atan2@FFF"(double %return35, double %return37)
  br label %UnifiedReturnBlock

false32:                                          ; preds = %false15
  %return40 = call i64 @"eq@ISS"(i8* %type1, i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0))
  %3 = icmp ne i64 %return40, 0
  br i1 %3, label %true41, label %end42

true41:                                           ; preds = %false32
  %pos43 = load <3 x double>* %pos
  %return44 = call double @"getcomp@FVI"(<3 x double> %pos43, i64 1)
  %return46 = call double @"getcomp@FVI"(<3 x double> %pos43, i64 0)
  %return47 = call double @"atan2@FFF"(double %return44, double %return46)
  br label %UnifiedReturnBlock

end42:                                            ; preds = %false32
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end42, %true41, %true31, %true14, %true
  %UnifiedRetVal = phi double [ %output11, %true ], [ %return28, %true14 ], [ %return38, %true31 ], [ %return47, %true41 ], [ 0.000000e+00, %end42 ]
  ret double %UnifiedRetVal
}

declare i64 @"eq@ISS"(i8*, i8*) nounwind readnone

declare double @"getcomp@FVI"(<3 x double>, i64) nounwind readnone

declare double @"sqrt@FF"(double) nounwind readnone

declare double @"atan2@FFF"(double, double) nounwind readnone

define private void @"perspective_precalc@FFFF"(double* %angle, double* %dist, double* %vsin, double* %vfcos) nounwind alwaysinline {
__llvm_entry:
  %angle1 = load double* %angle
  %output = fmul double %angle1, 0x400921FB4D12D84A
  %output2 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"sin@FF"(double %output2)
  store double %return, double* %vsin
  %dist4 = load double* %dist
  %return6 = call double @"cos@FF"(double %output2)
  %output7 = fmul double %dist4, %return6
  store double %output7, double* %vfcos
  ret void
}

define private void @"waves_precalc@FFFFF"(double* %dx2, double* %dy2, double* %dz2, double* %F, double* %H) nounwind alwaysinline {
__llvm_entry:
  %F1 = load double* %F
  %output = fmul double %F1, %F1
  %output3 = fadd double %output, 1.000000e-10
  %output4 = call double @"div@FF"(double 1.000000e+00, double %output3)
  store double %output4, double* %dx2
  %H5 = load double* %H
  %output7 = fmul double %H5, %H5
  %output8 = fadd double %output7, 1.000000e-10
  %output9 = call double @"div@FF"(double 1.000000e+00, double %output8)
  store double %output9, double* %dy2
  ret void
}

define private void @"disc2_precalc@FFFFF"(double* %rot, double* %twist, double* %sinadd, double* %cosadd, double* %timespi) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca double
  %rot1 = load double* %rot
  %output = fmul double %rot1, 0x400921FB4D12D84A
  store double %output, double* %timespi
  %twist2 = load double* %twist
  store double %twist2, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinadd, double* %cosadd)
  %cosadd3 = load double* %cosadd
  %output4 = fsub double %cosadd3, 1.000000e+00
  store double %output4, double* %cosadd
  %twist5 = load double* %twist
  %return = fcmp ogt double %twist5, 0x401921FB4D12D84A
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output8 = fadd double 1.000000e+00, %twist5
  %output9 = fsub double %output8, 0x401921FB4D12D84A
  %output12 = fmul double %output4, %output9
  store double %output12, double* %cosadd
  %sinadd13 = load double* %sinadd
  %output15 = fmul double %sinadd13, %output9
  store double %output15, double* %sinadd
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %twist16 = load double* %twist
  %return17 = call i64 @"neg@II"(i64 2)
  %cast = sitofp i64 %return17 to double
  %output18 = fmul double %cast, 0x400921FB4D12D84A
  %return19 = fcmp olt double %twist16, %output18
  br i1 %return19, label %true21, label %end22

true21:                                           ; preds = %end
  %output24 = fadd double 1.000000e+00, %twist16
  %output25 = fadd double %output24, 0x401921FB4D12D84A
  %cosadd26 = load double* %cosadd
  %output28 = fmul double %cosadd26, %output25
  store double %output28, double* %cosadd
  %sinadd29 = load double* %sinadd
  %output31 = fmul double %sinadd29, %output25
  store double %output31, double* %sinadd
  br label %end22

end22:                                            ; preds = %true21, %end
  ret void
}

define private void @"supershape_precalc@FFFF"(double* %ss_m, double* %ss_n1, double* %ss_pm_4, double* %ss_pneg_n1) nounwind alwaysinline {
__llvm_entry:
  %ss_m1 = load double* %ss_m
  %output = call double @"div@FF"(double %ss_m1, double 4.000000e+00)
  store double %output, double* %ss_pm_4
  %return = call double @"neg@FF"(double 1.000000e+00)
  %ss_n12 = load double* %ss_n1
  %output3 = call double @"div@FF"(double %return, double %ss_n12)
  store double %output3, double* %ss_pneg_n1
  ret void
}

declare double @"neg@FF"(double) nounwind readnone

define private void @"wedgejulia_precalc@FFFFFFF"(double* %wedgeJulia_cf, double* %wedgeJulia_rN, double* %wedgeJulia_cn, double* %power, double* %angle, double* %dist, double* %count) nounwind alwaysinline {
__llvm_entry:
  %angle1 = load double* %angle
  %count2 = load double* %count
  %output = fmul double %angle1, %count2
  %output3 = fmul double %output, 0x3FD45F306DC9C883
  %output4 = fmul double %output3, 5.000000e-01
  %output5 = fsub double 1.000000e+00, %output4
  store double %output5, double* %wedgeJulia_cf
  %power6 = load double* %power
  %return = call double @"abs@FF"(double %power6)
  store double %return, double* %wedgeJulia_rN
  %dist7 = load double* %dist
  %power8 = load double* %power
  %output9 = call double @"div@FF"(double %dist7, double %power8)
  %output10 = call double @"div@FF"(double %output9, double 2.000000e+00)
  store double %output10, double* %wedgeJulia_cn
  ret void
}

declare double @"abs@FF"(double) nounwind

define private void @"bwraps_precalc@FFFFFF"(double* %g2, double* %r2, double* %rfactor, double* %cellsize, double* %space, double* %gain) nounwind alwaysinline {
__llvm_entry:
  %cellsize1 = load double* %cellsize
  %space2 = load double* %space
  %output = fmul double %space2, %space2
  %output4 = fadd double 1.000000e+00, %output
  %output5 = call double @"div@FF"(double %cellsize1, double %output4)
  %output6 = fmul double 5.000000e-01, %output5
  %gain7 = load double* %gain
  %return = call double @"sqrt@FF"(double %gain7)
  %output9 = call double @"div@FF"(double %return, double %cellsize1)
  %output10 = fadd double %output9, 1.000000e-06
  store double %output10, double* %g2
  %output13 = fmul double %output10, %output6
  %return15 = fcmp ogt double %output13, 2.000000e+00
  br i1 %return15, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  %output20 = fmul double %output13, %output13
  %output21 = call double @"div@FF"(double %output20, double 4.000000e+00)
  %output22 = fadd double %output21, 1.000000e+00
  %output23 = call double @"div@FF"(double 1.000000e+00, double %output22)
  %output24 = fmul double %output13, %output23
  br label %end

end:                                              ; preds = %false, %true
  %max_bubble.0 = phi double [ 1.000000e+00, %true ], [ %output24, %false ]
  %output27 = fmul double %output6, %output6
  store double %output27, double* %r2
  %output30 = call double @"div@FF"(double %output6, double %max_bubble.0)
  store double %output30, double* %rfactor
  ret void
}

define private <3 x double> @"biunitcube@V"() nounwind alwaysinline {
__llvm_entry:
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return1 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return1 to double
  %return2 = call double @"fit01@FFFF"(double %return, double %cast, double 1.000000e+00)
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return6 = call double @"fit01@FFFF"(double %return3, double %cast, double 1.000000e+00)
  %return7 = call <3 x double> @"set@VFFF"(double %return2, double %return6, double 0.000000e+00)
  ret <3 x double> %return7
}

declare double @"nrandom@F:S"(i8*) nounwind

declare double @"fit01@FFFF"(double, double, double) nounwind

declare <3 x double> @"set@VFFF"(double, double, double) nounwind readnone

define private i64 @"checkNAN_vector@IIIV"(i64* %ACTIVE, i64* %ptn, <3 x double>* %vec) nounwind alwaysinline {
__llvm_entry:
  %ACTIVE1 = load i64* %ACTIVE
  %0 = icmp ne i64 %ACTIVE1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %vec2 = load <3 x double>* %vec
  %return = call double @"getcomp@FVI"(<3 x double> %vec2, i64 0)
  %return3 = call i64 @"isfinite@IF"(double %return)
  %return4 = call i64 @"not@II"(i64 %return3)
  %return6 = call double @"getcomp@FVI"(<3 x double> %vec2, i64 1)
  %return7 = call i64 @"isfinite@IF"(double %return6)
  %return8 = call i64 @"not@II"(i64 %return7)
  %return9 = call i64 @"or@III"(i64 %return4, i64 %return8)
  %return12 = call i64 @"isnan@IF"(double %return)
  %return13 = call i64 @"or@III"(i64 %return9, i64 %return12)
  %return16 = call i64 @"isnan@IF"(double %return6)
  %return17 = call i64 @"or@III"(i64 %return13, i64 %return16)
  %return19 = call double @"length@FV"(<3 x double> %vec2)
  %return20 = fcmp ogt double %return19, 1.000000e+03
  %return21 = zext i1 %return20 to i64
  %return22 = call i64 @"or@III"(i64 %return17, i64 %return21)
  %1 = icmp ne i64 %return22, 0
  %. = select i1 %1, i64 1, i64 0
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %merge = phi i64 [ 0, %__llvm_entry ], [ %., %true ]
  ret i64 %merge
}

declare i64 @"isfinite@IF"(double) nounwind readnone

declare i64 @"or@III"(i64, i64) nounwind readnone

declare i64 @"isnan@IF"(double) nounwind readnone

declare double @"length@FV"(<3 x double>) nounwind

define private void @"removeNAN_vector@IIV"(i64* %ACTIVE, i64* %ptn, <3 x double>* %vec) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca <3 x double>
  %2 = alloca i64
  %ACTIVE1 = load i64* %ACTIVE
  store i64 %ACTIVE1, i64* %2
  %vec2 = load <3 x double>* %vec
  store <3 x double> %vec2, <3 x double>* %1
  %checkNAN_vector = call i64 @"checkNAN_vector@IIIV"(i64* %2, i64* %0, <3 x double>* %1)
  %3 = icmp ne i64 %checkNAN_vector, 0
  br i1 %3, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %ptn3 = load i64* %ptn
  %return = call i64 @"removepoint@III"(i64 0, i64 %ptn3)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

declare i64 @"removepoint@III"(i64, i64) nounwind

define private i64 @"checkNAN_float@IIIF"(i64* %ACTIVE, i64* %ptn, double* %flt) nounwind alwaysinline {
__llvm_entry:
  %ACTIVE1 = load i64* %ACTIVE
  %0 = icmp ne i64 %ACTIVE1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %flt2 = load double* %flt
  %return = call i64 @"isfinite@IF"(double %flt2)
  %return3 = call i64 @"not@II"(i64 %return)
  %return5 = call i64 @"isnan@IF"(double %flt2)
  %return6 = call i64 @"or@III"(i64 %return3, i64 %return5)
  %return8 = fcmp ogt double %flt2, 1.000000e+03
  %return9 = zext i1 %return8 to i64
  %return10 = call i64 @"or@III"(i64 %return6, i64 %return9)
  %1 = icmp ne i64 %return10, 0
  %. = select i1 %1, i64 1, i64 0
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %merge = phi i64 [ 0, %__llvm_entry ], [ %., %true ]
  ret i64 %merge
}

define private void @"VAR_SYMMETRY@VVII"(<3 x double>* %pos, <3 x double>* %pivot, i64* %num, i64* %active) nounwind alwaysinline {
__llvm_entry:
  %active1 = load i64* %active
  %0 = icmp ne i64 %active1, 0
  br i1 %0, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %num2 = load i64* %num
  %return = call i64 @"not@II"(i64 %num2)
  %1 = icmp ne i64 %return, 0
  br i1 %1, label %true3, label %false

end:                                              ; preds = %false, %end29, %true3, %end14, %__llvm_entry
  ret void

true3:                                            ; preds = %true
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = call double @"div@FF"(double 1.000000e+00, double 3.000000e+00)
  %return6 = fcmp ogt double %return5, %output
  br i1 %return6, label %true8, label %end

false:                                            ; preds = %true
  %2 = icmp ne i64 %num2, 0
  br i1 %2, label %true23, label %end

true8:                                            ; preds = %true3
  %return10 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return11 = fcmp ogt double %return10, 5.000000e-01
  br i1 %return11, label %true13, label %end14

true13:                                           ; preds = %true8
  br label %end14

end14:                                            ; preds = %true13, %true8
  %angle.0 = phi double [ 2.400000e+02, %true13 ], [ 1.200000e+02, %true8 ]
  %pos15 = load <3 x double>* %pos
  %cast = call <3 x double> @"set@VI"(i64 0)
  %return17 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %angle.0)
  %cast18 = call <3 x double> @"set@VI"(i64 1)
  %pivot19 = load <3 x double>* %pivot
  %return20 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return17, <3 x double> %cast18, <3 x double> %pivot19)
  %output21 = call <3 x double> @"mul@V4"(<3 x double> %pos15, <16 x double> %return20)
  store <3 x double> %output21, <3 x double>* %pos
  br label %end

true23:                                           ; preds = %false
  %return25 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return26 = fcmp oge double %return25, 2.000000e-01
  br i1 %return26, label %true28, label %end29

true28:                                           ; preds = %true23
  %return30 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return32 = fcmp olt double 2.000000e-01, %return30
  %return33 = zext i1 %return32 to i64
  %cast34 = sitofp i64 %return33 to double
  %return35 = fcmp ole double %cast34, 4.000000e-01
  br i1 %return35, label %true37, label %false38

end29:                                            ; preds = %false56, %true64, %true55, %true46, %true37, %true23
  %angle.1 = phi double [ 7.200000e+01, %true37 ], [ 1.440000e+02, %true46 ], [ 2.160000e+02, %true55 ], [ 2.880000e+02, %true64 ], [ 0.000000e+00, %false56 ], [ 0.000000e+00, %true23 ]
  %pos66 = load <3 x double>* %pos
  %cast67 = call <3 x double> @"set@VI"(i64 0)
  %return69 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %angle.1)
  %cast70 = call <3 x double> @"set@VI"(i64 1)
  %pivot71 = load <3 x double>* %pivot
  %return72 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast67, <3 x double> %return69, <3 x double> %cast70, <3 x double> %pivot71)
  %output73 = call <3 x double> @"mul@V4"(<3 x double> %pos66, <16 x double> %return72)
  store <3 x double> %output73, <3 x double>* %pos
  br label %end

true37:                                           ; preds = %true28
  br label %end29

false38:                                          ; preds = %true28
  %return41 = fcmp olt double 4.000000e-01, %return30
  %return42 = zext i1 %return41 to i64
  %cast43 = sitofp i64 %return42 to double
  %return44 = fcmp ole double %cast43, 6.000000e-01
  br i1 %return44, label %true46, label %false47

true46:                                           ; preds = %false38
  br label %end29

false47:                                          ; preds = %false38
  %return50 = fcmp olt double 6.000000e-01, %return30
  %return51 = zext i1 %return50 to i64
  %cast52 = sitofp i64 %return51 to double
  %return53 = fcmp ole double %cast52, 8.000000e-01
  br i1 %return53, label %true55, label %false56

true55:                                           ; preds = %false47
  br label %end29

false56:                                          ; preds = %false47
  %return59 = fcmp olt double 8.000000e-01, %return30
  %return60 = zext i1 %return59 to i64
  %cast61 = sitofp i64 %return60 to double
  %return62 = fcmp ole double %cast61, 1.000000e+00
  br i1 %return62, label %true64, label %end29

true64:                                           ; preds = %false56
  br label %end29
}

declare <3 x double> @"set@VI"(i64) nounwind readnone

declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) nounwind readnone

declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) nounwind

define private void @"precalc_utils@IVV"(i64* %type, <3 x double>* %pos, <3 x double>* %precalc) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %type1 = load i64* %type
  %return = call i64 @"eq@III"(i64 %type1, i64 9)
  %return3 = call i64 @"eq@III"(i64 %type1, i64 10)
  %return4 = call i64 @"or@III"(i64 %return, i64 %return3)
  %return6 = call i64 @"eq@III"(i64 %type1, i64 11)
  %return7 = call i64 @"or@III"(i64 %return4, i64 %return6)
  %return9 = call i64 @"eq@III"(i64 %type1, i64 19)
  %return10 = call i64 @"or@III"(i64 %return7, i64 %return9)
  %return12 = call i64 @"eq@III"(i64 %type1, i64 21)
  %return13 = call i64 @"or@III"(i64 %return10, i64 %return12)
  %return15 = call i64 @"eq@III"(i64 %type1, i64 30)
  %return16 = call i64 @"or@III"(i64 %return13, i64 %return15)
  %return18 = call i64 @"eq@III"(i64 %type1, i64 35)
  %return19 = call i64 @"or@III"(i64 %return16, i64 %return18)
  %2 = icmp ne i64 %return19, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %pos20 = load <3 x double>* %pos
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %pos21 = load <3 x double>* %pos
  store <3 x double> %pos21, <3 x double>* %1
  %precalc22 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %cast = call <3 x double> @"set@VF"(double %precalc22)
  %output = call <3 x double> @"div@VV"(<3 x double> %pos20, <3 x double> %cast)
  store <3 x double> %output, <3 x double>* %precalc
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  ret void
}

declare <3 x double> @"set@VF"(double) nounwind readnone

declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) nounwind readnone

define private void @"affine@VVFFFFFF"(<3 x double>* %outp, <3 x double>* %pos, double* %a, double* %b, double* %d, double* %e, double* %f, double* %h) nounwind alwaysinline {
__llvm_entry:
  %outp1 = load <3 x double>* %outp
  %a2 = load double* %a
  %pos3 = load <3 x double>* %pos
  %return = call double @"getcomp@FVI"(<3 x double> %pos3, i64 0)
  %output = fmul double %a2, %return
  %b4 = load double* %b
  %return6 = call double @"getcomp@FVI"(<3 x double> %pos3, i64 1)
  %output7 = fmul double %b4, %return6
  %output8 = fadd double %output, %output7
  %d9 = load double* %d
  %output10 = fadd double %output8, %d9
  %e11 = load double* %e
  %output14 = fmul double %e11, %return
  %f15 = load double* %f
  %output18 = fmul double %f15, %return6
  %output19 = fadd double %output14, %output18
  %h20 = load double* %h
  %output21 = fadd double %output19, %h20
  %return22 = call <3 x double> @"set@VFFF"(double %output10, double %output21, double 0.000000e+00)
  %output23 = call <3 x double> @"add@VV"(<3 x double> %outp1, <3 x double> %return22)
  store <3 x double> %output23, <3 x double>* %outp
  ret void
}

declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) nounwind readnone

define private void @"affinePOST@VFFFFFF"(<3 x double>* %pos, double* %a, double* %b, double* %d, double* %e, double* %f, double* %h) nounwind alwaysinline {
__llvm_entry:
  %pos1 = load <3 x double>* %pos
  %a2 = load double* %a
  %return = call double @"getcomp@FVI"(<3 x double> %pos1, i64 0)
  %output = fmul double %a2, %return
  %b4 = load double* %b
  %return6 = call double @"getcomp@FVI"(<3 x double> %pos1, i64 1)
  %output7 = fmul double %b4, %return6
  %output8 = fadd double %output, %output7
  %d9 = load double* %d
  %output10 = fadd double %output8, %d9
  %e11 = load double* %e
  %output14 = fmul double %e11, %return
  %f15 = load double* %f
  %output18 = fmul double %f15, %return6
  %output19 = fadd double %output14, %output18
  %h20 = load double* %h
  %output21 = fadd double %output19, %h20
  %return22 = call <3 x double> @"set@VFFF"(double %output10, double %output21, double 0.000000e+00)
  %output23 = call <3 x double> @"add@VV"(<3 x double> %pos1, <3 x double> %return22)
  store <3 x double> %output23, <3 x double>* %pos
  ret void
}

define private void @"VAR_SINUSOIDAL@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %weight1 = load double* %weight
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %output = fmul double %weight1, %return3
  %tmp = load <3 x double>* %pos
  %return4 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return4, 1
  store <3 x double> %output6, <3 x double>* %pos
  %weight7 = load double* %weight
  %_inp8 = load <3 x double>* %_inp
  %return9 = call double @"getcomp@FVI"(<3 x double> %_inp8, i64 1)
  %return10 = call double @"sin@FF"(double %return9)
  %output11 = fmul double %weight7, %return10
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output6, double %output11, i64 1)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %pos
  ret void
}

define private { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %rw11, double %rw22, i64 %rw33) alwaysinline {
__llvm_entry:
  %rw16 = call <3 x double> @"setcomp@VFI"(<3 x double> %rw11, double %rw22, i64 %rw33)
  %mrv = insertvalue { double, <3 x double> } undef, double %rw22, 0
  %mrv9 = insertvalue { double, <3 x double> } %mrv, <3 x double> %rw16, 1
  ret { double, <3 x double> } %mrv9
}

declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) nounwind readnone

define private void @"VAR_SPHERICAL@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e-10
  %output3 = call double @"div@FF"(double %weight1, double %output)
  %_inp5 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp5, i64 0)
  %output6 = fmul double %output3, %return
  %tmp = load <3 x double>* %pos
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output6, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output9, <3 x double>* %pos
  %_inp11 = load <3 x double>* %_inp
  %return12 = call double @"getcomp@FVI"(<3 x double> %_inp11, i64 1)
  %output13 = fmul double %output3, %return12
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output9, double %output13, i64 1)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %pos
  ret void
}

define private void @"VAR_SWIRL@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %return = call double @"sin@FF"(double %precalc)
  %return4 = call double @"cos@FF"(double %precalc)
  %_inp6 = load <3 x double>* %_inp
  %return7 = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 0)
  %output = fmul double %return, %return7
  %return10 = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 1)
  %output11 = fmul double %return4, %return10
  %output12 = fsub double %output, %output11
  %output16 = fmul double %return4, %return7
  %output20 = fmul double %return, %return10
  %output21 = fadd double %output16, %output20
  %weight22 = load double* %weight
  %output24 = fmul double %weight22, %output12
  %tmp = load <3 x double>* %pos
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %pos
  %weight28 = load double* %weight
  %output30 = fmul double %weight28, %output21
  %return32 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output27, double %output30, i64 1)
  %output34 = extractvalue { double, <3 x double> } %return32, 1
  store <3 x double> %output34, <3 x double>* %pos
  ret void
}

define private void @"VAR_HORSESHOE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e-10
  %output3 = call double @"div@FF"(double %weight1, double %output)
  %_inp4 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 1)
  %output7 = fsub double %return, %return6
  %output12 = fadd double %return, %return6
  %output13 = fmul double %output7, %output12
  %output15 = fmul double %output13, %output3
  %tmp = load <3 x double>* %pos
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  %_inp19 = load <3 x double>* %_inp
  %return20 = call double @"getcomp@FVI"(<3 x double> %_inp19, i64 0)
  %output21 = fmul double 2.000000e+00, %return20
  %return23 = call double @"getcomp@FVI"(<3 x double> %_inp19, i64 1)
  %output24 = fmul double %output21, %return23
  %output26 = fmul double %output24, %output3
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output18, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  ret void
}

define private void @"VAR_POLAR@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double %precalc, 0x3FD45F306DC9C883
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output4 = fsub double %precalc3, 1.000000e+00
  %weight5 = load double* %weight
  %output7 = fmul double %weight5, %output
  %tmp = load <3 x double>* %pos
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output9, <3 x double>* %pos
  %weight10 = load double* %weight
  %output12 = fmul double %weight10, %output4
  %return14 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output9, double %output12, i64 1)
  %output16 = extractvalue { double, <3 x double> } %return14, 1
  store <3 x double> %output16, <3 x double>* %pos
  ret void
}

define private void @"VAR_HANDKERCHIEF@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca i8*
  %5 = alloca <3 x double>
  %6 = alloca i8*
  %7 = alloca <3 x double>
  %8 = alloca i8*
  %9 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight2 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp3 = load <3 x double>* %_inp
  store <3 x double> %_inp3, <3 x double>* %3
  %precalc4 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output = fmul double %weight2, %precalc4
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %4
  %_inp6 = load <3 x double>* %_inp
  store <3 x double> %_inp6, <3 x double>* %5
  %precalc7 = call double @"precalc@FSV"(i8** %4, <3 x double>* %5)
  %output8 = fadd double %precalc, %precalc7
  %return = call double @"sin@FF"(double %output8)
  %output9 = fmul double %output, %return
  %tmp = load <3 x double>* %pos
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %pos
  %weight13 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %6
  %_inp14 = load <3 x double>* %_inp
  store <3 x double> %_inp14, <3 x double>* %7
  %precalc15 = call double @"precalc@FSV"(i8** %6, <3 x double>* %7)
  %output16 = fmul double %weight13, %precalc15
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %8
  %_inp18 = load <3 x double>* %_inp
  store <3 x double> %_inp18, <3 x double>* %9
  %precalc19 = call double @"precalc@FSV"(i8** %8, <3 x double>* %9)
  %output20 = fsub double %precalc, %precalc19
  %return21 = call double @"cos@FF"(double %output20)
  %output22 = fmul double %output16, %return21
  %tmp23 = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp23, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  ret void
}

define private void @"VAR_HEART@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca i8*
  %5 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %2
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output = fmul double %precalc, %precalc3
  %return = call double @"sin@FF"(double %output)
  %return6 = call double @"cos@FF"(double %output)
  %weight7 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %4
  %_inp8 = load <3 x double>* %_inp
  store <3 x double> %_inp8, <3 x double>* %5
  %precalc9 = call double @"precalc@FSV"(i8** %4, <3 x double>* %5)
  %output10 = fmul double %weight7, %precalc9
  %output12 = fmul double %output10, %return
  %output15 = fmul double %output12, %return
  %tmp = load <3 x double>* %pos
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  %return20 = call double @"neg@FF"(double %output12)
  %output22 = fmul double %return20, %return6
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output18, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  ret void
}

define private void @"VAR_DISC@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = call double @"div@FF"(double 1.000000e+00, double 0x400921FB4D12D84A)
  %output2 = fmul double %precalc, %output
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp3 = load <3 x double>* %_inp
  store <3 x double> %_inp3, <3 x double>* %3
  %precalc4 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output5 = fmul double 0x400921FB4D12D84A, %precalc4
  store double %output5, double* %4
  call void @"sincos@FFF"(double* %4, double* %sr, double* %cr)
  %weight7 = load double* %weight
  %sr8 = load double* %sr
  %output9 = fmul double %weight7, %sr8
  %output11 = fmul double %output9, %output2
  %tmp = load <3 x double>* %pos
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output13 = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output13, <3 x double>* %pos
  %weight14 = load double* %weight
  %cr15 = load double* %cr
  %output16 = fmul double %weight14, %cr15
  %output18 = fmul double %output16, %output2
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output13, double %output18, i64 1)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %pos
  ret void
}

define private void @"VAR_SPIRAL@VVVF"(<3 x double>* %pos, <3 x double>* %_inp, <3 x double>* %precalc, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc2, 1.000000e-10
  %weight3 = load double* %weight
  %output5 = call double @"div@FF"(double %weight3, double %output)
  store double %output, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %precalc8 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc8, i64 1)
  %sr9 = load double* %sr
  %output10 = fadd double %return, %sr9
  %output11 = fmul double %output5, %output10
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %precalc16 = load <3 x double>* %precalc
  %return17 = call double @"getcomp@FVI"(<3 x double> %precalc16, i64 0)
  %cr18 = load double* %cr
  %output19 = fsub double %return17, %cr18
  %output20 = fmul double %output5, %output19
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output20, i64 1)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %pos
  ret void
}

define private void @"VAR_HIPERBOLIC@VVVF"(<3 x double>* %pos, <3 x double>* %_inp, <3 x double>* %precalc, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc2, 1.000000e-10
  %weight3 = load double* %weight
  %precalc4 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc4, i64 0)
  %output5 = fmul double %weight3, %return
  %output7 = call double @"div@FF"(double %output5, double %output)
  %tmp = load <3 x double>* %pos
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %pos
  %weight11 = load double* %weight
  %precalc12 = load <3 x double>* %precalc
  %return13 = call double @"getcomp@FVI"(<3 x double> %precalc12, i64 1)
  %output14 = fmul double %weight11, %return13
  %output16 = fmul double %output14, %output
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  ret void
}

define private void @"VAR_DIAMOND@VVVF"(<3 x double>* %pos, <3 x double>* %_inp, <3 x double>* %precalc, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store double %precalc2, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %weight4 = load double* %weight
  %precalc5 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc5, i64 0)
  %cr6 = load double* %cr
  %output = fmul double %return, %cr6
  %output7 = fmul double %weight4, %output
  %tmp = load <3 x double>* %pos
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %pos
  %weight11 = load double* %weight
  %precalc12 = load <3 x double>* %precalc
  %return13 = call double @"getcomp@FVI"(<3 x double> %precalc12, i64 1)
  %sr14 = load double* %sr
  %output15 = fmul double %return13, %sr14
  %output16 = fmul double %weight11, %output15
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  ret void
}

define private void @"VAR_EX@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output = fadd double %precalc, %precalc3
  %return = call double @"sin@FF"(double %output)
  %output8 = fsub double %precalc, %precalc3
  %return9 = call double @"cos@FF"(double %output8)
  %output12 = fmul double %return, %return
  %output14 = fmul double %output12, %return
  %output16 = fmul double %output14, %precalc3
  %output19 = fmul double %return9, %return9
  %output21 = fmul double %output19, %return9
  %output23 = fmul double %output21, %precalc3
  %weight24 = load double* %weight
  %output27 = fadd double %output16, %output23
  %output28 = fmul double %weight24, %output27
  %tmp = load <3 x double>* %pos
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output28, i64 0)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %pos
  %weight32 = load double* %weight
  %output35 = fsub double %output16, %output23
  %output36 = fmul double %weight32, %output35
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output31, double %output36, i64 1)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %pos
  ret void
}

define private void @"VAR_JULIA@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double 5.000000e-01, %precalc
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return2 = fcmp olt double %return, 5.000000e-01
  br i1 %return2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output5 = fadd double %output, 0x400921FB4D12D84A
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %aa.0 = phi double [ %output5, %true ], [ %output, %__llvm_entry ]
  %weight6 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp7 = load <3 x double>* %_inp
  store <3 x double> %_inp7, <3 x double>* %3
  %precalc8 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return9 = call double @"sqrt@FF"(double %precalc8)
  %output10 = fmul double %weight6, %return9
  store double %aa.0, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %ca13 = load double* %ca
  %output14 = fmul double %output10, %ca13
  %tmp = load <3 x double>* %pos
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %pos
  %sa19 = load double* %sa
  %output20 = fmul double %output10, %sa19
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output17, double %output20, i64 1)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %pos
  ret void
}

define private void @"VAR_BENT@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %return5 = fcmp olt double %return, 0.000000e+00
  br i1 %return5, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %output = fmul double %return, 2.000000e+00
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nx.0 = phi double [ %output, %true ], [ %return, %__llvm_entry ]
  %return9 = fcmp olt double %return3, 0.000000e+00
  br i1 %return9, label %true11, label %end12

true11:                                           ; preds = %end
  %output14 = call double @"div@FF"(double %return3, double 2.000000e+00)
  br label %end12

end12:                                            ; preds = %true11, %end
  %ny.0 = phi double [ %output14, %true11 ], [ %return3, %end ]
  %weight15 = load double* %weight
  %output17 = fmul double %weight15, %nx.0
  %tmp = load <3 x double>* %pos
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  %weight21 = load double* %weight
  %output23 = fmul double %weight21, %ny.0
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output20, double %output23, i64 1)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %pos
  ret void
}

define private void @"VAR_WAVES@VVFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %d, double* %e, double* %f, double* %h) nounwind alwaysinline {
__llvm_entry:
  %dy2 = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %dx2 = alloca double
  store double 0.000000e+00, double* %dx2, !vex-initializer-store !3
  store double 0.000000e+00, double* %dy2, !vex-initializer-store !3
  %f1 = load double* %f
  store double %f1, double* %1
  %h2 = load double* %h
  store double %h2, double* %2
  call void @"waves_precalc@FFFFF"(double* %dx2, double* %dy2, double* %0, double* %1, double* %2)
  %_inp3 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp3, i64 0)
  %d4 = load double* %d
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp3, i64 1)
  %dx27 = load double* %dx2
  %output = fmul double %return6, %dx27
  %return8 = call double @"sin@FF"(double %output)
  %output9 = fmul double %d4, %return8
  %output10 = fadd double %return, %output9
  %e13 = load double* %e
  %dy216 = load double* %dy2
  %output17 = fmul double %return, %dy216
  %return18 = call double @"sin@FF"(double %output17)
  %output19 = fmul double %e13, %return18
  %output20 = fadd double %return6, %output19
  %weight21 = load double* %weight
  %output23 = fmul double %weight21, %output10
  %tmp = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  %weight27 = load double* %weight
  %output29 = fmul double %weight27, %output20
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %pos
  ret void
}

define private void @"VAR_FISHEYE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight2 = load double* %weight
  %output = fmul double 2.000000e+00, %weight2
  %output4 = fadd double %precalc, 1.000000e+00
  %output5 = call double @"div@FF"(double %output, double %output4)
  %_inp7 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp7, i64 1)
  %output8 = fmul double %output5, %return
  %tmp = load <3 x double>* %pos
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %pos
  %_inp13 = load <3 x double>* %_inp
  %return14 = call double @"getcomp@FVI"(<3 x double> %_inp13, i64 0)
  %output15 = fmul double %output5, %return14
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output11, double %output15, i64 1)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %pos
  ret void
}

define private void @"VAR_POPCORN@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %d, double* %h) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %output = fmul double 3.000000e+00, %return
  %return2 = call double @"tan@FF"(double %output)
  %return4 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %output5 = fmul double 3.000000e+00, %return4
  %return6 = call double @"tan@FF"(double %output5)
  %d9 = load double* %d
  %return11 = call double @"sin@FF"(double %return2)
  %output12 = fmul double %d9, %return11
  %output13 = fadd double %return4, %output12
  %h16 = load double* %h
  %return18 = call double @"sin@FF"(double %return6)
  %output19 = fmul double %h16, %return18
  %output20 = fadd double %return, %output19
  %weight21 = load double* %weight
  %output23 = fmul double %weight21, %output13
  %tmp = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  %weight27 = load double* %weight
  %output29 = fmul double %weight27, %output20
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %pos
  ret void
}

declare double @"tan@FF"(double) nounwind readnone

define private void @"VAR_EXPONENTIAL@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sdy = alloca double
  %cdy = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sdy, !vex-initializer-store !3
  store double 0.000000e+00, double* %cdy, !vex-initializer-store !3
  %weight1 = load double* %weight
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output = fsub double %return, 1.000000e+00
  %return3 = call double @"exp@FF"(double %output)
  %output4 = fmul double %weight1, %return3
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output7 = fmul double 0x400921FB4D12D84A, %return6
  store double %output7, double* %0
  call void @"sincos@FFF"(double* %0, double* %sdy, double* %cdy)
  %cdy10 = load double* %cdy
  %output11 = fmul double %output4, %cdy10
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %sdy16 = load double* %sdy
  %output17 = fmul double %output4, %sdy16
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output17, i64 1)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %pos
  ret void
}

declare double @"exp@FF"(double) nounwind readnone

define private void @"VAR_POWER@VVVF"(<3 x double>* %pos, <3 x double>* %_inp, <3 x double>* %precalc, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc3 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %precalc4 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc4, i64 0)
  %return5 = call double @"pow@FFF"(double %precalc3, double %return)
  %output = fmul double %weight1, %return5
  %return8 = call double @"getcomp@FVI"(<3 x double> %precalc4, i64 1)
  %output9 = fmul double %output, %return8
  %tmp = load <3 x double>* %pos
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %pos
  %precalc14 = load <3 x double>* %precalc
  %return15 = call double @"getcomp@FVI"(<3 x double> %precalc14, i64 0)
  %output16 = fmul double %output, %return15
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output12, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  ret void
}

declare double @"pow@FFF"(double, double) nounwind readnone

define private void @"VAR_COSINE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %output = fmul double %return, 0x400921FB4D12D84A
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %sa, double* %ca)
  %ca3 = load double* %ca
  %_inp4 = load <3 x double>* %_inp
  %return5 = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 1)
  %return6 = call double @"cosh@FF"(double %return5)
  %output7 = fmul double %ca3, %return6
  %sa8 = load double* %sa
  %return9 = call double @"neg@FF"(double %sa8)
  %return12 = call double @"sinh@FF"(double %return5)
  %output13 = fmul double %return9, %return12
  %weight14 = load double* %weight
  %output16 = fmul double %weight14, %output7
  %tmp = load <3 x double>* %pos
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %pos
  %weight20 = load double* %weight
  %output22 = fmul double %weight20, %output13
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  ret void
}

declare double @"cosh@FF"(double) nounwind readnone

declare double @"sinh@FF"(double) nounwind readnone

define private void @"VAR_RINGS@VVVFF"(<3 x double>* %pos, <3 x double>* %_inp, <3 x double>* %precalc, double* %weight, double* %d) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca double
  %d1 = load double* %d
  %output = fmul double %d1, %d1
  %output3 = fadd double %output, 1.000000e-10
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp4 = load <3 x double>* %_inp
  store <3 x double> %_inp4, <3 x double>* %1
  %precalc5 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight6 = load double* %weight
  %output9 = fadd double %precalc5, %output3
  store double %output9, double* %2
  %output11 = fmul double 2.000000e+00, %output3
  store double %output11, double* %3
  %fmod = call double @"fmod@FFF"(double* %2, double* %3)
  %output13 = fsub double %fmod, %output3
  %output16 = fsub double 1.000000e+00, %output3
  %output17 = fmul double %precalc5, %output16
  %output18 = fadd double %output13, %output17
  %output19 = fmul double %weight6, %output18
  %precalc21 = load <3 x double>* %precalc
  %return = call double @"getcomp@FVI"(<3 x double> %precalc21, i64 1)
  %output22 = fmul double %output19, %return
  %tmp = load <3 x double>* %pos
  %return23 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output22, i64 0)
  %output25 = extractvalue { double, <3 x double> } %return23, 1
  store <3 x double> %output25, <3 x double>* %pos
  %precalc27 = load <3 x double>* %precalc
  %return28 = call double @"getcomp@FVI"(<3 x double> %precalc27, i64 0)
  %output29 = fmul double %output19, %return28
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output25, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %pos
  ret void
}

define private void @"VAR_FAN@VVFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %d) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %d1 = load double* %d
  %output = fmul double %d1, %d1
  %output3 = fadd double %output, 1.000000e-10
  %output4 = fmul double 0x400921FB4D12D84A, %output3
  %output7 = fmul double 5.000000e-01, %output4
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp8 = load <3 x double>* %_inp
  store <3 x double> %_inp8, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight9 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp10 = load <3 x double>* %_inp
  store <3 x double> %_inp10, <3 x double>* %3
  %precalc11 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output12 = fmul double %weight9, %precalc11
  %output16 = fadd double %precalc, %d1
  store double %output16, double* %4
  store double %output4, double* %5
  %fmod = call double @"fmod@FFF"(double* %4, double* %5)
  %return = fcmp ogt double %fmod, %output7
  br i1 %return, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return21 = call double @"neg@FF"(double %output7)
  br label %end

end:                                              ; preds = %__llvm_entry, %true
  %phi = phi double [ %return21, %true ], [ %output7, %__llvm_entry ]
  %output23 = fadd double %precalc, %phi
  store double %output23, double* %6
  call void @"sincos@FFF"(double* %6, double* %sa, double* %ca)
  %ca26 = load double* %ca
  %output27 = fmul double %output12, %ca26
  %tmp = load <3 x double>* %pos
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  %sa32 = load double* %sa
  %output33 = fmul double %output12, %sa32
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_BUBBLE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double 2.500000e-01, %precalc
  %output3 = fadd double %output, 1.000000e+00
  %output4 = call double @"div@FF"(double %weight1, double %output3)
  %_inp6 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 0)
  %output7 = fmul double %output4, %return
  %tmp = load <3 x double>* %pos
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %pos
  %_inp12 = load <3 x double>* %_inp
  %return13 = call double @"getcomp@FVI"(<3 x double> %_inp12, i64 1)
  %output14 = fmul double %output4, %return13
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  ret void
}

define private void @"VAR_CYLINDER@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %weight1 = load double* %weight
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %output = fmul double %weight1, %return3
  %tmp = load <3 x double>* %pos
  %return4 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return4, 1
  store <3 x double> %output6, <3 x double>* %pos
  %weight7 = load double* %weight
  %_inp8 = load <3 x double>* %_inp
  %return9 = call double @"getcomp@FVI"(<3 x double> %_inp8, i64 1)
  %output10 = fmul double %weight7, %return9
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output6, double %output10, i64 1)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  ret void
}

define private void @"VAR_EYEFISH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  %output = fmul double %weight1, 2.000000e+00
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output3 = fadd double 1.000000e+00, %precalc
  %output4 = call double @"div@FF"(double %output, double %output3)
  %_inp6 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 0)
  %output7 = fmul double %output4, %return
  %tmp = load <3 x double>* %pos
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %pos
  %_inp12 = load <3 x double>* %_inp
  %return13 = call double @"getcomp@FVI"(<3 x double> %_inp12, i64 1)
  %output14 = fmul double %output4, %return13
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  ret void
}

define private void @"VAR_BLUR@VF"(<3 x double>* %pos, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  store double %output1, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %weight3 = load double* %weight
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output5 = fmul double %weight3, %return4
  %cosr7 = load double* %cosr
  %output8 = fmul double %output5, %cosr7
  %tmp = load <3 x double>* %pos
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %pos
  %sinr13 = load double* %sinr
  %output14 = fmul double %output5, %sinr13
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output11, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  ret void
}

define private void @"VAR_CURL@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %c1, double* %c2) nounwind alwaysinline {
__llvm_entry:
  %c11 = load double* %c1
  %return = fcmp oeq double %c11, 0.000000e+00
  %c23 = load double* %c2
  %return4 = fcmp oeq double %c23, 0.000000e+00
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br i1 %return4, label %true6, label %false7

false:                                            ; preds = %__llvm_entry
  %_inp87 = load <3 x double>* %_inp
  %return88 = call double @"getcomp@FVI"(<3 x double> %_inp87, i64 0)
  %output89 = fmul double %c11, %return88
  %output90 = fadd double 1.000000e+00, %output89
  br i1 %return4, label %true83, label %false84

end:                                              ; preds = %true83, %false84, %true6, %false7
  ret void

true6:                                            ; preds = %true
  %weight9 = load double* %weight
  %_inp10 = load <3 x double>* %_inp
  %return11 = call double @"getcomp@FVI"(<3 x double> %_inp10, i64 0)
  %output = fmul double %weight9, %return11
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %weight15 = load double* %weight
  %_inp16 = load <3 x double>* %_inp
  %return17 = call double @"getcomp@FVI"(<3 x double> %_inp16, i64 1)
  %output18 = fmul double %weight15, %return17
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output18, i64 1)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %pos
  br label %end

false7:                                           ; preds = %true
  %_inp24 = load <3 x double>* %_inp
  %return25 = call double @"getcomp@FVI"(<3 x double> %_inp24, i64 0)
  %return26 = call double @"sqrt@FF"(double %return25)
  %return28 = call double @"getcomp@FVI"(<3 x double> %_inp24, i64 1)
  %return29 = call double @"sqrt@FF"(double %return28)
  %output30 = fsub double %return26, %return29
  %output31 = fmul double %c23, %output30
  %output32 = fadd double 1.000000e+00, %output31
  %output34 = fmul double %c23, 2.000000e+00
  %output37 = fmul double %output34, %return25
  %output40 = fmul double %output37, %return28
  %weight41 = load double* %weight
  %output44 = fmul double %output32, %output32
  %output47 = fmul double %output40, %output40
  %output48 = fadd double %output44, %output47
  %output49 = call double @"div@FF"(double %weight41, double %output48)
  %output53 = fmul double %return25, %output32
  %output57 = fmul double %return28, %output40
  %output58 = fadd double %output53, %output57
  %output60 = fmul double %output58, %output49
  %tmp61 = load <3 x double>* %pos
  %return62 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp61, double %output60, i64 0)
  %output64 = extractvalue { double, <3 x double> } %return62, 1
  store <3 x double> %output64, <3 x double>* %pos
  %_inp65 = load <3 x double>* %_inp
  %return66 = call double @"getcomp@FVI"(<3 x double> %_inp65, i64 1)
  %output68 = fmul double %return66, %output32
  %return70 = call double @"getcomp@FVI"(<3 x double> %_inp65, i64 0)
  %output72 = fmul double %return70, %output40
  %output73 = fsub double %output68, %output72
  %output75 = fmul double %output73, %output49
  %return77 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output64, double %output75, i64 1)
  %output79 = extractvalue { double, <3 x double> } %return77, 1
  store <3 x double> %output79, <3 x double>* %pos
  br label %end

true83:                                           ; preds = %false
  %return93 = call double @"getcomp@FVI"(<3 x double> %_inp87, i64 1)
  %output94 = fmul double %c11, %return93
  %weight95 = load double* %weight
  %output98 = fmul double %output90, %output90
  %output101 = fmul double %output94, %output94
  %output102 = fadd double %output98, %output101
  %output103 = call double @"div@FF"(double %weight95, double %output102)
  %output107 = fmul double %return88, %output90
  %output111 = fmul double %return93, %output94
  %output112 = fadd double %output107, %output111
  %output114 = fmul double %output112, %output103
  %tmp115 = load <3 x double>* %pos
  %return116 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp115, double %output114, i64 0)
  %output118 = extractvalue { double, <3 x double> } %return116, 1
  store <3 x double> %output118, <3 x double>* %pos
  %_inp119 = load <3 x double>* %_inp
  %return120 = call double @"getcomp@FVI"(<3 x double> %_inp119, i64 1)
  %output122 = fmul double %return120, %output90
  %return124 = call double @"getcomp@FVI"(<3 x double> %_inp119, i64 0)
  %output126 = fmul double %return124, %output94
  %output127 = fsub double %output122, %output126
  %output129 = fmul double %output127, %output103
  %return131 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output118, double %output129, i64 1)
  %output133 = extractvalue { double, <3 x double> } %return131, 1
  store <3 x double> %output133, <3 x double>* %pos
  br label %end

false84:                                          ; preds = %false
  %return142 = call double @"sqrt@FF"(double %return88)
  %return144 = call double @"getcomp@FVI"(<3 x double> %_inp87, i64 1)
  %return145 = call double @"sqrt@FF"(double %return144)
  %output146 = fsub double %return142, %return145
  %output147 = fmul double %c23, %output146
  %output148 = fadd double %output90, %output147
  %output152 = fmul double %c11, %return144
  %output154 = fmul double %c23, 2.000000e+00
  %output157 = fmul double %output154, %return88
  %output160 = fmul double %output157, %return144
  %output161 = fadd double %output152, %output160
  %weight162 = load double* %weight
  %output165 = fmul double %output148, %output148
  %output168 = fmul double %output161, %output161
  %output169 = fadd double %output165, %output168
  %output170 = call double @"div@FF"(double %weight162, double %output169)
  %output174 = fmul double %return88, %output148
  %output178 = fmul double %return144, %output161
  %output179 = fadd double %output174, %output178
  %output181 = fmul double %output179, %output170
  %tmp182 = load <3 x double>* %pos
  %return183 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp182, double %output181, i64 0)
  %output185 = extractvalue { double, <3 x double> } %return183, 1
  store <3 x double> %output185, <3 x double>* %pos
  %_inp186 = load <3 x double>* %_inp
  %return187 = call double @"getcomp@FVI"(<3 x double> %_inp186, i64 1)
  %output189 = fmul double %return187, %output148
  %return191 = call double @"getcomp@FVI"(<3 x double> %_inp186, i64 0)
  %output193 = fmul double %return191, %output161
  %output194 = fsub double %output189, %output193
  %output196 = fmul double %output194, %output170
  %return198 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output185, double %output196, i64 1)
  %output200 = extractvalue { double, <3 x double> } %return198, 1
  store <3 x double> %output200, <3 x double>* %pos
  br label %end
}

define private void @"VAR_NGON@VVFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %pow, double* %sides, double* %corners, double* %circle) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %return = call double @"neg@FF"(double 5.000000e-01)
  %pow1 = load double* %pow
  %output = fmul double %return, %pow1
  %sides2 = load double* %sides
  %output3 = call double @"div@FF"(double 0x401921FB4D12D84A, double %sides2)
  %output5 = call double @"div@FF"(double 1.000000e+00, double %output3)
  %_inp6 = load <3 x double>* %_inp
  %return7 = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 0)
  %return8 = fcmp oeq double %return7, 0.000000e+00
  %return9 = zext i1 %return8 to i64
  %return11 = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 1)
  %return12 = fcmp oeq double %return11, 0.000000e+00
  %return13 = zext i1 %return12 to i64
  %return14 = call i64 @"and@III"(i64 %return9, i64 %return13)
  %4 = icmp ne i64 %return14, 0
  br i1 %4, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp15 = load <3 x double>* %_inp
  store <3 x double> %_inp15, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %return17 = call double @"pow@FFF"(double %precalc, double %output)
  br label %end

end:                                              ; preds = %false, %true
  %r_factor.0 = phi double [ 0.000000e+00, %true ], [ %return17, %false ]
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  %_inp18 = load <3 x double>* %_inp
  store <3 x double> %_inp18, <3 x double>* %3
  %precalc19 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output24 = fmul double %precalc19, %output5
  %return25 = call double @"floor@FF"(double %output24)
  %output26 = fmul double %output3, %return25
  %output27 = fsub double %precalc19, %output26
  %output30 = fmul double 5.000000e-01, %output3
  %return31 = fcmp ogt double %output27, %output30
  br i1 %return31, label %true33, label %end34

true33:                                           ; preds = %end
  %output37 = fsub double %output27, %output3
  br label %end34

end34:                                            ; preds = %true33, %end
  %phi.0 = phi double [ %output37, %true33 ], [ %output27, %end ]
  %corners38 = load double* %corners
  %return40 = call double @"cos@FF"(double %phi.0)
  %output41 = call double @"div@FF"(double 1.000000e+00, double %return40)
  %output42 = fsub double %output41, 1.000000e+00
  %output43 = fmul double %corners38, %output42
  %circle44 = load double* %circle
  %output45 = fadd double %output43, %circle44
  %weight46 = load double* %weight
  %output47 = fmul double %output45, %weight46
  %output49 = fmul double %output47, %r_factor.0
  %_inp51 = load <3 x double>* %_inp
  %return52 = call double @"getcomp@FVI"(<3 x double> %_inp51, i64 0)
  %output53 = fmul double %output49, %return52
  %tmp = load <3 x double>* %pos
  %return54 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output53, i64 0)
  %output56 = extractvalue { double, <3 x double> } %return54, 1
  store <3 x double> %output56, <3 x double>* %pos
  %_inp58 = load <3 x double>* %_inp
  %return59 = call double @"getcomp@FVI"(<3 x double> %_inp58, i64 1)
  %output60 = fmul double %output49, %return59
  %return62 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output56, double %output60, i64 1)
  %output64 = extractvalue { double, <3 x double> } %return62, 1
  store <3 x double> %output64, <3 x double>* %pos
  ret void
}

declare i64 @"and@III"(i64, i64) nounwind readnone

define private void @"VAR_PDJ@VVFP"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <4 x double>* %pp) nounwind alwaysinline {
__llvm_entry:
  %pp1 = load <4 x double>* %pp
  %return = call double @"getcomp@FPI"(<4 x double> %pp1, i64 1)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output = fmul double %return, %return3
  %return4 = call double @"cos@FF"(double %output)
  %return6 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 2)
  %output9 = fmul double %return6, %return3
  %return10 = call double @"sin@FF"(double %output9)
  %return12 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 0)
  %return14 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output15 = fmul double %return12, %return14
  %return16 = call double @"sin@FF"(double %output15)
  %return18 = call double @"getcomp@FPI"(<4 x double> %pp1, i64 3)
  %output21 = fmul double %return18, %return14
  %return22 = call double @"cos@FF"(double %output21)
  %weight23 = load double* %weight
  %output26 = fsub double %return16, %return4
  %output27 = fmul double %weight23, %output26
  %tmp = load <3 x double>* %pos
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  %weight31 = load double* %weight
  %output34 = fsub double %return10, %return22
  %output35 = fmul double %weight31, %output34
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output35, i64 1)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %pos
  ret void
}

declare double @"getcomp@FPI"(<4 x double>, i64) nounwind readnone

define private void @"VAR_BLOB@VVVFFFF"(<3 x double>* %pos, <3 x double>* %_inp, <3 x double>* %precalc, double* %weight, double* %pp1, double* %pp2, double* %pp3) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %2
  %_inp4 = load <3 x double>* %_inp
  store <3 x double> %_inp4, <3 x double>* %3
  %precalc5 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %pp16 = load double* %pp1
  %pp27 = load double* %pp2
  %output = fsub double %pp16, %pp27
  %pp311 = load double* %pp3
  %output13 = fmul double %pp311, %precalc5
  %return = call double @"sin@FF"(double %output13)
  %output14 = fmul double 5.000000e-01, %return
  %output15 = fadd double 5.000000e-01, %output14
  %output16 = fmul double %output, %output15
  %output17 = fadd double %pp27, %output16
  %output18 = fmul double %precalc2, %output17
  %weight19 = load double* %weight
  %precalc20 = load <3 x double>* %precalc
  %return21 = call double @"getcomp@FVI"(<3 x double> %precalc20, i64 0)
  %output22 = fmul double %weight19, %return21
  %output24 = fmul double %output22, %output18
  %tmp = load <3 x double>* %pos
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %pos
  %weight28 = load double* %weight
  %precalc29 = load <3 x double>* %precalc
  %return30 = call double @"getcomp@FVI"(<3 x double> %precalc29, i64 1)
  %output31 = fmul double %weight28, %return30
  %output33 = fmul double %output31, %output18
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output27, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_JULIAN@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %power, double* %jdist) nounwind alwaysinline {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %power1 = load double* %power
  %jdist2 = load double* %jdist
  %output = call double @"div@FF"(double %jdist2, double %power1)
  %output4 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output6 = fmul double %power1, %return
  %return7 = call double @"trunc@FF"(double %output6)
  %cast = fptosi double %return7 to i64
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %0
  %_inp8 = load <3 x double>* %_inp
  store <3 x double> %_inp8, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %cast10 = sitofp i64 %cast to double
  %output11 = fmul double 0x401921FB4D12D84A, %cast10
  %output12 = fadd double %precalc, %output11
  %power13 = load double* %power
  %output14 = call double @"div@FF"(double %output12, double %power13)
  %weight15 = load double* %weight
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %2
  %_inp16 = load <3 x double>* %_inp
  store <3 x double> %_inp16, <3 x double>* %3
  %precalc17 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return19 = call double @"pow@FFF"(double %precalc17, double %output4)
  %output20 = fmul double %weight15, %return19
  store double %output14, double* %4
  call void @"sincos@FFF"(double* %4, double* %sina, double* %cosa)
  %cosa23 = load double* %cosa
  %output24 = fmul double %output20, %cosa23
  %tmp = load <3 x double>* %pos
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output24, i64 0)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %pos
  %sina29 = load double* %sina
  %output30 = fmul double %output20, %sina29
  %return32 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output27, double %output30, i64 1)
  %output34 = extractvalue { double, <3 x double> } %return32, 1
  store <3 x double> %output34, <3 x double>* %pos
  ret void
}

declare double @"trunc@FF"(double) nounwind readnone

define private void @"VAR_JULIASCOPE@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %power, double* %jdist) nounwind alwaysinline {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca i8*
  %4 = alloca <3 x double>
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %power1 = load double* %power
  %jdist2 = load double* %jdist
  %output = call double @"div@FF"(double %jdist2, double %power1)
  %output4 = call double @"div@FF"(double %output, double 2.000000e+00)
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output6 = fmul double %power1, %return
  %return7 = call double @"trunc@FF"(double %output6)
  %cast = fptosi double %return7 to i64
  %return9 = and i64 %cast, 1
  %return10 = call i64 @"eq@III"(i64 %return9, i64 0)
  %5 = icmp ne i64 %return10, 0
  %cast12 = sitofp i64 %cast to double
  %output13 = fmul double 0x401921FB4D12D84A, %cast12
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %0
  %_inp14 = load <3 x double>* %_inp
  store <3 x double> %_inp14, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  br i1 %5, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output15 = fadd double %output13, %precalc
  %power16 = load double* %power
  %output17 = call double @"div@FF"(double %output15, double %power16)
  br label %end

false:                                            ; preds = %__llvm_entry
  %output23 = fsub double %output13, %precalc
  %power24 = load double* %power
  %output25 = call double @"div@FF"(double %output23, double %power24)
  br label %end

end:                                              ; preds = %false, %true
  %tmpr.0 = phi double [ %output17, %true ], [ %output25, %false ]
  store double %tmpr.0, double* %2
  call void @"sincos@FFF"(double* %2, double* %sina, double* %cosa)
  %weight27 = load double* %weight
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %3
  %_inp28 = load <3 x double>* %_inp
  store <3 x double> %_inp28, <3 x double>* %4
  %precalc29 = call double @"precalc@FSV"(i8** %3, <3 x double>* %4)
  %return31 = call double @"pow@FFF"(double %precalc29, double %output4)
  %output32 = fmul double %weight27, %return31
  %cosa34 = load double* %cosa
  %output35 = fmul double %output32, %cosa34
  %tmp = load <3 x double>* %pos
  %return36 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output35, i64 0)
  %output38 = extractvalue { double, <3 x double> } %return36, 1
  store <3 x double> %output38, <3 x double>* %pos
  %sina40 = load double* %sina
  %output41 = fmul double %output32, %sina40
  %return43 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output38, double %output41, i64 1)
  %output45 = extractvalue { double, <3 x double> } %return43, 1
  store <3 x double> %output45, <3 x double>* %pos
  ret void
}

define private void @"VAR_GAUSSIAN@VF"(<3 x double>* %pos, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  %weight2 = load double* %weight
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output5 = fadd double %return3, %return4
  %return6 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output7 = fadd double %output5, %return6
  %return8 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output9 = fadd double %output7, %return8
  %output10 = fsub double %output9, 2.000000e+00
  %output11 = fmul double %weight2, %output10
  %return14 = call double @"cos@FF"(double %output1)
  %output15 = fmul double %output11, %return14
  %tmp = load <3 x double>* %pos
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  %return21 = call double @"sin@FF"(double %output1)
  %output22 = fmul double %output11, %return21
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output18, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  ret void
}

define private void @"VAR_FAN2@VVFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %fan2) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %fan21 = load <2 x double>* %fan2
  %return = call double @"getcomp@FUI"(<2 x double> %fan21, i64 1)
  %return3 = call double @"getcomp@FUI"(<2 x double> %fan21, i64 0)
  %output = fmul double %return3, %return3
  %output6 = fadd double %output, 1.000000e-10
  %output7 = fmul double 0x400921FB4D12D84A, %output6
  %output9 = fmul double 5.000000e-01, %output7
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp10 = load <3 x double>* %_inp
  store <3 x double> %_inp10, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight11 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp12 = load <3 x double>* %_inp
  store <3 x double> %_inp12, <3 x double>* %3
  %precalc13 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output14 = fmul double %weight11, %precalc13
  %output17 = fadd double %precalc, %return
  %output23 = call double @"div@FF"(double %output17, double %output7)
  %cast = fptosi double %output23 to i64
  %cast24 = sitofp i64 %cast to double
  %output25 = fmul double %output7, %cast24
  %output26 = fsub double %output17, %output25
  %return29 = fcmp ogt double %output26, %output9
  br i1 %return29, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output33 = fsub double %precalc, %output9
  br label %end

false:                                            ; preds = %__llvm_entry
  %output36 = fadd double %precalc, %output9
  br label %end

end:                                              ; preds = %false, %true
  %aa.0 = phi double [ %output33, %true ], [ %output36, %false ]
  store double %aa.0, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %sa39 = load double* %sa
  %output40 = fmul double %output14, %sa39
  %tmp = load <3 x double>* %pos
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output40, i64 0)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %pos
  %ca45 = load double* %ca
  %output46 = fmul double %output14, %ca45
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output43, double %output46, i64 1)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %pos
  ret void
}

declare double @"getcomp@FUI"(<2 x double>, i64) nounwind readnone

define private void @"VAR_RINGS2@VVVFF"(<3 x double>* %pos, <3 x double>* %_inp, <3 x double>* %precalc, double* %weight, double* %rings2val) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc2 = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %rings2val3 = load double* %rings2val
  %output = fmul double %rings2val3, %rings2val3
  %return = call double @"neg@FF"(double 2.000000e+00)
  %output7 = fmul double %return, %output
  %output10 = fadd double %precalc2, %output
  %output12 = fmul double 2.000000e+00, %output
  %output13 = call double @"div@FF"(double %output10, double %output12)
  %cast = fptosi double %output13 to i64
  %cast14 = sitofp i64 %cast to double
  %output15 = fmul double %output7, %cast14
  %output18 = fsub double 1.000000e+00, %output
  %output19 = fmul double %precalc2, %output18
  %output20 = fadd double %output15, %output19
  %output21 = fadd double %precalc2, %output20
  %weight22 = load double* %weight
  %precalc23 = load <3 x double>* %precalc
  %return24 = call double @"getcomp@FVI"(<3 x double> %precalc23, i64 0)
  %output25 = fmul double %weight22, %return24
  %output27 = fmul double %output25, %output21
  %tmp = load <3 x double>* %pos
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  %weight31 = load double* %weight
  %precalc32 = load <3 x double>* %precalc
  %return33 = call double @"getcomp@FVI"(<3 x double> %precalc32, i64 1)
  %output34 = fmul double %weight31, %return33
  %output36 = fmul double %output34, %output21
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output36, i64 1)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %pos
  ret void
}

define private void @"VAR_RECTANGLES@VVFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %rect) nounwind alwaysinline {
__llvm_entry:
  %rect1 = load <2 x double>* %rect
  %return = call double @"getcomp@FUI"(<2 x double> %rect1, i64 0)
  %return2 = fcmp oeq double %return, 0.000000e+00
  %weight4 = load double* %weight
  %_inp5 = load <3 x double>* %_inp
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp5, i64 0)
  br i1 %return2, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = fmul double %weight4, %return6
  %tmp = load <3 x double>* %pos
  %return7 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output9 = extractvalue { double, <3 x double> } %return7, 1
  store <3 x double> %output9, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %output15 = call double @"div@FF"(double %return6, double %return)
  %return16 = call i64 @"floor@IF"(double %output15)
  %output17 = mul i64 2, %return16
  %output18 = add i64 %output17, 1
  %rect19 = load <2 x double>* %rect
  %return20 = call double @"getcomp@FUI"(<2 x double> %rect19, i64 0)
  %cast = sitofp i64 %output18 to double
  %output21 = fmul double %cast, %return20
  %_inp22 = load <3 x double>* %_inp
  %return23 = call double @"getcomp@FVI"(<3 x double> %_inp22, i64 0)
  %output24 = fsub double %output21, %return23
  %output25 = fmul double %weight4, %output24
  %tmp26 = load <3 x double>* %pos
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp26, double %output25, i64 0)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %pos
  br label %end

end:                                              ; preds = %false, %true
  %rect30 = load <2 x double>* %rect
  %return31 = call double @"getcomp@FUI"(<2 x double> %rect30, i64 1)
  %return32 = fcmp oeq double %return31, 0.000000e+00
  %weight37 = load double* %weight
  %_inp38 = load <3 x double>* %_inp
  %return39 = call double @"getcomp@FVI"(<3 x double> %_inp38, i64 1)
  br i1 %return32, label %true34, label %false35

true34:                                           ; preds = %end
  %output40 = fmul double %weight37, %return39
  %tmp41 = load <3 x double>* %pos
  %return42 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp41, double %output40, i64 1)
  %output44 = extractvalue { double, <3 x double> } %return42, 1
  store <3 x double> %output44, <3 x double>* %pos
  br label %end36

false35:                                          ; preds = %end
  %output50 = call double @"div@FF"(double %return39, double %return31)
  %return51 = call i64 @"floor@IF"(double %output50)
  %output52 = mul i64 2, %return51
  %output53 = add i64 %output52, 1
  %rect54 = load <2 x double>* %rect
  %return55 = call double @"getcomp@FUI"(<2 x double> %rect54, i64 1)
  %cast56 = sitofp i64 %output53 to double
  %output57 = fmul double %cast56, %return55
  %_inp58 = load <3 x double>* %_inp
  %return59 = call double @"getcomp@FVI"(<3 x double> %_inp58, i64 1)
  %output60 = fsub double %output57, %return59
  %output61 = fmul double %weight37, %output60
  %tmp62 = load <3 x double>* %pos
  %return63 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp62, double %output61, i64 1)
  %output65 = extractvalue { double, <3 x double> } %return63, 1
  store <3 x double> %output65, <3 x double>* %pos
  br label %end36

end36:                                            ; preds = %false35, %true34
  ret void
}

declare i64 @"floor@IF"(double) nounwind

define private void @"VAR_RADIALBLUR@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %spin, double* %zoom) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %weight1 = load double* %weight
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = fadd double %return, %return2
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output4 = fadd double %output, %return3
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output6 = fadd double %output4, %return5
  %output7 = fsub double %output6, 2.000000e+00
  %output8 = fmul double %weight1, %output7
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp9 = load <3 x double>* %_inp
  store <3 x double> %_inp9, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  %_inp10 = load <3 x double>* %_inp
  store <3 x double> %_inp10, <3 x double>* %3
  %precalc11 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %spin12 = load double* %spin
  %output14 = fmul double %spin12, %output8
  %output15 = fadd double %precalc11, %output14
  store double %output15, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %zoom17 = load double* %zoom
  %output19 = fmul double %zoom17, %output8
  %output20 = fsub double %output19, 1.000000e+00
  %ca22 = load double* %ca
  %output23 = fmul double %precalc, %ca22
  %_inp25 = load <3 x double>* %_inp
  %return26 = call double @"getcomp@FVI"(<3 x double> %_inp25, i64 0)
  %output27 = fmul double %output20, %return26
  %output28 = fadd double %output23, %output27
  %tmp = load <3 x double>* %pos
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output28, i64 0)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %pos
  %sa33 = load double* %sa
  %output34 = fmul double %precalc, %sa33
  %_inp36 = load <3 x double>* %_inp
  %return37 = call double @"getcomp@FVI"(<3 x double> %_inp36, i64 1)
  %output38 = fmul double %output20, %return37
  %output39 = fadd double %output34, %output38
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output31, double %output39, i64 1)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %pos
  ret void
}

define private void @"VAR_PIE@VFFFF"(<3 x double>* %pos, double* %weight, double* %slices, double* %thickness, double* %rotation) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %slices1 = load double* %slices
  %output = fmul double %return, %slices1
  %cast = fptosi double %output to i64
  %cast2 = sitofp i64 %cast to double
  %rotation3 = load double* %rotation
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %thickness6 = load double* %thickness
  %output7 = fmul double %return5, %thickness6
  %output8 = fadd double %cast2, %output7
  %output9 = fmul double 0x401921FB4D12D84A, %output8
  %slices10 = load double* %slices
  %output11 = call double @"div@FF"(double %output9, double %slices10)
  %output12 = fadd double %rotation3, %output11
  %weight13 = load double* %weight
  %return14 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output15 = fmul double %weight13, %return14
  store double %output12, double* %0
  call void @"sincos@FFF"(double* %0, double* %sa, double* %ca)
  %ca18 = load double* %ca
  %output19 = fmul double %output15, %ca18
  %tmp = load <3 x double>* %pos
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output19, i64 0)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %pos
  %sa24 = load double* %sa
  %output25 = fmul double %output15, %sa24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output22, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %pos
  ret void
}

define private void @"VAR_ARCH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %weight1 = load double* %weight
  %output = fmul double %return, %weight1
  %output2 = fmul double %output, 0x400921FB4D12D84A
  store double %output2, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %_inp4 = load <3 x double>* %_inp
  %return5 = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 0)
  %weight6 = load double* %weight
  %sinr7 = load double* %sinr
  %output8 = fmul double %weight6, %sinr7
  %output9 = fadd double %return5, %output8
  %tmp = load <3 x double>* %pos
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %pos
  %_inp13 = load <3 x double>* %_inp
  %return14 = call double @"getcomp@FVI"(<3 x double> %_inp13, i64 1)
  %weight15 = load double* %weight
  %sinr16 = load double* %sinr
  %output18 = fmul double %sinr16, %sinr16
  %output19 = fmul double %weight15, %output18
  %cosr20 = load double* %cosr
  %output21 = call double @"div@FF"(double %output19, double %cosr20)
  %output22 = fadd double %return14, %output21
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output12, double %output22, i64 1)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  ret void
}

define private void @"VAR_TANGENT@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %weight1 = load double* %weight
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return3 = call double @"sin@FF"(double %return)
  %return5 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %return6 = call double @"cos@FF"(double %return5)
  %output = call double @"div@FF"(double %return3, double %return6)
  %output7 = fmul double %weight1, %output
  %tmp = load <3 x double>* %pos
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %pos
  %weight11 = load double* %weight
  %_inp12 = load <3 x double>* %_inp
  %return13 = call double @"getcomp@FVI"(<3 x double> %_inp12, i64 1)
  %return14 = call double @"tan@FF"(double %return13)
  %output15 = fmul double %weight11, %return14
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output15, i64 1)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %pos
  ret void
}

define private void @"VAR_SQUARE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %weight1 = load double* %weight
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = fsub double %return, 5.000000e-01
  %output2 = fmul double %weight1, %output
  %tmp = load <3 x double>* %pos
  %return3 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output2, i64 0)
  %output5 = extractvalue { double, <3 x double> } %return3, 1
  store <3 x double> %output5, <3 x double>* %pos
  %weight6 = load double* %weight
  %return7 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output8 = fsub double %return7, 5.000000e-01
  %output9 = fmul double %weight6, %output8
  %tmp10 = load <3 x double>* %pos
  %return11 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp10, double %output9, i64 0)
  %output13 = extractvalue { double, <3 x double> } %return11, 1
  store <3 x double> %output13, <3 x double>* %pos
  ret void
}

define private void @"VAR_RAYS@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = fmul double %weight1, %return
  %output2 = fmul double %output, 0x400921FB4D12D84A
  %weight3 = load double* %weight
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp4 = load <3 x double>* %_inp
  store <3 x double> %_inp4, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output5 = fadd double %precalc, 1.000000e-10
  %output6 = call double @"div@FF"(double %weight3, double %output5)
  %weight7 = load double* %weight
  %return9 = call double @"tan@FF"(double %output2)
  %output10 = fmul double %weight7, %return9
  %output12 = fmul double %output10, %output6
  %_inp14 = load <3 x double>* %_inp
  %return15 = call double @"getcomp@FVI"(<3 x double> %_inp14, i64 0)
  %return16 = call double @"cos@FF"(double %return15)
  %output17 = fmul double %output12, %return16
  %tmp = load <3 x double>* %pos
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  %_inp22 = load <3 x double>* %_inp
  %return23 = call double @"getcomp@FVI"(<3 x double> %_inp22, i64 1)
  %return24 = call double @"sin@FF"(double %return23)
  %output25 = fmul double %output12, %return24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output20, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %pos
  ret void
}

define private void @"VAR_BLADE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %weight1 = load double* %weight
  %output = fmul double %return, %weight1
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output3 = fmul double %output, %precalc
  store double %output3, double* %2
  call void @"sincos@FFF"(double* %2, double* %sinr, double* %cosr)
  %weight5 = load double* %weight
  %_inp6 = load <3 x double>* %_inp
  %return7 = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 0)
  %output8 = fmul double %weight5, %return7
  %cosr9 = load double* %cosr
  %sinr10 = load double* %sinr
  %output11 = fadd double %cosr9, %sinr10
  %output12 = fmul double %output8, %output11
  %tmp = load <3 x double>* %pos
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %pos
  %weight16 = load double* %weight
  %_inp17 = load <3 x double>* %_inp
  %return18 = call double @"getcomp@FVI"(<3 x double> %_inp17, i64 0)
  %output19 = fmul double %weight16, %return18
  %cosr20 = load double* %cosr
  %sinr21 = load double* %sinr
  %output22 = fsub double %cosr20, %sinr21
  %output23 = fmul double %output19, %output22
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output23, i64 1)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %pos
  ret void
}

define private void @"VAR_SECANT2@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fmul double %weight1, %precalc
  %return = call double @"cos@FF"(double %output)
  %output7 = call double @"div@FF"(double 1.000000e+00, double %return)
  %weight8 = load double* %weight
  %_inp9 = load <3 x double>* %_inp
  %return10 = call double @"getcomp@FVI"(<3 x double> %_inp9, i64 0)
  %output11 = fmul double %weight8, %return10
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %return16 = fcmp olt double %return, 0.000000e+00
  %weight18 = load double* %weight
  br i1 %return16, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output20 = fadd double %output7, 1.000000e+00
  %output21 = fmul double %weight18, %output20
  %return23 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output21, i64 1)
  %output25 = extractvalue { double, <3 x double> } %return23, 1
  store <3 x double> %output25, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %output28 = fsub double %output7, 1.000000e+00
  %output29 = fmul double %weight18, %output28
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %pos
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

define private void @"VAR_TWINTRIAN@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %weight1 = load double* %weight
  %output = fmul double %return, %weight1
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output3 = fmul double %output, %precalc
  store double %output3, double* %2
  call void @"sincos@FFF"(double* %2, double* %sinr, double* %cosr)
  %sinr5 = load double* %sinr
  %output7 = fmul double %sinr5, %sinr5
  %return8 = call double @"log10@FF"(double %output7)
  %cosr9 = load double* %cosr
  %output10 = fadd double %return8, %cosr9
  %return12 = call i64 @"isfinite@IF"(double %output10)
  %return13 = call i64 @"not@II"(i64 %return12)
  %return15 = call i64 @"isnan@IF"(double %output10)
  %return16 = call i64 @"or@III"(i64 %return13, i64 %return15)
  %3 = icmp ne i64 %return16, 0
  br i1 %3, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %return17 = call double @"neg@FF"(double 3.000000e+01)
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %diff.0 = phi double [ %return17, %true ], [ %output10, %__llvm_entry ]
  %weight18 = load double* %weight
  %_inp19 = load <3 x double>* %_inp
  %return20 = call double @"getcomp@FVI"(<3 x double> %_inp19, i64 0)
  %output21 = fmul double %weight18, %return20
  %output23 = fmul double %output21, %diff.0
  %tmp = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  %weight27 = load double* %weight
  %_inp28 = load <3 x double>* %_inp
  %return29 = call double @"getcomp@FVI"(<3 x double> %_inp28, i64 0)
  %output30 = fmul double %weight27, %return29
  %sinr32 = load double* %sinr
  %output33 = fmul double %sinr32, 0x400921FB4D12D84A
  %output34 = fsub double %diff.0, %output33
  %output35 = fmul double %output30, %output34
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output35, i64 1)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %pos
  ret void
}

declare double @"log10@FF"(double) nounwind readnone

define private void @"VAR_CROSS@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %output8 = fmul double %return5, %return5
  %output9 = fsub double %output, %output8
  %weight10 = load double* %weight
  %output13 = fmul double %output9, %output9
  %output14 = fadd double %output13, 1.000000e-10
  %output15 = call double @"div@FF"(double 1.000000e+00, double %output14)
  %return16 = call double @"sqrt@FF"(double %output15)
  %output17 = fmul double %weight10, %return16
  %output21 = fmul double %return, %output17
  %tmp = load <3 x double>* %pos
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %pos
  %_inp25 = load <3 x double>* %_inp
  %return26 = call double @"getcomp@FVI"(<3 x double> %_inp25, i64 1)
  %output28 = fmul double %return26, %output17
  %return30 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output24, double %output28, i64 1)
  %output32 = extractvalue { double, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %pos
  ret void
}

define private void @"VAR_DISC2@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %rot, double* %twist) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %disc2_sinadd = alloca double
  %disc2_cosadd = alloca double
  %disc2_timespi = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca i8*
  %4 = alloca <3 x double>
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  store double 0.000000e+00, double* %disc2_sinadd, !vex-initializer-store !3
  store double 0.000000e+00, double* %disc2_cosadd, !vex-initializer-store !3
  store double 0.000000e+00, double* %disc2_timespi, !vex-initializer-store !3
  %rot1 = load double* %rot
  store double %rot1, double* %0
  %twist2 = load double* %twist
  store double %twist2, double* %1
  call void @"disc2_precalc@FFFFF"(double* %0, double* %1, double* %disc2_sinadd, double* %disc2_cosadd, double* %disc2_timespi)
  %disc2_timespi3 = load double* %disc2_timespi
  %_inp4 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 1)
  %output = fadd double %return, %return6
  %output7 = fmul double %disc2_timespi3, %output
  store double %output7, double* %2
  call void @"sincos@FFF"(double* %2, double* %sinr, double* %cosr)
  %weight9 = load double* %weight
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %3
  %_inp10 = load <3 x double>* %_inp
  store <3 x double> %_inp10, <3 x double>* %4
  %precalc = call double @"precalc@FSV"(i8** %3, <3 x double>* %4)
  %output11 = fmul double %weight9, %precalc
  %output12 = call double @"div@FF"(double %output11, double 0x400921FB4D12D84A)
  %sinr13 = load double* %sinr
  %disc2_cosadd14 = load double* %disc2_cosadd
  %output15 = fadd double %sinr13, %disc2_cosadd14
  %output17 = fmul double %output15, %output12
  %tmp = load <3 x double>* %pos
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  %cosr21 = load double* %cosr
  %disc2_sinadd22 = load double* %disc2_sinadd
  %output23 = fadd double %cosr21, %disc2_sinadd22
  %output25 = fmul double %output23, %output12
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output20, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %pos
  ret void
}

define private void @"VAR_SUPERSHAPE@VVFFFFV"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %ss_rnd, double* %ss_m, double* %ss_holes, <3 x double>* %ss_n) nounwind alwaysinline {
__llvm_entry:
  %st = alloca double
  %ct = alloca double
  %ss_pm_4 = alloca double
  %ss_pneg1_n1 = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  %5 = alloca i8*
  %6 = alloca <3 x double>
  store double 0.000000e+00, double* %st, !vex-initializer-store !3
  store double 0.000000e+00, double* %ct, !vex-initializer-store !3
  store double 0.000000e+00, double* %ss_pm_4, !vex-initializer-store !3
  store double 0.000000e+00, double* %ss_pneg1_n1, !vex-initializer-store !3
  %ss_m1 = load double* %ss_m
  store double %ss_m1, double* %0
  %ss_n2 = load <3 x double>* %ss_n
  %return = call double @"getcomp@FVI"(<3 x double> %ss_n2, i64 0)
  store double %return, double* %1
  call void @"supershape_precalc@FFFF"(double* %0, double* %1, double* %ss_pm_4, double* %ss_pneg1_n1)
  %ss_pm_43 = load double* %ss_pm_4
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  %_inp4 = load <3 x double>* %_inp
  store <3 x double> %_inp4, <3 x double>* %3
  %precalc = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output = fmul double %ss_pm_43, %precalc
  %output5 = fadd double %output, 7.853981e-01
  store double %output5, double* %4
  call void @"sincos@FFF"(double* %4, double* %st, double* %ct)
  %ct7 = load double* %ct
  %return8 = call double @"abs@FF"(double %ct7)
  %ss_n10 = load <3 x double>* %ss_n
  %return11 = call double @"getcomp@FVI"(<3 x double> %ss_n10, i64 1)
  %return12 = call double @"pow@FFF"(double %return8, double %return11)
  %st13 = load double* %st
  %return14 = call double @"abs@FF"(double %st13)
  %ss_n16 = load <3 x double>* %ss_n
  %return17 = call double @"getcomp@FVI"(<3 x double> %ss_n16, i64 2)
  %return18 = call double @"pow@FFF"(double %return14, double %return17)
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %5
  %_inp19 = load <3 x double>* %_inp
  store <3 x double> %_inp19, <3 x double>* %6
  %precalc20 = call double @"precalc@FSV"(i8** %5, <3 x double>* %6)
  %weight21 = load double* %weight
  %ss_rnd22 = load double* %ss_rnd
  %return23 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output24 = fmul double %ss_rnd22, %return23
  %ss_rnd25 = load double* %ss_rnd
  %output26 = fsub double 1.000000e+00, %ss_rnd25
  %output28 = fmul double %output26, %precalc20
  %output29 = fadd double %output24, %output28
  %ss_holes30 = load double* %ss_holes
  %output31 = fsub double %output29, %ss_holes30
  %output32 = fmul double %weight21, %output31
  %output35 = fadd double %return12, %return18
  %ss_pneg1_n136 = load double* %ss_pneg1_n1
  %return37 = call double @"pow@FFF"(double %output35, double %ss_pneg1_n136)
  %output38 = fmul double %output32, %return37
  %output40 = call double @"div@FF"(double %output38, double %precalc20)
  %_inp42 = load <3 x double>* %_inp
  %return43 = call double @"getcomp@FVI"(<3 x double> %_inp42, i64 0)
  %output44 = fmul double %output40, %return43
  %tmp = load <3 x double>* %pos
  %return45 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output44, i64 0)
  %output47 = extractvalue { double, <3 x double> } %return45, 1
  store <3 x double> %output47, <3 x double>* %pos
  %_inp49 = load <3 x double>* %_inp
  %return50 = call double @"getcomp@FVI"(<3 x double> %_inp49, i64 1)
  %output51 = fmul double %output40, %return50
  %return53 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output47, double %output51, i64 1)
  %output55 = extractvalue { double, <3 x double> } %return53, 1
  store <3 x double> %output55, <3 x double>* %pos
  ret void
}

define private void @"VAR_FLOWER@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %petals, double* %holes) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight2 = load double* %weight
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %holes3 = load double* %holes
  %output = fsub double %return, %holes3
  %output4 = fmul double %weight2, %output
  %petals5 = load double* %petals
  %output7 = fmul double %petals5, %precalc
  %return8 = call double @"cos@FF"(double %output7)
  %output9 = fmul double %output4, %return8
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp10 = load <3 x double>* %_inp
  store <3 x double> %_inp10, <3 x double>* %3
  %precalc11 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output12 = call double @"div@FF"(double %output9, double %precalc11)
  %_inp14 = load <3 x double>* %_inp
  %return15 = call double @"getcomp@FVI"(<3 x double> %_inp14, i64 0)
  %output16 = fmul double %output12, %return15
  %tmp = load <3 x double>* %pos
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %pos
  %_inp21 = load <3 x double>* %_inp
  %return22 = call double @"getcomp@FVI"(<3 x double> %_inp21, i64 1)
  %output23 = fmul double %output12, %return22
  %return25 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %output23, i64 1)
  %output27 = extractvalue { double, <3 x double> } %return25, 1
  store <3 x double> %output27, <3 x double>* %pos
  ret void
}

define private void @"VAR_CONIC@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %eccentricity, double* %holes) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output = call double @"div@FF"(double %return, double %precalc)
  %weight4 = load double* %weight
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %holes6 = load double* %holes
  %output7 = fsub double %return5, %holes6
  %output8 = fmul double %weight4, %output7
  %eccentricity9 = load double* %eccentricity
  %output10 = fmul double %output8, %eccentricity9
  %output13 = fmul double %eccentricity9, %output
  %output14 = fadd double 1.000000e+00, %output13
  %output15 = call double @"div@FF"(double %output10, double %output14)
  %output17 = call double @"div@FF"(double %output15, double %precalc)
  %_inp19 = load <3 x double>* %_inp
  %return20 = call double @"getcomp@FVI"(<3 x double> %_inp19, i64 0)
  %output21 = fmul double %output17, %return20
  %tmp = load <3 x double>* %pos
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %pos
  %_inp26 = load <3 x double>* %_inp
  %return27 = call double @"getcomp@FVI"(<3 x double> %_inp26, i64 1)
  %output28 = fmul double %output17, %return27
  %return30 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output24, double %output28, i64 1)
  %output32 = extractvalue { double, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %pos
  ret void
}

define private void @"VAR_PARABOLA@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %height, double* %width) nounwind alwaysinline {
__llvm_entry:
  %sr = alloca double
  %cr = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %sr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cr, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store double %precalc, double* %2
  call void @"sincos@FFF"(double* %2, double* %sr, double* %cr)
  %height3 = load double* %height
  %weight4 = load double* %weight
  %output = fmul double %height3, %weight4
  %sr5 = load double* %sr
  %output6 = fmul double %output, %sr5
  %output8 = fmul double %output6, %sr5
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output9 = fmul double %output8, %return
  %tmp = load <3 x double>* %pos
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %pos
  %width13 = load double* %width
  %weight14 = load double* %weight
  %output15 = fmul double %width13, %weight14
  %cr16 = load double* %cr
  %output17 = fmul double %output15, %cr16
  %return18 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output19 = fmul double %output17, %return18
  %tmp20 = load <3 x double>* %pos
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp20, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  ret void
}

define private void @"VAR_BENT2@VVFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %bent2) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %return5 = fcmp olt double %return, 0.000000e+00
  br i1 %return5, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %bent28 = load <2 x double>* %bent2
  %return9 = call double @"getcomp@FUI"(<2 x double> %bent28, i64 0)
  %output = fmul double %return, %return9
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %nx.0 = phi double [ %output, %true ], [ %return, %__llvm_entry ]
  %return11 = fcmp olt double %return3, 0.000000e+00
  br i1 %return11, label %true13, label %end14

true13:                                           ; preds = %end
  %bent216 = load <2 x double>* %bent2
  %return17 = call double @"getcomp@FUI"(<2 x double> %bent216, i64 1)
  %output18 = fmul double %return3, %return17
  br label %end14

end14:                                            ; preds = %true13, %end
  %ny.0 = phi double [ %output18, %true13 ], [ %return3, %end ]
  %weight19 = load double* %weight
  %output21 = fmul double %weight19, %nx.0
  %tmp = load <3 x double>* %pos
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %pos
  %weight25 = load double* %weight
  %output27 = fmul double %weight25, %ny.0
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output24, double %output27, i64 1)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %pos
  ret void
}

define private void @"VAR_BIPOLAR@VVFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %shift) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e+00
  %_inp3 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp3, i64 0)
  %output4 = fmul double 2.000000e+00, %return
  %return5 = call double @"neg@FF"(double 0x3FF921FB4D12D84A)
  %shift6 = load double* %shift
  %output7 = fmul double %return5, %shift6
  %return9 = call double @"getcomp@FVI"(<3 x double> %_inp3, i64 1)
  %output10 = fmul double 2.000000e+00, %return9
  %output12 = fsub double %precalc, 1.000000e+00
  %return13 = call double @"atan2@FFF"(double %output10, double %output12)
  %output14 = fmul double 5.000000e-01, %return13
  %output16 = fadd double %output14, %output7
  %return18 = fcmp ogt double %output16, 0x3FF921FB4D12D84A
  br i1 %return18, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output22 = fadd double %output16, 0x3FF921FB4D12D84A
  store double %output22, double* %2
  store double 0x400921FB4D12D84A, double* %3
  %fmod = call double @"fmod@FFF"(double* %2, double* %3)
  %output23 = fadd double %return5, %fmod
  br label %end

false:                                            ; preds = %__llvm_entry
  %return26 = fcmp olt double %output16, %return5
  br i1 %return26, label %true28, label %end

end:                                              ; preds = %false, %true28, %true
  %y.0 = phi double [ %output23, %true ], [ %output33, %true28 ], [ %output16, %false ]
  %weight34 = load double* %weight
  %output35 = fmul double %weight34, 2.500000e-01
  %output36 = fmul double %output35, 0x3FE45F306DC9C883
  %output39 = fadd double %output, %output4
  %output42 = fsub double %output, %output4
  %output43 = call double @"div@FF"(double %output39, double %output42)
  %return44 = call double @"log@FF"(double %output43)
  %output45 = fmul double %output36, %return44
  %tmp = load <3 x double>* %pos
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output45, i64 0)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  store <3 x double> %output48, <3 x double>* %pos
  %weight49 = load double* %weight
  %output50 = fmul double %weight49, 0x3FE45F306DC9C883
  %output52 = fmul double %output50, %y.0
  %return54 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output48, double %output52, i64 1)
  %output56 = extractvalue { double, <3 x double> } %return54, 1
  store <3 x double> %output56, <3 x double>* %pos
  ret void

true28:                                           ; preds = %false
  %output31 = fsub double 0x3FF921FB4D12D84A, %output16
  store double %output31, double* %4
  store double 0x400921FB4D12D84A, double* %5
  %fmod32 = call double @"fmod@FFF"(double* %4, double* %5)
  %output33 = fsub double 0x3FF921FB4D12D84A, %fmod32
  br label %end
}

declare double @"log@FF"(double) nounwind readnone

define private void @"VAR_BOARDERS@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %return2 = call double @"rint@FF"(double %return)
  %return4 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %return5 = call double @"rint@FF"(double %return4)
  %output = fsub double %return, %return2
  %output12 = fsub double %return4, %return5
  %return13 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return14 = fcmp oge double %return13, 7.500000e-01
  br i1 %return14, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output17 = fmul double %output, 5.000000e-01
  %output19 = fadd double %output17, %return2
  %tmp = load <3 x double>* %pos
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output19, i64 0)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %pos
  %output24 = fmul double %output12, 5.000000e-01
  %output26 = fadd double %output24, %return5
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output22, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %return32 = call double @"abs@FF"(double %output)
  %return34 = call double @"abs@FF"(double %output12)
  %return35 = fcmp oge double %return32, %return34
  br i1 %return35, label %true37, label %false38

end:                                              ; preds = %true101, %false102, %true43, %false44, %true
  ret void

true37:                                           ; preds = %false
  %return41 = fcmp oge double %output, 0.000000e+00
  %weight46 = load double* %weight
  %output48 = fmul double %output, 5.000000e-01
  %output50 = fadd double %output48, %return2
  br i1 %return41, label %true43, label %false44

false38:                                          ; preds = %false
  %return99 = fcmp oge double %output12, 0.000000e+00
  %weight104 = load double* %weight
  %output106 = fmul double %output12, 5.000000e-01
  %output108 = fadd double %output106, %return5
  br i1 %return99, label %true101, label %false102

true43:                                           ; preds = %true37
  %output51 = fadd double %output50, 2.500000e-01
  %output52 = fmul double %weight46, %output51
  %tmp53 = load <3 x double>* %pos
  %return54 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp53, double %output52, i64 0)
  %output56 = extractvalue { double, <3 x double> } %return54, 1
  store <3 x double> %output56, <3 x double>* %pos
  %weight57 = load double* %weight
  %output59 = fmul double %output12, 5.000000e-01
  %output61 = fadd double %output59, %return5
  %output63 = fmul double 2.500000e-01, %output12
  %output65 = call double @"div@FF"(double %output63, double %output)
  %output66 = fadd double %output61, %output65
  %output67 = fmul double %weight57, %output66
  %return69 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output56, double %output67, i64 1)
  %output71 = extractvalue { double, <3 x double> } %return69, 1
  store <3 x double> %output71, <3 x double>* %pos
  br label %end

false44:                                          ; preds = %true37
  %output77 = fsub double %output50, 2.500000e-01
  %output78 = fmul double %weight46, %output77
  %tmp79 = load <3 x double>* %pos
  %return80 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp79, double %output78, i64 0)
  %output82 = extractvalue { double, <3 x double> } %return80, 1
  store <3 x double> %output82, <3 x double>* %pos
  %weight83 = load double* %weight
  %output85 = fmul double %output12, 5.000000e-01
  %output87 = fadd double %output85, %return5
  %output89 = fmul double 2.500000e-01, %output12
  %output91 = call double @"div@FF"(double %output89, double %output)
  %output92 = fsub double %output87, %output91
  %output93 = fmul double %weight83, %output92
  %return95 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output82, double %output93, i64 1)
  %output97 = extractvalue { double, <3 x double> } %return95, 1
  store <3 x double> %output97, <3 x double>* %pos
  br label %end

true101:                                          ; preds = %false38
  %output109 = fadd double %output108, 2.500000e-01
  %output110 = fmul double %weight104, %output109
  %tmp111 = load <3 x double>* %pos
  %return112 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp111, double %output110, i64 1)
  %output114 = extractvalue { double, <3 x double> } %return112, 1
  store <3 x double> %output114, <3 x double>* %pos
  %weight115 = load double* %weight
  %output117 = fmul double %output, 5.000000e-01
  %output119 = fadd double %output117, %return2
  %output122 = call double @"div@FF"(double %output, double %output12)
  %output123 = fmul double %output122, 2.500000e-01
  %output124 = fadd double %output119, %output123
  %output125 = fmul double %weight115, %output124
  %return127 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output114, double %output125, i64 0)
  %output129 = extractvalue { double, <3 x double> } %return127, 1
  store <3 x double> %output129, <3 x double>* %pos
  br label %end

false102:                                         ; preds = %false38
  %output135 = fsub double %output108, 2.500000e-01
  %output136 = fmul double %weight104, %output135
  %tmp137 = load <3 x double>* %pos
  %return138 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp137, double %output136, i64 1)
  %output140 = extractvalue { double, <3 x double> } %return138, 1
  store <3 x double> %output140, <3 x double>* %pos
  %weight141 = load double* %weight
  %output143 = fmul double %output, 5.000000e-01
  %output145 = fadd double %output143, %return2
  %output148 = call double @"div@FF"(double %output, double %output12)
  %output149 = fmul double %output148, 2.500000e-01
  %output150 = fsub double %output145, %output149
  %output151 = fmul double %weight141, %output150
  %return153 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output140, double %output151, i64 0)
  %output155 = extractvalue { double, <3 x double> } %return153, 1
  store <3 x double> %output155, <3 x double>* %pos
  br label %end
}

declare double @"rint@FF"(double) nounwind readnone

define private void @"VAR_BUTTERFLY@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %weight1 = load double* %weight
  %output = fmul double %weight1, 0x3FF4D8D7A58FA311
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output3 = fmul double %return, 2.000000e+00
  %return8 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output9 = fmul double %return, %return8
  %return10 = call double @"abs@FF"(double %output9)
  %_inp11 = load <3 x double>* %_inp
  %return12 = call double @"getcomp@FVI"(<3 x double> %_inp11, i64 0)
  %output15 = fmul double %return12, %return12
  %output16 = fadd double 1.000000e-10, %output15
  %output19 = fmul double %output3, %output3
  %output20 = fadd double %output16, %output19
  %output21 = call double @"div@FF"(double %return10, double %output20)
  %return22 = call double @"sqrt@FF"(double %output21)
  %output23 = fmul double %output, %return22
  %output27 = fmul double %output23, %return12
  %tmp = load <3 x double>* %pos
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  %output33 = fmul double %output23, %output3
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output30, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_CELL@VVFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %size) nounwind alwaysinline {
__llvm_entry:
  %size1 = load double* %size
  %output = call double @"div@FF"(double 1.000000e+00, double %size1)
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output4 = fmul double %return, %output
  %return5 = call double @"floor@FF"(double %output4)
  %return7 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output9 = fmul double %return7, %output
  %return10 = call double @"floor@FF"(double %output9)
  %output15 = fmul double %return5, %size1
  %output16 = fsub double %return, %output15
  %output21 = fmul double %return10, %size1
  %output22 = fsub double %return7, %output21
  %return24 = fcmp oge double %return10, 0.000000e+00
  %return27 = fcmp oge double %return5, 0.000000e+00
  br i1 %return24, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output33 = fmul double %return10, 2.000000e+00
  br i1 %return27, label %true29, label %false30

false:                                            ; preds = %__llvm_entry
  %output49 = fmul double 2.000000e+00, %return10
  %output50 = fadd double %output49, 1.000000e+00
  %return51 = call double @"neg@FF"(double %output50)
  br i1 %return27, label %true45, label %false46

end:                                              ; preds = %true45, %false46, %true29, %false30
  %y.0 = phi double [ %output33, %true29 ], [ %output33, %false30 ], [ %return51, %true45 ], [ %return51, %false46 ]
  %x.0 = phi double [ %output35, %true29 ], [ %return41, %false30 ], [ %output53, %true45 ], [ %return61, %false46 ]
  %size64 = load double* %size
  %output65 = fmul double %x.0, %size64
  %output66 = fadd double %output16, %output65
  %tmp = load <3 x double>* %pos
  %return67 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output66, i64 0)
  %output69 = extractvalue { double, <3 x double> } %return67, 1
  store <3 x double> %output69, <3 x double>* %pos
  %size72 = load double* %size
  %output73 = fmul double %y.0, %size72
  %output74 = fadd double %output22, %output73
  %return75 = call double @"neg@FF"(double %output74)
  %return77 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output69, double %return75, i64 1)
  %output79 = extractvalue { double, <3 x double> } %return77, 1
  store <3 x double> %output79, <3 x double>* %pos
  ret void

true29:                                           ; preds = %true
  %output35 = fmul double %return5, 2.000000e+00
  br label %end

false30:                                          ; preds = %true
  %output39 = fmul double 2.000000e+00, %return5
  %output40 = fadd double %output39, 1.000000e+00
  %return41 = call double @"neg@FF"(double %output40)
  br label %end

true45:                                           ; preds = %false
  %output53 = fmul double %return5, 2.000000e+00
  br label %end

false46:                                          ; preds = %false
  %output59 = fmul double 2.000000e+00, %return5
  %output60 = fadd double %output59, 1.000000e+00
  %return61 = call double @"neg@FF"(double %output60)
  br label %end
}

define private void @"VAR_CPOW@VVFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %power, double* %pow_r, double* %pow_i) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %2
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return = call double @"log@FF"(double %precalc3)
  %output = fmul double 5.000000e-01, %return
  %power4 = load double* %power
  %output5 = call double @"div@FF"(double 0x401921FB4D12D84A, double %power4)
  %pow_r6 = load double* %pow_r
  %output8 = call double @"div@FF"(double %pow_r6, double %power4)
  %pow_i9 = load double* %pow_i
  %output11 = call double @"div@FF"(double %pow_i9, double %power4)
  %output14 = fmul double %output8, %precalc
  %output17 = fmul double %output11, %output
  %output18 = fadd double %output14, %output17
  %return21 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output22 = fmul double %power4, %return21
  %return23 = call double @"floor@FF"(double %output22)
  %output24 = fmul double %output5, %return23
  %output25 = fadd double %output18, %output24
  %weight26 = load double* %weight
  %output29 = fmul double %output8, %output
  %output32 = fmul double %output11, %precalc
  %output33 = fsub double %output29, %output32
  %return34 = call double @"exp@FF"(double %output33)
  %output35 = fmul double %weight26, %return34
  store double %output25, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %ca38 = load double* %ca
  %output39 = fmul double %output35, %ca38
  %tmp = load <3 x double>* %pos
  %return40 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output39, i64 0)
  %output42 = extractvalue { double, <3 x double> } %return40, 1
  store <3 x double> %output42, <3 x double>* %pos
  %sa44 = load double* %sa
  %output45 = fmul double %output35, %sa44
  %return47 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output42, double %output45, i64 1)
  %output49 = extractvalue { double, <3 x double> } %return47, 1
  store <3 x double> %output49, <3 x double>* %pos
  ret void
}

define private void @"VAR_EDISC@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %snv = alloca double
  %csv = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca double
  store double 0.000000e+00, double* %snv, !vex-initializer-store !3
  store double 0.000000e+00, double* %csv, !vex-initializer-store !3
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output = fmul double 2.000000e+00, %return
  %output5 = fadd double %precalc, %output
  %return6 = call double @"sqrt@FF"(double %output5)
  %output9 = fsub double %precalc, %output
  %return10 = call double @"sqrt@FF"(double %output9)
  %output13 = fadd double %return6, %return10
  %output14 = fmul double %output13, 5.000000e-01
  %output17 = fsub double %output14, 1.000000e+00
  %return18 = call double @"sqrt@FF"(double %output17)
  %output19 = fadd double %output14, %return18
  %return20 = call double @"log@FF"(double %output19)
  %output24 = call double @"div@FF"(double %return, double %output14)
  %return25 = call double @"acos@FF"(double %output24)
  %return26 = call double @"neg@FF"(double %return25)
  %weight27 = load double* %weight
  %output28 = call double @"div@FF"(double %weight27, double 0x402724046ECF9681)
  store double %return20, double* %2
  call void @"sincos@FFF"(double* %2, double* %snv, double* %csv)
  %return31 = call double @"sinh@FF"(double %return26)
  %return33 = call double @"cosh@FF"(double %return26)
  %_inp34 = load <3 x double>* %_inp
  %return35 = call double @"getcomp@FVI"(<3 x double> %_inp34, i64 1)
  %return36 = fcmp ogt double %return35, 0.000000e+00
  br i1 %return36, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %snv38 = load double* %snv
  %return39 = call double @"neg@FF"(double %snv38)
  store double %return39, double* %snv
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %output42 = fmul double %output28, %return33
  %csv43 = load double* %csv
  %output44 = fmul double %output42, %csv43
  %tmp45 = load <3 x double>* %pos
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp45, double %output44, i64 0)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  store <3 x double> %output48, <3 x double>* %pos
  %output51 = fmul double %output28, %return31
  %snv52 = load double* %snv
  %output53 = fmul double %output51, %snv52
  %return55 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output48, double %output53, i64 1)
  %output57 = extractvalue { double, <3 x double> } %return55, 1
  store <3 x double> %output57, <3 x double>* %pos
  ret void
}

declare double @"acos@FF"(double) nounwind readnone

define private void @"VAR_ELLIPTIC@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e+00
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output3 = fmul double 2.000000e+00, %return
  %output6 = fadd double %output, %output3
  %return7 = call double @"sqrt@FF"(double %output6)
  %output10 = fsub double %output, %output3
  %return11 = call double @"sqrt@FF"(double %output10)
  %output12 = fadd double %return7, %return11
  %output13 = fmul double 5.000000e-01, %output12
  %output17 = call double @"div@FF"(double %return, double %output13)
  %output20 = fmul double %output17, %output17
  %output21 = fsub double 1.000000e+00, %output20
  %output23 = fsub double %output13, 1.000000e+00
  %weight24 = load double* %weight
  %output25 = call double @"div@FF"(double %weight24, double 0x3FF921FB4D12D84A)
  %return27 = fcmp olt double %output21, 0.000000e+00
  br i1 %return27, label %true, label %false

true:                                             ; preds = %__llvm_entry
  br label %end

false:                                            ; preds = %__llvm_entry
  %return30 = call double @"sqrt@FF"(double %output21)
  br label %end

end:                                              ; preds = %false, %true
  %bb.0 = phi double [ 0.000000e+00, %true ], [ %return30, %false ]
  %return32 = fcmp olt double %output23, 0.000000e+00
  br i1 %return32, label %true34, label %false35

true34:                                           ; preds = %end
  br label %end36

false35:                                          ; preds = %end
  %return38 = call double @"sqrt@FF"(double %output23)
  br label %end36

end36:                                            ; preds = %false35, %true34
  %ssx.0 = phi double [ 0.000000e+00, %true34 ], [ %return38, %false35 ]
  %return42 = call double @"atan2@FFF"(double %output17, double %bb.0)
  %output43 = fmul double %output25, %return42
  %tmp44 = load <3 x double>* %pos
  %return45 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp44, double %output43, i64 0)
  %output47 = extractvalue { double, <3 x double> } %return45, 1
  store <3 x double> %output47, <3 x double>* %pos
  %_inp48 = load <3 x double>* %_inp
  %return49 = call double @"getcomp@FVI"(<3 x double> %_inp48, i64 1)
  %return50 = fcmp ogt double %return49, 0.000000e+00
  %output58 = fadd double %output13, %ssx.0
  %return59 = call double @"log@FF"(double %output58)
  br i1 %return50, label %true52, label %false53

true52:                                           ; preds = %end36
  %output60 = fmul double %output25, %return59
  %return62 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output47, double %output60, i64 1)
  %output64 = extractvalue { double, <3 x double> } %return62, 1
  store <3 x double> %output64, <3 x double>* %pos
  br label %end54

false53:                                          ; preds = %end36
  %return70 = call double @"neg@FF"(double %return59)
  %output71 = fmul double %output25, %return70
  %return73 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output47, double %output71, i64 1)
  %output75 = extractvalue { double, <3 x double> } %return73, 1
  store <3 x double> %output75, <3 x double>* %pos
  br label %end54

end54:                                            ; preds = %false53, %true52
  ret void
}

define private void @"VAR_NOISE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinr = alloca double
  %cosr = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinr, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosr, !vex-initializer-store !3
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = fmul double %return, 2.000000e+00
  %output1 = fmul double %output, 0x400921FB4D12D84A
  store double %output1, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinr, double* %cosr)
  %weight3 = load double* %weight
  %return4 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output5 = fmul double %weight3, %return4
  %_inp6 = load <3 x double>* %_inp
  %return7 = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 0)
  %output9 = fmul double %return7, %output5
  %cosr10 = load double* %cosr
  %output11 = fmul double %output9, %cosr10
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %_inp15 = load <3 x double>* %_inp
  %return16 = call double @"getcomp@FVI"(<3 x double> %_inp15, i64 1)
  %output18 = fmul double %return16, %output5
  %sinr19 = load double* %sinr
  %output20 = fmul double %output18, %sinr19
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output20, i64 1)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %pos
  ret void
}

define private void @"VAR_ESCHER@VVFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %beta) nounwind alwaysinline {
__llvm_entry:
  %seb = alloca double
  %ceb = alloca double
  %sn = alloca double
  %cn = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  %5 = alloca double
  store double 0.000000e+00, double* %seb, !vex-initializer-store !3
  store double 0.000000e+00, double* %ceb, !vex-initializer-store !3
  store double 0.000000e+00, double* %sn, !vex-initializer-store !3
  store double 0.000000e+00, double* %cn, !vex-initializer-store !3
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %2
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return = call double @"log@FF"(double %precalc3)
  %output = fmul double 5.000000e-01, %return
  %beta4 = load double* %beta
  store double %beta4, double* %4
  call void @"sincos@FFF"(double* %4, double* %seb, double* %ceb)
  %ceb5 = load double* %ceb
  %output6 = fadd double 1.000000e+00, %ceb5
  %output7 = fmul double 5.000000e-01, %output6
  %seb8 = load double* %seb
  %output9 = fmul double 5.000000e-01, %seb8
  %weight10 = load double* %weight
  %output13 = fmul double %output7, %output
  %output16 = fmul double %output9, %precalc
  %output17 = fsub double %output13, %output16
  %return18 = call double @"exp@FF"(double %output17)
  %output19 = fmul double %weight10, %return18
  %output22 = fmul double %output7, %precalc
  %output25 = fmul double %output9, %output
  %output26 = fadd double %output22, %output25
  store double %output26, double* %5
  call void @"sincos@FFF"(double* %5, double* %sn, double* %cn)
  %cn29 = load double* %cn
  %output30 = fmul double %output19, %cn29
  %tmp = load <3 x double>* %pos
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output30, i64 0)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %pos
  %sn35 = load double* %sn
  %output36 = fmul double %output19, %sn35
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output33, double %output36, i64 1)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %pos
  ret void
}

define private void @"VAR_FOCI@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sn = alloca double
  %cn = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sn, !vex-initializer-store !3
  store double 0.000000e+00, double* %cn, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %return2 = call double @"exp@FF"(double %return)
  %output = fmul double %return2, 5.000000e-01
  %output4 = call double @"div@FF"(double 2.500000e-01, double %output)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  store double %return6, double* %0
  call void @"sincos@FFF"(double* %0, double* %sn, double* %cn)
  %weight7 = load double* %weight
  %output10 = fadd double %output, %output4
  %cn11 = load double* %cn
  %output12 = fsub double %output10, %cn11
  %output13 = call double @"div@FF"(double %weight7, double %output12)
  %output17 = fsub double %output, %output4
  %output18 = fmul double %output13, %output17
  %tmp19 = load <3 x double>* %pos
  %return20 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp19, double %output18, i64 0)
  %output22 = extractvalue { double, <3 x double> } %return20, 1
  store <3 x double> %output22, <3 x double>* %pos
  %sn24 = load double* %sn
  %output25 = fmul double %output13, %sn24
  %return27 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output22, double %output25, i64 1)
  %output29 = extractvalue { double, <3 x double> } %return27, 1
  store <3 x double> %output29, <3 x double>* %pos
  ret void
}

define private void @"VAR_LAZYSUSAN@VVFFFFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %spin, double* %twist, double* %space, <2 x double>* %lazy) nounwind alwaysinline {
__llvm_entry:
  %sina = alloca double
  %cosa = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sina, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosa, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %lazy2 = load <2 x double>* %lazy
  %return3 = call double @"getcomp@FUI"(<2 x double> %lazy2, i64 0)
  %output = fsub double %return, %return3
  %return5 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %return7 = call double @"getcomp@FUI"(<2 x double> %lazy2, i64 1)
  %output8 = fsub double %return5, %return7
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %return11 = call <3 x double> @"set@VFFF"(double %output, double %output8, double 0.000000e+00)
  store <3 x double> %return11, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight13 = load double* %weight
  %return14 = fcmp olt double %precalc, %weight13
  br i1 %return14, label %true, label %false

true:                                             ; preds = %__llvm_entry
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  store <3 x double> %return11, <3 x double>* %3
  %precalc19 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %spin20 = load double* %spin
  %output21 = fadd double %precalc19, %spin20
  %twist22 = load double* %twist
  %weight23 = load double* %weight
  %output25 = fsub double %weight23, %precalc
  %output26 = fmul double %twist22, %output25
  %output27 = fadd double %output21, %output26
  store double %output27, double* %4
  call void @"sincos@FFF"(double* %4, double* %sina, double* %cosa)
  %weight29 = load double* %weight
  %output31 = fmul double %weight29, %precalc
  %cosa33 = load double* %cosa
  %output34 = fmul double %output31, %cosa33
  %lazy35 = load <2 x double>* %lazy
  %return36 = call double @"getcomp@FUI"(<2 x double> %lazy35, i64 0)
  %output37 = fadd double %output34, %return36
  %tmp = load <3 x double>* %pos
  %return38 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output37, i64 0)
  %output40 = extractvalue { double, <3 x double> } %return38, 1
  store <3 x double> %output40, <3 x double>* %pos
  %sina42 = load double* %sina
  %output43 = fmul double %output31, %sina42
  %lazy44 = load <2 x double>* %lazy
  %return45 = call double @"getcomp@FUI"(<2 x double> %lazy44, i64 1)
  %output46 = fadd double %output43, %return45
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output40, double %output46, i64 1)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %space52 = load double* %space
  %output54 = call double @"div@FF"(double %space52, double %precalc)
  %output55 = fadd double 1.000000e+00, %output54
  %output56 = fmul double %weight13, %output55
  %output59 = fmul double %output56, %output
  %lazy60 = load <2 x double>* %lazy
  %return61 = call double @"getcomp@FUI"(<2 x double> %lazy60, i64 0)
  %output62 = fadd double %output59, %return61
  %tmp63 = load <3 x double>* %pos
  %return64 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp63, double %output62, i64 0)
  %output66 = extractvalue { double, <3 x double> } %return64, 1
  store <3 x double> %output66, <3 x double>* %pos
  %output69 = fmul double %output56, %output8
  %lazy70 = load <2 x double>* %lazy
  %return71 = call double @"getcomp@FUI"(<2 x double> %lazy70, i64 1)
  %output72 = fadd double %output69, %return71
  %return74 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output66, double %output72, i64 1)
  %output76 = extractvalue { double, <3 x double> } %return74, 1
  store <3 x double> %output76, <3 x double>* %pos
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

define private void @"VAR_LOONIE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight2 = load double* %weight
  %output = fmul double %weight2, %weight2
  %return = fcmp olt double %precalc, %output
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output10 = call double @"div@FF"(double %output, double %precalc)
  %output11 = fsub double %output10, 1.000000e+00
  %return12 = call double @"sqrt@FF"(double %output11)
  %output13 = fmul double %weight2, %return12
  %_inp15 = load <3 x double>* %_inp
  %return16 = call double @"getcomp@FVI"(<3 x double> %_inp15, i64 0)
  %output17 = fmul double %output13, %return16
  %tmp = load <3 x double>* %pos
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output17, i64 0)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  %_inp22 = load <3 x double>* %_inp
  %return23 = call double @"getcomp@FVI"(<3 x double> %_inp22, i64 1)
  %output24 = fmul double %output13, %return23
  %return26 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output20, double %output24, i64 1)
  %output28 = extractvalue { double, <3 x double> } %return26, 1
  store <3 x double> %output28, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %_inp30 = load <3 x double>* %_inp
  %return31 = call double @"getcomp@FVI"(<3 x double> %_inp30, i64 0)
  %output32 = fmul double %weight2, %return31
  %tmp33 = load <3 x double>* %pos
  %return34 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp33, double %output32, i64 0)
  %output36 = extractvalue { double, <3 x double> } %return34, 1
  store <3 x double> %output36, <3 x double>* %pos
  %weight37 = load double* %weight
  %_inp38 = load <3 x double>* %_inp
  %return39 = call double @"getcomp@FVI"(<3 x double> %_inp38, i64 1)
  %output40 = fmul double %weight37, %return39
  %return42 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output36, double %output40, i64 1)
  %output44 = extractvalue { double, <3 x double> } %return42, 1
  store <3 x double> %output44, <3 x double>* %pos
  br label %end

end:                                              ; preds = %false, %true
  ret void
}

define private void @"VAR_PREBLUR@VF"(<3 x double>* %pos, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinA = alloca double
  %cosA = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %sinA, !vex-initializer-store !3
  store double 0.000000e+00, double* %cosA, !vex-initializer-store !3
  %weight1 = load double* %weight
  %return = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return2 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output = fadd double %return, %return2
  %return3 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output4 = fadd double %output, %return3
  %return5 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output6 = fadd double %output4, %return5
  %output7 = fsub double %output6, 2.000000e+00
  %output8 = fmul double %weight1, %output7
  %return9 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output10 = fmul double %return9, 2.000000e+00
  %output11 = fmul double %output10, 0x400921FB4D12D84A
  store double %output11, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinA, double* %cosA)
  %pos13 = load <3 x double>* %pos
  %return14 = call double @"getcomp@FVI"(<3 x double> %pos13, i64 0)
  %cosA16 = load double* %cosA
  %output17 = fmul double %output8, %cosA16
  %output18 = fadd double %return14, %output17
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %pos13, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %pos
  %return23 = call double @"getcomp@FVI"(<3 x double> %output21, i64 1)
  %sinA25 = load double* %sinA
  %output26 = fmul double %output8, %sinA25
  %output27 = fadd double %return23, %output26
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output27, i64 1)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %pos
  ret void
}

define private void @"VAR_MODULUS@VVFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %m) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca double
  %m1 = load <2 x double>* %m
  %return = call double @"getcomp@FUI"(<2 x double> %m1, i64 0)
  %output = fmul double 2.000000e+00, %return
  %return3 = call double @"getcomp@FUI"(<2 x double> %m1, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %_inp5 = load <3 x double>* %_inp
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp5, i64 0)
  %return9 = fcmp ogt double %return6, %return
  br i1 %return9, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %weight11 = load double* %weight
  %output18 = fadd double %return6, %return
  store double %output18, double* %0
  store double %output, double* %1
  %fmod = call double @"fmod@FFF"(double* %0, double* %1)
  %output20 = fadd double %return, %fmod
  %output21 = fmul double %weight11, %output20
  %tmp = load <3 x double>* %pos
  %return22 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output21, i64 0)
  %output24 = extractvalue { double, <3 x double> } %return22, 1
  store <3 x double> %output24, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %pos25 = load <3 x double>* %pos
  %return26 = call double @"getcomp@FVI"(<3 x double> %pos25, i64 0)
  %return29 = fcmp olt double %return26, %return
  %weight34 = load double* %weight
  br i1 %return29, label %true31, label %false32

end:                                              ; preds = %true31, %false32, %true
  %_inp58 = load <3 x double>* %_inp
  %return59 = call double @"getcomp@FVI"(<3 x double> %_inp58, i64 1)
  %m60 = load <2 x double>* %m
  %return61 = call double @"getcomp@FUI"(<2 x double> %m60, i64 1)
  %return62 = fcmp ogt double %return59, %return61
  br i1 %return62, label %true64, label %false65

true31:                                           ; preds = %false
  %output41 = fadd double %return, %return6
  store double %output41, double* %2
  store double %output, double* %3
  %fmod43 = call double @"fmod@FFF"(double* %2, double* %3)
  %output44 = fsub double %return, %fmod43
  %output45 = fmul double %weight34, %output44
  %tmp46 = load <3 x double>* %pos
  %return47 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp46, double %output45, i64 0)
  %output49 = extractvalue { double, <3 x double> } %return47, 1
  store <3 x double> %output49, <3 x double>* %pos
  br label %end

false32:                                          ; preds = %false
  %output53 = fmul double %weight34, %return6
  %return55 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %pos25, double %output53, i64 0)
  %output57 = extractvalue { double, <3 x double> } %return55, 1
  store <3 x double> %output57, <3 x double>* %pos
  br label %end

true64:                                           ; preds = %end
  %weight67 = load double* %weight
  %output74 = fadd double %return59, %return61
  store double %output74, double* %4
  store double %output4, double* %5
  %fmod76 = call double @"fmod@FFF"(double* %4, double* %5)
  %output77 = fadd double %return61, %fmod76
  %output78 = fmul double %weight67, %output77
  %tmp79 = load <3 x double>* %pos
  %return80 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp79, double %output78, i64 1)
  %output82 = extractvalue { double, <3 x double> } %return80, 1
  store <3 x double> %output82, <3 x double>* %pos
  br label %end66

false65:                                          ; preds = %end
  %pos83 = load <3 x double>* %pos
  %return84 = call double @"getcomp@FVI"(<3 x double> %pos83, i64 0)
  %return86 = call double @"getcomp@FUI"(<2 x double> %m60, i64 0)
  %return87 = fcmp olt double %return84, %return86
  %weight92 = load double* %weight
  br i1 %return87, label %true89, label %false90

end66:                                            ; preds = %true89, %false90, %true64
  ret void

true89:                                           ; preds = %false65
  %output99 = fadd double %return61, %return59
  store double %output99, double* %6
  store double %output4, double* %7
  %fmod101 = call double @"fmod@FFF"(double* %6, double* %7)
  %output102 = fsub double %return61, %fmod101
  %output103 = fmul double %weight92, %output102
  %tmp104 = load <3 x double>* %pos
  %return105 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp104, double %output103, i64 1)
  %output107 = extractvalue { double, <3 x double> } %return105, 1
  store <3 x double> %output107, <3 x double>* %pos
  br label %end66

false90:                                          ; preds = %false65
  %output111 = fmul double %weight92, %return59
  %return113 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %pos83, double %output111, i64 1)
  %output115 = extractvalue { double, <3 x double> } %return113, 1
  store <3 x double> %output115, <3 x double>* %pos
  br label %end66
}

define private void @"VAR_OSCOPE@VVFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %freq, double* %amp, double* %damp, double* %sep) nounwind alwaysinline {
__llvm_entry:
  %freq1 = load double* %freq
  %output = fmul double 0x401921FB4D12D84A, %freq1
  %damp2 = load double* %damp
  %return = fcmp oeq double %damp2, 0.000000e+00
  %amp4 = load double* %amp
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %_inp6 = load <3 x double>* %_inp
  %return7 = call double @"getcomp@FVI"(<3 x double> %_inp6, i64 0)
  %output8 = fmul double %output, %return7
  %return9 = call double @"cos@FF"(double %output8)
  %output10 = fmul double %amp4, %return9
  %sep11 = load double* %sep
  %output12 = fadd double %output10, %sep11
  br label %end

false:                                            ; preds = %__llvm_entry
  %_inp14 = load <3 x double>* %_inp
  %return15 = call double @"getcomp@FVI"(<3 x double> %_inp14, i64 0)
  %return16 = call double @"abs@FF"(double %return15)
  %return17 = call double @"neg@FF"(double %return16)
  %damp18 = load double* %damp
  %output19 = fmul double %return17, %damp18
  %return20 = call double @"exp@FF"(double %output19)
  %output21 = fmul double %amp4, %return20
  %_inp23 = load <3 x double>* %_inp
  %return24 = call double @"getcomp@FVI"(<3 x double> %_inp23, i64 0)
  %output25 = fmul double %output, %return24
  %return26 = call double @"cos@FF"(double %output25)
  %output27 = fmul double %output21, %return26
  %sep28 = load double* %sep
  %output29 = fadd double %output27, %sep28
  br label %end

end:                                              ; preds = %false, %true
  %tt.0 = phi double [ %output12, %true ], [ %output29, %false ]
  %_inp30 = load <3 x double>* %_inp
  %return31 = call double @"getcomp@FVI"(<3 x double> %_inp30, i64 1)
  %return32 = call double @"abs@FF"(double %return31)
  %return34 = fcmp ole double %return32, %tt.0
  %weight39 = load double* %weight
  %_inp40 = load <3 x double>* %_inp
  %return41 = call double @"getcomp@FVI"(<3 x double> %_inp40, i64 0)
  %output42 = fmul double %weight39, %return41
  %tmp = load <3 x double>* %pos
  %return43 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output42, i64 0)
  %output45 = extractvalue { double, <3 x double> } %return43, 1
  store <3 x double> %output45, <3 x double>* %pos
  %weight46 = load double* %weight
  %_inp47 = load <3 x double>* %_inp
  %return48 = call double @"getcomp@FVI"(<3 x double> %_inp47, i64 1)
  br i1 %return34, label %true36, label %false37

true36:                                           ; preds = %end
  %return49 = call double @"neg@FF"(double %return48)
  %output50 = fmul double %weight46, %return49
  %return52 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output45, double %output50, i64 1)
  %output54 = extractvalue { double, <3 x double> } %return52, 1
  store <3 x double> %output54, <3 x double>* %pos
  br label %end38

false37:                                          ; preds = %end
  %output66 = fmul double %weight46, %return48
  %return68 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output45, double %output66, i64 1)
  %output70 = extractvalue { double, <3 x double> } %return68, 1
  store <3 x double> %output70, <3 x double>* %pos
  br label %end38

end38:                                            ; preds = %false37, %true36
  ret void
}

define private void @"VAR_POLAR2@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %weight1 = load double* %weight
  %output = call double @"div@FF"(double %weight1, double 0x400921FB4D12D84A)
  store i8* getelementptr inbounds ([5 x i8]* @121, i64 0, i64 0), i8** %0
  %_inp3 = load <3 x double>* %_inp
  store <3 x double> %_inp3, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output4 = fmul double %output, %precalc
  %tmp = load <3 x double>* %pos
  %return = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output4, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return, 1
  store <3 x double> %output6, <3 x double>* %pos
  %output8 = call double @"div@FF"(double %output, double 2.000000e+00)
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %2
  %_inp9 = load <3 x double>* %_inp
  store <3 x double> %_inp9, <3 x double>* %3
  %precalc10 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %return11 = call double @"log@FF"(double %precalc10)
  %output12 = fmul double %output8, %return11
  %tmp13 = load <3 x double>* %pos
  %return14 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp13, double %output12, i64 1)
  %output16 = extractvalue { double, <3 x double> } %return14, 1
  store <3 x double> %output16, <3 x double>* %pos
  ret void
}

define private void @"VAR_POPCORN2@VVFFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %pop2c, <2 x double>* %pop2) nounwind alwaysinline {
__llvm_entry:
  %weight1 = load double* %weight
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %pop23 = load <2 x double>* %pop2
  %return4 = call double @"getcomp@FUI"(<2 x double> %pop23, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %pop2c7 = load double* %pop2c
  %output = fmul double %return6, %pop2c7
  %return8 = call double @"tan@FF"(double %output)
  %return9 = call double @"sin@FF"(double %return8)
  %output10 = fmul double %return4, %return9
  %output11 = fadd double %return, %output10
  %output12 = fmul double %weight1, %output11
  %tmp = load <3 x double>* %pos
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %pos
  %weight16 = load double* %weight
  %_inp17 = load <3 x double>* %_inp
  %return18 = call double @"getcomp@FVI"(<3 x double> %_inp17, i64 1)
  %pop219 = load <2 x double>* %pop2
  %return20 = call double @"getcomp@FUI"(<2 x double> %pop219, i64 1)
  %return22 = call double @"getcomp@FVI"(<3 x double> %_inp17, i64 0)
  %pop2c23 = load double* %pop2c
  %output24 = fmul double %return22, %pop2c23
  %return25 = call double @"tan@FF"(double %output24)
  %return26 = call double @"sin@FF"(double %return25)
  %output27 = fmul double %return20, %return26
  %output28 = fadd double %return18, %output27
  %output29 = fmul double %weight16, %output28
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %pos
  ret void
}

define private void @"VAR_SCRY@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %2
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %weight5 = load double* %weight
  %output = fadd double %weight5, 1.000000e-10
  %output6 = call double @"div@FF"(double 1.000000e+00, double %output)
  %output7 = fadd double %precalc, %output6
  %output8 = fmul double %precalc3, %output7
  %output9 = call double @"div@FF"(double 1.000000e+00, double %output8)
  %_inp10 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp10, i64 0)
  %output12 = fmul double %return, %output9
  %tmp = load <3 x double>* %pos
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %pos
  %_inp16 = load <3 x double>* %_inp
  %return17 = call double @"getcomp@FVI"(<3 x double> %_inp16, i64 1)
  %output19 = fmul double %return17, %output9
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  ret void
}

define private void @"VAR_SEPARATION@VVFUU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %sep, <2 x double>* %ins) nounwind alwaysinline {
__llvm_entry:
  %sep1 = load <2 x double>* %sep
  %return = call double @"getcomp@FUI"(<2 x double> %sep1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %sep1, i64 1)
  %output8 = fmul double %return5, %return5
  %_inp9 = load <3 x double>* %_inp
  %return10 = call double @"getcomp@FVI"(<3 x double> %_inp9, i64 0)
  %return11 = fcmp ogt double %return10, 0.000000e+00
  %weight13 = load double* %weight
  %output18 = fmul double %return10, %return10
  %output20 = fadd double %output18, %output
  %return21 = call double @"sqrt@FF"(double %output20)
  %ins24 = load <2 x double>* %ins
  %return25 = call double @"getcomp@FUI"(<2 x double> %ins24, i64 0)
  %output26 = fmul double %return10, %return25
  br i1 %return11, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output27 = fsub double %return21, %output26
  %output28 = fmul double %weight13, %output27
  %tmp = load <3 x double>* %pos
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output28, i64 0)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %output46 = fadd double %return21, %output26
  %return47 = call double @"neg@FF"(double %output46)
  %output48 = fmul double %weight13, %return47
  %tmp49 = load <3 x double>* %pos
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp49, double %output48, i64 0)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %pos
  br label %end

end:                                              ; preds = %false, %true
  %_inp53 = load <3 x double>* %_inp
  %return54 = call double @"getcomp@FVI"(<3 x double> %_inp53, i64 1)
  %return55 = fcmp ogt double %return54, 0.000000e+00
  %weight60 = load double* %weight
  %output65 = fmul double %return54, %return54
  %output67 = fadd double %output65, %output8
  %return68 = call double @"sqrt@FF"(double %output67)
  %ins71 = load <2 x double>* %ins
  %return72 = call double @"getcomp@FUI"(<2 x double> %ins71, i64 1)
  %output73 = fmul double %return54, %return72
  br i1 %return55, label %true57, label %false58

true57:                                           ; preds = %end
  %output74 = fsub double %return68, %output73
  %output75 = fmul double %weight60, %output74
  %tmp76 = load <3 x double>* %pos
  %return77 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp76, double %output75, i64 1)
  %output79 = extractvalue { double, <3 x double> } %return77, 1
  store <3 x double> %output79, <3 x double>* %pos
  br label %end59

false58:                                          ; preds = %end
  %output94 = fadd double %return68, %output73
  %return95 = call double @"neg@FF"(double %output94)
  %output96 = fmul double %weight60, %return95
  %tmp97 = load <3 x double>* %pos
  %return98 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp97, double %output96, i64 1)
  %output100 = extractvalue { double, <3 x double> } %return98, 1
  store <3 x double> %output100, <3 x double>* %pos
  br label %end59

end59:                                            ; preds = %false58, %true57
  ret void
}

define private void @"VAR_SPLIT@VVFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %split) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %split2 = load <2 x double>* %split
  %return3 = call double @"getcomp@FUI"(<2 x double> %split2, i64 0)
  %output = fmul double %return, %return3
  %output4 = fmul double %output, 0x400921FB4D12D84A
  %return5 = call double @"cos@FF"(double %output4)
  %return6 = fcmp oge double %return5, 0.000000e+00
  %weight8 = load double* %weight
  %return10 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  br i1 %return6, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output11 = fmul double %weight8, %return10
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 1)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %return18 = call double @"neg@FF"(double %return10)
  %output19 = fmul double %weight8, %return18
  %tmp20 = load <3 x double>* %pos
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp20, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  br label %end

end:                                              ; preds = %false, %true
  %_inp24 = load <3 x double>* %_inp
  %return25 = call double @"getcomp@FVI"(<3 x double> %_inp24, i64 1)
  %split26 = load <2 x double>* %split
  %return27 = call double @"getcomp@FUI"(<2 x double> %split26, i64 1)
  %output28 = fmul double %return25, %return27
  %output29 = fmul double %output28, 0x400921FB4D12D84A
  %return30 = call double @"cos@FF"(double %output29)
  %return31 = fcmp oge double %return30, 0.000000e+00
  %weight36 = load double* %weight
  %return38 = call double @"getcomp@FVI"(<3 x double> %_inp24, i64 0)
  br i1 %return31, label %true33, label %false34

true33:                                           ; preds = %end
  %output39 = fmul double %weight36, %return38
  %tmp40 = load <3 x double>* %pos
  %return41 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp40, double %output39, i64 0)
  %output43 = extractvalue { double, <3 x double> } %return41, 1
  store <3 x double> %output43, <3 x double>* %pos
  br label %end35

false34:                                          ; preds = %end
  %return47 = call double @"neg@FF"(double %return38)
  %output48 = fmul double %weight36, %return47
  %tmp49 = load <3 x double>* %pos
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp49, double %output48, i64 0)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %pos
  br label %end35

end35:                                            ; preds = %false34, %true33
  ret void
}

define private void @"VAR_SPLITS@VVFU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %splits) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %return2 = fcmp oge double %return, 0.000000e+00
  %weight4 = load double* %weight
  %splits7 = load <2 x double>* %splits
  %return8 = call double @"getcomp@FUI"(<2 x double> %splits7, i64 0)
  br i1 %return2, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %output = fadd double %return, %return8
  %output9 = fmul double %weight4, %output
  %tmp = load <3 x double>* %pos
  %return10 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output9, i64 0)
  %output12 = extractvalue { double, <3 x double> } %return10, 1
  store <3 x double> %output12, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %output18 = fsub double %return, %return8
  %output19 = fmul double %weight4, %output18
  %tmp20 = load <3 x double>* %pos
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp20, double %output19, i64 0)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  br label %end

end:                                              ; preds = %false, %true
  %_inp24 = load <3 x double>* %_inp
  %return25 = call double @"getcomp@FVI"(<3 x double> %_inp24, i64 1)
  %return26 = fcmp oge double %return25, 0.000000e+00
  %weight31 = load double* %weight
  %splits34 = load <2 x double>* %splits
  %return35 = call double @"getcomp@FUI"(<2 x double> %splits34, i64 1)
  br i1 %return26, label %true28, label %false29

true28:                                           ; preds = %end
  %output36 = fadd double %return25, %return35
  %output37 = fmul double %weight31, %output36
  %tmp38 = load <3 x double>* %pos
  %return39 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp38, double %output37, i64 1)
  %output41 = extractvalue { double, <3 x double> } %return39, 1
  store <3 x double> %output41, <3 x double>* %pos
  br label %end30

false29:                                          ; preds = %end
  %output47 = fsub double %return25, %return35
  %output48 = fmul double %weight31, %output47
  %tmp49 = load <3 x double>* %pos
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp49, double %output48, i64 1)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %pos
  br label %end30

end30:                                            ; preds = %false29, %true28
  ret void
}

define private void @"VAR_STRIPES@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %space, double* %warp) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %output = fadd double %return, 5.000000e-01
  %return2 = call double @"floor@FF"(double %output)
  %output6 = fsub double %return, %return2
  %weight7 = load double* %weight
  %space9 = load double* %space
  %output10 = fsub double 1.000000e+00, %space9
  %output11 = fmul double %output6, %output10
  %output13 = fadd double %output11, %return2
  %output14 = fmul double %weight7, %output13
  %tmp = load <3 x double>* %pos
  %return15 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output14, i64 0)
  %output17 = extractvalue { double, <3 x double> } %return15, 1
  store <3 x double> %output17, <3 x double>* %pos
  %weight18 = load double* %weight
  %_inp19 = load <3 x double>* %_inp
  %return20 = call double @"getcomp@FVI"(<3 x double> %_inp19, i64 1)
  %output23 = fmul double %output6, %output6
  %warp24 = load double* %warp
  %output25 = fmul double %output23, %warp24
  %output26 = fadd double %return20, %output25
  %output27 = fmul double %weight18, %output26
  %return29 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output17, double %output27, i64 1)
  %output31 = extractvalue { double, <3 x double> } %return29, 1
  store <3 x double> %output31, <3 x double>* %pos
  ret void
}

define private void @"VAR_WEDGE@VVFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %swirl, double* %angle, double* %hole, double* %count) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %3
  %precalc3 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %swirl4 = load double* %swirl
  %output = fmul double %swirl4, %precalc
  %output6 = fadd double %precalc3, %output
  %count7 = load double* %count
  %output9 = fmul double %count7, %output6
  %output10 = fadd double %output9, 0x400921FB4D12D84A
  %output11 = fmul double %output10, 0x3FD45F306DC9C883
  %output12 = fmul double %output11, 5.000000e-01
  %return = call double @"floor@FF"(double %output12)
  %angle13 = load double* %angle
  %output15 = fmul double %angle13, %count7
  %output16 = fmul double %output15, 0x3FD45F306DC9C883
  %output17 = fmul double %output16, 5.000000e-01
  %output18 = fsub double 1.000000e+00, %output17
  %output21 = fmul double %output6, %output18
  %output24 = fmul double %return, %angle13
  %output25 = fadd double %output21, %output24
  store double %output25, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %weight27 = load double* %weight
  %hole29 = load double* %hole
  %output30 = fadd double %precalc, %hole29
  %output31 = fmul double %weight27, %output30
  %ca33 = load double* %ca
  %output34 = fmul double %output31, %ca33
  %tmp = load <3 x double>* %pos
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output34, i64 0)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  %sa39 = load double* %sa
  %output40 = fmul double %output31, %sa39
  %return42 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output37, double %output40, i64 1)
  %output44 = extractvalue { double, <3 x double> } %return42, 1
  store <3 x double> %output44, <3 x double>* %pos
  ret void
}

define private void @"VAR_WEDGEJULIA@VVFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %power, double* %angle, double* %dist, double* %count) nounwind alwaysinline {
__llvm_entry:
  %wedgeJulia_rN = alloca double
  %wedgeJulia_cn = alloca double
  %sa = alloca double
  %ca = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca i8*
  %5 = alloca <3 x double>
  %6 = alloca i8*
  %7 = alloca <3 x double>
  %8 = alloca double
  %wedgeJulia_cf = alloca double
  store double 0.000000e+00, double* %wedgeJulia_cf, !vex-initializer-store !3
  store double 0.000000e+00, double* %wedgeJulia_rN, !vex-initializer-store !3
  store double 0.000000e+00, double* %wedgeJulia_cn, !vex-initializer-store !3
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  %power1 = load double* %power
  store double %power1, double* %0
  %angle2 = load double* %angle
  store double %angle2, double* %1
  %dist3 = load double* %dist
  store double %dist3, double* %2
  %count4 = load double* %count
  store double %count4, double* %3
  call void @"wedgejulia_precalc@FFFFFFF"(double* %wedgeJulia_cf, double* %wedgeJulia_rN, double* %wedgeJulia_cn, double* %0, double* %1, double* %2, double* %3)
  %weight5 = load double* %weight
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %4
  %_inp6 = load <3 x double>* %_inp
  store <3 x double> %_inp6, <3 x double>* %5
  %precalc = call double @"precalc@FSV"(i8** %4, <3 x double>* %5)
  %wedgeJulia_cn7 = load double* %wedgeJulia_cn
  %return = call double @"pow@FFF"(double %precalc, double %wedgeJulia_cn7)
  %output = fmul double %weight5, %return
  %wedgeJulia_rN8 = load double* %wedgeJulia_rN
  %return9 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %output10 = fmul double %wedgeJulia_rN8, %return9
  %cast = fptosi double %output10 to i64
  %cast11 = sitofp i64 %cast to double
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %6
  %_inp12 = load <3 x double>* %_inp
  store <3 x double> %_inp12, <3 x double>* %7
  %precalc13 = call double @"precalc@FSV"(i8** %6, <3 x double>* %7)
  %output15 = fmul double 0x401921FB4D12D84A, %cast11
  %output16 = fadd double %precalc13, %output15
  %power17 = load double* %power
  %output18 = call double @"div@FF"(double %output16, double %power17)
  %count19 = load double* %count
  %output21 = fmul double %count19, %output18
  %output22 = fadd double %output21, 0x400921FB4D12D84A
  %output23 = fmul double %output22, 0x3FD45F306DC9C883
  %output24 = fmul double %output23, 5.000000e-01
  %return25 = call double @"floor@FF"(double %output24)
  %wedgeJulia_cf27 = load double* %wedgeJulia_cf
  %output28 = fmul double %output18, %wedgeJulia_cf27
  %angle30 = load double* %angle
  %output31 = fmul double %return25, %angle30
  %output32 = fadd double %output28, %output31
  store double %output32, double* %8
  call void @"sincos@FFF"(double* %8, double* %sa, double* %ca)
  %ca35 = load double* %ca
  %output36 = fmul double %output, %ca35
  %tmp = load <3 x double>* %pos
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output36, i64 0)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %pos
  %sa41 = load double* %sa
  %output42 = fmul double %output, %sa41
  %return44 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output39, double %output42, i64 1)
  %output46 = extractvalue { double, <3 x double> } %return44, 1
  store <3 x double> %output46, <3 x double>* %pos
  ret void
}

define private void @"VAR_WEDGESPH@VVFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %swirl, double* %angle, double* %hole, double* %count) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e-10
  %output2 = call double @"div@FF"(double 1.000000e+00, double %output)
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  %_inp3 = load <3 x double>* %_inp
  store <3 x double> %_inp3, <3 x double>* %3
  %precalc4 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %swirl5 = load double* %swirl
  %output7 = fmul double %swirl5, %output2
  %output8 = fadd double %precalc4, %output7
  %count9 = load double* %count
  %output11 = fmul double %count9, %output8
  %output12 = fadd double %output11, 0x400921FB4D12D84A
  %output13 = fmul double %output12, 0x3FD45F306DC9C883
  %output14 = fmul double %output13, 5.000000e-01
  %return = call double @"floor@FF"(double %output14)
  %angle15 = load double* %angle
  %output17 = fmul double %angle15, %count9
  %output18 = fmul double %output17, 0x3FD45F306DC9C883
  %output19 = fmul double %output18, 5.000000e-01
  %output20 = fsub double 1.000000e+00, %output19
  %output23 = fmul double %output8, %output20
  %output26 = fmul double %return, %angle15
  %output27 = fadd double %output23, %output26
  store double %output27, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %weight29 = load double* %weight
  %hole31 = load double* %hole
  %output32 = fadd double %output2, %hole31
  %output33 = fmul double %weight29, %output32
  %ca35 = load double* %ca
  %output36 = fmul double %output33, %ca35
  %tmp = load <3 x double>* %pos
  %return37 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output36, i64 0)
  %output39 = extractvalue { double, <3 x double> } %return37, 1
  store <3 x double> %output39, <3 x double>* %pos
  %sa41 = load double* %sa
  %output42 = fmul double %output33, %sa41
  %return44 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output39, double %output42, i64 1)
  %output46 = extractvalue { double, <3 x double> } %return44, 1
  store <3 x double> %output46, <3 x double>* %pos
  ret void
}

define private void @"VAR_WHORL@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %inside, double* %outside) nounwind alwaysinline {
__llvm_entry:
  %sa = alloca double
  %ca = alloca double
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %4 = alloca double
  store double 0.000000e+00, double* %sa, !vex-initializer-store !3
  store double 0.000000e+00, double* %ca, !vex-initializer-store !3
  store i8* getelementptr inbounds ([5 x i8]* @120, i64 0, i64 0), i8** %0
  %_inp1 = load <3 x double>* %_inp
  store <3 x double> %_inp1, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %weight3 = load double* %weight
  %return = fcmp olt double %precalc, %weight3
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  %_inp5 = load <3 x double>* %_inp
  store <3 x double> %_inp5, <3 x double>* %3
  %precalc6 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  br i1 %return, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %inside7 = load double* %inside
  %weight8 = load double* %weight
  %output = fsub double %weight8, %precalc
  %output10 = call double @"div@FF"(double %inside7, double %output)
  %output11 = fadd double %precalc6, %output10
  br label %end

false:                                            ; preds = %__llvm_entry
  %outside14 = load double* %outside
  %weight15 = load double* %weight
  %output17 = fsub double %weight15, %precalc
  %output18 = call double @"div@FF"(double %outside14, double %output17)
  %output19 = fadd double %precalc6, %output18
  br label %end

end:                                              ; preds = %false, %true
  %aa.0 = phi double [ %output11, %true ], [ %output19, %false ]
  store double %aa.0, double* %4
  call void @"sincos@FFF"(double* %4, double* %sa, double* %ca)
  %weight21 = load double* %weight
  %output23 = fmul double %weight21, %precalc
  %ca24 = load double* %ca
  %output25 = fmul double %output23, %ca24
  %tmp = load <3 x double>* %pos
  %return26 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output25, i64 0)
  %output28 = extractvalue { double, <3 x double> } %return26, 1
  store <3 x double> %output28, <3 x double>* %pos
  %weight29 = load double* %weight
  %output31 = fmul double %weight29, %precalc
  %sa32 = load double* %sa
  %output33 = fmul double %output31, %sa32
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output28, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_WAVES2@VVFUU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %scl, <2 x double>* %freq) nounwind alwaysinline {
__llvm_entry:
  %weight1 = load double* %weight
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %scl3 = load <2 x double>* %scl
  %return4 = call double @"getcomp@FUI"(<2 x double> %scl3, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %freq7 = load <2 x double>* %freq
  %return8 = call double @"getcomp@FUI"(<2 x double> %freq7, i64 0)
  %output = fmul double %return6, %return8
  %return9 = call double @"sin@FF"(double %output)
  %output10 = fmul double %return4, %return9
  %output11 = fadd double %return, %output10
  %output12 = fmul double %weight1, %output11
  %tmp = load <3 x double>* %pos
  %return13 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output12, i64 0)
  %output15 = extractvalue { double, <3 x double> } %return13, 1
  store <3 x double> %output15, <3 x double>* %pos
  %weight16 = load double* %weight
  %_inp17 = load <3 x double>* %_inp
  %return18 = call double @"getcomp@FVI"(<3 x double> %_inp17, i64 1)
  %scl19 = load <2 x double>* %scl
  %return20 = call double @"getcomp@FUI"(<2 x double> %scl19, i64 1)
  %return22 = call double @"getcomp@FVI"(<3 x double> %_inp17, i64 0)
  %freq23 = load <2 x double>* %freq
  %return24 = call double @"getcomp@FUI"(<2 x double> %freq23, i64 1)
  %output25 = fmul double %return22, %return24
  %return26 = call double @"sin@FF"(double %output25)
  %output27 = fmul double %return20, %return26
  %output28 = fadd double %return18, %output27
  %output29 = fmul double %weight16, %output28
  %return31 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output15, double %output29, i64 1)
  %output33 = extractvalue { double, <3 x double> } %return31, 1
  store <3 x double> %output33, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHEEXP@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %expsin = alloca double
  %expcos = alloca double
  %0 = alloca double
  store double 0.000000e+00, double* %expsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %expcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %return2 = call double @"exp@FF"(double %return)
  %pos3 = load <3 x double>* %pos
  %return4 = call double @"getcomp@FVI"(<3 x double> %pos3, i64 1)
  store double %return4, double* %0
  call void @"sincos@FFF"(double* %0, double* %expsin, double* %expcos)
  %weight5 = load double* %weight
  %output = fmul double %weight5, %return2
  %expcos7 = load double* %expcos
  %output8 = fmul double %output, %expcos7
  %tmp = load <3 x double>* %pos
  %return9 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output8, i64 0)
  %output11 = extractvalue { double, <3 x double> } %return9, 1
  store <3 x double> %output11, <3 x double>* %pos
  %weight12 = load double* %weight
  %output14 = fmul double %weight12, %return2
  %expsin15 = load double* %expsin
  %output16 = fmul double %output14, %expsin15
  %return18 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output11, double %output16, i64 1)
  %output20 = extractvalue { double, <3 x double> } %return18, 1
  store <3 x double> %output20, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHELOG@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %2 = alloca i8*
  %3 = alloca <3 x double>
  %weight1 = load double* %weight
  %output = fmul double %weight1, 5.000000e-01
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %return = call double @"log@FF"(double %precalc)
  %output3 = fmul double %output, %return
  %tmp = load <3 x double>* %pos
  %return4 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output3, i64 0)
  %output6 = extractvalue { double, <3 x double> } %return4, 1
  store <3 x double> %output6, <3 x double>* %pos
  %weight7 = load double* %weight
  store i8* getelementptr inbounds ([7 x i8]* @122, i64 0, i64 0), i8** %2
  %_inp8 = load <3 x double>* %_inp
  store <3 x double> %_inp8, <3 x double>* %3
  %precalc9 = call double @"precalc@FSV"(i8** %2, <3 x double>* %3)
  %output10 = fmul double %weight7, %precalc9
  %tmp11 = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp11, double %output10, i64 1)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHESIN@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinacos = alloca double
  %0 = alloca double
  %sinsin = alloca double
  store double 0.000000e+00, double* %sinsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sinacos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinsin, double* %sinacos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %weight8 = load double* %weight
  %sinsin9 = load double* %sinsin
  %output = fmul double %weight8, %sinsin9
  %output11 = fmul double %output, %return7
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %weight15 = load double* %weight
  %sinacos16 = load double* %sinacos
  %output17 = fmul double %weight15, %sinacos16
  %output19 = fmul double %output17, %return4
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHECOS@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %coscos = alloca double
  %0 = alloca double
  %cossin = alloca double
  store double 0.000000e+00, double* %cossin, !vex-initializer-store !3
  store double 0.000000e+00, double* %coscos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cossin, double* %coscos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %weight8 = load double* %weight
  %coscos9 = load double* %coscos
  %output = fmul double %weight8, %coscos9
  %output11 = fmul double %output, %return7
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %weight15 = load double* %weight
  %cossin16 = load double* %cossin
  %output17 = fmul double %weight15, %cossin16
  %output19 = fmul double %output17, %return4
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHETAN@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %tancos = alloca double
  %0 = alloca double
  %tansin = alloca double
  store double 0.000000e+00, double* %tansin, !vex-initializer-store !3
  store double 0.000000e+00, double* %tancos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %tansin, double* %tancos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %tancos10 = load double* %tancos
  %output12 = fadd double %tancos10, %return9
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %weight14 = load double* %weight
  %output16 = fmul double %weight14, %output13
  %output18 = fmul double %output16, %return5
  %tmp = load <3 x double>* %pos
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %pos
  %weight22 = load double* %weight
  %output24 = fmul double %weight22, %output13
  %output26 = fmul double %output24, %return9
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHESEC@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %seccos = alloca double
  %0 = alloca double
  %secsin = alloca double
  store double 0.000000e+00, double* %secsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %seccos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %secsin, double* %seccos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %return9 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output = fmul double 2.000000e+00, %return9
  %return10 = call double @"cos@FF"(double %output)
  %output13 = fmul double 2.000000e+00, %return3
  %return14 = call double @"cosh@FF"(double %output13)
  %output15 = fadd double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %weight17 = load double* %weight
  %output19 = fmul double %weight17, %output16
  %seccos20 = load double* %seccos
  %output21 = fmul double %output19, %seccos20
  %output23 = fmul double %output21, %return7
  %tmp = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  %weight27 = load double* %weight
  %output29 = fmul double %weight27, %output16
  %secsin30 = load double* %secsin
  %output31 = fmul double %output29, %secsin30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHECSC@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %csccos = alloca double
  %0 = alloca double
  %cscsin = alloca double
  store double 0.000000e+00, double* %cscsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %csccos, !vex-initializer-store !3
  %pos1 = load <3 x double>* %pos
  %return = call double @"getcomp@FVI"(<3 x double> %pos1, i64 0)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cscsin, double* %csccos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %output = fmul double 2.000000e+00, %return3
  %return10 = call double @"cosh@FF"(double %output)
  %return12 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output13 = fmul double 2.000000e+00, %return12
  %return14 = call double @"cos@FF"(double %output13)
  %output15 = fsub double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %weight17 = load double* %weight
  %output19 = fmul double %weight17, %output16
  %cscsin20 = load double* %cscsin
  %output21 = fmul double %output19, %cscsin20
  %output23 = fmul double %output21, %return7
  %tmp = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  %weight27 = load double* %weight
  %output29 = fmul double %weight27, %output16
  %csccos30 = load double* %csccos
  %output31 = fmul double %output29, %csccos30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHECOT@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %cotcos = alloca double
  %0 = alloca double
  %cotsin = alloca double
  store double 0.000000e+00, double* %cotsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cotcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %cotsin, double* %cotcos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %cotcos11 = load double* %cotcos
  %output12 = fsub double %return9, %cotcos11
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %weight14 = load double* %weight
  %output16 = fmul double %weight14, %output13
  %cotsin17 = load double* %cotsin
  %output18 = fmul double %output16, %cotsin17
  %tmp = load <3 x double>* %pos
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %pos
  %weight22 = load double* %weight
  %output24 = fmul double %weight22, %output13
  %return25 = call i64 @"neg@II"(i64 1)
  %cast = sitofp i64 %return25 to double
  %output26 = fmul double %output24, %cast
  %output28 = fmul double %output26, %return5
  %return30 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output28, i64 1)
  %output32 = extractvalue { double, <3 x double> } %return30, 1
  store <3 x double> %output32, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHESINH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sinhcos = alloca double
  %0 = alloca double
  %sinhsin = alloca double
  store double 0.000000e+00, double* %sinhsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sinhcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sinhsin, double* %sinhcos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %weight8 = load double* %weight
  %output = fmul double %weight8, %return4
  %sinhcos10 = load double* %sinhcos
  %output11 = fmul double %output, %sinhcos10
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %weight15 = load double* %weight
  %output17 = fmul double %weight15, %return7
  %sinhsin18 = load double* %sinhsin
  %output19 = fmul double %output17, %sinhsin18
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHECOSH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %coshcos = alloca double
  %0 = alloca double
  %coshsin = alloca double
  store double 0.000000e+00, double* %coshsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %coshcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %coshsin, double* %coshcos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %weight8 = load double* %weight
  %output = fmul double %weight8, %return7
  %coshcos10 = load double* %coshcos
  %output11 = fmul double %output, %coshcos10
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output11, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %weight15 = load double* %weight
  %output17 = fmul double %weight15, %return4
  %coshsin18 = load double* %coshsin
  %output19 = fmul double %output17, %coshsin18
  %return21 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output19, i64 1)
  %output23 = extractvalue { double, <3 x double> } %return21, 1
  store <3 x double> %output23, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHETANH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %tanhcos = alloca double
  %0 = alloca double
  %tanhsin = alloca double
  store double 0.000000e+00, double* %tanhsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %tanhcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %tanhsin, double* %tanhcos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %tanhcos8 = load double* %tanhcos
  %output10 = fadd double %tanhcos8, %return7
  %output11 = call double @"div@FF"(double 1.000000e+00, double %output10)
  %weight12 = load double* %weight
  %output14 = fmul double %weight12, %output11
  %output16 = fmul double %output14, %return4
  %tmp = load <3 x double>* %pos
  %return17 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output16, i64 0)
  %output19 = extractvalue { double, <3 x double> } %return17, 1
  store <3 x double> %output19, <3 x double>* %pos
  %weight20 = load double* %weight
  %output22 = fmul double %weight20, %output11
  %tanhsin23 = load double* %tanhsin
  %output24 = fmul double %output22, %tanhsin23
  %return26 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output19, double %output24, i64 1)
  %output28 = extractvalue { double, <3 x double> } %return26, 1
  store <3 x double> %output28, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHESECH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %sechcos = alloca double
  %0 = alloca double
  %sechsin = alloca double
  store double 0.000000e+00, double* %sechsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %sechcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %sechsin, double* %sechcos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %return9 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output = fmul double 2.000000e+00, %return9
  %return10 = call double @"cos@FF"(double %output)
  %output13 = fmul double 2.000000e+00, %return3
  %return14 = call double @"cosh@FF"(double %output13)
  %output15 = fadd double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %weight17 = load double* %weight
  %output19 = fmul double %weight17, %output16
  %sechcos20 = load double* %sechcos
  %output21 = fmul double %output19, %sechcos20
  %output23 = fmul double %output21, %return7
  %tmp = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  %weight27 = load double* %weight
  %output29 = fmul double %weight27, %output16
  %sechsin30 = load double* %sechsin
  %output31 = fmul double %output29, %sechsin30
  %output33 = fmul double %output31, %return4
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHECSCH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %cschcos = alloca double
  %0 = alloca double
  %cschsin = alloca double
  store double 0.000000e+00, double* %cschsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cschcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  store double %return, double* %0
  call void @"sincos@FFF"(double* %0, double* %cschsin, double* %cschcos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return4 = call double @"sinh@FF"(double %return3)
  %return7 = call double @"cosh@FF"(double %return3)
  %output = fmul double 2.000000e+00, %return3
  %return10 = call double @"cosh@FF"(double %output)
  %return12 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output13 = fmul double 2.000000e+00, %return12
  %return14 = call double @"cos@FF"(double %output13)
  %output15 = fsub double %return10, %return14
  %output16 = call double @"div@FF"(double 2.000000e+00, double %output15)
  %weight17 = load double* %weight
  %output19 = fmul double %weight17, %output16
  %output21 = fmul double %output19, %return4
  %cschcos22 = load double* %cschcos
  %output23 = fmul double %output21, %cschcos22
  %tmp = load <3 x double>* %pos
  %return24 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output23, i64 0)
  %output26 = extractvalue { double, <3 x double> } %return24, 1
  store <3 x double> %output26, <3 x double>* %pos
  %weight27 = load double* %weight
  %output29 = fmul double %weight27, %output16
  %output31 = fmul double %output29, %return7
  %cschsin32 = load double* %cschsin
  %output33 = fmul double %output31, %cschsin32
  %return35 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output26, double %output33, i64 1)
  %output37 = extractvalue { double, <3 x double> } %return35, 1
  store <3 x double> %output37, <3 x double>* %pos
  ret void
}

define private void @"VAR_COTHECOTH@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %cothcos = alloca double
  %0 = alloca double
  %cothsin = alloca double
  store double 0.000000e+00, double* %cothsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %cothcos, !vex-initializer-store !3
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %output = fmul double 2.000000e+00, %return
  store double %output, double* %0
  call void @"sincos@FFF"(double* %0, double* %cothsin, double* %cothcos)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output4 = fmul double 2.000000e+00, %return3
  %return5 = call double @"sinh@FF"(double %output4)
  %return9 = call double @"cosh@FF"(double %output4)
  %cothcos11 = load double* %cothcos
  %output12 = fsub double %return9, %cothcos11
  %output13 = call double @"div@FF"(double 1.000000e+00, double %output12)
  %weight14 = load double* %weight
  %output16 = fmul double %weight14, %output13
  %output18 = fmul double %output16, %return5
  %tmp = load <3 x double>* %pos
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output18, i64 0)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %pos
  %weight22 = load double* %weight
  %output24 = fmul double %weight22, %output13
  %cothsin25 = load double* %cothsin
  %output26 = fmul double %output24, %cothsin25
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output21, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  ret void
}

define private void @"VAR_AUGER@VVFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %freq, double* %scale, double* %sym, double* %ww) nounwind alwaysinline {
__llvm_entry:
  %freq1 = load double* %freq
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output = fmul double %freq1, %return
  %return3 = call double @"sin@FF"(double %output)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output7 = fmul double %freq1, %return6
  %return8 = call double @"sin@FF"(double %output7)
  %ww11 = load double* %ww
  %scale12 = load double* %scale
  %output14 = fmul double %scale12, %return3
  %output15 = call double @"div@FF"(double %output14, double 2.000000e+00)
  %return18 = call double @"abs@FF"(double %return6)
  %output20 = fmul double %return18, %return3
  %output21 = fadd double %output15, %output20
  %output22 = fmul double %ww11, %output21
  %output23 = fadd double %return6, %output22
  %_inp24 = load <3 x double>* %_inp
  %return25 = call double @"getcomp@FVI"(<3 x double> %_inp24, i64 0)
  %ww26 = load double* %ww
  %scale27 = load double* %scale
  %output29 = fmul double %scale27, %return8
  %output30 = call double @"div@FF"(double %output29, double 2.000000e+00)
  %return33 = call double @"abs@FF"(double %return25)
  %output35 = fmul double %return33, %return8
  %output36 = fadd double %output30, %output35
  %output37 = fmul double %ww26, %output36
  %output38 = fadd double %return25, %output37
  %weight39 = load double* %weight
  %_inp40 = load <3 x double>* %_inp
  %return41 = call double @"getcomp@FVI"(<3 x double> %_inp40, i64 0)
  %sym42 = load double* %sym
  %output46 = fmul double %output23, %return41
  %output47 = fmul double %sym42, %output46
  %output48 = fadd double %return41, %output47
  %output49 = fmul double %weight39, %output48
  %tmp = load <3 x double>* %pos
  %return50 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output49, i64 0)
  %output52 = extractvalue { double, <3 x double> } %return50, 1
  store <3 x double> %output52, <3 x double>* %pos
  %weight53 = load double* %weight
  %output55 = fmul double %weight53, %output38
  %return57 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output52, double %output55, i64 1)
  %output59 = extractvalue { double, <3 x double> } %return57, 1
  store <3 x double> %output59, <3 x double>* %pos
  ret void
}

define private void @"VAR_FLUX@VVFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %spread) nounwind alwaysinline {
__llvm_entry:
  %_inp1 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 0)
  %weight2 = load double* %weight
  %output = fadd double %return, %weight2
  %output6 = fsub double %return, %weight2
  %spread8 = load double* %spread
  %output9 = fadd double 2.000000e+00, %spread8
  %output10 = fmul double %weight2, %output9
  %return12 = call double @"getcomp@FVI"(<3 x double> %_inp1, i64 1)
  %output15 = fmul double %return12, %return12
  %output18 = fmul double %output, %output
  %output19 = fadd double %output15, %output18
  %return20 = call double @"sqrt@FF"(double %output19)
  %output28 = fmul double %output6, %output6
  %output29 = fadd double %output15, %output28
  %return30 = call double @"sqrt@FF"(double %output29)
  %output31 = call double @"div@FF"(double %return20, double %return30)
  %return32 = call double @"sqrt@FF"(double %output31)
  %output33 = fmul double %output10, %return32
  %return37 = call double @"atan2@FFF"(double %return12, double %output6)
  %return41 = call double @"atan2@FFF"(double %return12, double %output)
  %output42 = fsub double %return37, %return41
  %output43 = fmul double %output42, 5.000000e-01
  %return46 = call double @"cos@FF"(double %output43)
  %output47 = fmul double %output33, %return46
  %tmp = load <3 x double>* %pos
  %return48 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output47, i64 0)
  %output50 = extractvalue { double, <3 x double> } %return48, 1
  store <3 x double> %output50, <3 x double>* %pos
  %return53 = call double @"sin@FF"(double %output43)
  %output54 = fmul double %output33, %return53
  %return56 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output50, double %output54, i64 1)
  %output58 = extractvalue { double, <3 x double> } %return56, 1
  store <3 x double> %output58, <3 x double>* %pos
  ret void
}

define private void @"VAR_MOBIUS@VVFPP"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <4 x double>* %re, <4 x double>* %im) nounwind alwaysinline {
__llvm_entry:
  %re1 = load <4 x double>* %re
  %return = call double @"getcomp@FPI"(<4 x double> %re1, i64 0)
  %_inp2 = load <3 x double>* %_inp
  %return3 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %output = fmul double %return, %return3
  %im4 = load <4 x double>* %im
  %return5 = call double @"getcomp@FPI"(<4 x double> %im4, i64 0)
  %return7 = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 1)
  %output8 = fmul double %return5, %return7
  %output9 = fsub double %output, %output8
  %return11 = call double @"getcomp@FPI"(<4 x double> %re1, i64 1)
  %output12 = fadd double %output9, %return11
  %output17 = fmul double %return, %return7
  %output22 = fmul double %return5, %return3
  %output23 = fadd double %output17, %output22
  %return25 = call double @"getcomp@FPI"(<4 x double> %im4, i64 1)
  %output26 = fadd double %output23, %return25
  %return28 = call double @"getcomp@FPI"(<4 x double> %re1, i64 2)
  %output31 = fmul double %return28, %return3
  %return33 = call double @"getcomp@FPI"(<4 x double> %im4, i64 2)
  %output36 = fmul double %return33, %return7
  %output37 = fsub double %output31, %output36
  %return39 = call double @"getcomp@FPI"(<4 x double> %re1, i64 3)
  %output40 = fadd double %output37, %return39
  %output45 = fmul double %return28, %return7
  %output50 = fmul double %return33, %return3
  %output51 = fadd double %output45, %output50
  %return53 = call double @"getcomp@FPI"(<4 x double> %im4, i64 3)
  %output54 = fadd double %output51, %return53
  %weight55 = load double* %weight
  %output58 = fmul double %output40, %output40
  %output61 = fmul double %output54, %output54
  %output62 = fadd double %output58, %output61
  %output63 = call double @"div@FF"(double %weight55, double %output62)
  %output67 = fmul double %output12, %output40
  %output70 = fmul double %output26, %output54
  %output71 = fadd double %output67, %output70
  %output72 = fmul double %output63, %output71
  %tmp = load <3 x double>* %pos
  %return73 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output72, i64 0)
  %output75 = extractvalue { double, <3 x double> } %return73, 1
  store <3 x double> %output75, <3 x double>* %pos
  %output79 = fmul double %output26, %output40
  %output82 = fmul double %output12, %output54
  %output83 = fsub double %output79, %output82
  %output84 = fmul double %output63, %output83
  %return86 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output75, double %output84, i64 1)
  %output88 = extractvalue { double, <3 x double> } %return86, 1
  store <3 x double> %output88, <3 x double>* %pos
  ret void
}

define private void @"VAR_CURVE@VVFUU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %l, <2 x double>* %a) nounwind alwaysinline {
__llvm_entry:
  %l1 = load <2 x double>* %l
  %return = call double @"getcomp@FUI"(<2 x double> %l1, i64 0)
  %output = fmul double %return, %return
  %return5 = call double @"getcomp@FUI"(<2 x double> %l1, i64 1)
  %output8 = fmul double %return5, %return5
  %return10 = fcmp olt double %output, 1.000000e-20
  br i1 %return10, label %true, label %end

true:                                             ; preds = %__llvm_entry
  br label %end

end:                                              ; preds = %true, %__llvm_entry
  %return13 = fcmp olt double %output8, 1.000000e-20
  br i1 %return13, label %true15, label %end16

true15:                                           ; preds = %end
  br label %end16

end16:                                            ; preds = %true15, %end
  %weight17 = load double* %weight
  %_inp18 = load <3 x double>* %_inp
  %return19 = call double @"getcomp@FVI"(<3 x double> %_inp18, i64 0)
  %a20 = load <2 x double>* %a
  %return21 = call double @"getcomp@FUI"(<2 x double> %a20, i64 0)
  %return23 = call double @"getcomp@FVI"(<3 x double> %_inp18, i64 1)
  %output26 = fmul double %return23, %return23
  %l27 = load <2 x double>* %l
  %return28 = call double @"getcomp@FUI"(<2 x double> %l27, i64 0)
  %output29 = call double @"div@FF"(double %output26, double %return28)
  %return30 = call double @"exp@FF"(double %output29)
  %output31 = fmul double %return21, %return30
  %output32 = fadd double %return19, %output31
  %output33 = fmul double %weight17, %output32
  %tmp = load <3 x double>* %pos
  %return34 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output33, i64 0)
  %output36 = extractvalue { double, <3 x double> } %return34, 1
  store <3 x double> %output36, <3 x double>* %pos
  %weight37 = load double* %weight
  %_inp38 = load <3 x double>* %_inp
  %return39 = call double @"getcomp@FVI"(<3 x double> %_inp38, i64 1)
  %a40 = load <2 x double>* %a
  %return41 = call double @"getcomp@FUI"(<2 x double> %a40, i64 1)
  %return43 = call double @"getcomp@FVI"(<3 x double> %_inp38, i64 0)
  %output46 = fmul double %return43, %return43
  %l47 = load <2 x double>* %l
  %return48 = call double @"getcomp@FUI"(<2 x double> %l47, i64 1)
  %output49 = call double @"div@FF"(double %output46, double %return48)
  %return50 = call double @"exp@FF"(double %output49)
  %output51 = fmul double %return41, %return50
  %output52 = fadd double %return39, %output51
  %output53 = fmul double %weight37, %output52
  %return55 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output36, double %output53, i64 1)
  %output57 = extractvalue { double, <3 x double> } %return55, 1
  store <3 x double> %output57, <3 x double>* %pos
  ret void
}

define private void @"VAR_PERSPECTIVE@VVFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %angle, double* %dist) nounwind alwaysinline {
__llvm_entry:
  %vsin = alloca double
  %vfcos = alloca double
  %0 = alloca double
  %1 = alloca double
  store double 0.000000e+00, double* %vsin, !vex-initializer-store !3
  store double 0.000000e+00, double* %vfcos, !vex-initializer-store !3
  %angle1 = load double* %angle
  store double %angle1, double* %0
  %dist2 = load double* %dist
  store double %dist2, double* %1
  call void @"perspective_precalc@FFFF"(double* %0, double* %1, double* %vsin, double* %vfcos)
  %dist3 = load double* %dist
  %_inp4 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 1)
  %vsin5 = load double* %vsin
  %output = fmul double %return, %vsin5
  %output6 = fsub double %dist3, %output
  %output7 = call double @"div@FF"(double 1.000000e+00, double %output6)
  %weight8 = load double* %weight
  %output10 = fmul double %weight8, %dist3
  %return12 = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 0)
  %output13 = fmul double %output10, %return12
  %output15 = fmul double %output13, %output7
  %tmp = load <3 x double>* %pos
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output15, i64 0)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  %weight19 = load double* %weight
  %vfcos20 = load double* %vfcos
  %output21 = fmul double %weight19, %vfcos20
  %_inp22 = load <3 x double>* %_inp
  %return23 = call double @"getcomp@FVI"(<3 x double> %_inp22, i64 1)
  %output24 = fmul double %output21, %return23
  %output26 = fmul double %output24, %output7
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output18, double %output26, i64 1)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  ret void
}

define private void @"VAR_BWRAPS@VVFFFFFF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, double* %cellsize, double* %space, double* %gain, double* %innertwist, double* %outertwist) nounwind alwaysinline {
__llvm_entry:
  %r2 = alloca double
  %rfactor = alloca double
  %ss = alloca double
  %cc = alloca double
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %g2 = alloca double
  store double 0.000000e+00, double* %g2, !vex-initializer-store !3
  store double 0.000000e+00, double* %r2, !vex-initializer-store !3
  store double 0.000000e+00, double* %rfactor, !vex-initializer-store !3
  store double 0.000000e+00, double* %ss, !vex-initializer-store !3
  store double 0.000000e+00, double* %cc, !vex-initializer-store !3
  %cellsize1 = load double* %cellsize
  store double %cellsize1, double* %0
  %space2 = load double* %space
  store double %space2, double* %1
  %gain3 = load double* %gain
  store double %gain3, double* %2
  call void @"bwraps_precalc@FFFFFF"(double* %g2, double* %r2, double* %rfactor, double* %0, double* %1, double* %2)
  %_inp4 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 0)
  %return6 = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 1)
  %cellsize7 = load double* %cellsize
  %return8 = fcmp oeq double %cellsize7, 0.000000e+00
  br i1 %return8, label %true, label %false

true:                                             ; preds = %__llvm_entry
  %weight10 = load double* %weight
  %output = fmul double %weight10, %return
  %tmp = load <3 x double>* %pos
  %return12 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output, i64 0)
  %output14 = extractvalue { double, <3 x double> } %return12, 1
  store <3 x double> %output14, <3 x double>* %pos
  %weight15 = load double* %weight
  %output17 = fmul double %weight15, %return6
  %return19 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output14, double %output17, i64 1)
  %output21 = extractvalue { double, <3 x double> } %return19, 1
  store <3 x double> %output21, <3 x double>* %pos
  br label %end

false:                                            ; preds = %__llvm_entry
  %output24 = call double @"div@FF"(double %return, double %cellsize7)
  %return25 = call double @"floor@FF"(double %output24)
  %output26 = fadd double %return25, 5.000000e-01
  %output28 = fmul double %output26, %cellsize7
  %output31 = call double @"div@FF"(double %return6, double %cellsize7)
  %return32 = call double @"floor@FF"(double %output31)
  %output33 = fadd double %return32, 5.000000e-01
  %output35 = fmul double %output33, %cellsize7
  %output38 = fsub double %return, %output28
  %output41 = fsub double %return6, %output35
  %output44 = fmul double %output38, %output38
  %output47 = fmul double %output41, %output41
  %output48 = fadd double %output44, %output47
  %r249 = load double* %r2
  %return50 = fcmp ogt double %output48, %r249
  br i1 %return50, label %true52, label %false53

end:                                              ; preds = %true52, %false53, %true
  ret void

true52:                                           ; preds = %false
  %weight55 = load double* %weight
  %output57 = fmul double %weight55, %return
  %tmp58 = load <3 x double>* %pos
  %return59 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp58, double %output57, i64 0)
  %output61 = extractvalue { double, <3 x double> } %return59, 1
  store <3 x double> %output61, <3 x double>* %pos
  %weight62 = load double* %weight
  %output64 = fmul double %weight62, %return6
  %return66 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output61, double %output64, i64 1)
  %output68 = extractvalue { double, <3 x double> } %return66, 1
  store <3 x double> %output68, <3 x double>* %pos
  br label %end

false53:                                          ; preds = %false
  %g270 = load double* %g2
  %output71 = fmul double %output38, %g270
  %output74 = fmul double %output41, %g270
  %rfactor75 = load double* %rfactor
  %output78 = fmul double %output71, %output71
  %output81 = fmul double %output74, %output74
  %output82 = fadd double %output78, %output81
  %output83 = call double @"div@FF"(double %output82, double 4.000000e+00)
  %output84 = fadd double %output83, 1.000000e+00
  %output85 = call double @"div@FF"(double %rfactor75, double %output84)
  %output88 = fmul double %output71, %output85
  %output91 = fmul double %output74, %output85
  %output94 = fmul double %output88, %output88
  %output97 = fmul double %output91, %output91
  %output98 = fadd double %output94, %output97
  %output100 = call double @"div@FF"(double %output98, double %r249)
  %innertwist101 = load double* %innertwist
  %output103 = fsub double 1.000000e+00, %output100
  %output104 = fmul double %innertwist101, %output103
  %outertwist105 = load double* %outertwist
  %output107 = fmul double %outertwist105, %output100
  %output108 = fadd double %output104, %output107
  store double %output108, double* %3
  call void @"sincos@FFF"(double* %3, double* %ss, double* %cc)
  %cc111 = load double* %cc
  %output113 = fmul double %cc111, %output88
  %output114 = fadd double %output28, %output113
  %ss115 = load double* %ss
  %output117 = fmul double %ss115, %output91
  %output118 = fadd double %output114, %output117
  %output122 = fmul double %ss115, %output88
  %output123 = fsub double %output35, %output122
  %output126 = fmul double %cc111, %output91
  %output127 = fadd double %output123, %output126
  %weight128 = load double* %weight
  %output130 = fmul double %weight128, %output118
  %tmp131 = load <3 x double>* %pos
  %return132 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp131, double %output130, i64 0)
  %output134 = extractvalue { double, <3 x double> } %return132, 1
  store <3 x double> %output134, <3 x double>* %pos
  %weight135 = load double* %weight
  %output137 = fmul double %weight135, %output127
  %return139 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output134, double %output137, i64 1)
  %output141 = extractvalue { double, <3 x double> } %return139, 1
  store <3 x double> %output141, <3 x double>* %pos
  br label %end
}

define private void @"VAR_HEMISPHERE@VVF"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca i8*
  %1 = alloca <3 x double>
  %weight1 = load double* %weight
  store i8* getelementptr inbounds ([6 x i8]* @119, i64 0, i64 0), i8** %0
  %_inp2 = load <3 x double>* %_inp
  store <3 x double> %_inp2, <3 x double>* %1
  %precalc = call double @"precalc@FSV"(i8** %0, <3 x double>* %1)
  %output = fadd double %precalc, 1.000000e+00
  %return = call double @"sqrt@FF"(double %output)
  %output3 = call double @"div@FF"(double %weight1, double %return)
  %_inp4 = load <3 x double>* %_inp
  %return5 = call double @"getcomp@FVI"(<3 x double> %_inp4, i64 0)
  %output7 = fmul double %return5, %output3
  %tmp = load <3 x double>* %pos
  %return8 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output7, i64 0)
  %output10 = extractvalue { double, <3 x double> } %return8, 1
  store <3 x double> %output10, <3 x double>* %pos
  %_inp11 = load <3 x double>* %_inp
  %return12 = call double @"getcomp@FVI"(<3 x double> %_inp11, i64 1)
  %output14 = fmul double %return12, %output3
  %return16 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output10, double %output14, i64 1)
  %output18 = extractvalue { double, <3 x double> } %return16, 1
  store <3 x double> %output18, <3 x double>* %pos
  ret void
}

define private void @"VAR_POLYNOMIAL@VVFUUU"(<3 x double>* %pos, <3 x double>* %_inp, double* %weight, <2 x double>* %pow, <2 x double>* %lc, <2 x double>* %sc) nounwind alwaysinline {
__llvm_entry:
  %0 = alloca double
  %1 = alloca double
  %weight1 = load double* %weight
  %_inp2 = load <3 x double>* %_inp
  %return = call double @"getcomp@FVI"(<3 x double> %_inp2, i64 0)
  %return3 = call double @"abs@FF"(double %return)
  %output = fmul double %weight1, %return3
  %pow4 = load <2 x double>* %pow
  %return5 = call double @"getcomp@FUI"(<2 x double> %pow4, i64 0)
  %return6 = call double @"pow@FFF"(double %output, double %return5)
  %weight7 = load double* %weight
  %_inp8 = load <3 x double>* %_inp
  %return9 = call double @"getcomp@FVI"(<3 x double> %_inp8, i64 1)
  %return10 = call double @"abs@FF"(double %return9)
  %output11 = fmul double %weight7, %return10
  %pow12 = load <2 x double>* %pow
  %return13 = call double @"getcomp@FUI"(<2 x double> %pow12, i64 1)
  %return14 = call double @"pow@FFF"(double %output11, double %return13)
  %_inp16 = load <3 x double>* %_inp
  %return17 = call double @"getcomp@FVI"(<3 x double> %_inp16, i64 0)
  store double %return17, double* %0
  %sgn = call double @"sgn@FF"(double* %0)
  %output18 = fmul double %return6, %sgn
  %lc19 = load <2 x double>* %lc
  %return20 = call double @"getcomp@FUI"(<2 x double> %lc19, i64 0)
  %_inp21 = load <3 x double>* %_inp
  %return22 = call double @"getcomp@FVI"(<3 x double> %_inp21, i64 0)
  %output23 = fmul double %return20, %return22
  %sc24 = load <2 x double>* %sc
  %return25 = call double @"getcomp@FUI"(<2 x double> %sc24, i64 0)
  %output26 = fmul double %output23, %return25
  %output27 = fadd double %output18, %output26
  %tmp = load <3 x double>* %pos
  %return28 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp, double %output27, i64 0)
  %output30 = extractvalue { double, <3 x double> } %return28, 1
  store <3 x double> %output30, <3 x double>* %pos
  %_inp32 = load <3 x double>* %_inp
  %return33 = call double @"getcomp@FVI"(<3 x double> %_inp32, i64 1)
  store double %return33, double* %1
  %sgn34 = call double @"sgn@FF"(double* %1)
  %output35 = fmul double %return14, %sgn34
  %lc36 = load <2 x double>* %lc
  %return37 = call double @"getcomp@FUI"(<2 x double> %lc36, i64 1)
  %_inp38 = load <3 x double>* %_inp
  %return39 = call double @"getcomp@FVI"(<3 x double> %_inp38, i64 1)
  %output40 = fmul double %return37, %return39
  %sc41 = load <2 x double>* %sc
  %return42 = call double @"getcomp@FUI"(<2 x double> %sc41, i64 1)
  %output43 = fmul double %output40, %return42
  %output44 = fadd double %output35, %output43
  %tmp45 = load <3 x double>* %pos
  %return46 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %tmp45, double %output44, i64 1)
  %output48 = extractvalue { double, <3 x double> } %return46, 1
  store <3 x double> %output48, <3 x double>* %pos
  ret void
}

define private <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %GMP, i8** %ftype, <3 x double>* %pos, i64* %idx, i64* %type, double* %a, double* %b, double* %d, double* %e, double* %f, double* %h, double* %weight) nounwind alwaysinline {
__llvm_entry:
  %_inp = alloca <3 x double>
  %precalc = alloca <3 x double>
  %0 = alloca <3 x double>
  %1 = alloca double
  %2 = alloca double
  %3 = alloca double
  %4 = alloca double
  %5 = alloca double
  %6 = alloca double
  %7 = alloca i64
  %8 = alloca <3 x double>
  %9 = alloca <3 x double>
  %10 = alloca double
  %11 = alloca <3 x double>
  %12 = alloca double
  %13 = alloca <3 x double>
  %14 = alloca double
  %15 = alloca <3 x double>
  %16 = alloca double
  %17 = alloca <3 x double>
  %18 = alloca double
  %19 = alloca <3 x double>
  %20 = alloca double
  %21 = alloca <3 x double>
  %22 = alloca double
  %23 = alloca <3 x double>
  %24 = alloca double
  %25 = alloca <3 x double>
  %26 = alloca <3 x double>
  %27 = alloca double
  %28 = alloca <3 x double>
  %29 = alloca <3 x double>
  %30 = alloca double
  %31 = alloca <3 x double>
  %32 = alloca <3 x double>
  %33 = alloca double
  %34 = alloca <3 x double>
  %35 = alloca double
  %36 = alloca <3 x double>
  %37 = alloca double
  %38 = alloca <3 x double>
  %39 = alloca double
  %40 = alloca <3 x double>
  %41 = alloca double
  %42 = alloca double
  %43 = alloca double
  %44 = alloca double
  %45 = alloca double
  %46 = alloca <3 x double>
  %47 = alloca double
  %48 = alloca <3 x double>
  %49 = alloca double
  %50 = alloca double
  %51 = alloca double
  %52 = alloca <3 x double>
  %53 = alloca double
  %54 = alloca <3 x double>
  %55 = alloca <3 x double>
  %56 = alloca double
  %57 = alloca <3 x double>
  %58 = alloca double
  %59 = alloca <3 x double>
  %60 = alloca <3 x double>
  %61 = alloca double
  %62 = alloca double
  %63 = alloca <3 x double>
  %64 = alloca double
  %65 = alloca double
  %66 = alloca <3 x double>
  %67 = alloca double
  %68 = alloca <3 x double>
  %69 = alloca double
  %70 = alloca <3 x double>
  %71 = alloca double
  %72 = alloca double
  %73 = alloca <3 x double>
  %74 = alloca double
  %75 = alloca double
  %76 = alloca double
  %77 = alloca <3 x double>
  %78 = alloca double
  %79 = alloca double
  %80 = alloca double
  %81 = alloca double
  %82 = alloca double
  %83 = alloca <3 x double>
  %84 = alloca double
  %85 = alloca <4 x double>
  %86 = alloca <3 x double>
  %87 = alloca <3 x double>
  %88 = alloca double
  %89 = alloca double
  %90 = alloca double
  %91 = alloca double
  %92 = alloca <3 x double>
  %93 = alloca double
  %94 = alloca double
  %95 = alloca double
  %96 = alloca <3 x double>
  %97 = alloca double
  %98 = alloca double
  %99 = alloca double
  %100 = alloca double
  %101 = alloca <3 x double>
  %102 = alloca double
  %103 = alloca <2 x double>
  %104 = alloca <3 x double>
  %105 = alloca <3 x double>
  %106 = alloca double
  %107 = alloca double
  %108 = alloca <3 x double>
  %109 = alloca double
  %110 = alloca <2 x double>
  %111 = alloca <3 x double>
  %112 = alloca double
  %113 = alloca double
  %114 = alloca double
  %115 = alloca double
  %116 = alloca double
  %117 = alloca double
  %118 = alloca double
  %119 = alloca <3 x double>
  %120 = alloca double
  %121 = alloca <3 x double>
  %122 = alloca double
  %123 = alloca <3 x double>
  %124 = alloca double
  %125 = alloca <3 x double>
  %126 = alloca double
  %127 = alloca <3 x double>
  %128 = alloca double
  %129 = alloca <3 x double>
  %130 = alloca double
  %131 = alloca <3 x double>
  %132 = alloca double
  %133 = alloca <3 x double>
  %134 = alloca double
  %135 = alloca <3 x double>
  %136 = alloca double
  %137 = alloca double
  %138 = alloca double
  %139 = alloca <3 x double>
  %140 = alloca double
  %141 = alloca double
  %142 = alloca double
  %143 = alloca double
  %144 = alloca <3 x double>
  %145 = alloca <3 x double>
  %146 = alloca double
  %147 = alloca double
  %148 = alloca double
  %149 = alloca <3 x double>
  %150 = alloca double
  %151 = alloca double
  %152 = alloca double
  %153 = alloca <3 x double>
  %154 = alloca double
  %155 = alloca double
  %156 = alloca double
  %157 = alloca <3 x double>
  %158 = alloca double
  %159 = alloca <2 x double>
  %160 = alloca <3 x double>
  %161 = alloca double
  %162 = alloca double
  %163 = alloca <3 x double>
  %164 = alloca double
  %165 = alloca <3 x double>
  %166 = alloca double
  %167 = alloca <3 x double>
  %168 = alloca double
  %169 = alloca double
  %170 = alloca <3 x double>
  %171 = alloca double
  %172 = alloca double
  %173 = alloca double
  %174 = alloca double
  %175 = alloca <3 x double>
  %176 = alloca double
  %177 = alloca <3 x double>
  %178 = alloca double
  %179 = alloca <3 x double>
  %180 = alloca double
  %181 = alloca <3 x double>
  %182 = alloca double
  %183 = alloca double
  %184 = alloca <3 x double>
  %185 = alloca double
  %186 = alloca <3 x double>
  %187 = alloca double
  %188 = alloca double
  %189 = alloca double
  %190 = alloca double
  %191 = alloca <2 x double>
  %192 = alloca <3 x double>
  %193 = alloca double
  %194 = alloca <3 x double>
  %195 = alloca double
  %196 = alloca <2 x double>
  %197 = alloca <3 x double>
  %198 = alloca double
  %199 = alloca double
  %200 = alloca double
  %201 = alloca double
  %202 = alloca double
  %203 = alloca <3 x double>
  %204 = alloca double
  %205 = alloca <3 x double>
  %206 = alloca double
  %207 = alloca double
  %208 = alloca <2 x double>
  %209 = alloca <3 x double>
  %210 = alloca double
  %211 = alloca <3 x double>
  %212 = alloca double
  %213 = alloca <2 x double>
  %214 = alloca <2 x double>
  %215 = alloca <3 x double>
  %216 = alloca double
  %217 = alloca <2 x double>
  %218 = alloca <3 x double>
  %219 = alloca double
  %220 = alloca <2 x double>
  %221 = alloca <3 x double>
  %222 = alloca double
  %223 = alloca double
  %224 = alloca double
  %225 = alloca <3 x double>
  %226 = alloca double
  %227 = alloca double
  %228 = alloca double
  %229 = alloca double
  %230 = alloca double
  %231 = alloca <3 x double>
  %232 = alloca double
  %233 = alloca double
  %234 = alloca double
  %235 = alloca double
  %236 = alloca double
  %237 = alloca <3 x double>
  %238 = alloca double
  %239 = alloca double
  %240 = alloca double
  %241 = alloca double
  %242 = alloca double
  %243 = alloca <3 x double>
  %244 = alloca double
  %245 = alloca double
  %246 = alloca double
  %247 = alloca <3 x double>
  %248 = alloca double
  %249 = alloca <2 x double>
  %250 = alloca <2 x double>
  %251 = alloca <3 x double>
  %252 = alloca double
  %253 = alloca <3 x double>
  %254 = alloca double
  %255 = alloca <3 x double>
  %256 = alloca double
  %257 = alloca <3 x double>
  %258 = alloca double
  %259 = alloca <3 x double>
  %260 = alloca double
  %261 = alloca <3 x double>
  %262 = alloca double
  %263 = alloca <3 x double>
  %264 = alloca double
  %265 = alloca <3 x double>
  %266 = alloca double
  %267 = alloca <3 x double>
  %268 = alloca double
  %269 = alloca <3 x double>
  %270 = alloca double
  %271 = alloca <3 x double>
  %272 = alloca double
  %273 = alloca <3 x double>
  %274 = alloca double
  %275 = alloca <3 x double>
  %276 = alloca double
  %277 = alloca <3 x double>
  %278 = alloca double
  %279 = alloca <3 x double>
  %280 = alloca double
  %281 = alloca double
  %282 = alloca double
  %283 = alloca double
  %284 = alloca double
  %285 = alloca <3 x double>
  %286 = alloca double
  %287 = alloca double
  %288 = alloca <3 x double>
  %289 = alloca double
  %290 = alloca <4 x double>
  %291 = alloca <4 x double>
  %292 = alloca <3 x double>
  %293 = alloca double
  %294 = alloca <2 x double>
  %295 = alloca <2 x double>
  %296 = alloca <3 x double>
  %297 = alloca double
  %298 = alloca double
  %299 = alloca double
  %300 = alloca <3 x double>
  %301 = alloca double
  %302 = alloca double
  %303 = alloca double
  %304 = alloca double
  %305 = alloca double
  %306 = alloca double
  %307 = alloca <3 x double>
  %308 = alloca double
  %309 = alloca <3 x double>
  %310 = alloca double
  %311 = alloca <2 x double>
  %312 = alloca <2 x double>
  %313 = alloca <2 x double>
  %outp = alloca <3 x double>
  store <3 x double> zeroinitializer, <3 x double>* %outp, !vex-initializer-store !3
  store <3 x double> zeroinitializer, <3 x double>* %precalc, !vex-initializer-store !3
  %cast = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast, <3 x double>* %_inp
  %pos1 = load <3 x double>* %pos
  store <3 x double> %pos1, <3 x double>* %0
  %a2 = load double* %a
  store double %a2, double* %1
  %b3 = load double* %b
  store double %b3, double* %2
  %d4 = load double* %d
  store double %d4, double* %3
  %e5 = load double* %e
  store double %e5, double* %4
  %f6 = load double* %f
  store double %f6, double* %5
  %h7 = load double* %h
  store double %h7, double* %6
  call void @"affine@VVFFFFFF"(<3 x double>* %_inp, <3 x double>* %0, double* %1, double* %2, double* %3, double* %4, double* %5, double* %6)
  %type8 = load i64* %type
  store i64 %type8, i64* %7
  %_inp9 = load <3 x double>* %_inp
  store <3 x double> %_inp9, <3 x double>* %8
  call void @"precalc_utils@IVV"(i64* %7, <3 x double>* %8, <3 x double>* %precalc)
  %type10 = load i64* %type
  %return = call i64 @"not@II"(i64 %type10)
  %314 = icmp ne i64 %return, 0
  br i1 %314, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %_inp11 = load <3 x double>* %_inp
  %weight12 = load double* %weight
  %cast13 = call <3 x double> @"set@VF"(double %weight12)
  %output = call <3 x double> @"mul@VV"(<3 x double> %_inp11, <3 x double> %cast13)
  br label %UnifiedReturnBlock

end:                                              ; preds = %__llvm_entry
  %return15 = call i64 @"lt@III"(i64 %type10, i64 35)
  %315 = icmp ne i64 %return15, 0
  br i1 %315, label %true16, label %false

true16:                                           ; preds = %end
  %return19 = call i64 @"lt@III"(i64 %type10, i64 18)
  %316 = icmp ne i64 %return19, 0
  br i1 %316, label %true20, label %false21

false:                                            ; preds = %end
  %return403 = call i64 @"lt@III"(i64 %type10, i64 70)
  %317 = icmp ne i64 %return403, 0
  br i1 %317, label %true404, label %false405

end17:                                            ; preds = %false1410, %false1186, %false405, %false901, %false582, %false380, %false153
  %_inp1442 = load <3 x double>* %_inp
  br label %UnifiedReturnBlock

true20:                                           ; preds = %true16
  %return24 = call i64 @"eq@III"(i64 %type10, i64 1)
  %318 = icmp ne i64 %return24, 0
  br i1 %318, label %true25, label %false26

false21:                                          ; preds = %true16
  %return168 = call i64 @"eq@III"(i64 %type10, i64 18)
  %319 = icmp ne i64 %return168, 0
  br i1 %319, label %true169, label %false170

true25:                                           ; preds = %true20
  %_inp28 = load <3 x double>* %_inp
  store <3 x double> %_inp28, <3 x double>* %9
  %weight29 = load double* %weight
  store double %weight29, double* %10
  call void @"VAR_SINUSOIDAL@VVF"(<3 x double>* %outp, <3 x double>* %9, double* %10)
  %outp30 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false26:                                          ; preds = %true20
  %return32 = call i64 @"eq@III"(i64 %type10, i64 2)
  %320 = icmp ne i64 %return32, 0
  br i1 %320, label %true33, label %false34

true33:                                           ; preds = %false26
  %_inp36 = load <3 x double>* %_inp
  store <3 x double> %_inp36, <3 x double>* %11
  %weight37 = load double* %weight
  store double %weight37, double* %12
  call void @"VAR_SPHERICAL@VVF"(<3 x double>* %outp, <3 x double>* %11, double* %12)
  %outp38 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false34:                                          ; preds = %false26
  %return40 = call i64 @"eq@III"(i64 %type10, i64 3)
  %321 = icmp ne i64 %return40, 0
  br i1 %321, label %true41, label %false42

true41:                                           ; preds = %false34
  %_inp44 = load <3 x double>* %_inp
  store <3 x double> %_inp44, <3 x double>* %13
  %weight45 = load double* %weight
  store double %weight45, double* %14
  call void @"VAR_SWIRL@VVF"(<3 x double>* %outp, <3 x double>* %13, double* %14)
  %outp46 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false42:                                          ; preds = %false34
  %return48 = call i64 @"eq@III"(i64 %type10, i64 4)
  %322 = icmp ne i64 %return48, 0
  br i1 %322, label %true49, label %false50

true49:                                           ; preds = %false42
  %_inp52 = load <3 x double>* %_inp
  store <3 x double> %_inp52, <3 x double>* %15
  %weight53 = load double* %weight
  store double %weight53, double* %16
  call void @"VAR_HORSESHOE@VVF"(<3 x double>* %outp, <3 x double>* %15, double* %16)
  %outp54 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false50:                                          ; preds = %false42
  %return56 = call i64 @"eq@III"(i64 %type10, i64 5)
  %323 = icmp ne i64 %return56, 0
  br i1 %323, label %true57, label %false58

true57:                                           ; preds = %false50
  %_inp60 = load <3 x double>* %_inp
  store <3 x double> %_inp60, <3 x double>* %17
  %weight61 = load double* %weight
  store double %weight61, double* %18
  call void @"VAR_POLAR@VVF"(<3 x double>* %outp, <3 x double>* %17, double* %18)
  %outp62 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false58:                                          ; preds = %false50
  %return64 = call i64 @"eq@III"(i64 %type10, i64 6)
  %324 = icmp ne i64 %return64, 0
  br i1 %324, label %true65, label %false66

true65:                                           ; preds = %false58
  %_inp68 = load <3 x double>* %_inp
  store <3 x double> %_inp68, <3 x double>* %19
  %weight69 = load double* %weight
  store double %weight69, double* %20
  call void @"VAR_HANDKERCHIEF@VVF"(<3 x double>* %outp, <3 x double>* %19, double* %20)
  %outp70 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false66:                                          ; preds = %false58
  %return72 = call i64 @"eq@III"(i64 %type10, i64 7)
  %325 = icmp ne i64 %return72, 0
  br i1 %325, label %true73, label %false74

true73:                                           ; preds = %false66
  %_inp76 = load <3 x double>* %_inp
  store <3 x double> %_inp76, <3 x double>* %21
  %weight77 = load double* %weight
  store double %weight77, double* %22
  call void @"VAR_HEART@VVF"(<3 x double>* %outp, <3 x double>* %21, double* %22)
  %outp78 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false74:                                          ; preds = %false66
  %return80 = call i64 @"eq@III"(i64 %type10, i64 8)
  %326 = icmp ne i64 %return80, 0
  br i1 %326, label %true81, label %false82

true81:                                           ; preds = %false74
  %_inp84 = load <3 x double>* %_inp
  store <3 x double> %_inp84, <3 x double>* %23
  %weight85 = load double* %weight
  store double %weight85, double* %24
  call void @"VAR_DISC@VVF"(<3 x double>* %outp, <3 x double>* %23, double* %24)
  %outp86 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false82:                                          ; preds = %false74
  %return88 = call i64 @"eq@III"(i64 %type10, i64 9)
  %327 = icmp ne i64 %return88, 0
  br i1 %327, label %true89, label %false90

true89:                                           ; preds = %false82
  %_inp92 = load <3 x double>* %_inp
  store <3 x double> %_inp92, <3 x double>* %25
  %precalc93 = load <3 x double>* %precalc
  store <3 x double> %precalc93, <3 x double>* %26
  %weight94 = load double* %weight
  store double %weight94, double* %27
  call void @"VAR_SPIRAL@VVVF"(<3 x double>* %outp, <3 x double>* %25, <3 x double>* %26, double* %27)
  %outp95 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false90:                                          ; preds = %false82
  %return97 = call i64 @"eq@III"(i64 %type10, i64 10)
  %328 = icmp ne i64 %return97, 0
  br i1 %328, label %true98, label %false99

true98:                                           ; preds = %false90
  %_inp101 = load <3 x double>* %_inp
  store <3 x double> %_inp101, <3 x double>* %28
  %precalc102 = load <3 x double>* %precalc
  store <3 x double> %precalc102, <3 x double>* %29
  %weight103 = load double* %weight
  store double %weight103, double* %30
  call void @"VAR_HIPERBOLIC@VVVF"(<3 x double>* %outp, <3 x double>* %28, <3 x double>* %29, double* %30)
  %outp104 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false99:                                          ; preds = %false90
  %return106 = call i64 @"eq@III"(i64 %type10, i64 11)
  %329 = icmp ne i64 %return106, 0
  br i1 %329, label %true107, label %false108

true107:                                          ; preds = %false99
  %_inp110 = load <3 x double>* %_inp
  store <3 x double> %_inp110, <3 x double>* %31
  %precalc111 = load <3 x double>* %precalc
  store <3 x double> %precalc111, <3 x double>* %32
  %weight112 = load double* %weight
  store double %weight112, double* %33
  call void @"VAR_DIAMOND@VVVF"(<3 x double>* %outp, <3 x double>* %31, <3 x double>* %32, double* %33)
  %outp113 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false108:                                         ; preds = %false99
  %return115 = call i64 @"eq@III"(i64 %type10, i64 12)
  %330 = icmp ne i64 %return115, 0
  br i1 %330, label %true116, label %false117

true116:                                          ; preds = %false108
  %_inp119 = load <3 x double>* %_inp
  store <3 x double> %_inp119, <3 x double>* %34
  %weight120 = load double* %weight
  store double %weight120, double* %35
  call void @"VAR_EX@VVF"(<3 x double>* %outp, <3 x double>* %34, double* %35)
  %outp121 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false117:                                         ; preds = %false108
  %return123 = call i64 @"eq@III"(i64 %type10, i64 13)
  %331 = icmp ne i64 %return123, 0
  br i1 %331, label %true124, label %false125

true124:                                          ; preds = %false117
  %_inp127 = load <3 x double>* %_inp
  store <3 x double> %_inp127, <3 x double>* %36
  %weight128 = load double* %weight
  store double %weight128, double* %37
  call void @"VAR_JULIA@VVF"(<3 x double>* %outp, <3 x double>* %36, double* %37)
  %outp129 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false125:                                         ; preds = %false117
  %return131 = call i64 @"eq@III"(i64 %type10, i64 14)
  %332 = icmp ne i64 %return131, 0
  br i1 %332, label %true132, label %false133

true132:                                          ; preds = %false125
  %_inp135 = load <3 x double>* %_inp
  store <3 x double> %_inp135, <3 x double>* %38
  %weight136 = load double* %weight
  store double %weight136, double* %39
  call void @"VAR_BENT@VVF"(<3 x double>* %outp, <3 x double>* %38, double* %39)
  %outp137 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false133:                                         ; preds = %false125
  %return139 = call i64 @"eq@III"(i64 %type10, i64 15)
  %333 = icmp ne i64 %return139, 0
  br i1 %333, label %true140, label %false141

true140:                                          ; preds = %false133
  %_inp143 = load <3 x double>* %_inp
  store <3 x double> %_inp143, <3 x double>* %40
  %weight144 = load double* %weight
  store double %weight144, double* %41
  %d145 = load double* %d
  store double %d145, double* %42
  %e146 = load double* %e
  store double %e146, double* %43
  %f147 = load double* %f
  store double %f147, double* %44
  %h148 = load double* %h
  store double %h148, double* %45
  call void @"VAR_WAVES@VVFFFFF"(<3 x double>* %outp, <3 x double>* %40, double* %41, double* %42, double* %43, double* %44, double* %45)
  %outp149 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false141:                                         ; preds = %false133
  %return151 = call i64 @"eq@III"(i64 %type10, i64 16)
  %334 = icmp ne i64 %return151, 0
  br i1 %334, label %true152, label %false153

true152:                                          ; preds = %false141
  %_inp155 = load <3 x double>* %_inp
  store <3 x double> %_inp155, <3 x double>* %46
  %weight156 = load double* %weight
  store double %weight156, double* %47
  call void @"VAR_FISHEYE@VVF"(<3 x double>* %outp, <3 x double>* %46, double* %47)
  %outp157 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false153:                                         ; preds = %false141
  %return159 = call i64 @"eq@III"(i64 %type10, i64 17)
  %335 = icmp ne i64 %return159, 0
  br i1 %335, label %true160, label %end17

true160:                                          ; preds = %false153
  %_inp162 = load <3 x double>* %_inp
  store <3 x double> %_inp162, <3 x double>* %48
  %weight163 = load double* %weight
  store double %weight163, double* %49
  %d164 = load double* %d
  store double %d164, double* %50
  %h165 = load double* %h
  store double %h165, double* %51
  call void @"VAR_POPCORN@VVFFF"(<3 x double>* %outp, <3 x double>* %48, double* %49, double* %50, double* %51)
  %outp166 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true169:                                          ; preds = %false21
  %_inp172 = load <3 x double>* %_inp
  store <3 x double> %_inp172, <3 x double>* %52
  %weight173 = load double* %weight
  store double %weight173, double* %53
  call void @"VAR_EXPONENTIAL@VVF"(<3 x double>* %outp, <3 x double>* %52, double* %53)
  %outp174 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false170:                                         ; preds = %false21
  %return176 = call i64 @"eq@III"(i64 %type10, i64 19)
  %336 = icmp ne i64 %return176, 0
  br i1 %336, label %true177, label %false178

true177:                                          ; preds = %false170
  %_inp180 = load <3 x double>* %_inp
  store <3 x double> %_inp180, <3 x double>* %54
  %precalc181 = load <3 x double>* %precalc
  store <3 x double> %precalc181, <3 x double>* %55
  %weight182 = load double* %weight
  store double %weight182, double* %56
  call void @"VAR_POWER@VVVF"(<3 x double>* %outp, <3 x double>* %54, <3 x double>* %55, double* %56)
  %outp183 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false178:                                         ; preds = %false170
  %return185 = call i64 @"eq@III"(i64 %type10, i64 20)
  %337 = icmp ne i64 %return185, 0
  br i1 %337, label %true186, label %false187

true186:                                          ; preds = %false178
  %_inp189 = load <3 x double>* %_inp
  store <3 x double> %_inp189, <3 x double>* %57
  %weight190 = load double* %weight
  store double %weight190, double* %58
  call void @"VAR_COSINE@VVF"(<3 x double>* %outp, <3 x double>* %57, double* %58)
  %outp191 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false187:                                         ; preds = %false178
  %return193 = call i64 @"eq@III"(i64 %type10, i64 21)
  %338 = icmp ne i64 %return193, 0
  br i1 %338, label %true194, label %false195

true194:                                          ; preds = %false187
  %_inp197 = load <3 x double>* %_inp
  store <3 x double> %_inp197, <3 x double>* %59
  %precalc198 = load <3 x double>* %precalc
  store <3 x double> %precalc198, <3 x double>* %60
  %weight199 = load double* %weight
  store double %weight199, double* %61
  %d200 = load double* %d
  store double %d200, double* %62
  call void @"VAR_RINGS@VVVFF"(<3 x double>* %outp, <3 x double>* %59, <3 x double>* %60, double* %61, double* %62)
  %outp201 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false195:                                         ; preds = %false187
  %return203 = call i64 @"eq@III"(i64 %type10, i64 22)
  %339 = icmp ne i64 %return203, 0
  br i1 %339, label %true204, label %false205

true204:                                          ; preds = %false195
  %_inp207 = load <3 x double>* %_inp
  store <3 x double> %_inp207, <3 x double>* %63
  %weight208 = load double* %weight
  store double %weight208, double* %64
  %d209 = load double* %d
  store double %d209, double* %65
  call void @"VAR_FAN@VVFF"(<3 x double>* %outp, <3 x double>* %63, double* %64, double* %65)
  %outp210 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false205:                                         ; preds = %false195
  %return212 = call i64 @"eq@III"(i64 %type10, i64 23)
  %340 = icmp ne i64 %return212, 0
  br i1 %340, label %true213, label %false214

true213:                                          ; preds = %false205
  %_inp216 = load <3 x double>* %_inp
  store <3 x double> %_inp216, <3 x double>* %66
  %weight217 = load double* %weight
  store double %weight217, double* %67
  call void @"VAR_BUBBLE@VVF"(<3 x double>* %outp, <3 x double>* %66, double* %67)
  %outp218 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false214:                                         ; preds = %false205
  %return220 = call i64 @"eq@III"(i64 %type10, i64 24)
  %341 = icmp ne i64 %return220, 0
  br i1 %341, label %true221, label %false222

true221:                                          ; preds = %false214
  %_inp224 = load <3 x double>* %_inp
  store <3 x double> %_inp224, <3 x double>* %68
  %weight225 = load double* %weight
  store double %weight225, double* %69
  call void @"VAR_CYLINDER@VVF"(<3 x double>* %outp, <3 x double>* %68, double* %69)
  %outp226 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false222:                                         ; preds = %false214
  %return228 = call i64 @"eq@III"(i64 %type10, i64 25)
  %342 = icmp ne i64 %return228, 0
  br i1 %342, label %true229, label %false230

true229:                                          ; preds = %false222
  %_inp232 = load <3 x double>* %_inp
  store <3 x double> %_inp232, <3 x double>* %70
  %weight233 = load double* %weight
  store double %weight233, double* %71
  call void @"VAR_EYEFISH@VVF"(<3 x double>* %outp, <3 x double>* %70, double* %71)
  %outp234 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false230:                                         ; preds = %false222
  %return236 = call i64 @"eq@III"(i64 %type10, i64 26)
  %343 = icmp ne i64 %return236, 0
  br i1 %343, label %true237, label %false238

true237:                                          ; preds = %false230
  %weight240 = load double* %weight
  store double %weight240, double* %72
  call void @"VAR_BLUR@VF"(<3 x double>* %outp, double* %72)
  %outp241 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false238:                                         ; preds = %false230
  %return243 = call i64 @"eq@III"(i64 %type10, i64 27)
  %344 = icmp ne i64 %return243, 0
  br i1 %344, label %true244, label %false245

true244:                                          ; preds = %false238
  %ftype247 = load i8** %ftype
  %return248 = call i64 @"eq@ISS"(i8* %ftype247, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %345 = icmp ne i64 %return248, 0
  br i1 %345, label %true249, label %false250

false245:                                         ; preds = %false238
  %return265 = call i64 @"eq@III"(i64 %type10, i64 28)
  %346 = icmp ne i64 %return265, 0
  br i1 %346, label %true266, label %false267

true249:                                          ; preds = %true244
  %GMP252 = load %genomeParametrics* %GMP
  %curl_c253 = extractvalue %genomeParametrics %GMP252, 13
  %idx254 = load i64* %idx
  %return255 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curl_c253, i64 %idx254)
  br label %end251

false250:                                         ; preds = %true244
  %return256 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @125, i64 0, i64 0))
  br label %end251

end251:                                           ; preds = %false250, %true249
  %curl_c.0 = phi <2 x double> [ %return255, %true249 ], [ %return256, %false250 ]
  %_inp257 = load <3 x double>* %_inp
  store <3 x double> %_inp257, <3 x double>* %73
  %weight258 = load double* %weight
  store double %weight258, double* %74
  %return260 = call double @"getcomp@FUI"(<2 x double> %curl_c.0, i64 0)
  store double %return260, double* %75
  %return262 = call double @"getcomp@FUI"(<2 x double> %curl_c.0, i64 1)
  store double %return262, double* %76
  call void @"VAR_CURL@VVFFF"(<3 x double>* %outp, <3 x double>* %73, double* %74, double* %75, double* %76)
  %outp263 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true266:                                          ; preds = %false245
  %ftype269 = load i8** %ftype
  %return270 = call i64 @"eq@ISS"(i8* %ftype269, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %347 = icmp ne i64 %return270, 0
  br i1 %347, label %true271, label %false272

false267:                                         ; preds = %false245
  %return291 = call i64 @"eq@III"(i64 %type10, i64 29)
  %348 = icmp ne i64 %return291, 0
  br i1 %348, label %true292, label %false293

true271:                                          ; preds = %true266
  %GMP274 = load %genomeParametrics* %GMP
  %ngon275 = extractvalue %genomeParametrics %GMP274, 42
  %idx276 = load i64* %idx
  %return277 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %ngon275, i64 %idx276)
  br label %end273

false272:                                         ; preds = %true266
  %return278 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([11 x i8]* @126, i64 0, i64 0))
  br label %end273

end273:                                           ; preds = %false272, %true271
  %ngon.0 = phi <4 x double> [ %return277, %true271 ], [ %return278, %false272 ]
  %_inp279 = load <3 x double>* %_inp
  store <3 x double> %_inp279, <3 x double>* %77
  %weight280 = load double* %weight
  store double %weight280, double* %78
  %return282 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 0)
  store double %return282, double* %79
  %return284 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 1)
  store double %return284, double* %80
  %return286 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 2)
  store double %return286, double* %81
  %return288 = call double @"getcomp@FPI"(<4 x double> %ngon.0, i64 3)
  store double %return288, double* %82
  call void @"VAR_NGON@VVFFFFF"(<3 x double>* %outp, <3 x double>* %77, double* %78, double* %79, double* %80, double* %81, double* %82)
  %outp289 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true292:                                          ; preds = %false267
  %ftype295 = load i8** %ftype
  %return296 = call i64 @"eq@ISS"(i8* %ftype295, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %349 = icmp ne i64 %return296, 0
  br i1 %349, label %true297, label %false298

false293:                                         ; preds = %false267
  %return309 = call i64 @"eq@III"(i64 %type10, i64 30)
  %350 = icmp ne i64 %return309, 0
  br i1 %350, label %true310, label %false311

true297:                                          ; preds = %true292
  %GMP300 = load %genomeParametrics* %GMP
  %pdj_w = extractvalue %genomeParametrics %GMP300, 43
  %idx301 = load i64* %idx
  %return302 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %pdj_w, i64 %idx301)
  br label %end299

false298:                                         ; preds = %true292
  %return303 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([11 x i8]* @127, i64 0, i64 0))
  br label %end299

end299:                                           ; preds = %false298, %true297
  %pp.0 = phi <4 x double> [ %return302, %true297 ], [ %return303, %false298 ]
  %_inp304 = load <3 x double>* %_inp
  store <3 x double> %_inp304, <3 x double>* %83
  %weight305 = load double* %weight
  store double %weight305, double* %84
  store <4 x double> %pp.0, <4 x double>* %85
  call void @"VAR_PDJ@VVFP"(<3 x double>* %outp, <3 x double>* %83, double* %84, <4 x double>* %85)
  %outp307 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true310:                                          ; preds = %false293
  %ftype313 = load i8** %ftype
  %return314 = call i64 @"eq@ISS"(i8* %ftype313, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %351 = icmp ne i64 %return314, 0
  br i1 %351, label %true315, label %false316

false311:                                         ; preds = %false293
  %return334 = call i64 @"eq@III"(i64 %type10, i64 31)
  %352 = icmp ne i64 %return334, 0
  br i1 %352, label %true335, label %false336

true315:                                          ; preds = %true310
  %GMP318 = load %genomeParametrics* %GMP
  %blob319 = extractvalue %genomeParametrics %GMP318, 6
  %idx320 = load i64* %idx
  %return321 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %blob319, i64 %idx320)
  br label %end317

false316:                                         ; preds = %true310
  %return322 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8]* @128, i64 0, i64 0))
  br label %end317

end317:                                           ; preds = %false316, %true315
  %blob.0 = phi <3 x double> [ %return321, %true315 ], [ %return322, %false316 ]
  %_inp323 = load <3 x double>* %_inp
  store <3 x double> %_inp323, <3 x double>* %86
  %precalc324 = load <3 x double>* %precalc
  store <3 x double> %precalc324, <3 x double>* %87
  %weight325 = load double* %weight
  store double %weight325, double* %88
  %return327 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 1)
  store double %return327, double* %89
  %return329 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 0)
  store double %return329, double* %90
  %return331 = call double @"getcomp@FVI"(<3 x double> %blob.0, i64 2)
  store double %return331, double* %91
  call void @"VAR_BLOB@VVVFFFF"(<3 x double>* %outp, <3 x double>* %86, <3 x double>* %87, double* %88, double* %89, double* %90, double* %91)
  %outp332 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true335:                                          ; preds = %false311
  %ftype338 = load i8** %ftype
  %return339 = call i64 @"eq@ISS"(i8* %ftype338, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %353 = icmp ne i64 %return339, 0
  br i1 %353, label %true340, label %false341

false336:                                         ; preds = %false311
  %return356 = call i64 @"eq@III"(i64 %type10, i64 32)
  %354 = icmp ne i64 %return356, 0
  br i1 %354, label %true357, label %false358

true340:                                          ; preds = %true335
  %GMP343 = load %genomeParametrics* %GMP
  %julian344 = extractvalue %genomeParametrics %GMP343, 32
  %idx345 = load i64* %idx
  %return346 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %julian344, i64 %idx345)
  br label %end342

false341:                                         ; preds = %true335
  %return347 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8]* @129, i64 0, i64 0))
  br label %end342

end342:                                           ; preds = %false341, %true340
  %julian.0 = phi <2 x double> [ %return346, %true340 ], [ %return347, %false341 ]
  %_inp348 = load <3 x double>* %_inp
  store <3 x double> %_inp348, <3 x double>* %92
  %weight349 = load double* %weight
  store double %weight349, double* %93
  %return351 = call double @"getcomp@FUI"(<2 x double> %julian.0, i64 0)
  store double %return351, double* %94
  %return353 = call double @"getcomp@FUI"(<2 x double> %julian.0, i64 1)
  store double %return353, double* %95
  call void @"VAR_JULIAN@VVFFF"(<3 x double>* %outp, <3 x double>* %92, double* %93, double* %94, double* %95)
  %outp354 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true357:                                          ; preds = %false336
  %ftype360 = load i8** %ftype
  %return361 = call i64 @"eq@ISS"(i8* %ftype360, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %355 = icmp ne i64 %return361, 0
  br i1 %355, label %true362, label %false363

false358:                                         ; preds = %false336
  %return378 = call i64 @"eq@III"(i64 %type10, i64 33)
  %356 = icmp ne i64 %return378, 0
  br i1 %356, label %true379, label %false380

true362:                                          ; preds = %true357
  %GMP365 = load %genomeParametrics* %GMP
  %juliascope366 = extractvalue %genomeParametrics %GMP365, 33
  %idx367 = load i64* %idx
  %return368 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %juliascope366, i64 %idx367)
  br label %end364

false363:                                         ; preds = %true357
  %return369 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @130, i64 0, i64 0))
  br label %end364

end364:                                           ; preds = %false363, %true362
  %juliascope.0 = phi <2 x double> [ %return368, %true362 ], [ %return369, %false363 ]
  %_inp370 = load <3 x double>* %_inp
  store <3 x double> %_inp370, <3 x double>* %96
  %weight371 = load double* %weight
  store double %weight371, double* %97
  %return373 = call double @"getcomp@FUI"(<2 x double> %juliascope.0, i64 0)
  store double %return373, double* %98
  %return375 = call double @"getcomp@FUI"(<2 x double> %juliascope.0, i64 1)
  store double %return375, double* %99
  call void @"VAR_JULIASCOPE@VVFFF"(<3 x double>* %outp, <3 x double>* %96, double* %97, double* %98, double* %99)
  %outp376 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true379:                                          ; preds = %false358
  %weight382 = load double* %weight
  store double %weight382, double* %100
  call void @"VAR_GAUSSIAN@VF"(<3 x double>* %outp, double* %100)
  %outp383 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false380:                                         ; preds = %false358
  %return385 = call i64 @"eq@III"(i64 %type10, i64 34)
  %357 = icmp ne i64 %return385, 0
  br i1 %357, label %true386, label %end17

true386:                                          ; preds = %false380
  %ftype388 = load i8** %ftype
  %return389 = call i64 @"eq@ISS"(i8* %ftype388, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %358 = icmp ne i64 %return389, 0
  br i1 %358, label %true390, label %false391

true390:                                          ; preds = %true386
  %GMP393 = load %genomeParametrics* %GMP
  %fan2394 = extractvalue %genomeParametrics %GMP393, 15
  %idx395 = load i64* %idx
  %return396 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %fan2394, i64 %idx395)
  br label %end392

false391:                                         ; preds = %true386
  %return397 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([11 x i8]* @131, i64 0, i64 0))
  br label %end392

end392:                                           ; preds = %false391, %true390
  %fan2.0 = phi <2 x double> [ %return396, %true390 ], [ %return397, %false391 ]
  %_inp398 = load <3 x double>* %_inp
  store <3 x double> %_inp398, <3 x double>* %101
  %weight399 = load double* %weight
  store double %weight399, double* %102
  store <2 x double> %fan2.0, <2 x double>* %103
  call void @"VAR_FAN2@VVFU"(<3 x double>* %outp, <3 x double>* %101, double* %102, <2 x double>* %103)
  %outp401 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true404:                                          ; preds = %false
  %return408 = call i64 @"lt@III"(i64 %type10, i64 50)
  %359 = icmp ne i64 %return408, 0
  br i1 %359, label %true409, label %false410

false405:                                         ; preds = %false
  %return929 = call i64 @"lt@III"(i64 %type10, i64 102)
  %360 = icmp ne i64 %return929, 0
  br i1 %360, label %true930, label %end17

true409:                                          ; preds = %true404
  %return413 = call i64 @"eq@III"(i64 %type10, i64 35)
  %361 = icmp ne i64 %return413, 0
  br i1 %361, label %true414, label %false415

false410:                                         ; preds = %true404
  %return629 = call i64 @"eq@III"(i64 %type10, i64 50)
  %362 = icmp ne i64 %return629, 0
  br i1 %362, label %true630, label %false631

true414:                                          ; preds = %true409
  %ftype417 = load i8** %ftype
  %return418 = call i64 @"eq@ISS"(i8* %ftype417, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %363 = icmp ne i64 %return418, 0
  br i1 %363, label %true419, label %false420

false415:                                         ; preds = %true409
  %return432 = call i64 @"eq@III"(i64 %type10, i64 36)
  %364 = icmp ne i64 %return432, 0
  br i1 %364, label %true433, label %false434

true419:                                          ; preds = %true414
  %GMP422 = load %genomeParametrics* %GMP
  %rings2_val = extractvalue %genomeParametrics %GMP422, 0
  %idx423 = load i64* %idx
  %return424 = call double @"getcomp@F[FI"(double* %rings2_val, i64 %idx423)
  br label %end421

false420:                                         ; preds = %true414
  %return425 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8]* @132, i64 0, i64 0))
  br label %end421

end421:                                           ; preds = %false420, %true419
  %rings2val.0 = phi double [ %return424, %true419 ], [ %return425, %false420 ]
  %_inp426 = load <3 x double>* %_inp
  store <3 x double> %_inp426, <3 x double>* %104
  %precalc427 = load <3 x double>* %precalc
  store <3 x double> %precalc427, <3 x double>* %105
  %weight428 = load double* %weight
  store double %weight428, double* %106
  store double %rings2val.0, double* %107
  call void @"VAR_RINGS2@VVVFF"(<3 x double>* %outp, <3 x double>* %104, <3 x double>* %105, double* %106, double* %107)
  %outp430 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true433:                                          ; preds = %false415
  %ftype436 = load i8** %ftype
  %return437 = call i64 @"eq@ISS"(i8* %ftype436, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %365 = icmp ne i64 %return437, 0
  br i1 %365, label %true438, label %false439

false434:                                         ; preds = %false415
  %return450 = call i64 @"eq@III"(i64 %type10, i64 37)
  %366 = icmp ne i64 %return450, 0
  br i1 %366, label %true451, label %false452

true438:                                          ; preds = %true433
  %GMP441 = load %genomeParametrics* %GMP
  %rectangles = extractvalue %genomeParametrics %GMP441, 16
  %idx442 = load i64* %idx
  %return443 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %rectangles, i64 %idx442)
  br label %end440

false439:                                         ; preds = %true433
  %return444 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @133, i64 0, i64 0))
  br label %end440

end440:                                           ; preds = %false439, %true438
  %rect.0 = phi <2 x double> [ %return443, %true438 ], [ %return444, %false439 ]
  %_inp445 = load <3 x double>* %_inp
  store <3 x double> %_inp445, <3 x double>* %108
  %weight446 = load double* %weight
  store double %weight446, double* %109
  store <2 x double> %rect.0, <2 x double>* %110
  call void @"VAR_RECTANGLES@VVFU"(<3 x double>* %outp, <3 x double>* %108, double* %109, <2 x double>* %110)
  %outp448 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true451:                                          ; preds = %false434
  %ftype454 = load i8** %ftype
  %return455 = call i64 @"eq@ISS"(i8* %ftype454, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %367 = icmp ne i64 %return455, 0
  br i1 %367, label %true456, label %false457

false452:                                         ; preds = %false434
  %return472 = call i64 @"eq@III"(i64 %type10, i64 38)
  %368 = icmp ne i64 %return472, 0
  br i1 %368, label %true473, label %false474

true456:                                          ; preds = %true451
  %GMP459 = load %genomeParametrics* %GMP
  %radialblur460 = extractvalue %genomeParametrics %GMP459, 34
  %idx461 = load i64* %idx
  %return462 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %radialblur460, i64 %idx461)
  br label %end458

false457:                                         ; preds = %true451
  %return463 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @134, i64 0, i64 0))
  br label %end458

end458:                                           ; preds = %false457, %true456
  %radialblur.0 = phi <2 x double> [ %return462, %true456 ], [ %return463, %false457 ]
  %_inp464 = load <3 x double>* %_inp
  store <3 x double> %_inp464, <3 x double>* %111
  %weight465 = load double* %weight
  store double %weight465, double* %112
  %return467 = call double @"getcomp@FUI"(<2 x double> %radialblur.0, i64 0)
  store double %return467, double* %113
  %return469 = call double @"getcomp@FUI"(<2 x double> %radialblur.0, i64 1)
  store double %return469, double* %114
  call void @"VAR_RADIALBLUR@VVFFF"(<3 x double>* %outp, <3 x double>* %111, double* %112, double* %113, double* %114)
  %outp470 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true473:                                          ; preds = %false452
  %ftype476 = load i8** %ftype
  %return477 = call i64 @"eq@ISS"(i8* %ftype476, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %369 = icmp ne i64 %return477, 0
  br i1 %369, label %true478, label %false479

false474:                                         ; preds = %false452
  %return495 = call i64 @"eq@III"(i64 %type10, i64 39)
  %370 = icmp ne i64 %return495, 0
  br i1 %370, label %true496, label %false497

true478:                                          ; preds = %true473
  %GMP481 = load %genomeParametrics* %GMP
  %pie482 = extractvalue %genomeParametrics %GMP481, 7
  %idx483 = load i64* %idx
  %return484 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %pie482, i64 %idx483)
  br label %end480

false479:                                         ; preds = %true473
  %return485 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([10 x i8]* @135, i64 0, i64 0))
  br label %end480

end480:                                           ; preds = %false479, %true478
  %pie.0 = phi <3 x double> [ %return484, %true478 ], [ %return485, %false479 ]
  %weight486 = load double* %weight
  store double %weight486, double* %115
  %return488 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 0)
  store double %return488, double* %116
  %return490 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 1)
  store double %return490, double* %117
  %return492 = call double @"getcomp@FVI"(<3 x double> %pie.0, i64 2)
  store double %return492, double* %118
  call void @"VAR_PIE@VFFFF"(<3 x double>* %outp, double* %115, double* %116, double* %117, double* %118)
  %outp493 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true496:                                          ; preds = %false474
  %_inp499 = load <3 x double>* %_inp
  store <3 x double> %_inp499, <3 x double>* %119
  %weight500 = load double* %weight
  store double %weight500, double* %120
  call void @"VAR_ARCH@VVF"(<3 x double>* %outp, <3 x double>* %119, double* %120)
  %outp501 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false497:                                         ; preds = %false474
  %return503 = call i64 @"eq@III"(i64 %type10, i64 40)
  %371 = icmp ne i64 %return503, 0
  br i1 %371, label %true504, label %false505

true504:                                          ; preds = %false497
  %_inp507 = load <3 x double>* %_inp
  store <3 x double> %_inp507, <3 x double>* %121
  %weight508 = load double* %weight
  store double %weight508, double* %122
  call void @"VAR_TANGENT@VVF"(<3 x double>* %outp, <3 x double>* %121, double* %122)
  %outp509 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false505:                                         ; preds = %false497
  %return511 = call i64 @"eq@III"(i64 %type10, i64 41)
  %372 = icmp ne i64 %return511, 0
  br i1 %372, label %true512, label %false513

true512:                                          ; preds = %false505
  %weight515 = load double* %weight
  store double %weight515, double* %124
  call void @"VAR_SQUARE@VVF"(<3 x double>* %outp, <3 x double>* %123, double* %124)
  %outp516 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false513:                                         ; preds = %false505
  %return518 = call i64 @"eq@III"(i64 %type10, i64 42)
  %373 = icmp ne i64 %return518, 0
  br i1 %373, label %true519, label %false520

true519:                                          ; preds = %false513
  %_inp522 = load <3 x double>* %_inp
  store <3 x double> %_inp522, <3 x double>* %125
  %weight523 = load double* %weight
  store double %weight523, double* %126
  call void @"VAR_RAYS@VVF"(<3 x double>* %outp, <3 x double>* %125, double* %126)
  %outp524 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false520:                                         ; preds = %false513
  %return526 = call i64 @"eq@III"(i64 %type10, i64 43)
  %374 = icmp ne i64 %return526, 0
  br i1 %374, label %true527, label %false528

true527:                                          ; preds = %false520
  %_inp530 = load <3 x double>* %_inp
  store <3 x double> %_inp530, <3 x double>* %127
  %weight531 = load double* %weight
  store double %weight531, double* %128
  call void @"VAR_BLADE@VVF"(<3 x double>* %outp, <3 x double>* %127, double* %128)
  %outp532 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false528:                                         ; preds = %false520
  %return534 = call i64 @"eq@III"(i64 %type10, i64 44)
  %375 = icmp ne i64 %return534, 0
  br i1 %375, label %true535, label %false536

true535:                                          ; preds = %false528
  %_inp538 = load <3 x double>* %_inp
  store <3 x double> %_inp538, <3 x double>* %129
  %weight539 = load double* %weight
  store double %weight539, double* %130
  call void @"VAR_SECANT2@VVF"(<3 x double>* %outp, <3 x double>* %129, double* %130)
  %outp540 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false536:                                         ; preds = %false528
  %return542 = call i64 @"eq@III"(i64 %type10, i64 45)
  %376 = icmp ne i64 %return542, 0
  br i1 %376, label %true543, label %false544

true543:                                          ; preds = %false536
  %_inp546 = load <3 x double>* %_inp
  store <3 x double> %_inp546, <3 x double>* %131
  %weight547 = load double* %weight
  store double %weight547, double* %132
  call void @"VAR_TWINTRIAN@VVF"(<3 x double>* %outp, <3 x double>* %131, double* %132)
  %outp548 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false544:                                         ; preds = %false536
  %return550 = call i64 @"eq@III"(i64 %type10, i64 46)
  %377 = icmp ne i64 %return550, 0
  br i1 %377, label %true551, label %false552

true551:                                          ; preds = %false544
  %_inp554 = load <3 x double>* %_inp
  store <3 x double> %_inp554, <3 x double>* %133
  %weight555 = load double* %weight
  store double %weight555, double* %134
  call void @"VAR_CROSS@VVF"(<3 x double>* %outp, <3 x double>* %133, double* %134)
  %outp556 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false552:                                         ; preds = %false544
  %return558 = call i64 @"eq@III"(i64 %type10, i64 47)
  %378 = icmp ne i64 %return558, 0
  br i1 %378, label %true559, label %false560

true559:                                          ; preds = %false552
  %ftype562 = load i8** %ftype
  %return563 = call i64 @"eq@ISS"(i8* %ftype562, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %379 = icmp ne i64 %return563, 0
  br i1 %379, label %true564, label %false565

false560:                                         ; preds = %false552
  %return580 = call i64 @"eq@III"(i64 %type10, i64 48)
  %380 = icmp ne i64 %return580, 0
  br i1 %380, label %true581, label %false582

true564:                                          ; preds = %true559
  %GMP567 = load %genomeParametrics* %GMP
  %disc2568 = extractvalue %genomeParametrics %GMP567, 35
  %idx569 = load i64* %idx
  %return570 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %disc2568, i64 %idx569)
  br label %end566

false565:                                         ; preds = %true559
  %return571 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @136, i64 0, i64 0))
  br label %end566

end566:                                           ; preds = %false565, %true564
  %disc2.0 = phi <2 x double> [ %return570, %true564 ], [ %return571, %false565 ]
  %_inp572 = load <3 x double>* %_inp
  store <3 x double> %_inp572, <3 x double>* %135
  %weight573 = load double* %weight
  store double %weight573, double* %136
  %return575 = call double @"getcomp@FUI"(<2 x double> %disc2.0, i64 0)
  store double %return575, double* %137
  %return577 = call double @"getcomp@FUI"(<2 x double> %disc2.0, i64 1)
  store double %return577, double* %138
  call void @"VAR_DISC2@VVFFF"(<3 x double>* %outp, <3 x double>* %135, double* %136, double* %137, double* %138)
  %outp578 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true581:                                          ; preds = %false560
  %ftype584 = load i8** %ftype
  %return585 = call i64 @"eq@ISS"(i8* %ftype584, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %381 = icmp ne i64 %return585, 0
  br i1 %381, label %true586, label %false587

false582:                                         ; preds = %false560
  %return608 = call i64 @"eq@III"(i64 %type10, i64 49)
  %382 = icmp ne i64 %return608, 0
  br i1 %382, label %true609, label %end17

true586:                                          ; preds = %true581
  %GMP589 = load %genomeParametrics* %GMP
  %supershape = extractvalue %genomeParametrics %GMP589, 8
  %idx590 = load i64* %idx
  %return591 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %supershape, i64 %idx590)
  %supershape_n = extractvalue %genomeParametrics %GMP589, 9
  %return594 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %supershape_n, i64 %idx590)
  br label %end588

false587:                                         ; preds = %true581
  %return595 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([17 x i8]* @137, i64 0, i64 0))
  %return596 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([18 x i8]* @138, i64 0, i64 0))
  br label %end588

end588:                                           ; preds = %false587, %true586
  %ss_n.0 = phi <3 x double> [ %return594, %true586 ], [ %return596, %false587 ]
  %ss.0 = phi <3 x double> [ %return591, %true586 ], [ %return595, %false587 ]
  %_inp597 = load <3 x double>* %_inp
  store <3 x double> %_inp597, <3 x double>* %139
  %weight598 = load double* %weight
  store double %weight598, double* %140
  %return600 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 1)
  store double %return600, double* %141
  %return602 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 0)
  store double %return602, double* %142
  %return604 = call double @"getcomp@FVI"(<3 x double> %ss.0, i64 2)
  store double %return604, double* %143
  store <3 x double> %ss_n.0, <3 x double>* %144
  call void @"VAR_SUPERSHAPE@VVFFFFV"(<3 x double>* %outp, <3 x double>* %139, double* %140, double* %141, double* %142, double* %143, <3 x double>* %144)
  %outp606 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true609:                                          ; preds = %false582
  %ftype611 = load i8** %ftype
  %return612 = call i64 @"eq@ISS"(i8* %ftype611, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %383 = icmp ne i64 %return612, 0
  br i1 %383, label %true613, label %false614

true613:                                          ; preds = %true609
  %GMP616 = load %genomeParametrics* %GMP
  %flower617 = extractvalue %genomeParametrics %GMP616, 36
  %idx618 = load i64* %idx
  %return619 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %flower617, i64 %idx618)
  br label %end615

false614:                                         ; preds = %true609
  %return620 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([13 x i8]* @139, i64 0, i64 0))
  br label %end615

end615:                                           ; preds = %false614, %true613
  %flower.0 = phi <2 x double> [ %return619, %true613 ], [ %return620, %false614 ]
  %_inp621 = load <3 x double>* %_inp
  store <3 x double> %_inp621, <3 x double>* %145
  %weight622 = load double* %weight
  store double %weight622, double* %146
  %return624 = call double @"getcomp@FUI"(<2 x double> %flower.0, i64 0)
  store double %return624, double* %147
  %return626 = call double @"getcomp@FUI"(<2 x double> %flower.0, i64 1)
  store double %return626, double* %148
  call void @"VAR_FLOWER@VVFFF"(<3 x double>* %outp, <3 x double>* %145, double* %146, double* %147, double* %148)
  %outp627 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true630:                                          ; preds = %false410
  %ftype633 = load i8** %ftype
  %return634 = call i64 @"eq@ISS"(i8* %ftype633, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %384 = icmp ne i64 %return634, 0
  br i1 %384, label %true635, label %false636

false631:                                         ; preds = %false410
  %return651 = call i64 @"eq@III"(i64 %type10, i64 51)
  %385 = icmp ne i64 %return651, 0
  br i1 %385, label %true652, label %false653

true635:                                          ; preds = %true630
  %GMP638 = load %genomeParametrics* %GMP
  %conic639 = extractvalue %genomeParametrics %GMP638, 37
  %idx640 = load i64* %idx
  %return641 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %conic639, i64 %idx640)
  br label %end637

false636:                                         ; preds = %true630
  %return642 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @140, i64 0, i64 0))
  br label %end637

end637:                                           ; preds = %false636, %true635
  %conic.0 = phi <2 x double> [ %return641, %true635 ], [ %return642, %false636 ]
  %_inp643 = load <3 x double>* %_inp
  store <3 x double> %_inp643, <3 x double>* %149
  %weight644 = load double* %weight
  store double %weight644, double* %150
  %return646 = call double @"getcomp@FUI"(<2 x double> %conic.0, i64 0)
  store double %return646, double* %151
  %return648 = call double @"getcomp@FUI"(<2 x double> %conic.0, i64 1)
  store double %return648, double* %152
  call void @"VAR_CONIC@VVFFF"(<3 x double>* %outp, <3 x double>* %149, double* %150, double* %151, double* %152)
  %outp649 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true652:                                          ; preds = %false631
  %ftype655 = load i8** %ftype
  %return656 = call i64 @"eq@ISS"(i8* %ftype655, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %386 = icmp ne i64 %return656, 0
  br i1 %386, label %true657, label %false658

false653:                                         ; preds = %false631
  %return673 = call i64 @"eq@III"(i64 %type10, i64 52)
  %387 = icmp ne i64 %return673, 0
  br i1 %387, label %true674, label %false675

true657:                                          ; preds = %true652
  %GMP660 = load %genomeParametrics* %GMP
  %parabola661 = extractvalue %genomeParametrics %GMP660, 14
  %idx662 = load i64* %idx
  %return663 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %parabola661, i64 %idx662)
  br label %end659

false658:                                         ; preds = %true652
  %return664 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([15 x i8]* @141, i64 0, i64 0))
  br label %end659

end659:                                           ; preds = %false658, %true657
  %parabola.0 = phi <2 x double> [ %return663, %true657 ], [ %return664, %false658 ]
  %_inp665 = load <3 x double>* %_inp
  store <3 x double> %_inp665, <3 x double>* %153
  %weight666 = load double* %weight
  store double %weight666, double* %154
  %return668 = call double @"getcomp@FUI"(<2 x double> %parabola.0, i64 0)
  store double %return668, double* %155
  %return670 = call double @"getcomp@FUI"(<2 x double> %parabola.0, i64 1)
  store double %return670, double* %156
  call void @"VAR_PARABOLA@VVFFF"(<3 x double>* %outp, <3 x double>* %153, double* %154, double* %155, double* %156)
  %outp671 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true674:                                          ; preds = %false653
  %ftype677 = load i8** %ftype
  %return678 = call i64 @"eq@ISS"(i8* %ftype677, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %388 = icmp ne i64 %return678, 0
  br i1 %388, label %true679, label %false680

false675:                                         ; preds = %false653
  %return692 = call i64 @"eq@III"(i64 %type10, i64 53)
  %389 = icmp ne i64 %return692, 0
  br i1 %389, label %true693, label %false694

true679:                                          ; preds = %true674
  %GMP682 = load %genomeParametrics* %GMP
  %bent2683 = extractvalue %genomeParametrics %GMP682, 17
  %idx684 = load i64* %idx
  %return685 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %bent2683, i64 %idx684)
  br label %end681

false680:                                         ; preds = %true674
  %return686 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([14 x i8]* @142, i64 0, i64 0))
  br label %end681

end681:                                           ; preds = %false680, %true679
  %bent2.0 = phi <2 x double> [ %return685, %true679 ], [ %return686, %false680 ]
  %_inp687 = load <3 x double>* %_inp
  store <3 x double> %_inp687, <3 x double>* %157
  %weight688 = load double* %weight
  store double %weight688, double* %158
  store <2 x double> %bent2.0, <2 x double>* %159
  call void @"VAR_BENT2@VVFU"(<3 x double>* %outp, <3 x double>* %157, double* %158, <2 x double>* %159)
  %outp690 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true693:                                          ; preds = %false675
  %ftype696 = load i8** %ftype
  %return697 = call i64 @"eq@ISS"(i8* %ftype696, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %390 = icmp ne i64 %return697, 0
  br i1 %390, label %true698, label %false699

false694:                                         ; preds = %false675
  %return710 = call i64 @"eq@III"(i64 %type10, i64 54)
  %391 = icmp ne i64 %return710, 0
  br i1 %391, label %true711, label %false712

true698:                                          ; preds = %true693
  %GMP701 = load %genomeParametrics* %GMP
  %bipolar_shift = extractvalue %genomeParametrics %GMP701, 1
  %idx702 = load i64* %idx
  %return703 = call double @"getcomp@F[FI"(double* %bipolar_shift, i64 %idx702)
  br label %end700

false699:                                         ; preds = %true693
  %return704 = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8]* @143, i64 0, i64 0))
  br label %end700

end700:                                           ; preds = %false699, %true698
  %shift.0 = phi double [ %return703, %true698 ], [ %return704, %false699 ]
  %_inp705 = load <3 x double>* %_inp
  store <3 x double> %_inp705, <3 x double>* %160
  %weight706 = load double* %weight
  store double %weight706, double* %161
  store double %shift.0, double* %162
  call void @"VAR_BIPOLAR@VVFF"(<3 x double>* %outp, <3 x double>* %160, double* %161, double* %162)
  %outp708 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true711:                                          ; preds = %false694
  %_inp714 = load <3 x double>* %_inp
  store <3 x double> %_inp714, <3 x double>* %163
  %weight715 = load double* %weight
  store double %weight715, double* %164
  call void @"VAR_BOARDERS@VVF"(<3 x double>* %outp, <3 x double>* %163, double* %164)
  %outp716 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false712:                                         ; preds = %false694
  %return718 = call i64 @"eq@III"(i64 %type10, i64 55)
  %392 = icmp ne i64 %return718, 0
  br i1 %392, label %true719, label %false720

true719:                                          ; preds = %false712
  %_inp722 = load <3 x double>* %_inp
  store <3 x double> %_inp722, <3 x double>* %165
  %weight723 = load double* %weight
  store double %weight723, double* %166
  call void @"VAR_BUTTERFLY@VVF"(<3 x double>* %outp, <3 x double>* %165, double* %166)
  %outp724 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false720:                                         ; preds = %false712
  %return726 = call i64 @"eq@III"(i64 %type10, i64 56)
  %393 = icmp ne i64 %return726, 0
  br i1 %393, label %true727, label %false728

true727:                                          ; preds = %false720
  %ftype730 = load i8** %ftype
  %return731 = call i64 @"eq@ISS"(i8* %ftype730, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %394 = icmp ne i64 %return731, 0
  br i1 %394, label %true732, label %false733

false728:                                         ; preds = %false720
  %return743 = call i64 @"eq@III"(i64 %type10, i64 57)
  %395 = icmp ne i64 %return743, 0
  br i1 %395, label %true744, label %false745

true732:                                          ; preds = %true727
  %GMP735 = load %genomeParametrics* %GMP
  %cell_size = extractvalue %genomeParametrics %GMP735, 2
  %idx736 = load i64* %idx
  %return737 = call double @"getcomp@F[FI"(double* %cell_size, i64 %idx736)
  br label %end734

false733:                                         ; preds = %true727
  %return738 = call double @"chf@FS"(i8* getelementptr inbounds ([15 x i8]* @144, i64 0, i64 0))
  br label %end734

end734:                                           ; preds = %false733, %true732
  %size.0 = phi double [ %return737, %true732 ], [ %return738, %false733 ]
  %_inp739 = load <3 x double>* %_inp
  store <3 x double> %_inp739, <3 x double>* %167
  store double %size.0, double* %169
  call void @"VAR_CELL@VVFF"(<3 x double>* %outp, <3 x double>* %167, double* %168, double* %169)
  %outp741 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true744:                                          ; preds = %false728
  %ftype747 = load i8** %ftype
  %return748 = call i64 @"eq@ISS"(i8* %ftype747, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %396 = icmp ne i64 %return748, 0
  br i1 %396, label %true749, label %false750

false745:                                         ; preds = %false728
  %return767 = call i64 @"eq@III"(i64 %type10, i64 58)
  %397 = icmp ne i64 %return767, 0
  br i1 %397, label %true768, label %false769

true749:                                          ; preds = %true744
  %GMP752 = load %genomeParametrics* %GMP
  %cpow753 = extractvalue %genomeParametrics %GMP752, 10
  %idx754 = load i64* %idx
  %return755 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %cpow753, i64 %idx754)
  br label %end751

false750:                                         ; preds = %true744
  %return756 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([11 x i8]* @145, i64 0, i64 0))
  br label %end751

end751:                                           ; preds = %false750, %true749
  %cpow.0 = phi <3 x double> [ %return755, %true749 ], [ %return756, %false750 ]
  %_inp757 = load <3 x double>* %_inp
  store <3 x double> %_inp757, <3 x double>* %170
  %weight758 = load double* %weight
  store double %weight758, double* %171
  %return760 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 0)
  store double %return760, double* %172
  %return762 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 1)
  store double %return762, double* %173
  %return764 = call double @"getcomp@FVI"(<3 x double> %cpow.0, i64 2)
  store double %return764, double* %174
  call void @"VAR_CPOW@VVFFFF"(<3 x double>* %outp, <3 x double>* %170, double* %171, double* %172, double* %173, double* %174)
  %outp765 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true768:                                          ; preds = %false745
  %_inp771 = load <3 x double>* %_inp
  store <3 x double> %_inp771, <3 x double>* %175
  %weight772 = load double* %weight
  store double %weight772, double* %176
  call void @"VAR_EDISC@VVF"(<3 x double>* %outp, <3 x double>* %175, double* %176)
  %outp773 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false769:                                         ; preds = %false745
  %return775 = call i64 @"eq@III"(i64 %type10, i64 59)
  %398 = icmp ne i64 %return775, 0
  br i1 %398, label %true776, label %false777

true776:                                          ; preds = %false769
  %_inp779 = load <3 x double>* %_inp
  store <3 x double> %_inp779, <3 x double>* %177
  %weight780 = load double* %weight
  store double %weight780, double* %178
  call void @"VAR_ELLIPTIC@VVF"(<3 x double>* %outp, <3 x double>* %177, double* %178)
  %outp781 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false777:                                         ; preds = %false769
  %return783 = call i64 @"eq@III"(i64 %type10, i64 60)
  %399 = icmp ne i64 %return783, 0
  br i1 %399, label %true784, label %false785

true784:                                          ; preds = %false777
  %_inp787 = load <3 x double>* %_inp
  store <3 x double> %_inp787, <3 x double>* %179
  %weight788 = load double* %weight
  store double %weight788, double* %180
  call void @"VAR_NOISE@VVF"(<3 x double>* %outp, <3 x double>* %179, double* %180)
  %outp789 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false785:                                         ; preds = %false777
  %return791 = call i64 @"eq@III"(i64 %type10, i64 61)
  %400 = icmp ne i64 %return791, 0
  br i1 %400, label %true792, label %false793

true792:                                          ; preds = %false785
  %ftype795 = load i8** %ftype
  %return796 = call i64 @"eq@ISS"(i8* %ftype795, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %401 = icmp ne i64 %return796, 0
  br i1 %401, label %true797, label %false798

false793:                                         ; preds = %false785
  %return809 = call i64 @"eq@III"(i64 %type10, i64 62)
  %402 = icmp ne i64 %return809, 0
  br i1 %402, label %true810, label %false811

true797:                                          ; preds = %true792
  %GMP800 = load %genomeParametrics* %GMP
  %escher_beta = extractvalue %genomeParametrics %GMP800, 3
  %idx801 = load i64* %idx
  %return802 = call double @"getcomp@F[FI"(double* %escher_beta, i64 %idx801)
  br label %end799

false798:                                         ; preds = %true792
  %return803 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8]* @146, i64 0, i64 0))
  br label %end799

end799:                                           ; preds = %false798, %true797
  %beta.0 = phi double [ %return802, %true797 ], [ %return803, %false798 ]
  %_inp804 = load <3 x double>* %_inp
  store <3 x double> %_inp804, <3 x double>* %181
  %weight805 = load double* %weight
  store double %weight805, double* %182
  store double %beta.0, double* %183
  call void @"VAR_ESCHER@VVFF"(<3 x double>* %outp, <3 x double>* %181, double* %182, double* %183)
  %outp807 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true810:                                          ; preds = %false793
  %_inp813 = load <3 x double>* %_inp
  store <3 x double> %_inp813, <3 x double>* %184
  %weight814 = load double* %weight
  store double %weight814, double* %185
  call void @"VAR_FOCI@VVF"(<3 x double>* %outp, <3 x double>* %184, double* %185)
  %outp815 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false811:                                         ; preds = %false793
  %return817 = call i64 @"eq@III"(i64 %type10, i64 63)
  %403 = icmp ne i64 %return817, 0
  br i1 %403, label %true818, label %false819

true818:                                          ; preds = %false811
  %ftype821 = load i8** %ftype
  %return822 = call i64 @"eq@ISS"(i8* %ftype821, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %404 = icmp ne i64 %return822, 0
  br i1 %404, label %true823, label %false824

false819:                                         ; preds = %false811
  %return847 = call i64 @"eq@III"(i64 %type10, i64 64)
  %405 = icmp ne i64 %return847, 0
  br i1 %405, label %true848, label %false849

true823:                                          ; preds = %true818
  %GMP826 = load %genomeParametrics* %GMP
  %lazysusanxyz827 = extractvalue %genomeParametrics %GMP826, 18
  %idx828 = load i64* %idx
  %return829 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %lazysusanxyz827, i64 %idx828)
  %lazysusan831 = extractvalue %genomeParametrics %GMP826, 11
  %return833 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %lazysusan831, i64 %idx828)
  br label %end825

false824:                                         ; preds = %true818
  %return834 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8]* @147, i64 0, i64 0))
  %return835 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([16 x i8]* @148, i64 0, i64 0))
  br label %end825

end825:                                           ; preds = %false824, %true823
  %lazysusanxyz.0 = phi <2 x double> [ %return829, %true823 ], [ %return834, %false824 ]
  %lazysusan.0 = phi <3 x double> [ %return833, %true823 ], [ %return835, %false824 ]
  %_inp836 = load <3 x double>* %_inp
  store <3 x double> %_inp836, <3 x double>* %186
  %weight837 = load double* %weight
  store double %weight837, double* %187
  %return839 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 0)
  store double %return839, double* %188
  %return841 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 1)
  store double %return841, double* %189
  %return843 = call double @"getcomp@FVI"(<3 x double> %lazysusan.0, i64 2)
  store double %return843, double* %190
  store <2 x double> %lazysusanxyz.0, <2 x double>* %191
  call void @"VAR_LAZYSUSAN@VVFFFFU"(<3 x double>* %outp, <3 x double>* %186, double* %187, double* %188, double* %189, double* %190, <2 x double>* %191)
  %outp845 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true848:                                          ; preds = %false819
  %_inp851 = load <3 x double>* %_inp
  store <3 x double> %_inp851, <3 x double>* %192
  %weight852 = load double* %weight
  store double %weight852, double* %193
  call void @"VAR_LOONIE@VVF"(<3 x double>* %outp, <3 x double>* %192, double* %193)
  %outp853 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false849:                                         ; preds = %false819
  %return855 = call i64 @"eq@III"(i64 %type10, i64 66)
  %406 = icmp ne i64 %return855, 0
  br i1 %406, label %true856, label %false857

true856:                                          ; preds = %false849
  %ftype859 = load i8** %ftype
  %return860 = call i64 @"eq@ISS"(i8* %ftype859, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %407 = icmp ne i64 %return860, 0
  br i1 %407, label %true861, label %false862

false857:                                         ; preds = %false849
  %return873 = call i64 @"eq@III"(i64 %type10, i64 67)
  %408 = icmp ne i64 %return873, 0
  br i1 %408, label %true874, label %false875

true861:                                          ; preds = %true856
  %GMP864 = load %genomeParametrics* %GMP
  %modulus = extractvalue %genomeParametrics %GMP864, 19
  %idx865 = load i64* %idx
  %return866 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %modulus, i64 %idx865)
  br label %end863

false862:                                         ; preds = %true856
  %return867 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([17 x i8]* @149, i64 0, i64 0))
  br label %end863

end863:                                           ; preds = %false862, %true861
  %mod.0 = phi <2 x double> [ %return866, %true861 ], [ %return867, %false862 ]
  %_inp868 = load <3 x double>* %_inp
  store <3 x double> %_inp868, <3 x double>* %194
  %weight869 = load double* %weight
  store double %weight869, double* %195
  store <2 x double> %mod.0, <2 x double>* %196
  call void @"VAR_MODULUS@VVFU"(<3 x double>* %outp, <3 x double>* %194, double* %195, <2 x double>* %196)
  %outp871 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true874:                                          ; preds = %false857
  %ftype877 = load i8** %ftype
  %return878 = call i64 @"eq@ISS"(i8* %ftype877, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %409 = icmp ne i64 %return878, 0
  br i1 %409, label %true879, label %false880

false875:                                         ; preds = %false857
  %return899 = call i64 @"eq@III"(i64 %type10, i64 68)
  %410 = icmp ne i64 %return899, 0
  br i1 %410, label %true900, label %false901

true879:                                          ; preds = %true874
  %GMP882 = load %genomeParametrics* %GMP
  %oscope883 = extractvalue %genomeParametrics %GMP882, 44
  %idx884 = load i64* %idx
  %return885 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %oscope883, i64 %idx884)
  br label %end881

false880:                                         ; preds = %true874
  %return886 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([13 x i8]* @150, i64 0, i64 0))
  br label %end881

end881:                                           ; preds = %false880, %true879
  %oscope.0 = phi <4 x double> [ %return885, %true879 ], [ %return886, %false880 ]
  %_inp887 = load <3 x double>* %_inp
  store <3 x double> %_inp887, <3 x double>* %197
  %weight888 = load double* %weight
  store double %weight888, double* %198
  %return890 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 0)
  store double %return890, double* %199
  %return892 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 1)
  store double %return892, double* %200
  %return894 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 2)
  store double %return894, double* %201
  %return896 = call double @"getcomp@FPI"(<4 x double> %oscope.0, i64 3)
  store double %return896, double* %202
  call void @"VAR_OSCOPE@VVFFFFF"(<3 x double>* %outp, <3 x double>* %197, double* %198, double* %199, double* %200, double* %201, double* %202)
  %outp897 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true900:                                          ; preds = %false875
  %_inp903 = load <3 x double>* %_inp
  store <3 x double> %_inp903, <3 x double>* %203
  %weight904 = load double* %weight
  store double %weight904, double* %204
  call void @"VAR_POLAR2@VVF"(<3 x double>* %outp, <3 x double>* %203, double* %204)
  %outp905 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false901:                                         ; preds = %false875
  %return907 = call i64 @"eq@III"(i64 %type10, i64 69)
  %411 = icmp ne i64 %return907, 0
  br i1 %411, label %true908, label %end17

true908:                                          ; preds = %false901
  %ftype910 = load i8** %ftype
  %return911 = call i64 @"eq@ISS"(i8* %ftype910, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %412 = icmp ne i64 %return911, 0
  br i1 %412, label %true912, label %false913

true912:                                          ; preds = %true908
  %GMP915 = load %genomeParametrics* %GMP
  %popcorn2 = extractvalue %genomeParametrics %GMP915, 20
  %idx916 = load i64* %idx
  %return917 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %popcorn2, i64 %idx916)
  %popcorn2_c = extractvalue %genomeParametrics %GMP915, 4
  %return920 = call double @"getcomp@F[FI"(double* %popcorn2_c, i64 %idx916)
  br label %end914

false913:                                         ; preds = %true908
  %return921 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8]* @151, i64 0, i64 0))
  %return922 = call double @"chf@FS"(i8* getelementptr inbounds ([16 x i8]* @152, i64 0, i64 0))
  br label %end914

end914:                                           ; preds = %false913, %true912
  %pop2.0 = phi <2 x double> [ %return917, %true912 ], [ %return921, %false913 ]
  %pop2c.0 = phi double [ %return920, %true912 ], [ %return922, %false913 ]
  %_inp923 = load <3 x double>* %_inp
  store <3 x double> %_inp923, <3 x double>* %205
  %weight924 = load double* %weight
  store double %weight924, double* %206
  store double %pop2c.0, double* %207
  store <2 x double> %pop2.0, <2 x double>* %208
  call void @"VAR_POPCORN2@VVFFU"(<3 x double>* %outp, <3 x double>* %205, double* %206, double* %207, <2 x double>* %208)
  %outp927 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true930:                                          ; preds = %false405
  %return933 = call i64 @"lt@III"(i64 %type10, i64 86)
  %413 = icmp ne i64 %return933, 0
  br i1 %413, label %true934, label %false935

true934:                                          ; preds = %true930
  %return938 = call i64 @"eq@III"(i64 %type10, i64 70)
  %414 = icmp ne i64 %return938, 0
  br i1 %414, label %true939, label %false940

false935:                                         ; preds = %true930
  %return1199 = call i64 @"eq@III"(i64 %type10, i64 86)
  %415 = icmp ne i64 %return1199, 0
  br i1 %415, label %true1200, label %false1201

true939:                                          ; preds = %true934
  %_inp942 = load <3 x double>* %_inp
  store <3 x double> %_inp942, <3 x double>* %209
  %weight943 = load double* %weight
  store double %weight943, double* %210
  call void @"VAR_SCRY@VVF"(<3 x double>* %outp, <3 x double>* %209, double* %210)
  %outp944 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false940:                                         ; preds = %true934
  %return946 = call i64 @"eq@III"(i64 %type10, i64 71)
  %416 = icmp ne i64 %return946, 0
  br i1 %416, label %true947, label %false948

true947:                                          ; preds = %false940
  %ftype950 = load i8** %ftype
  %return951 = call i64 @"eq@ISS"(i8* %ftype950, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %417 = icmp ne i64 %return951, 0
  br i1 %417, label %true952, label %false953

false948:                                         ; preds = %false940
  %return969 = call i64 @"eq@III"(i64 %type10, i64 72)
  %418 = icmp ne i64 %return969, 0
  br i1 %418, label %true970, label %false971

true952:                                          ; preds = %true947
  %GMP955 = load %genomeParametrics* %GMP
  %separation = extractvalue %genomeParametrics %GMP955, 21
  %idx956 = load i64* %idx
  %return957 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %separation, i64 %idx956)
  %separation_inside = extractvalue %genomeParametrics %GMP955, 22
  %return960 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %separation_inside, i64 %idx956)
  br label %end954

false953:                                         ; preds = %true947
  %return961 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8]* @153, i64 0, i64 0))
  %return962 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([26 x i8]* @154, i64 0, i64 0))
  br label %end954

end954:                                           ; preds = %false953, %true952
  %ins.0 = phi <2 x double> [ %return960, %true952 ], [ %return962, %false953 ]
  %sep.0 = phi <2 x double> [ %return957, %true952 ], [ %return961, %false953 ]
  %_inp963 = load <3 x double>* %_inp
  store <3 x double> %_inp963, <3 x double>* %211
  %weight964 = load double* %weight
  store double %weight964, double* %212
  store <2 x double> %sep.0, <2 x double>* %213
  store <2 x double> %ins.0, <2 x double>* %214
  call void @"VAR_SEPARATION@VVFUU"(<3 x double>* %outp, <3 x double>* %211, double* %212, <2 x double>* %213, <2 x double>* %214)
  %outp967 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true970:                                          ; preds = %false948
  %ftype973 = load i8** %ftype
  %return974 = call i64 @"eq@ISS"(i8* %ftype973, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %419 = icmp ne i64 %return974, 0
  br i1 %419, label %true975, label %false976

false971:                                         ; preds = %false948
  %return988 = call i64 @"eq@III"(i64 %type10, i64 73)
  %420 = icmp ne i64 %return988, 0
  br i1 %420, label %true989, label %false990

true975:                                          ; preds = %true970
  %GMP978 = load %genomeParametrics* %GMP
  %split979 = extractvalue %genomeParametrics %GMP978, 23
  %idx980 = load i64* %idx
  %return981 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %split979, i64 %idx980)
  br label %end977

false976:                                         ; preds = %true970
  %return982 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([15 x i8]* @155, i64 0, i64 0))
  br label %end977

end977:                                           ; preds = %false976, %true975
  %split.0 = phi <2 x double> [ %return981, %true975 ], [ %return982, %false976 ]
  %_inp983 = load <3 x double>* %_inp
  store <3 x double> %_inp983, <3 x double>* %215
  %weight984 = load double* %weight
  store double %weight984, double* %216
  store <2 x double> %split.0, <2 x double>* %217
  call void @"VAR_SPLIT@VVFU"(<3 x double>* %outp, <3 x double>* %215, double* %216, <2 x double>* %217)
  %outp986 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true989:                                          ; preds = %false971
  %ftype992 = load i8** %ftype
  %return993 = call i64 @"eq@ISS"(i8* %ftype992, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %421 = icmp ne i64 %return993, 0
  br i1 %421, label %true994, label %false995

false990:                                         ; preds = %false971
  %return1007 = call i64 @"eq@III"(i64 %type10, i64 74)
  %422 = icmp ne i64 %return1007, 0
  br i1 %422, label %true1008, label %false1009

true994:                                          ; preds = %true989
  %GMP997 = load %genomeParametrics* %GMP
  %splits998 = extractvalue %genomeParametrics %GMP997, 24
  %idx999 = load i64* %idx
  %return1000 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %splits998, i64 %idx999)
  br label %end996

false995:                                         ; preds = %true989
  %return1001 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([16 x i8]* @156, i64 0, i64 0))
  br label %end996

end996:                                           ; preds = %false995, %true994
  %splits.0 = phi <2 x double> [ %return1000, %true994 ], [ %return1001, %false995 ]
  %_inp1002 = load <3 x double>* %_inp
  store <3 x double> %_inp1002, <3 x double>* %218
  %weight1003 = load double* %weight
  store double %weight1003, double* %219
  store <2 x double> %splits.0, <2 x double>* %220
  call void @"VAR_SPLITS@VVFU"(<3 x double>* %outp, <3 x double>* %218, double* %219, <2 x double>* %220)
  %outp1005 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1008:                                         ; preds = %false990
  %ftype1011 = load i8** %ftype
  %return1012 = call i64 @"eq@ISS"(i8* %ftype1011, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %423 = icmp ne i64 %return1012, 0
  br i1 %423, label %true1013, label %false1014

false1009:                                        ; preds = %false990
  %return1029 = call i64 @"eq@III"(i64 %type10, i64 75)
  %424 = icmp ne i64 %return1029, 0
  br i1 %424, label %true1030, label %false1031

true1013:                                         ; preds = %true1008
  %GMP1016 = load %genomeParametrics* %GMP
  %stripes1017 = extractvalue %genomeParametrics %GMP1016, 38
  %idx1018 = load i64* %idx
  %return1019 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %stripes1017, i64 %idx1018)
  br label %end1015

false1014:                                        ; preds = %true1008
  %return1020 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([14 x i8]* @157, i64 0, i64 0))
  br label %end1015

end1015:                                          ; preds = %false1014, %true1013
  %stripes.0 = phi <2 x double> [ %return1019, %true1013 ], [ %return1020, %false1014 ]
  %_inp1021 = load <3 x double>* %_inp
  store <3 x double> %_inp1021, <3 x double>* %221
  %weight1022 = load double* %weight
  store double %weight1022, double* %222
  %return1024 = call double @"getcomp@FUI"(<2 x double> %stripes.0, i64 0)
  store double %return1024, double* %223
  %return1026 = call double @"getcomp@FUI"(<2 x double> %stripes.0, i64 1)
  store double %return1026, double* %224
  call void @"VAR_STRIPES@VVFFF"(<3 x double>* %outp, <3 x double>* %221, double* %222, double* %223, double* %224)
  %outp1027 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1030:                                         ; preds = %false1009
  %ftype1033 = load i8** %ftype
  %return1034 = call i64 @"eq@ISS"(i8* %ftype1033, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %425 = icmp ne i64 %return1034, 0
  br i1 %425, label %true1035, label %false1036

false1031:                                        ; preds = %false1009
  %return1055 = call i64 @"eq@III"(i64 %type10, i64 76)
  %426 = icmp ne i64 %return1055, 0
  br i1 %426, label %true1056, label %false1057

true1035:                                         ; preds = %true1030
  %GMP1038 = load %genomeParametrics* %GMP
  %wedge1039 = extractvalue %genomeParametrics %GMP1038, 45
  %idx1040 = load i64* %idx
  %return1041 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedge1039, i64 %idx1040)
  br label %end1037

false1036:                                        ; preds = %true1030
  %return1042 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([12 x i8]* @158, i64 0, i64 0))
  br label %end1037

end1037:                                          ; preds = %false1036, %true1035
  %wedge.0 = phi <4 x double> [ %return1041, %true1035 ], [ %return1042, %false1036 ]
  %_inp1043 = load <3 x double>* %_inp
  store <3 x double> %_inp1043, <3 x double>* %225
  %weight1044 = load double* %weight
  store double %weight1044, double* %226
  %return1046 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 0)
  store double %return1046, double* %227
  %return1048 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 1)
  store double %return1048, double* %228
  %return1050 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 2)
  store double %return1050, double* %229
  %return1052 = call double @"getcomp@FPI"(<4 x double> %wedge.0, i64 3)
  store double %return1052, double* %230
  call void @"VAR_WEDGE@VVFFFFF"(<3 x double>* %outp, <3 x double>* %225, double* %226, double* %227, double* %228, double* %229, double* %230)
  %outp1053 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1056:                                         ; preds = %false1031
  %ftype1059 = load i8** %ftype
  %return1060 = call i64 @"eq@ISS"(i8* %ftype1059, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %427 = icmp ne i64 %return1060, 0
  br i1 %427, label %true1061, label %false1062

false1057:                                        ; preds = %false1031
  %return1081 = call i64 @"eq@III"(i64 %type10, i64 77)
  %428 = icmp ne i64 %return1081, 0
  br i1 %428, label %true1082, label %false1083

true1061:                                         ; preds = %true1056
  %GMP1064 = load %genomeParametrics* %GMP
  %wedgejulia1065 = extractvalue %genomeParametrics %GMP1064, 46
  %idx1066 = load i64* %idx
  %return1067 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedgejulia1065, i64 %idx1066)
  br label %end1063

false1062:                                        ; preds = %true1056
  %return1068 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([17 x i8]* @159, i64 0, i64 0))
  br label %end1063

end1063:                                          ; preds = %false1062, %true1061
  %wedgejulia.0 = phi <4 x double> [ %return1067, %true1061 ], [ %return1068, %false1062 ]
  %_inp1069 = load <3 x double>* %_inp
  store <3 x double> %_inp1069, <3 x double>* %231
  %weight1070 = load double* %weight
  store double %weight1070, double* %232
  %return1072 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 0)
  store double %return1072, double* %233
  %return1074 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 1)
  store double %return1074, double* %234
  %return1076 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 2)
  store double %return1076, double* %235
  %return1078 = call double @"getcomp@FPI"(<4 x double> %wedgejulia.0, i64 3)
  store double %return1078, double* %236
  call void @"VAR_WEDGEJULIA@VVFFFFF"(<3 x double>* %outp, <3 x double>* %231, double* %232, double* %233, double* %234, double* %235, double* %236)
  %outp1079 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1082:                                         ; preds = %false1057
  %ftype1085 = load i8** %ftype
  %return1086 = call i64 @"eq@ISS"(i8* %ftype1085, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %429 = icmp ne i64 %return1086, 0
  br i1 %429, label %true1087, label %false1088

false1083:                                        ; preds = %false1057
  %return1107 = call i64 @"eq@III"(i64 %type10, i64 78)
  %430 = icmp ne i64 %return1107, 0
  br i1 %430, label %true1108, label %false1109

true1087:                                         ; preds = %true1082
  %GMP1090 = load %genomeParametrics* %GMP
  %wedgesph1091 = extractvalue %genomeParametrics %GMP1090, 47
  %idx1092 = load i64* %idx
  %return1093 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %wedgesph1091, i64 %idx1092)
  br label %end1089

false1088:                                        ; preds = %true1082
  %return1094 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8]* @160, i64 0, i64 0))
  br label %end1089

end1089:                                          ; preds = %false1088, %true1087
  %wedgesph.0 = phi <4 x double> [ %return1093, %true1087 ], [ %return1094, %false1088 ]
  %_inp1095 = load <3 x double>* %_inp
  store <3 x double> %_inp1095, <3 x double>* %237
  %weight1096 = load double* %weight
  store double %weight1096, double* %238
  %return1098 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 0)
  store double %return1098, double* %239
  %return1100 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 1)
  store double %return1100, double* %240
  %return1102 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 2)
  store double %return1102, double* %241
  %return1104 = call double @"getcomp@FPI"(<4 x double> %wedgesph.0, i64 3)
  store double %return1104, double* %242
  call void @"VAR_WEDGESPH@VVFFFFF"(<3 x double>* %outp, <3 x double>* %237, double* %238, double* %239, double* %240, double* %241, double* %242)
  %outp1105 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1108:                                         ; preds = %false1083
  %ftype1111 = load i8** %ftype
  %return1112 = call i64 @"eq@ISS"(i8* %ftype1111, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %431 = icmp ne i64 %return1112, 0
  br i1 %431, label %true1113, label %false1114

false1109:                                        ; preds = %false1083
  %return1129 = call i64 @"eq@III"(i64 %type10, i64 79)
  %432 = icmp ne i64 %return1129, 0
  br i1 %432, label %true1130, label %false1131

true1113:                                         ; preds = %true1108
  %GMP1116 = load %genomeParametrics* %GMP
  %whorl1117 = extractvalue %genomeParametrics %GMP1116, 39
  %idx1118 = load i64* %idx
  %return1119 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %whorl1117, i64 %idx1118)
  br label %end1115

false1114:                                        ; preds = %true1108
  %return1120 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @161, i64 0, i64 0))
  br label %end1115

end1115:                                          ; preds = %false1114, %true1113
  %whorl.0 = phi <2 x double> [ %return1119, %true1113 ], [ %return1120, %false1114 ]
  %_inp1121 = load <3 x double>* %_inp
  store <3 x double> %_inp1121, <3 x double>* %243
  %weight1122 = load double* %weight
  store double %weight1122, double* %244
  %return1124 = call double @"getcomp@FUI"(<2 x double> %whorl.0, i64 0)
  store double %return1124, double* %245
  %return1126 = call double @"getcomp@FUI"(<2 x double> %whorl.0, i64 1)
  store double %return1126, double* %246
  call void @"VAR_WHORL@VVFFF"(<3 x double>* %outp, <3 x double>* %243, double* %244, double* %245, double* %246)
  %outp1127 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1130:                                         ; preds = %false1109
  %ftype1133 = load i8** %ftype
  %return1134 = call i64 @"eq@ISS"(i8* %ftype1133, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %433 = icmp ne i64 %return1134, 0
  br i1 %433, label %true1135, label %false1136

false1131:                                        ; preds = %false1109
  %return1152 = call i64 @"eq@III"(i64 %type10, i64 80)
  %434 = icmp ne i64 %return1152, 0
  br i1 %434, label %true1153, label %false1154

true1135:                                         ; preds = %true1130
  %GMP1138 = load %genomeParametrics* %GMP
  %waves2_scale = extractvalue %genomeParametrics %GMP1138, 25
  %idx1139 = load i64* %idx
  %return1140 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %waves2_scale, i64 %idx1139)
  %waves2_freq = extractvalue %genomeParametrics %GMP1138, 26
  %return1143 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %waves2_freq, i64 %idx1139)
  br label %end1137

false1136:                                        ; preds = %true1130
  %return1144 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([21 x i8]* @162, i64 0, i64 0))
  %return1145 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8]* @163, i64 0, i64 0))
  br label %end1137

end1137:                                          ; preds = %false1136, %true1135
  %freq.0 = phi <2 x double> [ %return1143, %true1135 ], [ %return1145, %false1136 ]
  %scl.0 = phi <2 x double> [ %return1140, %true1135 ], [ %return1144, %false1136 ]
  %_inp1146 = load <3 x double>* %_inp
  store <3 x double> %_inp1146, <3 x double>* %247
  %weight1147 = load double* %weight
  store double %weight1147, double* %248
  store <2 x double> %scl.0, <2 x double>* %249
  store <2 x double> %freq.0, <2 x double>* %250
  call void @"VAR_WAVES2@VVFUU"(<3 x double>* %outp, <3 x double>* %247, double* %248, <2 x double>* %249, <2 x double>* %250)
  %outp1150 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1153:                                         ; preds = %false1131
  %_inp1156 = load <3 x double>* %_inp
  store <3 x double> %_inp1156, <3 x double>* %251
  %weight1157 = load double* %weight
  store double %weight1157, double* %252
  call void @"VAR_COTHEEXP@VVF"(<3 x double>* %outp, <3 x double>* %251, double* %252)
  %outp1158 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1154:                                        ; preds = %false1131
  %return1160 = call i64 @"eq@III"(i64 %type10, i64 81)
  %435 = icmp ne i64 %return1160, 0
  br i1 %435, label %true1161, label %false1162

true1161:                                         ; preds = %false1154
  %_inp1164 = load <3 x double>* %_inp
  store <3 x double> %_inp1164, <3 x double>* %253
  %weight1165 = load double* %weight
  store double %weight1165, double* %254
  call void @"VAR_COTHELOG@VVF"(<3 x double>* %outp, <3 x double>* %253, double* %254)
  %outp1166 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1162:                                        ; preds = %false1154
  %return1168 = call i64 @"eq@III"(i64 %type10, i64 82)
  %436 = icmp ne i64 %return1168, 0
  br i1 %436, label %true1169, label %false1170

true1169:                                         ; preds = %false1162
  %_inp1172 = load <3 x double>* %_inp
  store <3 x double> %_inp1172, <3 x double>* %255
  %weight1173 = load double* %weight
  store double %weight1173, double* %256
  call void @"VAR_COTHESIN@VVF"(<3 x double>* %outp, <3 x double>* %255, double* %256)
  %outp1174 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1170:                                        ; preds = %false1162
  %return1176 = call i64 @"eq@III"(i64 %type10, i64 83)
  %437 = icmp ne i64 %return1176, 0
  br i1 %437, label %true1177, label %false1178

true1177:                                         ; preds = %false1170
  %_inp1180 = load <3 x double>* %_inp
  store <3 x double> %_inp1180, <3 x double>* %257
  %weight1181 = load double* %weight
  store double %weight1181, double* %258
  call void @"VAR_COTHECOS@VVF"(<3 x double>* %outp, <3 x double>* %257, double* %258)
  %outp1182 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1178:                                        ; preds = %false1170
  %return1184 = call i64 @"eq@III"(i64 %type10, i64 84)
  %438 = icmp ne i64 %return1184, 0
  br i1 %438, label %true1185, label %false1186

true1185:                                         ; preds = %false1178
  %_inp1188 = load <3 x double>* %_inp
  store <3 x double> %_inp1188, <3 x double>* %259
  %weight1189 = load double* %weight
  store double %weight1189, double* %260
  call void @"VAR_COTHETAN@VVF"(<3 x double>* %outp, <3 x double>* %259, double* %260)
  %outp1190 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1186:                                        ; preds = %false1178
  %return1192 = call i64 @"eq@III"(i64 %type10, i64 85)
  %439 = icmp ne i64 %return1192, 0
  br i1 %439, label %true1193, label %end17

true1193:                                         ; preds = %false1186
  %_inp1195 = load <3 x double>* %_inp
  store <3 x double> %_inp1195, <3 x double>* %261
  %weight1196 = load double* %weight
  store double %weight1196, double* %262
  call void @"VAR_COTHESEC@VVF"(<3 x double>* %outp, <3 x double>* %261, double* %262)
  %outp1197 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1200:                                         ; preds = %false935
  %_inp1203 = load <3 x double>* %_inp
  store <3 x double> %_inp1203, <3 x double>* %263
  %weight1204 = load double* %weight
  store double %weight1204, double* %264
  call void @"VAR_COTHECSC@VVF"(<3 x double>* %outp, <3 x double>* %263, double* %264)
  %outp1205 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1201:                                        ; preds = %false935
  %return1207 = call i64 @"eq@III"(i64 %type10, i64 87)
  %440 = icmp ne i64 %return1207, 0
  br i1 %440, label %true1208, label %false1209

true1208:                                         ; preds = %false1201
  %_inp1211 = load <3 x double>* %_inp
  store <3 x double> %_inp1211, <3 x double>* %265
  %weight1212 = load double* %weight
  store double %weight1212, double* %266
  call void @"VAR_COTHECOT@VVF"(<3 x double>* %outp, <3 x double>* %265, double* %266)
  %outp1213 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1209:                                        ; preds = %false1201
  %return1215 = call i64 @"eq@III"(i64 %type10, i64 88)
  %441 = icmp ne i64 %return1215, 0
  br i1 %441, label %true1216, label %false1217

true1216:                                         ; preds = %false1209
  %_inp1219 = load <3 x double>* %_inp
  store <3 x double> %_inp1219, <3 x double>* %267
  %weight1220 = load double* %weight
  store double %weight1220, double* %268
  call void @"VAR_COTHESINH@VVF"(<3 x double>* %outp, <3 x double>* %267, double* %268)
  %outp1221 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1217:                                        ; preds = %false1209
  %return1223 = call i64 @"eq@III"(i64 %type10, i64 89)
  %442 = icmp ne i64 %return1223, 0
  br i1 %442, label %true1224, label %false1225

true1224:                                         ; preds = %false1217
  %_inp1227 = load <3 x double>* %_inp
  store <3 x double> %_inp1227, <3 x double>* %269
  %weight1228 = load double* %weight
  store double %weight1228, double* %270
  call void @"VAR_COTHECOSH@VVF"(<3 x double>* %outp, <3 x double>* %269, double* %270)
  %outp1229 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1225:                                        ; preds = %false1217
  %return1231 = call i64 @"eq@III"(i64 %type10, i64 90)
  %443 = icmp ne i64 %return1231, 0
  br i1 %443, label %true1232, label %false1233

true1232:                                         ; preds = %false1225
  %_inp1235 = load <3 x double>* %_inp
  store <3 x double> %_inp1235, <3 x double>* %271
  %weight1236 = load double* %weight
  store double %weight1236, double* %272
  call void @"VAR_COTHETANH@VVF"(<3 x double>* %outp, <3 x double>* %271, double* %272)
  %outp1237 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1233:                                        ; preds = %false1225
  %return1239 = call i64 @"eq@III"(i64 %type10, i64 91)
  %444 = icmp ne i64 %return1239, 0
  br i1 %444, label %true1240, label %false1241

true1240:                                         ; preds = %false1233
  %_inp1243 = load <3 x double>* %_inp
  store <3 x double> %_inp1243, <3 x double>* %273
  %weight1244 = load double* %weight
  store double %weight1244, double* %274
  call void @"VAR_COTHESECH@VVF"(<3 x double>* %outp, <3 x double>* %273, double* %274)
  %outp1245 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1241:                                        ; preds = %false1233
  %return1247 = call i64 @"eq@III"(i64 %type10, i64 92)
  %445 = icmp ne i64 %return1247, 0
  br i1 %445, label %true1248, label %false1249

true1248:                                         ; preds = %false1241
  %_inp1251 = load <3 x double>* %_inp
  store <3 x double> %_inp1251, <3 x double>* %275
  %weight1252 = load double* %weight
  store double %weight1252, double* %276
  call void @"VAR_COTHECSCH@VVF"(<3 x double>* %outp, <3 x double>* %275, double* %276)
  %outp1253 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1249:                                        ; preds = %false1241
  %return1255 = call i64 @"eq@III"(i64 %type10, i64 93)
  %446 = icmp ne i64 %return1255, 0
  br i1 %446, label %true1256, label %false1257

true1256:                                         ; preds = %false1249
  %_inp1259 = load <3 x double>* %_inp
  store <3 x double> %_inp1259, <3 x double>* %277
  %weight1260 = load double* %weight
  store double %weight1260, double* %278
  call void @"VAR_COTHECOTH@VVF"(<3 x double>* %outp, <3 x double>* %277, double* %278)
  %outp1261 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1257:                                        ; preds = %false1249
  %return1263 = call i64 @"eq@III"(i64 %type10, i64 94)
  %447 = icmp ne i64 %return1263, 0
  br i1 %447, label %true1264, label %false1265

true1264:                                         ; preds = %false1257
  %ftype1267 = load i8** %ftype
  %return1268 = call i64 @"eq@ISS"(i8* %ftype1267, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %448 = icmp ne i64 %return1268, 0
  br i1 %448, label %true1269, label %false1270

false1265:                                        ; preds = %false1257
  %return1289 = call i64 @"eq@III"(i64 %type10, i64 95)
  %449 = icmp ne i64 %return1289, 0
  br i1 %449, label %true1290, label %false1291

true1269:                                         ; preds = %true1264
  %GMP1272 = load %genomeParametrics* %GMP
  %auger1273 = extractvalue %genomeParametrics %GMP1272, 48
  %idx1274 = load i64* %idx
  %return1275 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %auger1273, i64 %idx1274)
  br label %end1271

false1270:                                        ; preds = %true1264
  %return1276 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([12 x i8]* @164, i64 0, i64 0))
  br label %end1271

end1271:                                          ; preds = %false1270, %true1269
  %auger.0 = phi <4 x double> [ %return1275, %true1269 ], [ %return1276, %false1270 ]
  %_inp1277 = load <3 x double>* %_inp
  store <3 x double> %_inp1277, <3 x double>* %279
  %weight1278 = load double* %weight
  store double %weight1278, double* %280
  %return1280 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 0)
  store double %return1280, double* %281
  %return1282 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 1)
  store double %return1282, double* %282
  %return1284 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 2)
  store double %return1284, double* %283
  %return1286 = call double @"getcomp@FPI"(<4 x double> %auger.0, i64 3)
  store double %return1286, double* %284
  call void @"VAR_AUGER@VVFFFFF"(<3 x double>* %outp, <3 x double>* %279, double* %280, double* %281, double* %282, double* %283, double* %284)
  %outp1287 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1290:                                         ; preds = %false1265
  %ftype1293 = load i8** %ftype
  %return1294 = call i64 @"eq@ISS"(i8* %ftype1293, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %450 = icmp ne i64 %return1294, 0
  br i1 %450, label %true1295, label %false1296

false1291:                                        ; preds = %false1265
  %return1307 = call i64 @"eq@III"(i64 %type10, i64 96)
  %451 = icmp ne i64 %return1307, 0
  br i1 %451, label %true1308, label %false1309

true1295:                                         ; preds = %true1290
  %GMP1298 = load %genomeParametrics* %GMP
  %flux_spread = extractvalue %genomeParametrics %GMP1298, 5
  %idx1299 = load i64* %idx
  %return1300 = call double @"getcomp@F[FI"(double* %flux_spread, i64 %idx1299)
  br label %end1297

false1296:                                        ; preds = %true1290
  %return1301 = call double @"chf@FS"(i8* getelementptr inbounds ([17 x i8]* @165, i64 0, i64 0))
  br label %end1297

end1297:                                          ; preds = %false1296, %true1295
  %spread.0 = phi double [ %return1300, %true1295 ], [ %return1301, %false1296 ]
  %_inp1302 = load <3 x double>* %_inp
  store <3 x double> %_inp1302, <3 x double>* %285
  %weight1303 = load double* %weight
  store double %weight1303, double* %286
  store double %spread.0, double* %287
  call void @"VAR_FLUX@VVFF"(<3 x double>* %outp, <3 x double>* %285, double* %286, double* %287)
  %outp1305 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1308:                                         ; preds = %false1291
  %ftype1311 = load i8** %ftype
  %return1312 = call i64 @"eq@ISS"(i8* %ftype1311, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %452 = icmp ne i64 %return1312, 0
  br i1 %452, label %true1313, label %false1314

false1309:                                        ; preds = %false1291
  %return1330 = call i64 @"eq@III"(i64 %type10, i64 97)
  %453 = icmp ne i64 %return1330, 0
  br i1 %453, label %true1331, label %false1332

true1313:                                         ; preds = %true1308
  %GMP1316 = load %genomeParametrics* %GMP
  %mobius_re = extractvalue %genomeParametrics %GMP1316, 49
  %idx1317 = load i64* %idx
  %return1318 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %mobius_re, i64 %idx1317)
  %mobius_im = extractvalue %genomeParametrics %GMP1316, 50
  %return1321 = call <4 x double> @"getcomp@P[PI"(<4 x double>* %mobius_im, i64 %idx1317)
  br label %end1315

false1314:                                        ; preds = %true1308
  %return1322 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8]* @166, i64 0, i64 0))
  %return1323 = call <4 x double> @"chp@PS"(i8* getelementptr inbounds ([15 x i8]* @167, i64 0, i64 0))
  br label %end1315

end1315:                                          ; preds = %false1314, %true1313
  %im.0 = phi <4 x double> [ %return1321, %true1313 ], [ %return1323, %false1314 ]
  %re.0 = phi <4 x double> [ %return1318, %true1313 ], [ %return1322, %false1314 ]
  %_inp1324 = load <3 x double>* %_inp
  store <3 x double> %_inp1324, <3 x double>* %288
  %weight1325 = load double* %weight
  store double %weight1325, double* %289
  store <4 x double> %re.0, <4 x double>* %290
  store <4 x double> %im.0, <4 x double>* %291
  call void @"VAR_MOBIUS@VVFPP"(<3 x double>* %outp, <3 x double>* %288, double* %289, <4 x double>* %290, <4 x double>* %291)
  %outp1328 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1331:                                         ; preds = %false1309
  %ftype1334 = load i8** %ftype
  %return1335 = call i64 @"eq@ISS"(i8* %ftype1334, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %454 = icmp ne i64 %return1335, 0
  br i1 %454, label %true1336, label %false1337

false1332:                                        ; preds = %false1309
  %return1353 = call i64 @"eq@III"(i64 %type10, i64 98)
  %455 = icmp ne i64 %return1353, 0
  br i1 %455, label %true1354, label %false1355

true1336:                                         ; preds = %true1331
  %GMP1339 = load %genomeParametrics* %GMP
  %curve_lenght = extractvalue %genomeParametrics %GMP1339, 27
  %idx1340 = load i64* %idx
  %return1341 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curve_lenght, i64 %idx1340)
  %curve_amp = extractvalue %genomeParametrics %GMP1339, 28
  %return1344 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %curve_amp, i64 %idx1340)
  br label %end1338

false1337:                                        ; preds = %true1331
  %return1345 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([21 x i8]* @168, i64 0, i64 0))
  %return1346 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8]* @169, i64 0, i64 0))
  br label %end1338

end1338:                                          ; preds = %false1337, %true1336
  %amp.0 = phi <2 x double> [ %return1344, %true1336 ], [ %return1346, %false1337 ]
  %lgt.0 = phi <2 x double> [ %return1341, %true1336 ], [ %return1345, %false1337 ]
  %_inp1347 = load <3 x double>* %_inp
  store <3 x double> %_inp1347, <3 x double>* %292
  %weight1348 = load double* %weight
  store double %weight1348, double* %293
  store <2 x double> %lgt.0, <2 x double>* %294
  store <2 x double> %amp.0, <2 x double>* %295
  call void @"VAR_CURVE@VVFUU"(<3 x double>* %outp, <3 x double>* %292, double* %293, <2 x double>* %294, <2 x double>* %295)
  %outp1351 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1354:                                         ; preds = %false1332
  %ftype1357 = load i8** %ftype
  %return1358 = call i64 @"eq@ISS"(i8* %ftype1357, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %456 = icmp ne i64 %return1358, 0
  br i1 %456, label %true1359, label %false1360

false1355:                                        ; preds = %false1332
  %return1375 = call i64 @"eq@III"(i64 %type10, i64 99)
  %457 = icmp ne i64 %return1375, 0
  br i1 %457, label %true1376, label %false1377

true1359:                                         ; preds = %true1354
  %GMP1362 = load %genomeParametrics* %GMP
  %persp1363 = extractvalue %genomeParametrics %GMP1362, 40
  %idx1364 = load i64* %idx
  %return1365 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %persp1363, i64 %idx1364)
  br label %end1361

false1360:                                        ; preds = %true1354
  %return1366 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([12 x i8]* @170, i64 0, i64 0))
  br label %end1361

end1361:                                          ; preds = %false1360, %true1359
  %persp.0 = phi <2 x double> [ %return1365, %true1359 ], [ %return1366, %false1360 ]
  %_inp1367 = load <3 x double>* %_inp
  store <3 x double> %_inp1367, <3 x double>* %296
  %weight1368 = load double* %weight
  store double %weight1368, double* %297
  %return1370 = call double @"getcomp@FUI"(<2 x double> %persp.0, i64 0)
  store double %return1370, double* %298
  %return1372 = call double @"getcomp@FUI"(<2 x double> %persp.0, i64 1)
  store double %return1372, double* %299
  call void @"VAR_PERSPECTIVE@VVFFF"(<3 x double>* %outp, <3 x double>* %296, double* %297, double* %298, double* %299)
  %outp1373 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1376:                                         ; preds = %false1355
  %ftype1379 = load i8** %ftype
  %return1380 = call i64 @"eq@ISS"(i8* %ftype1379, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %458 = icmp ne i64 %return1380, 0
  br i1 %458, label %true1381, label %false1382

false1377:                                        ; preds = %false1355
  %return1408 = call i64 @"eq@III"(i64 %type10, i64 100)
  %459 = icmp ne i64 %return1408, 0
  br i1 %459, label %true1409, label %false1410

true1381:                                         ; preds = %true1376
  %GMP1384 = load %genomeParametrics* %GMP
  %bwraps1385 = extractvalue %genomeParametrics %GMP1384, 12
  %idx1386 = load i64* %idx
  %return1387 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %bwraps1385, i64 %idx1386)
  %bwrapstwist1389 = extractvalue %genomeParametrics %GMP1384, 41
  %return1391 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %bwrapstwist1389, i64 %idx1386)
  br label %end1383

false1382:                                        ; preds = %true1376
  %return1392 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8]* @171, i64 0, i64 0))
  %return1393 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8]* @172, i64 0, i64 0))
  br label %end1383

end1383:                                          ; preds = %false1382, %true1381
  %bwrapstwist.0 = phi <2 x double> [ %return1391, %true1381 ], [ %return1393, %false1382 ]
  %bwraps.0 = phi <3 x double> [ %return1387, %true1381 ], [ %return1392, %false1382 ]
  %_inp1394 = load <3 x double>* %_inp
  store <3 x double> %_inp1394, <3 x double>* %300
  %weight1395 = load double* %weight
  store double %weight1395, double* %301
  %return1397 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 0)
  store double %return1397, double* %302
  %return1399 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 1)
  store double %return1399, double* %303
  %return1401 = call double @"getcomp@FVI"(<3 x double> %bwraps.0, i64 2)
  store double %return1401, double* %304
  %return1403 = call double @"getcomp@FUI"(<2 x double> %bwrapstwist.0, i64 0)
  store double %return1403, double* %305
  %return1405 = call double @"getcomp@FUI"(<2 x double> %bwrapstwist.0, i64 1)
  store double %return1405, double* %306
  call void @"VAR_BWRAPS@VVFFFFFF"(<3 x double>* %outp, <3 x double>* %300, double* %301, double* %302, double* %303, double* %304, double* %305, double* %306)
  %outp1406 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

true1409:                                         ; preds = %false1377
  %_inp1412 = load <3 x double>* %_inp
  store <3 x double> %_inp1412, <3 x double>* %307
  %weight1413 = load double* %weight
  store double %weight1413, double* %308
  call void @"VAR_HEMISPHERE@VVF"(<3 x double>* %outp, <3 x double>* %307, double* %308)
  %outp1414 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

false1410:                                        ; preds = %false1377
  %return1416 = call i64 @"eq@III"(i64 %type10, i64 101)
  %460 = icmp ne i64 %return1416, 0
  br i1 %460, label %true1417, label %end17

true1417:                                         ; preds = %false1410
  %ftype1419 = load i8** %ftype
  %return1420 = call i64 @"eq@ISS"(i8* %ftype1419, i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0))
  %461 = icmp ne i64 %return1420, 0
  br i1 %461, label %true1421, label %false1422

true1421:                                         ; preds = %true1417
  %GMP1424 = load %genomeParametrics* %GMP
  %polynomial_pow = extractvalue %genomeParametrics %GMP1424, 29
  %idx1425 = load i64* %idx
  %return1426 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_pow, i64 %idx1425)
  %polynomial_lc = extractvalue %genomeParametrics %GMP1424, 30
  %return1429 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_lc, i64 %idx1425)
  %polynomial_sc = extractvalue %genomeParametrics %GMP1424, 31
  %return1432 = call <2 x double> @"getcomp@U[UI"(<2 x double>* %polynomial_sc, i64 %idx1425)
  br label %end1423

false1422:                                        ; preds = %true1417
  %return1433 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([20 x i8]* @173, i64 0, i64 0))
  %return1434 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8]* @174, i64 0, i64 0))
  %return1435 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([19 x i8]* @175, i64 0, i64 0))
  br label %end1423

end1423:                                          ; preds = %false1422, %true1421
  %sc.0 = phi <2 x double> [ %return1432, %true1421 ], [ %return1435, %false1422 ]
  %lc.0 = phi <2 x double> [ %return1429, %true1421 ], [ %return1434, %false1422 ]
  %pow.0 = phi <2 x double> [ %return1426, %true1421 ], [ %return1433, %false1422 ]
  %_inp1436 = load <3 x double>* %_inp
  store <3 x double> %_inp1436, <3 x double>* %309
  %weight1437 = load double* %weight
  store double %weight1437, double* %310
  store <2 x double> %pow.0, <2 x double>* %311
  store <2 x double> %lc.0, <2 x double>* %312
  store <2 x double> %sc.0, <2 x double>* %313
  call void @"VAR_POLYNOMIAL@VVFUUU"(<3 x double>* %outp, <3 x double>* %309, double* %310, <2 x double>* %311, <2 x double>* %312, <2 x double>* %313)
  %outp1441 = load <3 x double>* %outp
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %end1423, %true1409, %end1383, %end1361, %end1338, %end1315, %end1297, %end1271, %true1256, %true1248, %true1240, %true1232, %true1224, %true1216, %true1208, %true1200, %true1193, %true1185, %true1177, %true1169, %true1161, %true1153, %end1137, %end1115, %end1089, %end1063, %end1037, %end1015, %end996, %end977, %end954, %true939, %end914, %true900, %end881, %end863, %true848, %end825, %true810, %end799, %true784, %true776, %true768, %end751, %end734, %true719, %true711, %end700, %end681, %end659, %end637, %end615, %end588, %end566, %true551, %true543, %true535, %true527, %true519, %true512, %true504, %true496, %end480, %end458, %end440, %end421, %end392, %true379, %end364, %end342, %end317, %end299, %end273, %end251, %true237, %true229, %true221, %true213, %true204, %true194, %true186, %true177, %true169, %true160, %true152, %true140, %true132, %true124, %true116, %true107, %true98, %true89, %true81, %true73, %true65, %true57, %true49, %true41, %true33, %true25, %end17, %true
  %UnifiedRetVal = phi <3 x double> [ %output, %true ], [ %_inp1442, %end17 ], [ %outp30, %true25 ], [ %outp38, %true33 ], [ %outp46, %true41 ], [ %outp54, %true49 ], [ %outp62, %true57 ], [ %outp70, %true65 ], [ %outp78, %true73 ], [ %outp86, %true81 ], [ %outp95, %true89 ], [ %outp104, %true98 ], [ %outp113, %true107 ], [ %outp121, %true116 ], [ %outp129, %true124 ], [ %outp137, %true132 ], [ %outp149, %true140 ], [ %outp157, %true152 ], [ %outp166, %true160 ], [ %outp174, %true169 ], [ %outp183, %true177 ], [ %outp191, %true186 ], [ %outp201, %true194 ], [ %outp210, %true204 ], [ %outp218, %true213 ], [ %outp226, %true221 ], [ %outp234, %true229 ], [ %outp241, %true237 ], [ %outp263, %end251 ], [ %outp289, %end273 ], [ %outp307, %end299 ], [ %outp332, %end317 ], [ %outp354, %end342 ], [ %outp376, %end364 ], [ %outp383, %true379 ], [ %outp401, %end392 ], [ %outp430, %end421 ], [ %outp448, %end440 ], [ %outp470, %end458 ], [ %outp493, %end480 ], [ %outp501, %true496 ], [ %outp509, %true504 ], [ %outp516, %true512 ], [ %outp524, %true519 ], [ %outp532, %true527 ], [ %outp540, %true535 ], [ %outp548, %true543 ], [ %outp556, %true551 ], [ %outp578, %end566 ], [ %outp606, %end588 ], [ %outp627, %end615 ], [ %outp649, %end637 ], [ %outp671, %end659 ], [ %outp690, %end681 ], [ %outp708, %end700 ], [ %outp716, %true711 ], [ %outp724, %true719 ], [ %outp741, %end734 ], [ %outp765, %end751 ], [ %outp773, %true768 ], [ %outp781, %true776 ], [ %outp789, %true784 ], [ %outp807, %end799 ], [ %outp815, %true810 ], [ %outp845, %end825 ], [ %outp853, %true848 ], [ %outp871, %end863 ], [ %outp897, %end881 ], [ %outp905, %true900 ], [ %outp927, %end914 ], [ %outp944, %true939 ], [ %outp967, %end954 ], [ %outp986, %end977 ], [ %outp1005, %end996 ], [ %outp1027, %end1015 ], [ %outp1053, %end1037 ], [ %outp1079, %end1063 ], [ %outp1105, %end1089 ], [ %outp1127, %end1115 ], [ %outp1150, %end1137 ], [ %outp1158, %true1153 ], [ %outp1166, %true1161 ], [ %outp1174, %true1169 ], [ %outp1182, %true1177 ], [ %outp1190, %true1185 ], [ %outp1197, %true1193 ], [ %outp1205, %true1200 ], [ %outp1213, %true1208 ], [ %outp1221, %true1216 ], [ %outp1229, %true1224 ], [ %outp1237, %true1232 ], [ %outp1245, %true1240 ], [ %outp1253, %true1248 ], [ %outp1261, %true1256 ], [ %outp1287, %end1271 ], [ %outp1305, %end1297 ], [ %outp1328, %end1315 ], [ %outp1351, %end1338 ], [ %outp1373, %end1361 ], [ %outp1406, %end1383 ], [ %outp1414, %true1409 ], [ %outp1441, %end1423 ]
  ret <3 x double> %UnifiedRetVal
}

declare <3 x double> @"mul@VV"(<3 x double>, <3 x double>) nounwind readnone

declare <2 x double> @"getcomp@U[UI"(<2 x double>*, i64) nounwind readnone

declare <4 x double> @"getcomp@P[PI"(<4 x double>*, i64) nounwind readnone

declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) nounwind readnone

define private void @"_TheFractalFlameAlgorithm@I[IFVV"(i64* %_bound_ptnum, i64** %_bound_VACTIVE, double* %_bound_pscale, <3 x double>* %_bound_Cd, <3 x double>* %_bound_P) nounwind alwaysinline {
__llvm_entry:
  %__mem = alloca <3 x double>
  %SYS = alloca %genomeSYS
  %GEM = alloca %genome
  %0 = alloca i64*
  %1 = alloca %genomeSYS
  %v1GMP = alloca %genomeParametrics
  %v2GMP = alloca %genomeParametrics
  %v3GMP = alloca %genomeParametrics
  %v4GMP = alloca %genomeParametrics
  %2 = alloca i8*
  %3 = alloca i8**
  %4 = alloca i64*
  %5 = alloca i8*
  %6 = alloca i8**
  %7 = alloca i64*
  %8 = alloca i8*
  %9 = alloca i8**
  %10 = alloca i64*
  %11 = alloca i8*
  %12 = alloca i8**
  %13 = alloca i64*
  %__tmp = alloca <3 x double>
  %14 = alloca double
  %15 = alloca %genomeParametrics
  %16 = alloca i8*
  %17 = alloca <3 x double>
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca double
  %21 = alloca double
  %22 = alloca double
  %23 = alloca double
  %24 = alloca double
  %25 = alloca double
  %26 = alloca double
  %27 = alloca %genomeParametrics
  %28 = alloca i8*
  %29 = alloca <3 x double>
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca double
  %33 = alloca double
  %34 = alloca double
  %35 = alloca double
  %36 = alloca double
  %37 = alloca double
  %38 = alloca double
  %39 = alloca %genomeParametrics
  %40 = alloca i8*
  %41 = alloca <3 x double>
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca double
  %45 = alloca double
  %46 = alloca double
  %47 = alloca double
  %48 = alloca double
  %49 = alloca double
  %50 = alloca double
  %51 = alloca %genomeParametrics
  %52 = alloca i8*
  %53 = alloca <3 x double>
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca double
  %57 = alloca double
  %58 = alloca double
  %59 = alloca double
  %60 = alloca double
  %61 = alloca double
  %62 = alloca double
  %63 = alloca double
  %64 = alloca double
  %65 = alloca double
  %66 = alloca double
  %67 = alloca double
  %68 = alloca double
  %69 = alloca i64
  %70 = alloca i64
  %71 = alloca <3 x double>
  %__tmp462 = alloca <3 x double>
  %72 = alloca i64
  %73 = alloca i64
  %74 = alloca <3 x double>
  %75 = alloca i64
  %76 = alloca i64
  %77 = alloca double
  %78 = alloca %genomeParametrics
  %79 = alloca i8*
  %80 = alloca <3 x double>
  %81 = alloca i64
  %82 = alloca i64
  %83 = alloca double
  %84 = alloca double
  %85 = alloca double
  %86 = alloca double
  %87 = alloca double
  %88 = alloca double
  %89 = alloca double
  %90 = alloca %genomeParametrics
  %91 = alloca i8*
  %92 = alloca <3 x double>
  %93 = alloca i64
  %94 = alloca i64
  %95 = alloca double
  %96 = alloca double
  %97 = alloca double
  %98 = alloca double
  %99 = alloca double
  %100 = alloca double
  %101 = alloca double
  %102 = alloca %genomeParametrics
  %103 = alloca i8*
  %104 = alloca <3 x double>
  %105 = alloca i64
  %106 = alloca i64
  %107 = alloca double
  %108 = alloca double
  %109 = alloca double
  %110 = alloca double
  %111 = alloca double
  %112 = alloca double
  %113 = alloca double
  %114 = alloca double
  %115 = alloca double
  %116 = alloca double
  %117 = alloca double
  %118 = alloca double
  %119 = alloca double
  %120 = alloca i64
  %121 = alloca i64
  %122 = alloca <3 x double>
  %123 = alloca <3 x double>
  %124 = alloca i64
  %125 = alloca i64
  %126 = alloca i64
  %127 = alloca i64
  %128 = alloca double
  store <3 x double> zeroinitializer, <3 x double>* %__mem, !vex-initializer-store !3
  %cast = call <3 x double> @"set@VF"(double 0.000000e+00)
  %SYS1 = call %genomeSYS @"genomeSYS@Z9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateF"()
  store %genomeSYS %SYS1, %genomeSYS* %SYS, !vex-initializer-store !3
  call void @"genomeSYSBuild@Z9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%genomeSYS* %SYS)
  %GEM2 = call %genome @"genome@Z6genomeM48N8ffv1typeIN8ffv2typeIN8ffv3typeIN6v1type[IN6v2type[IN6v3type[IN6v4type[IN13cvar_override[IN5POSTL[IN2IW[FN1a[FN1b[FN1d[FN1e[FN1f[FN1h[FN7vpscale[FN8v1weight[FN8v2weight[FN8v3weight[FN8v4weight[FN8PBWEIGHT[FN2ap[FN2bp[FN2dp[FN2ep[FN2fp[FN2hp[FN3grtFN10ffv1weightFN10ffv2weightFN10ffv3weightFN2faFN2fbFN2fdFN2feFN2ffFN2fhFN3fa2FN3fb2FN3fd2FN3fe2FN3ff2FN3fh2FN3gtrUN3gscUN4vcol[VN4sIDX[S"()
  store %genome %GEM2, %genome* %GEM, !vex-initializer-store !3
  %_bound_VACTIVE3 = load i64** %_bound_VACTIVE
  store i64* %_bound_VACTIVE3, i64** %0
  %SYS4 = load %genomeSYS* %SYS
  store %genomeSYS %SYS4, %genomeSYS* %1
  call void @"genomeBuild@Z6genomeM48N8ffv1typeIN8ffv2typeIN8ffv3typeIN6v1type[IN6v2type[IN6v3type[IN6v4type[IN13cvar_override[IN5POSTL[IN2IW[FN1a[FN1b[FN1d[FN1e[FN1f[FN1h[FN7vpscale[FN8v1weight[FN8v2weight[FN8v3weight[FN8v4weight[FN8PBWEIGHT[FN2ap[FN2bp[FN2dp[FN2ep[FN2fp[FN2hp[FN3grtFN10ffv1weightFN10ffv2weightFN10ffv3weightFN2faFN2fbFN2fdFN2feFN2ffFN2fhFN3fa2FN3fb2FN3fd2FN3fe2FN3ff2FN3fh2FN3gtrUN3gscUN4vcol[VN4sIDX[S[IZ9genomeSYSM17N3TMGIN12DELINVALIDPTIN5POSTFIN2FFIN9USEPSCALEIN12USEPSCALEVIZIN10USEPALETTEIN11PALETTEMODEIN13BLENDWITHVCOLIN6iter_fIN8symmetryIN8sym_modeIN10sym_globalIN4iterIN4dombIN5vizmbIN11mb_modulateF"(%genome* %GEM, i64** %0, %genomeSYS* %1)
  %v1GMP5 = call %genomeParametrics @"genomeParametrics@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %genomeParametrics %v1GMP5, %genomeParametrics* %v1GMP, !vex-initializer-store !3
  %v2GMP6 = call %genomeParametrics @"genomeParametrics@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %genomeParametrics %v2GMP6, %genomeParametrics* %v2GMP, !vex-initializer-store !3
  %v3GMP7 = call %genomeParametrics @"genomeParametrics@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %genomeParametrics %v3GMP7, %genomeParametrics* %v3GMP, !vex-initializer-store !3
  %v4GMP8 = call %genomeParametrics @"genomeParametrics@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[P"()
  store %genomeParametrics %v4GMP8, %genomeParametrics* %v4GMP, !vex-initializer-store !3
  %GEM9 = load %genome* %GEM
  %sIDX = extractvalue %genome %GEM9, 47
  store i8** %sIDX, i8*** %3
  %GEM10 = load %genome* %GEM
  %v1type = extractvalue %genome %GEM10, 3
  store i64* %v1type, i64** %4
  call void @"genomeParametricsBuild@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PS[S[I"(%genomeParametrics* %v1GMP, i8** %2, i8*** %3, i64** %4)
  %GEM11 = load %genome* %GEM
  %sIDX12 = extractvalue %genome %GEM11, 47
  store i8** %sIDX12, i8*** %6
  %GEM13 = load %genome* %GEM
  %v2type = extractvalue %genome %GEM13, 4
  store i64* %v2type, i64** %7
  call void @"genomeParametricsBuild@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PS[S[I"(%genomeParametrics* %v2GMP, i8** %5, i8*** %6, i64** %7)
  %GEM14 = load %genome* %GEM
  %sIDX15 = extractvalue %genome %GEM14, 47
  store i8** %sIDX15, i8*** %9
  %GEM16 = load %genome* %GEM
  %v3type = extractvalue %genome %GEM16, 5
  store i64* %v3type, i64** %10
  call void @"genomeParametricsBuild@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PS[S[I"(%genomeParametrics* %v3GMP, i8** %8, i8*** %9, i64** %10)
  %GEM17 = load %genome* %GEM
  %sIDX18 = extractvalue %genome %GEM17, 47
  store i8** %sIDX18, i8*** %12
  %GEM19 = load %genome* %GEM
  %v4type = extractvalue %genome %GEM19, 6
  store i64* %v4type, i64** %13
  call void @"genomeParametricsBuild@Z17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PS[S[I"(%genomeParametrics* %v4GMP, i8** %11, i8*** %12, i64** %13)
  %GEM20 = load %genome* %GEM
  %IW = extractvalue %genome %GEM20, 9
  %return = call double* @"create_cdf@[F[F"(double* %IW)
  %v1type22 = extractvalue %genome %GEM20, 3
  %return23 = call i64 @"len@I[I"(i64* %v1type22)
  %biunitcube = call <3 x double> @"biunitcube@V"()
  store <3 x double> %biunitcube, <3 x double>* %__mem
  br label %cond

cond:                                             ; preds = %end445, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output458, %end445 ]
  %_col_bg.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %_col_bg.1, %end445 ]
  %rmp_bg.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %rmp_bg.1, %end445 ]
  %col_bg.0 = phi <3 x double> [ %cast, %__llvm_entry ], [ %col_bg.1, %end445 ]
  %col_ac.0 = phi <3 x double> [ zeroinitializer, %__llvm_entry ], [ %col_ac.1, %end445 ]
  %fnum_n_ac.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %fnum_n_ac.1, %end445 ]
  %fnum_n_bg.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %fnum_n_bg.1, %end445 ]
  %pscale_ac.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %pscale_ac.1, %end445 ]
  %pscale_bg.0 = phi double [ 0.000000e+00, %__llvm_entry ], [ %pscale_bg.1, %end445 ]
  %SYS25 = load %genomeSYS* %SYS
  %iter = extractvalue %genomeSYS %SYS25, 13
  %return26 = call i64 @"lt@III"(i64 %i.0, i64 %iter)
  %129 = icmp ne i64 %return26, 0
  br i1 %129, label %body, label %end

body:                                             ; preds = %cond
  %return29 = call double @"nrandom@F:S"(i8* getelementptr inbounds ([8 x i8]* @123, i64 0, i64 0))
  %return30 = call i64 @"sample_cdf@[FFI"(double* %return, double %return29)
  %cast31 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast31, <3 x double>* %__tmp
  %GEM32 = load %genome* %GEM
  %PBWEIGHT = extractvalue %genome %GEM32, 21
  %return34 = call double @"getcomp@F[FI"(double* %PBWEIGHT, i64 %return30)
  %return35 = fcmp ogt double %return34, 0.000000e+00
  br i1 %return35, label %true, label %end37

end:                                              ; preds = %false, %cond
  %SYS459 = load %genomeSYS* %SYS
  %FF = extractvalue %genomeSYS %SYS459, 3
  %130 = icmp ne i64 %FF, 0
  br i1 %130, label %true460, label %end461

true:                                             ; preds = %body
  store double %return34, double* %14
  call void @"VAR_PREBLUR@VF"(<3 x double>* %__mem, double* %14)
  br label %end37

end37:                                            ; preds = %true, %body
  %GEM42 = load %genome* %GEM
  %v1weight = extractvalue %genome %GEM42, 17
  %return44 = call double @"getcomp@F[FI"(double* %v1weight, i64 %return30)
  %return45 = fcmp one double %return44, 0.000000e+00
  br i1 %return45, label %true47, label %end48

true47:                                           ; preds = %end37
  %__tmp49 = load <3 x double>* %__tmp
  %v1GMP50 = load %genomeParametrics* %v1GMP
  store %genomeParametrics %v1GMP50, %genomeParametrics* %15
  store i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0), i8** %16
  %__mem51 = load <3 x double>* %__mem
  store <3 x double> %__mem51, <3 x double>* %17
  store i64 %return30, i64* %18
  %GEM53 = load %genome* %GEM
  %v1type54 = extractvalue %genome %GEM53, 3
  %return56 = call i64 @"getcomp@I[II"(i64* %v1type54, i64 %return30)
  store i64 %return56, i64* %19
  %GEM57 = load %genome* %GEM
  %a = extractvalue %genome %GEM57, 10
  %return59 = call double @"getcomp@F[FI"(double* %a, i64 %return30)
  store double %return59, double* %20
  %GEM60 = load %genome* %GEM
  %b = extractvalue %genome %GEM60, 11
  %return62 = call double @"getcomp@F[FI"(double* %b, i64 %return30)
  store double %return62, double* %21
  %GEM63 = load %genome* %GEM
  %d = extractvalue %genome %GEM63, 12
  %return65 = call double @"getcomp@F[FI"(double* %d, i64 %return30)
  store double %return65, double* %22
  %GEM66 = load %genome* %GEM
  %e = extractvalue %genome %GEM66, 13
  %return68 = call double @"getcomp@F[FI"(double* %e, i64 %return30)
  store double %return68, double* %23
  %GEM69 = load %genome* %GEM
  %f = extractvalue %genome %GEM69, 14
  %return71 = call double @"getcomp@F[FI"(double* %f, i64 %return30)
  store double %return71, double* %24
  %GEM72 = load %genome* %GEM
  %h = extractvalue %genome %GEM72, 15
  %return74 = call double @"getcomp@F[FI"(double* %h, i64 %return30)
  store double %return74, double* %25
  %GEM75 = load %genome* %GEM
  %v1weight76 = extractvalue %genome %GEM75, 17
  %return78 = call double @"getcomp@F[FI"(double* %v1weight76, i64 %return30)
  store double %return78, double* %26
  %FLAME = call <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %15, i8** %16, <3 x double>* %17, i64* %18, i64* %19, double* %20, double* %21, double* %22, double* %23, double* %24, double* %25, double* %26)
  %output = call <3 x double> @"add@VV"(<3 x double> %__tmp49, <3 x double> %FLAME)
  store <3 x double> %output, <3 x double>* %__tmp
  br label %end48

end48:                                            ; preds = %true47, %end37
  %GEM79 = load %genome* %GEM
  %v2weight = extractvalue %genome %GEM79, 18
  %return81 = call double @"getcomp@F[FI"(double* %v2weight, i64 %return30)
  %return82 = fcmp one double %return81, 0.000000e+00
  br i1 %return82, label %true84, label %end85

true84:                                           ; preds = %end48
  %__tmp86 = load <3 x double>* %__tmp
  %v2GMP87 = load %genomeParametrics* %v2GMP
  store %genomeParametrics %v2GMP87, %genomeParametrics* %27
  store i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0), i8** %28
  %__mem88 = load <3 x double>* %__mem
  store <3 x double> %__mem88, <3 x double>* %29
  store i64 %return30, i64* %30
  %GEM90 = load %genome* %GEM
  %v2type91 = extractvalue %genome %GEM90, 4
  %return93 = call i64 @"getcomp@I[II"(i64* %v2type91, i64 %return30)
  store i64 %return93, i64* %31
  %GEM94 = load %genome* %GEM
  %a95 = extractvalue %genome %GEM94, 10
  %return97 = call double @"getcomp@F[FI"(double* %a95, i64 %return30)
  store double %return97, double* %32
  %GEM98 = load %genome* %GEM
  %b99 = extractvalue %genome %GEM98, 11
  %return101 = call double @"getcomp@F[FI"(double* %b99, i64 %return30)
  store double %return101, double* %33
  %GEM102 = load %genome* %GEM
  %d103 = extractvalue %genome %GEM102, 12
  %return105 = call double @"getcomp@F[FI"(double* %d103, i64 %return30)
  store double %return105, double* %34
  %GEM106 = load %genome* %GEM
  %e107 = extractvalue %genome %GEM106, 13
  %return109 = call double @"getcomp@F[FI"(double* %e107, i64 %return30)
  store double %return109, double* %35
  %GEM110 = load %genome* %GEM
  %f111 = extractvalue %genome %GEM110, 14
  %return113 = call double @"getcomp@F[FI"(double* %f111, i64 %return30)
  store double %return113, double* %36
  %GEM114 = load %genome* %GEM
  %h115 = extractvalue %genome %GEM114, 15
  %return117 = call double @"getcomp@F[FI"(double* %h115, i64 %return30)
  store double %return117, double* %37
  %GEM118 = load %genome* %GEM
  %v2weight119 = extractvalue %genome %GEM118, 18
  %return121 = call double @"getcomp@F[FI"(double* %v2weight119, i64 %return30)
  store double %return121, double* %38
  %FLAME122 = call <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %27, i8** %28, <3 x double>* %29, i64* %30, i64* %31, double* %32, double* %33, double* %34, double* %35, double* %36, double* %37, double* %38)
  %output123 = call <3 x double> @"add@VV"(<3 x double> %__tmp86, <3 x double> %FLAME122)
  store <3 x double> %output123, <3 x double>* %__tmp
  br label %end85

end85:                                            ; preds = %true84, %end48
  %GEM124 = load %genome* %GEM
  %v3weight = extractvalue %genome %GEM124, 19
  %return126 = call double @"getcomp@F[FI"(double* %v3weight, i64 %return30)
  %return127 = fcmp one double %return126, 0.000000e+00
  br i1 %return127, label %true129, label %end130

true129:                                          ; preds = %end85
  %__tmp131 = load <3 x double>* %__tmp
  %v3GMP132 = load %genomeParametrics* %v3GMP
  store %genomeParametrics %v3GMP132, %genomeParametrics* %39
  store i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0), i8** %40
  %__mem133 = load <3 x double>* %__mem
  store <3 x double> %__mem133, <3 x double>* %41
  store i64 %return30, i64* %42
  %GEM135 = load %genome* %GEM
  %v3type136 = extractvalue %genome %GEM135, 5
  %return138 = call i64 @"getcomp@I[II"(i64* %v3type136, i64 %return30)
  store i64 %return138, i64* %43
  %GEM139 = load %genome* %GEM
  %a140 = extractvalue %genome %GEM139, 10
  %return142 = call double @"getcomp@F[FI"(double* %a140, i64 %return30)
  store double %return142, double* %44
  %GEM143 = load %genome* %GEM
  %b144 = extractvalue %genome %GEM143, 11
  %return146 = call double @"getcomp@F[FI"(double* %b144, i64 %return30)
  store double %return146, double* %45
  %GEM147 = load %genome* %GEM
  %d148 = extractvalue %genome %GEM147, 12
  %return150 = call double @"getcomp@F[FI"(double* %d148, i64 %return30)
  store double %return150, double* %46
  %GEM151 = load %genome* %GEM
  %e152 = extractvalue %genome %GEM151, 13
  %return154 = call double @"getcomp@F[FI"(double* %e152, i64 %return30)
  store double %return154, double* %47
  %GEM155 = load %genome* %GEM
  %f156 = extractvalue %genome %GEM155, 14
  %return158 = call double @"getcomp@F[FI"(double* %f156, i64 %return30)
  store double %return158, double* %48
  %GEM159 = load %genome* %GEM
  %h160 = extractvalue %genome %GEM159, 15
  %return162 = call double @"getcomp@F[FI"(double* %h160, i64 %return30)
  store double %return162, double* %49
  %GEM163 = load %genome* %GEM
  %v3weight164 = extractvalue %genome %GEM163, 19
  %return166 = call double @"getcomp@F[FI"(double* %v3weight164, i64 %return30)
  store double %return166, double* %50
  %FLAME167 = call <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %39, i8** %40, <3 x double>* %41, i64* %42, i64* %43, double* %44, double* %45, double* %46, double* %47, double* %48, double* %49, double* %50)
  %output168 = call <3 x double> @"add@VV"(<3 x double> %__tmp131, <3 x double> %FLAME167)
  store <3 x double> %output168, <3 x double>* %__tmp
  br label %end130

end130:                                           ; preds = %true129, %end85
  %GEM169 = load %genome* %GEM
  %v4weight = extractvalue %genome %GEM169, 20
  %return171 = call double @"getcomp@F[FI"(double* %v4weight, i64 %return30)
  %return172 = fcmp one double %return171, 0.000000e+00
  br i1 %return172, label %true174, label %end175

true174:                                          ; preds = %end130
  %__tmp176 = load <3 x double>* %__tmp
  %v4GMP177 = load %genomeParametrics* %v4GMP
  store %genomeParametrics %v4GMP177, %genomeParametrics* %51
  store i8* getelementptr inbounds ([6 x i8]* @124, i64 0, i64 0), i8** %52
  %__mem178 = load <3 x double>* %__mem
  store <3 x double> %__mem178, <3 x double>* %53
  store i64 %return30, i64* %54
  %GEM180 = load %genome* %GEM
  %v4type181 = extractvalue %genome %GEM180, 6
  %return183 = call i64 @"getcomp@I[II"(i64* %v4type181, i64 %return30)
  store i64 %return183, i64* %55
  %GEM184 = load %genome* %GEM
  %a185 = extractvalue %genome %GEM184, 10
  %return187 = call double @"getcomp@F[FI"(double* %a185, i64 %return30)
  store double %return187, double* %56
  %GEM188 = load %genome* %GEM
  %b189 = extractvalue %genome %GEM188, 11
  %return191 = call double @"getcomp@F[FI"(double* %b189, i64 %return30)
  store double %return191, double* %57
  %GEM192 = load %genome* %GEM
  %d193 = extractvalue %genome %GEM192, 12
  %return195 = call double @"getcomp@F[FI"(double* %d193, i64 %return30)
  store double %return195, double* %58
  %GEM196 = load %genome* %GEM
  %e197 = extractvalue %genome %GEM196, 13
  %return199 = call double @"getcomp@F[FI"(double* %e197, i64 %return30)
  store double %return199, double* %59
  %GEM200 = load %genome* %GEM
  %f201 = extractvalue %genome %GEM200, 14
  %return203 = call double @"getcomp@F[FI"(double* %f201, i64 %return30)
  store double %return203, double* %60
  %GEM204 = load %genome* %GEM
  %h205 = extractvalue %genome %GEM204, 15
  %return207 = call double @"getcomp@F[FI"(double* %h205, i64 %return30)
  store double %return207, double* %61
  %GEM208 = load %genome* %GEM
  %v4weight209 = extractvalue %genome %GEM208, 20
  %return211 = call double @"getcomp@F[FI"(double* %v4weight209, i64 %return30)
  store double %return211, double* %62
  %FLAME212 = call <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %51, i8** %52, <3 x double>* %53, i64* %54, i64* %55, double* %56, double* %57, double* %58, double* %59, double* %60, double* %61, double* %62)
  %output213 = call <3 x double> @"add@VV"(<3 x double> %__tmp176, <3 x double> %FLAME212)
  store <3 x double> %output213, <3 x double>* %__tmp
  br label %end175

end175:                                           ; preds = %true174, %end130
  %GEM214 = load %genome* %GEM
  %POSTL = extractvalue %genome %GEM214, 8
  %return216 = call i64 @"getcomp@I[II"(i64* %POSTL, i64 %return30)
  %131 = icmp ne i64 %return216, 0
  br i1 %131, label %true217, label %end218

true217:                                          ; preds = %end175
  %ap = extractvalue %genome %GEM214, 22
  %return221 = call double @"getcomp@F[FI"(double* %ap, i64 %return30)
  store double %return221, double* %63
  %GEM222 = load %genome* %GEM
  %bp = extractvalue %genome %GEM222, 23
  %return224 = call double @"getcomp@F[FI"(double* %bp, i64 %return30)
  store double %return224, double* %64
  %GEM225 = load %genome* %GEM
  %dp = extractvalue %genome %GEM225, 24
  %return227 = call double @"getcomp@F[FI"(double* %dp, i64 %return30)
  store double %return227, double* %65
  %GEM228 = load %genome* %GEM
  %ep = extractvalue %genome %GEM228, 25
  %return230 = call double @"getcomp@F[FI"(double* %ep, i64 %return30)
  store double %return230, double* %66
  %GEM231 = load %genome* %GEM
  %fp = extractvalue %genome %GEM231, 26
  %return233 = call double @"getcomp@F[FI"(double* %fp, i64 %return30)
  store double %return233, double* %67
  %GEM234 = load %genome* %GEM
  %hp = extractvalue %genome %GEM234, 27
  %return236 = call double @"getcomp@F[FI"(double* %hp, i64 %return30)
  store double %return236, double* %68
  call void @"affinePOST@VFFFFFF"(<3 x double>* %__tmp, double* %63, double* %64, double* %65, double* %66, double* %67, double* %68)
  br label %end218

end218:                                           ; preds = %true217, %end175
  %SYS237 = load %genomeSYS* %SYS
  %TMG = extractvalue %genomeSYS %SYS237, 0
  %132 = icmp ne i64 %TMG, 0
  br i1 %132, label %true238, label %end239

true238:                                          ; preds = %end218
  %__tmp240 = load <3 x double>* %__tmp
  %GEM241 = load %genome* %GEM
  %gtr = extractvalue %genome %GEM241, 44
  %cast242 = call <3 x double> @"set@VU"(<2 x double> %gtr)
  %grt = extractvalue %genome %GEM241, 28
  %return244 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %grt)
  %gsc = extractvalue %genome %GEM241, 45
  %cast246 = call <3 x double> @"set@VU"(<2 x double> %gsc)
  %return248 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast242, <3 x double> %return244, <3 x double> %cast246, <3 x double> %cast31)
  %output249 = call <3 x double> @"mul@V4"(<3 x double> %__tmp240, <16 x double> %return248)
  store <3 x double> %output249, <3 x double>* %__tmp
  br label %end239

end239:                                           ; preds = %true238, %end218
  %SYS250 = load %genomeSYS* %SYS
  %DELINVALIDPT = extractvalue %genomeSYS %SYS250, 1
  store i64 %DELINVALIDPT, i64* %69
  %__mem251 = load <3 x double>* %__mem
  store <3 x double> %__mem251, <3 x double>* %71
  %checkNAN_vector = call i64 @"checkNAN_vector@IIIV"(i64* %69, i64* %70, <3 x double>* %71)
  %return252 = call i64 @"not@II"(i64 %checkNAN_vector)
  %133 = icmp ne i64 %return252, 0
  br i1 %133, label %true253, label %false

true253:                                          ; preds = %end239
  %SYS255 = load %genomeSYS* %SYS
  %USEPSCALE = extractvalue %genomeSYS %SYS255, 4
  %USEPSCALEVIZ = extractvalue %genomeSYS %SYS255, 5
  %output257 = add i64 %USEPSCALE, %USEPSCALEVIZ
  %return258 = call i64 @"lt@III"(i64 %output257, i64 2)
  %134 = icmp ne i64 %return258, 0
  br i1 %134, label %true259, label %end260

false:                                            ; preds = %end239
  %_bound_ptnum453 = load i64* %_bound_ptnum
  %return454 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum453)
  br label %end

true259:                                          ; preds = %true253
  %USEPALETTE = extractvalue %genomeSYS %SYS255, 6
  %135 = icmp ne i64 %USEPALETTE, 0
  br i1 %135, label %true262, label %false263

end260:                                           ; preds = %true357, %false358, %end398, %false279, %true278, %false263, %true253
  %_col_bg.1 = phi <3 x double> [ %_col_bg.0, %true278 ], [ %output367, %true357 ], [ %_col_bg.0, %false358 ], [ %_col_bg.0, %end398 ], [ %_col_bg.0, %false279 ], [ %_col_bg.0, %false263 ], [ %_col_bg.0, %true253 ]
  %rmp_bg.1 = phi <3 x double> [ %rmp_bg.0, %true278 ], [ %rmp_ac.0, %true357 ], [ %rmp_ac.0, %false358 ], [ %rmp_bg.0, %end398 ], [ %rmp_bg.0, %false279 ], [ %rmp_bg.0, %false263 ], [ %rmp_bg.0, %true253 ]
  %col_bg.1 = phi <3 x double> [ %output287, %true278 ], [ %col_bg.0, %true357 ], [ %col_bg.0, %false358 ], [ %col_ac.2, %end398 ], [ %col_bg.0, %false279 ], [ %output440, %false263 ], [ %col_bg.0, %true253 ]
  %col_ac.1 = phi <3 x double> [ %output287, %true278 ], [ %return372, %true357 ], [ %rmp_ac.0, %false358 ], [ %col_ac.2, %end398 ], [ %col_ac.0, %false279 ], [ %output440, %false263 ], [ %col_ac.0, %true253 ]
  %fnum_n_ac.1 = phi double [ %output274, %true278 ], [ %output274, %true357 ], [ %output274, %false358 ], [ %output274, %end398 ], [ %output274, %false279 ], [ %fnum_n_ac.0, %false263 ], [ %fnum_n_ac.0, %true253 ]
  %fnum_n_bg.1 = phi double [ %output274, %true278 ], [ %output274, %true357 ], [ %output274, %false358 ], [ %output274, %end398 ], [ %output274, %false279 ], [ %fnum_n_bg.0, %false263 ], [ %fnum_n_bg.0, %true253 ]
  %SYS442 = load %genomeSYS* %SYS
  %USEPSCALE443 = extractvalue %genomeSYS %SYS442, 4
  %136 = icmp ne i64 %USEPSCALE443, 0
  br i1 %136, label %true444, label %end445

true262:                                          ; preds = %true259
  %cast266 = sitofp i64 %return30 to double
  %output268 = sub i64 %return23, 1
  %cast269 = sitofp i64 %output268 to double
  %output270 = call double @"div@FF"(double %cast266, double %cast269)
  %output273 = fadd double %fnum_n_bg.0, %output270
  %output274 = fmul double 5.000000e-01, %output273
  %PALETTEMODE = extractvalue %genomeSYS %SYS255, 7
  %return277 = call i64 @"not@II"(i64 %PALETTEMODE)
  %137 = icmp ne i64 %return277, 0
  br i1 %137, label %true278, label %false279

false263:                                         ; preds = %true259
  %GEM434 = load %genome* %GEM
  %vcol435 = extractvalue %genome %GEM434, 46
  %return437 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %vcol435, i64 %return30)
  %output438 = call <3 x double> @"add@VV"(<3 x double> %col_bg.0, <3 x double> %return437)
  %cast439 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output440 = call <3 x double> @"mul@VV"(<3 x double> %cast439, <3 x double> %output438)
  br label %end260

true278:                                          ; preds = %true262
  %GEM282 = load %genome* %GEM
  %vcol = extractvalue %genome %GEM282, 46
  %return284 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %vcol, i64 %return30)
  %output285 = call <3 x double> @"add@VV"(<3 x double> %col_bg.0, <3 x double> %return284)
  %cast286 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output287 = call <3 x double> @"mul@VV"(<3 x double> %cast286, <3 x double> %output285)
  br label %end260

false279:                                         ; preds = %true262
  %138 = icmp ne i64 %PALETTEMODE, 0
  br i1 %138, label %true291, label %end260

true291:                                          ; preds = %false279
  %BLENDWITHVCOL = extractvalue %genomeSYS %SYS255, 8
  %139 = icmp ne i64 %BLENDWITHVCOL, 0
  %GEM297 = load %genome* %GEM
  %cvar_override = extractvalue %genome %GEM297, 7
  %return299 = call i64 @"getcomp@I[II"(i64* %cvar_override, i64 %return30)
  %140 = icmp ne i64 %return299, 0
  br i1 %139, label %true294, label %false295

true294:                                          ; preds = %true291
  br i1 %140, label %true300, label %false301

false295:                                         ; preds = %true291
  br i1 %140, label %true378, label %false379

true300:                                          ; preds = %true294
  %vcol304 = extractvalue %genome %GEM297, 46
  %return306 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %vcol304, i64 %return30)
  br label %end302

false301:                                         ; preds = %true294
  %return308 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([11 x i8]* @176, i64 0, i64 0), double %output274)
  br label %end302

end302:                                           ; preds = %false301, %true300
  %frmp.0 = phi <3 x double> [ %return306, %true300 ], [ %return308, %false301 ]
  %output311 = call <3 x double> @"add@VV"(<3 x double> %rmp_bg.0, <3 x double> %frmp.0)
  %cast312 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output313 = call <3 x double> @"mul@VV"(<3 x double> %cast312, <3 x double> %output311)
  %GEM314 = load %genome* %GEM
  %cvar_override315 = extractvalue %genome %GEM314, 7
  %return317 = call i64 @"getcomp@I[II"(i64* %cvar_override315, i64 %return30)
  %return318 = call i64 @"not@II"(i64 %return317)
  %141 = icmp ne i64 %return318, 0
  br i1 %141, label %true319, label %end320

true319:                                          ; preds = %end302
  %return321 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([15 x i8]* @177, i64 0, i64 0))
  %return323 = call <3 x double> @"rgbtohsv@VV"(<3 x double> %output313)
  %return325 = call double @"getcomp@FVI"(<3 x double> %return323, i64 0)
  %return327 = call double @"getcomp@FVI"(<3 x double> %return321, i64 0)
  %output328 = fadd double %return325, %return327
  %return329 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return323, double %output328, i64 0)
  %output331 = extractvalue { double, <3 x double> } %return329, 1
  %return333 = call double @"getcomp@FVI"(<3 x double> %output331, i64 1)
  %return335 = call double @"getcomp@FVI"(<3 x double> %return321, i64 1)
  %output336 = fmul double %return333, %return335
  %return338 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output331, double %output336, i64 1)
  %output340 = extractvalue { double, <3 x double> } %return338, 1
  %return342 = call double @"getcomp@FVI"(<3 x double> %output340, i64 2)
  %return344 = call double @"getcomp@FVI"(<3 x double> %return321, i64 2)
  %output345 = fmul double %return342, %return344
  %return347 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output340, double %output345, i64 2)
  %output349 = extractvalue { double, <3 x double> } %return347, 1
  %return351 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %output349)
  br label %end320

end320:                                           ; preds = %true319, %end302
  %rmp_ac.0 = phi <3 x double> [ %return351, %true319 ], [ %output313, %end302 ]
  %return353 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8]* @178, i64 0, i64 0))
  %return355 = fcmp ogt double %return353, 0.000000e+00
  br i1 %return355, label %true357, label %false358

true357:                                          ; preds = %end320
  %GEM361 = load %genome* %GEM
  %vcol362 = extractvalue %genome %GEM361, 46
  %return364 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %vcol362, i64 %return30)
  %output365 = call <3 x double> @"add@VV"(<3 x double> %_col_bg.0, <3 x double> %return364)
  %output367 = call <3 x double> @"mul@VV"(<3 x double> %cast312, <3 x double> %output365)
  %return372 = call <3 x double> @"lerp@VVVF"(<3 x double> %rmp_ac.0, <3 x double> %output367, double %return353)
  br label %end260

false358:                                         ; preds = %end320
  br label %end260

true378:                                          ; preds = %false295
  %vcol382 = extractvalue %genome %GEM297, 46
  %return384 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %vcol382, i64 %return30)
  br label %end380

false379:                                         ; preds = %false295
  %return386 = call <3 x double> @"chramp@VSF"(i8* getelementptr inbounds ([11 x i8]* @176, i64 0, i64 0), double %output274)
  br label %end380

end380:                                           ; preds = %false379, %true378
  %fcol.0 = phi <3 x double> [ %return384, %true378 ], [ %return386, %false379 ]
  %output389 = call <3 x double> @"add@VV"(<3 x double> %col_bg.0, <3 x double> %fcol.0)
  %cast390 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %output391 = call <3 x double> @"mul@VV"(<3 x double> %cast390, <3 x double> %output389)
  %GEM392 = load %genome* %GEM
  %cvar_override393 = extractvalue %genome %GEM392, 7
  %return395 = call i64 @"getcomp@I[II"(i64* %cvar_override393, i64 %return30)
  %return396 = call i64 @"not@II"(i64 %return395)
  %142 = icmp ne i64 %return396, 0
  br i1 %142, label %true397, label %end398

true397:                                          ; preds = %end380
  %return400 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([15 x i8]* @177, i64 0, i64 0))
  %return402 = call <3 x double> @"rgbtohsv@VV"(<3 x double> %output391)
  %return404 = call double @"getcomp@FVI"(<3 x double> %return402, i64 0)
  %return406 = call double @"getcomp@FVI"(<3 x double> %return400, i64 0)
  %output407 = fadd double %return404, %return406
  %return409 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %return402, double %output407, i64 0)
  %output411 = extractvalue { double, <3 x double> } %return409, 1
  %return413 = call double @"getcomp@FVI"(<3 x double> %output411, i64 1)
  %return415 = call double @"getcomp@FVI"(<3 x double> %return400, i64 1)
  %output416 = fmul double %return413, %return415
  %return418 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output411, double %output416, i64 1)
  %output420 = extractvalue { double, <3 x double> } %return418, 1
  %return422 = call double @"getcomp@FVI"(<3 x double> %output420, i64 2)
  %return424 = call double @"getcomp@FVI"(<3 x double> %return400, i64 2)
  %output425 = fmul double %return422, %return424
  %return427 = call { double, <3 x double> } @"setcomp@FVFI"(<3 x double> %output420, double %output425, i64 2)
  %output429 = extractvalue { double, <3 x double> } %return427, 1
  %return431 = call <3 x double> @"hsvtorgb@VV"(<3 x double> %output429)
  br label %end398

end398:                                           ; preds = %true397, %end380
  %col_ac.2 = phi <3 x double> [ %return431, %true397 ], [ %output391, %end380 ]
  br label %end260

true444:                                          ; preds = %end260
  %GEM447 = load %genome* %GEM
  %vpscale = extractvalue %genome %GEM447, 16
  %return449 = call double @"getcomp@F[FI"(double* %vpscale, i64 %return30)
  %output450 = fadd double %pscale_bg.0, %return449
  %output451 = fmul double 5.000000e-01, %output450
  br label %end445

end445:                                           ; preds = %true444, %end260
  %pscale_ac.1 = phi double [ %output451, %true444 ], [ %pscale_ac.0, %end260 ]
  %pscale_bg.1 = phi double [ %output451, %true444 ], [ %pscale_bg.0, %end260 ]
  %__tmp455 = load <3 x double>* %__tmp
  store <3 x double> %__tmp455, <3 x double>* %__mem
  %output458 = add i64 %i.0, 1
  br label %cond

true460:                                          ; preds = %end
  %cast463 = call <3 x double> @"set@VI"(i64 0)
  store <3 x double> %cast463, <3 x double>* %__tmp462
  %GEM464 = load %genome* %GEM
  %ffv1weight = extractvalue %genome %GEM464, 29
  %return465 = fcmp one double %ffv1weight, 0.000000e+00
  br i1 %return465, label %true467, label %end468

end461:                                           ; preds = %end535, %end
  %SYS547 = load %genomeSYS* %SYS
  %DELINVALIDPT548 = extractvalue %genomeSYS %SYS547, 1
  store i64 %DELINVALIDPT548, i64* %72
  store <3 x double> %col_ac.0, <3 x double>* %74
  %checkNAN_vector550 = call i64 @"checkNAN_vector@IIIV"(i64* %72, i64* %73, <3 x double>* %74)
  %return551 = call i64 @"not@II"(i64 %checkNAN_vector550)
  %SYS552 = load %genomeSYS* %SYS
  %DELINVALIDPT553 = extractvalue %genomeSYS %SYS552, 1
  store i64 %DELINVALIDPT553, i64* %75
  store double %pscale_ac.0, double* %77
  %checkNAN_float = call i64 @"checkNAN_float@IIIF"(i64* %75, i64* %76, double* %77)
  %return555 = call i64 @"not@II"(i64 %checkNAN_float)
  %return556 = call i64 @"and@III"(i64 %return551, i64 %return555)
  %143 = icmp ne i64 %return556, 0
  br i1 %143, label %true557, label %false558

true467:                                          ; preds = %true460
  %v1GMP470 = load %genomeParametrics* %v1GMP
  store %genomeParametrics %v1GMP470, %genomeParametrics* %78
  store i8* getelementptr inbounds ([6 x i8]* @179, i64 0, i64 0), i8** %79
  %__mem471 = load <3 x double>* %__mem
  store <3 x double> %__mem471, <3 x double>* %80
  store i64 0, i64* %81
  %GEM472 = load %genome* %GEM
  %ffv1type = extractvalue %genome %GEM472, 0
  store i64 %ffv1type, i64* %82
  %GEM473 = load %genome* %GEM
  %fa = extractvalue %genome %GEM473, 32
  store double %fa, double* %83
  %GEM474 = load %genome* %GEM
  %fb = extractvalue %genome %GEM474, 33
  store double %fb, double* %84
  %GEM475 = load %genome* %GEM
  %fd = extractvalue %genome %GEM475, 34
  store double %fd, double* %85
  %GEM476 = load %genome* %GEM
  %fe = extractvalue %genome %GEM476, 35
  store double %fe, double* %86
  %GEM477 = load %genome* %GEM
  %ff = extractvalue %genome %GEM477, 36
  store double %ff, double* %87
  %GEM478 = load %genome* %GEM
  %fh = extractvalue %genome %GEM478, 37
  store double %fh, double* %88
  %GEM479 = load %genome* %GEM
  %ffv1weight480 = extractvalue %genome %GEM479, 29
  store double %ffv1weight480, double* %89
  %FLAME481 = call <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %78, i8** %79, <3 x double>* %80, i64* %81, i64* %82, double* %83, double* %84, double* %85, double* %86, double* %87, double* %88, double* %89)
  %output482 = call <3 x double> @"add@VV"(<3 x double> %cast463, <3 x double> %FLAME481)
  store <3 x double> %output482, <3 x double>* %__tmp462
  br label %end468

end468:                                           ; preds = %true467, %true460
  %GEM483 = load %genome* %GEM
  %ffv2weight = extractvalue %genome %GEM483, 30
  %return484 = fcmp one double %ffv2weight, 0.000000e+00
  br i1 %return484, label %true486, label %end487

true486:                                          ; preds = %end468
  %__tmp488 = load <3 x double>* %__tmp462
  %v1GMP489 = load %genomeParametrics* %v1GMP
  store %genomeParametrics %v1GMP489, %genomeParametrics* %90
  store i8* getelementptr inbounds ([6 x i8]* @179, i64 0, i64 0), i8** %91
  %__mem490 = load <3 x double>* %__mem
  store <3 x double> %__mem490, <3 x double>* %92
  store i64 0, i64* %93
  %GEM491 = load %genome* %GEM
  %ffv2type = extractvalue %genome %GEM491, 1
  store i64 %ffv2type, i64* %94
  %GEM492 = load %genome* %GEM
  %fa493 = extractvalue %genome %GEM492, 32
  store double %fa493, double* %95
  %GEM494 = load %genome* %GEM
  %fb495 = extractvalue %genome %GEM494, 33
  store double %fb495, double* %96
  %GEM496 = load %genome* %GEM
  %fd497 = extractvalue %genome %GEM496, 34
  store double %fd497, double* %97
  %GEM498 = load %genome* %GEM
  %fe499 = extractvalue %genome %GEM498, 35
  store double %fe499, double* %98
  %GEM500 = load %genome* %GEM
  %ff501 = extractvalue %genome %GEM500, 36
  store double %ff501, double* %99
  %GEM502 = load %genome* %GEM
  %fh503 = extractvalue %genome %GEM502, 37
  store double %fh503, double* %100
  %GEM504 = load %genome* %GEM
  %ffv2weight505 = extractvalue %genome %GEM504, 30
  store double %ffv2weight505, double* %101
  %FLAME506 = call <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %90, i8** %91, <3 x double>* %92, i64* %93, i64* %94, double* %95, double* %96, double* %97, double* %98, double* %99, double* %100, double* %101)
  %output507 = call <3 x double> @"add@VV"(<3 x double> %__tmp488, <3 x double> %FLAME506)
  store <3 x double> %output507, <3 x double>* %__tmp462
  br label %end487

end487:                                           ; preds = %true486, %end468
  %GEM508 = load %genome* %GEM
  %ffv3weight = extractvalue %genome %GEM508, 31
  %return509 = fcmp one double %ffv3weight, 0.000000e+00
  br i1 %return509, label %true511, label %end512

true511:                                          ; preds = %end487
  %__tmp513 = load <3 x double>* %__tmp462
  %v1GMP514 = load %genomeParametrics* %v1GMP
  store %genomeParametrics %v1GMP514, %genomeParametrics* %102
  store i8* getelementptr inbounds ([6 x i8]* @179, i64 0, i64 0), i8** %103
  %__mem515 = load <3 x double>* %__mem
  store <3 x double> %__mem515, <3 x double>* %104
  store i64 0, i64* %105
  %GEM516 = load %genome* %GEM
  %ffv3type = extractvalue %genome %GEM516, 2
  store i64 %ffv3type, i64* %106
  %GEM517 = load %genome* %GEM
  %fa518 = extractvalue %genome %GEM517, 32
  store double %fa518, double* %107
  %GEM519 = load %genome* %GEM
  %fb520 = extractvalue %genome %GEM519, 33
  store double %fb520, double* %108
  %GEM521 = load %genome* %GEM
  %fd522 = extractvalue %genome %GEM521, 34
  store double %fd522, double* %109
  %GEM523 = load %genome* %GEM
  %fe524 = extractvalue %genome %GEM523, 35
  store double %fe524, double* %110
  %GEM525 = load %genome* %GEM
  %ff526 = extractvalue %genome %GEM525, 36
  store double %ff526, double* %111
  %GEM527 = load %genome* %GEM
  %fh528 = extractvalue %genome %GEM527, 37
  store double %fh528, double* %112
  %GEM529 = load %genome* %GEM
  %ffv3weight530 = extractvalue %genome %GEM529, 31
  store double %ffv3weight530, double* %113
  %FLAME531 = call <3 x double> @"FLAME@VZ17genomeParametricsM51N10rings2_val[FN13bipolar_shift[FN9cell_size[FN11escher_beta[FN10popcorn2_c[FN11flux_spread[FN4blob[VN3pie[VN10supershape[VN12supershape_n[VN4cpow[VN9lazysusan[VN6bwraps[VN6curl_c[UN8parabola[UN4fan2[UN10rectangles[UN5bent2[UN12lazysusanxyz[UN7modulus[UN8popcorn2[UN10separation[UN17separation_inside[UN5split[UN6splits[UN12waves2_scale[UN11waves2_freq[UN12curve_lenght[UN9curve_amp[UN14polynomial_pow[UN13polynomial_lc[UN13polynomial_sc[UN6julian[UN10juliascope[UN10radialblur[UN5disc2[UN6flower[UN5conic[UN7stripes[UN5whorl[UN5persp[UN11bwrapstwist[UN4ngon[PN5pdj_w[PN6oscope[PN5wedge[PN10wedgejulia[PN8wedgesph[PN5auger[PN9mobius_re[PN9mobius_im[PSVIIFFFFFFF"(%genomeParametrics* %102, i8** %103, <3 x double>* %104, i64* %105, i64* %106, double* %107, double* %108, double* %109, double* %110, double* %111, double* %112, double* %113)
  %output532 = call <3 x double> @"add@VV"(<3 x double> %__tmp513, <3 x double> %FLAME531)
  store <3 x double> %output532, <3 x double>* %__tmp462
  br label %end512

end512:                                           ; preds = %true511, %end487
  %SYS533 = load %genomeSYS* %SYS
  %POSTF = extractvalue %genomeSYS %SYS533, 2
  %144 = icmp ne i64 %POSTF, 0
  br i1 %144, label %true534, label %end535

true534:                                          ; preds = %end512
  %GEM536 = load %genome* %GEM
  %fa2 = extractvalue %genome %GEM536, 38
  store double %fa2, double* %114
  %GEM537 = load %genome* %GEM
  %fb2 = extractvalue %genome %GEM537, 39
  store double %fb2, double* %115
  %GEM538 = load %genome* %GEM
  %fd2 = extractvalue %genome %GEM538, 40
  store double %fd2, double* %116
  %GEM539 = load %genome* %GEM
  %fe2 = extractvalue %genome %GEM539, 41
  store double %fe2, double* %117
  %GEM540 = load %genome* %GEM
  %ff2 = extractvalue %genome %GEM540, 42
  store double %ff2, double* %118
  %GEM541 = load %genome* %GEM
  %fh2 = extractvalue %genome %GEM541, 43
  store double %fh2, double* %119
  call void @"affinePOST@VFFFFFF"(<3 x double>* %__tmp462, double* %114, double* %115, double* %116, double* %117, double* %118, double* %119)
  br label %end535

end535:                                           ; preds = %true534, %end512
  %__tmp542 = load <3 x double>* %__tmp462
  store <3 x double> %__tmp542, <3 x double>* %__mem
  %SYS543 = load %genomeSYS* %SYS
  %DELINVALIDPT544 = extractvalue %genomeSYS %SYS543, 1
  store i64 %DELINVALIDPT544, i64* %120
  %_bound_ptnum545 = load i64* %_bound_ptnum
  store i64 %_bound_ptnum545, i64* %121
  %__mem546 = load <3 x double>* %__mem
  store <3 x double> %__mem546, <3 x double>* %122
  call void @"removeNAN_vector@IIV"(i64* %120, i64* %121, <3 x double>* %122)
  br label %end461

true557:                                          ; preds = %end461
  %SYS560 = load %genomeSYS* %SYS
  %symmetry = extractvalue %genomeSYS %SYS560, 10
  %145 = icmp ne i64 %symmetry, 0
  br i1 %145, label %true561, label %end562

false558:                                         ; preds = %end461
  %_bound_ptnum631 = load i64* %_bound_ptnum
  %return632 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum631)
  br label %end559

end559:                                           ; preds = %false558, %end585
  ret void

true561:                                          ; preds = %true557
  %return563 = call <3 x double> @"chv@VS"(i8* getelementptr inbounds ([13 x i8]* @180, i64 0, i64 0))
  store <3 x double> %return563, <3 x double>* %123
  %SYS564 = load %genomeSYS* %SYS
  %sym_mode = extractvalue %genomeSYS %SYS564, 11
  store i64 %sym_mode, i64* %124
  %SYS565 = load %genomeSYS* %SYS
  %sym_global = extractvalue %genomeSYS %SYS565, 12
  store i64 %sym_global, i64* %125
  call void @"VAR_SYMMETRY@VVII"(<3 x double>* %__mem, <3 x double>* %123, i64* %124, i64* %125)
  br label %end562

end562:                                           ; preds = %true561, %true557
  %SYS566 = load %genomeSYS* %SYS
  %USEPSCALE567 = extractvalue %genomeSYS %SYS566, 4
  %return568 = call i64 @"not@II"(i64 %USEPSCALE567)
  %146 = icmp ne i64 %return568, 0
  br i1 %146, label %true569, label %end570

true569:                                          ; preds = %end562
  br label %end570

end570:                                           ; preds = %true569, %end562
  %pscale_ac.2 = phi double [ 1.000000e+00, %true569 ], [ %pscale_ac.0, %end562 ]
  %SYS571 = load %genomeSYS* %SYS
  %domb = extractvalue %genomeSYS %SYS571, 14
  %147 = icmp ne i64 %domb, 0
  br i1 %147, label %true572, label %end573

true572:                                          ; preds = %end570
  %mb_modulate = extractvalue %genomeSYS %SYS571, 16
  %output576 = fmul double %pscale_ac.2, %mb_modulate
  br label %end573

end573:                                           ; preds = %true572, %end570
  %pscale_ac.3 = phi double [ %output576, %true572 ], [ %pscale_ac.2, %end570 ]
  store double %pscale_ac.3, double* %_bound_pscale
  %SYS578 = load %genomeSYS* %SYS
  %USEPSCALE579 = extractvalue %genomeSYS %SYS578, 4
  %USEPSCALEVIZ581 = extractvalue %genomeSYS %SYS578, 5
  %return582 = call i64 @"and@III"(i64 %USEPSCALE579, i64 %USEPSCALEVIZ581)
  %148 = icmp ne i64 %return582, 0
  br i1 %148, label %true583, label %false584

true583:                                          ; preds = %end573
  %cast587 = call <3 x double> @"set@VF"(double %pscale_ac.3)
  store <3 x double> %cast587, <3 x double>* %_bound_Cd
  br label %end585

false584:                                         ; preds = %end573
  %USEPALETTE589 = extractvalue %genomeSYS %SYS578, 6
  %149 = icmp ne i64 %USEPALETTE589, 0
  br i1 %149, label %true590, label %end591

end585:                                           ; preds = %end623, %true583
  %__mem630 = load <3 x double>* %__mem
  store <3 x double> %__mem630, <3 x double>* %_bound_P
  br label %end559

true590:                                          ; preds = %false584
  %PALETTEMODE593 = extractvalue %genomeSYS %SYS578, 7
  %return594 = call i64 @"eq@III"(i64 %PALETTEMODE593, i64 0)
  %150 = icmp ne i64 %return594, 0
  br i1 %150, label %true595, label %end591

end591:                                           ; preds = %true602, %true610, %false603, %true590, %false584
  %SYS618 = load %genomeSYS* %SYS
  %domb619 = extractvalue %genomeSYS %SYS618, 14
  %vizmb = extractvalue %genomeSYS %SYS618, 15
  %return621 = call i64 @"and@III"(i64 %domb619, i64 %vizmb)
  %151 = icmp ne i64 %return621, 0
  br i1 %151, label %true622, label %end623

true595:                                          ; preds = %true590
  %DELINVALIDPT598 = extractvalue %genomeSYS %SYS578, 1
  store i64 %DELINVALIDPT598, i64* %126
  store double %fnum_n_ac.0, double* %128
  %checkNAN_float600 = call i64 @"checkNAN_float@IIIF"(i64* %126, i64* %127, double* %128)
  %return601 = call i64 @"not@II"(i64 %checkNAN_float600)
  %152 = icmp ne i64 %return601, 0
  %_bound_ptnum605 = load i64* %_bound_ptnum
  br i1 %152, label %true602, label %false603

true602:                                          ; preds = %true595
  %return607 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* getelementptr inbounds ([7 x i8]* @181, i64 0, i64 0), i64 %_bound_ptnum605, double %fnum_n_ac.0, i8* getelementptr inbounds ([4 x i8]* @182, i64 0, i64 0))
  %SYS608 = load %genomeSYS* %SYS
  %domb609 = extractvalue %genomeSYS %SYS608, 14
  %153 = icmp ne i64 %domb609, 0
  br i1 %153, label %true610, label %end591

false603:                                         ; preds = %true595
  %return617 = call i64 @"removepoint@III"(i64 0, i64 %_bound_ptnum605)
  br label %end591

true610:                                          ; preds = %true602
  %_bound_ptnum612 = load i64* %_bound_ptnum
  %mb_modulate614 = extractvalue %genomeSYS %SYS608, 16
  %return615 = call i64 @"setpointattrib@IISIFS"(i64 0, i8* getelementptr inbounds ([12 x i8]* @183, i64 0, i64 0), i64 %_bound_ptnum612, double %mb_modulate614, i8* getelementptr inbounds ([4 x i8]* @182, i64 0, i64 0))
  br label %end591

true622:                                          ; preds = %end591
  %mb_modulate626 = extractvalue %genomeSYS %SYS618, 16
  %cast627 = call <3 x double> @"set@VF"(double %mb_modulate626)
  %output628 = call <3 x double> @"mul@VV"(<3 x double> %col_ac.0, <3 x double> %cast627)
  br label %end623

end623:                                           ; preds = %true622, %end591
  %col_ac.3 = phi <3 x double> [ %output628, %true622 ], [ %col_ac.0, %end591 ]
  store <3 x double> %col_ac.3, <3 x double>* %_bound_Cd
  br label %end585
}

declare double* @"create_cdf@[F[F"(double*) nounwind readnone

define private i64 @"sample_cdf@[FFI"(double* %rw01, double %rw12) alwaysinline {
__llvm_entry:
  %rw24 = call { i64, double, double } @"sample_cdf@[FFIFF"(double* %rw01, double %rw12)
  %rw25 = extractvalue { i64, double, double } %rw24, 0
  ret i64 %rw25
}

declare { i64, double, double } @"sample_cdf@[FFIFF"(double*, double) nounwind readnone

declare <3 x double> @"chramp@VSF"(i8*, double) nounwind readnone

declare <3 x double> @"rgbtohsv@VV"(<3 x double>) nounwind readnone

declare <3 x double> @"hsvtorgb@VV"(<3 x double>) nounwind readnone

declare <3 x double> @"lerp@VVVF"(<3 x double>, <3 x double>, double) nounwind

declare i64 @"setpointattrib@IISIFS"(i64, i8*, i64, double, i8*) nounwind

define void @TheFractalFlameAlgorithm(i64 %ptnum, i64* %VACTIVE, double %pscale, <3 x double> %Cd, <3 x double> %P) nounwind {
__llvm_entry:
  %"<pscale>" = alloca double
  %"<Cd>" = alloca <3 x double>
  %"<P>" = alloca <3 x double>
  %0 = alloca i64
  %1 = alloca i64*
  store double %pscale, double* %"<pscale>"
  store <3 x double> %Cd, <3 x double>* %"<Cd>"
  store <3 x double> %P, <3 x double>* %"<P>"
  store i64 %ptnum, i64* %0
  store i64* %VACTIVE, i64** %1
  call void @"_TheFractalFlameAlgorithm@I[IFVV"(i64* %0, i64** %1, double* %"<pscale>", <3 x double>* %"<Cd>", <3 x double>* %"<P>")
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([6 x i8]* @184, i64 0, i64 0), i64 %ptnum) nounwind readonly
  %evalue3 = load double* %"<pscale>"
  %gvalue4 = call double @"_export@FSF"(i8* getelementptr inbounds ([7 x i8]* @185, i64 0, i64 0), double %evalue3) nounwind readonly
  %evalue5 = load <3 x double>* %"<Cd>"
  %gvalue6 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([3 x i8]* @186, i64 0, i64 0), <3 x double> %evalue5) nounwind readonly
  %evalue7 = load <3 x double>* %"<P>"
  %gvalue8 = call <3 x double> @"_export@VSV"(i8* getelementptr inbounds ([2 x i8]* @187, i64 0, i64 0), <3 x double> %evalue7) nounwind readonly
  store i64 %gvalue, i64* @ptnum
  store double %gvalue4, double* @pscale
  store <3 x double> %gvalue6, <3 x double>* @Cd
  store <3 x double> %gvalue8, <3 x double>* @P
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double @"_export@FSF"(i8*, double)

declare <3 x double> @"_export@VSV"(i8*, <3 x double>)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TheFractalFlameAlgorithm(i64 0, i64* getelementptr inbounds ([0 x i64]* @59, i64 0, i64 0), double 0.000000e+00, <3 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <3 x double> zeroinitializer)
  ret void
}

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = metadata !{metadata !"cvex"}
!1 = metadata !{metadata !"18.5.499"}
!2 = metadata !{metadata !"64"}
!3 = metadata !{metadata !""}

;_code_end
