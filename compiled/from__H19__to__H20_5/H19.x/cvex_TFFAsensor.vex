;_name	TFFAsensor
; ModuleID = 'TFFAsensor'
source_filename = "TFFAsensor"

%sensor = type { i64, i64, i64, <2 x double>, <2 x double>, double, double }

@0 = private constant [11 x i8] c"vizhandles\00"
@1 = private constant [16 x i8] c"vizhandles_solo\00"
@2 = private constant [18 x i8] c"vizhandlesff_solo\00"
@3 = private constant [7 x i8] c"outres\00"
@4 = private constant [10 x i8] c"outcenter\00"
@5 = private constant [9 x i8] c"outscale\00"
@6 = private constant [10 x i8] c"outrotate\00"
@7 = private constant [0 x <3 x double>] zeroinitializer
@8 = private constant [3 x i8] c"Cd\00"
@9 = private constant [4 x i8] c"set\00"
@10 = private constant [5 x i8] c"poly\00"
@11 = private constant [2 x i8] c"P\00"
@12 = private constant [5 x i8] c"mult\00"
@13 = private constant [9 x i8] c"polyline\00"

; Function Attrs: alwaysinline nounwind
define private void @"sensorDATA@Z6sensorM7N5xfvizIN10xfviz_soloIN13xfviz_solo_ffIN3resUN6centerUN4zoomFN3rotF"(%sensor* %this) #0 {
__llvm_entry:
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i64 0, i64 0))
  %tmp = load %sensor, %sensor* %this
  %0 = insertvalue %sensor %tmp, i64 %return, 0
  %return1 = call i64 @"chi@IS"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1, i64 0, i64 0))
  %1 = insertvalue %sensor %0, i64 %return1, 1
  %return3 = call i64 @"chi@IS"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i64 0, i64 0))
  %2 = insertvalue %sensor %1, i64 %return3, 2
  %return5 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i64 0, i64 0))
  %3 = insertvalue %sensor %2, <2 x double> %return5, 3
  %return7 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @4, i64 0, i64 0))
  %4 = insertvalue %sensor %3, <2 x double> %return7, 4
  %return9 = call double @"chf@FS"(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @5, i64 0, i64 0))
  %5 = insertvalue %sensor %4, double %return9, 5
  %return11 = call double @"chf@FS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @6, i64 0, i64 0))
  %6 = insertvalue %sensor %5, double %return11, 6
  store %sensor %6, %sensor* %this
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #1

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM7N5xfvizIN10xfviz_soloIN13xfviz_solo_ffIN3resUN6centerUN4zoomFN3rotFIIIUUFF"(i64* %xfviz, i64* %xfviz_solo, i64* %xfviz_solo_ff, <2 x double>* %res, <2 x double>* %center, double* %zoom, double* %rot) #0 {
__llvm_entry:
  %xfviz1 = load i64, i64* %xfviz
  %0 = insertvalue %sensor undef, i64 %xfviz1, 0
  %xfviz_solo2 = load i64, i64* %xfviz_solo
  %1 = insertvalue %sensor %0, i64 %xfviz_solo2, 1
  %xfviz_solo_ff4 = load i64, i64* %xfviz_solo_ff
  %2 = insertvalue %sensor %1, i64 %xfviz_solo_ff4, 2
  %res6 = load <2 x double>, <2 x double>* %res
  %3 = insertvalue %sensor %2, <2 x double> %res6, 3
  %center8 = load <2 x double>, <2 x double>* %center
  %4 = insertvalue %sensor %3, <2 x double> %center8, 4
  %zoom10 = load double, double* %zoom
  %5 = insertvalue %sensor %4, double %zoom10, 5
  %rot12 = load double, double* %rot
  %6 = insertvalue %sensor %5, double %rot12, 6
  ret %sensor %6
}

; Function Attrs: alwaysinline nounwind
define private %sensor @"sensor@Z6sensorM7N5xfvizIN10xfviz_soloIN13xfviz_solo_ffIN3resUN6centerUN4zoomFN3rotF"() #0 {
__llvm_entry:
  %0 = alloca i64
  %1 = alloca i64
  %2 = alloca <2 x double>
  %3 = alloca <2 x double>
  %4 = alloca double
  %5 = alloca double
  %6 = alloca i64
  store i64 0, i64* %6
  store i64 0, i64* %0
  store i64 0, i64* %1
  store <2 x double> zeroinitializer, <2 x double>* %2
  store <2 x double> zeroinitializer, <2 x double>* %3
  store double 0.000000e+00, double* %4
  store double 0.000000e+00, double* %5
  %sensor = call %sensor @"sensor@Z6sensorM7N5xfvizIN10xfviz_soloIN13xfviz_solo_ffIN3resUN6centerUN4zoomFN3rotFIIIUUFF"(i64* %6, i64* %0, i64* %1, <2 x double>* %2, <2 x double>* %3, double* %4, double* %5)
  ret %sensor %sensor
}

; Function Attrs: alwaysinline nounwind
define private void @_TFFAsensor() #0 {
__llvm_entry:
  %SENSOR = alloca %sensor
  %SENSOR1 = call %sensor @"sensor@Z6sensorM7N5xfvizIN10xfviz_soloIN13xfviz_solo_ffIN3resUN6centerUN4zoomFN3rotF"()
  %SENSOR1.fca.0.extract = extractvalue %sensor %SENSOR1, 0
  %SENSOR1.fca.0.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 0
  store i64 %SENSOR1.fca.0.extract, i64* %SENSOR1.fca.0.gep
  %SENSOR1.fca.1.extract = extractvalue %sensor %SENSOR1, 1
  %SENSOR1.fca.1.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 1
  store i64 %SENSOR1.fca.1.extract, i64* %SENSOR1.fca.1.gep
  %SENSOR1.fca.2.extract = extractvalue %sensor %SENSOR1, 2
  %SENSOR1.fca.2.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 2
  store i64 %SENSOR1.fca.2.extract, i64* %SENSOR1.fca.2.gep
  %SENSOR1.fca.3.extract = extractvalue %sensor %SENSOR1, 3
  %SENSOR1.fca.3.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 3
  store <2 x double> %SENSOR1.fca.3.extract, <2 x double>* %SENSOR1.fca.3.gep
  %SENSOR1.fca.4.extract = extractvalue %sensor %SENSOR1, 4
  %SENSOR1.fca.4.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 4
  store <2 x double> %SENSOR1.fca.4.extract, <2 x double>* %SENSOR1.fca.4.gep
  %SENSOR1.fca.5.extract = extractvalue %sensor %SENSOR1, 5
  %SENSOR1.fca.5.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 5
  store double %SENSOR1.fca.5.extract, double* %SENSOR1.fca.5.gep
  %SENSOR1.fca.6.extract = extractvalue %sensor %SENSOR1, 6
  %SENSOR1.fca.6.gep = getelementptr inbounds %sensor, %sensor* %SENSOR, i32 0, i32 6
  store double %SENSOR1.fca.6.extract, double* %SENSOR1.fca.6.gep
  call void @"sensorDATA@Z6sensorM7N5xfvizIN10xfviz_soloIN13xfviz_solo_ffIN3resUN6centerUN4zoomFN3rotF"(%sensor* %SENSOR)
  %SENSOR2.fca.0.load = load i64, i64* %SENSOR1.fca.0.gep
  %SENSOR2.fca.0.insert = insertvalue %sensor undef, i64 %SENSOR2.fca.0.load, 0
  %SENSOR2.fca.1.load = load i64, i64* %SENSOR1.fca.1.gep
  %SENSOR2.fca.1.insert = insertvalue %sensor %SENSOR2.fca.0.insert, i64 %SENSOR2.fca.1.load, 1
  %SENSOR2.fca.2.load = load i64, i64* %SENSOR1.fca.2.gep
  %SENSOR2.fca.2.insert = insertvalue %sensor %SENSOR2.fca.1.insert, i64 %SENSOR2.fca.2.load, 2
  %SENSOR2.fca.3.load = load <2 x double>, <2 x double>* %SENSOR1.fca.3.gep
  %SENSOR2.fca.3.insert = insertvalue %sensor %SENSOR2.fca.2.insert, <2 x double> %SENSOR2.fca.3.load, 3
  %SENSOR2.fca.4.load = load <2 x double>, <2 x double>* %SENSOR1.fca.4.gep
  %SENSOR2.fca.4.insert = insertvalue %sensor %SENSOR2.fca.3.insert, <2 x double> %SENSOR2.fca.4.load, 4
  %SENSOR2.fca.5.load = load double, double* %SENSOR1.fca.5.gep
  %SENSOR2.fca.5.insert = insertvalue %sensor %SENSOR2.fca.4.insert, double %SENSOR2.fca.5.load, 5
  %SENSOR2.fca.6.load = load double, double* %SENSOR1.fca.6.gep
  %return = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.4.load, i64 0)
  %return14 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.4.load, i64 1)
  %return15 = call <3 x double> @"set@VFFF"(double %return, double %return14, double 0.000000e+00)
  %return17 = call <3 x double> @"set@VFFF"(double 0.000000e+00, double 0.000000e+00, double %SENSOR2.fca.6.load)
  %output = call double @"div@FF"(double 1.000000e+00, double %SENSOR2.fca.5.load)
  %cast = call <3 x double> @"set@VI"(i64 0)
  %cast21 = call <3 x double> @"set@VF"(double %output)
  %return22 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %return15, <3 x double> %cast, <3 x double> %cast21)
  %cast25 = call <3 x double> @"set@VI"(i64 1)
  %return26 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %return15, <3 x double> %cast, <3 x double> %cast25)
  %return31 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return17, <3 x double> %cast25, <3 x double> %return15)
  %return34 = call <3 x double> @"neg@VV"(<3 x double> %return17)
  %return37 = call <16 x double> @"maketransform@4IIVVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %return34, <3 x double> %cast25, <3 x double> %return15)
  %return40 = call i64 @"neg@II"(i64 1)
  %cast41 = sitofp i64 %return40 to double
  %return42 = call <3 x double> @"set@VFFF"(double 1.000000e+00, double %cast41, double 1.000000e+00)
  %return43 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %cast, <3 x double> %return42)
  %return45 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.3.load, i64 0)
  %return47 = call double @"getcomp@FUI"(<2 x double> %SENSOR2.fca.3.load, i64 1)
  %output49 = call double @"div@FF"(double %return45, double 2.000000e+00)
  %return50 = call double @"neg@FF"(double %output49)
  %output52 = call double @"div@FF"(double %return47, double 2.000000e+00)
  %return53 = call <3 x double> @"set@VFFF"(double %return50, double %output52, double 0.000000e+00)
  %return58 = call <3 x double> @"set@VFFF"(double %output49, double %output52, double 0.000000e+00)
  %return63 = call double @"neg@FF"(double %output52)
  %return64 = call <3 x double> @"set@VFFF"(double %output49, double %return63, double 0.000000e+00)
  %return71 = call <3 x double> @"set@VFFF"(double %return50, double %return63, double 0.000000e+00)
  %return76 = call <3 x double>* @"array@[V:VVVV"(<3 x double> %return53, <3 x double> %return58, <3 x double> %return64, <3 x double> %return71)
  br label %cond

cond:                                             ; preds = %body, %__llvm_entry
  %_points_tm.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @7, i64 0, i64 0), %__llvm_entry ], [ %output89, %body ]
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output92, %body ]
  %return78 = call i64 @"lt@III"(i64 %i.0, i64 4)
  %0 = icmp ne i64 %return78, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  %return81 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %return76, i64 %i.0)
  %output85 = call <16 x double> @"mul@44"(<16 x double> %return22, <16 x double> %return37)
  %output86 = call <3 x double> @"mul@V4"(<3 x double> %return81, <16 x double> %output85)
  %output89 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm.0, <3 x double> %output86)
  %output92 = add i64 %i.0, 1
  br label %cond

end:                                              ; preds = %cond
  br label %cond94

cond94:                                           ; preds = %body95, %end
  %_points_tm.1 = phi <3 x double>* [ %_points_tm.0, %end ], [ %output116, %body95 ]
  %i93.0 = phi i64 [ 0, %end ], [ %output119, %body95 ]
  %return97 = call i64 @"lt@III"(i64 %i93.0, i64 4)
  %1 = icmp ne i64 %return97, 0
  br i1 %1, label %body95, label %end98

body95:                                           ; preds = %cond94
  %return103 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 %i93.0)
  %return107 = call <16 x double> @"invert@44"(<16 x double> %return26)
  %output108 = call <3 x double> @"mul@V4"(<3 x double> %return103, <16 x double> %return107)
  %return110 = call <16 x double> @"invert@44"(<16 x double> %return37)
  %output111 = call <3 x double> @"mul@V4"(<3 x double> %output108, <16 x double> %return110)
  %output113 = call <3 x double> @"add@VV"(<3 x double> %output111, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %return114 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.1, <3 x double> %output113, i64 %i93.0)
  %output116 = extractvalue { <3 x double>, <3 x double>* } %return114, 1
  %output119 = add i64 %i93.0, 1
  br label %cond94

end98:                                            ; preds = %cond94
  %return121 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 0)
  %return123 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 1)
  %output124 = call <3 x double> @"add@VV"(<3 x double> %return121, <3 x double> %return123)
  %return126 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 2)
  %output127 = call <3 x double> @"add@VV"(<3 x double> %output124, <3 x double> %return126)
  %return129 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.1, i64 3)
  %output130 = call <3 x double> @"add@VV"(<3 x double> %output127, <3 x double> %return129)
  %cast131 = call <3 x double> @"set@VF"(double 4.000000e+00)
  %output132 = call <3 x double> @"div@VV"(<3 x double> %output130, <3 x double> %cast131)
  %return136 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %output132, <3 x double> %cast, <3 x double> %cast25)
  br label %cond138

cond138:                                          ; preds = %body139, %end98
  %_points_tm.2 = phi <3 x double>* [ %_points_tm.1, %end98 ], [ %output156, %body139 ]
  %_points_tm_out.0 = phi <3 x double>* [ getelementptr inbounds ([0 x <3 x double>], [0 x <3 x double>]* @7, i64 0, i64 0), %end98 ], [ %output166, %body139 ]
  %i137.0 = phi i64 [ 0, %end98 ], [ %output169, %body139 ]
  %return141 = call i64 @"lt@III"(i64 %i137.0, i64 4)
  %2 = icmp ne i64 %return141, 0
  br i1 %2, label %body139, label %end142

body139:                                          ; preds = %cond138
  %return147 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 %i137.0)
  %return151 = call <16 x double> @"invert@44"(<16 x double> %return136)
  %output152 = call <3 x double> @"mul@V4"(<3 x double> %return147, <16 x double> %return151)
  %return154 = call { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>* %_points_tm.2, <3 x double> %output152, i64 %i137.0)
  %output156 = extractvalue { <3 x double>, <3 x double>* } %return154, 1
  %return160 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %output156, i64 %i137.0)
  %return161 = call <16 x double> @"ident@4"()
  %output162 = call <16 x double> @"mul@4F"(<16 x double> %return161, double 1.000000e+03)
  %output163 = call <3 x double> @"mul@V4"(<3 x double> %return160, <16 x double> %output162)
  %output165 = call <3 x double> @"add@VV"(<3 x double> %output163, <3 x double> <double 0.000000e+00, double 0.000000e+00, double 1.000000e-01>)
  %output166 = call <3 x double>* @"append@[VV"(<3 x double>* %_points_tm_out.0, <3 x double> %output165)
  %output169 = add i64 %i137.0, 1
  br label %cond138

end142:                                           ; preds = %cond138
  %return171 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 0)
  %return172 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return171)
  %return174 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 1)
  %return175 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return174)
  %return177 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 2)
  %return178 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return177)
  %return180 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm.2, i64 3)
  %return181 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return180)
  %return183 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 0)
  %return184 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return183)
  %return186 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 1)
  %return187 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return186)
  %return189 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 2)
  %return190 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return189)
  %return192 = call <3 x double> @"getcomp@V[VI"(<3 x double>* %_points_tm_out.0, i64 3)
  %return193 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return192)
  %return196 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return171)
  %return199 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return174)
  %return202 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return177)
  %return205 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %return180)
  %cast206 = call <3 x double> @"set@VF"(double 5.000000e-02)
  %return215 = call i64* @"array@[I:IIIIIIII"(i64 %return172, i64 %return175, i64 %return178, i64 %return181, i64 %return184, i64 %return187, i64 %return190, i64 %return193)
  %return217 = call i64 @"len@I[I"(i64* %return215)
  br label %cond218

cond218:                                          ; preds = %body219, %end142
  %__impl_foreach_index.0 = phi i64 [ 0, %end142 ], [ %output232, %body219 ]
  %return222 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return217)
  %3 = icmp ne i64 %return222, 0
  br i1 %3, label %body219, label %end223

body219:                                          ; preds = %cond218
  %return227 = call i64 @"getcomp@I[II"(i64* %return215, i64 %__impl_foreach_index.0)
  %return230 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i64 0, i64 0), i64 %return227, <3 x double> %cast206, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i64 0, i64 0))
  %output232 = add i64 %__impl_foreach_index.0, 1
  br label %cond218

end223:                                           ; preds = %cond218
  %return238 = call i64* @"array@[I:IIIII"(i64 %return172, i64 %return175, i64 %return187, i64 %return184, i64 %return172)
  %return239 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0), i64* %return238)
  %return245 = call i64* @"array@[I:IIIII"(i64 %return175, i64 %return178, i64 %return190, i64 %return187, i64 %return175)
  %return246 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0), i64* %return245)
  %return252 = call i64* @"array@[I:IIIII"(i64 %return178, i64 %return181, i64 %return193, i64 %return190, i64 %return178)
  %return253 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0), i64* %return252)
  %return259 = call i64* @"array@[I:IIIII"(i64 %return181, i64 %return172, i64 %return184, i64 %return193, i64 %return181)
  %return260 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i64 0, i64 0), i64* %return259)
  %return263 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return239, <16 x double> %return43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i64 0, i64 0))
  %return266 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return246, <16 x double> %return43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i64 0, i64 0))
  %return269 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return253, <16 x double> %return43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i64 0, i64 0))
  %return272 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return260, <16 x double> %return43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i64 0, i64 0))
  %cast273 = call <3 x double> @"set@VF"(double 5.000000e-01)
  %return277 = call i64 @"or@III"(i64 %SENSOR2.fca.1.load, i64 %SENSOR2.fca.2.load)
  %return278 = call i64 @"and@III"(i64 %SENSOR2.fca.0.load, i64 %return277)
  %4 = icmp ne i64 %return278, 0
  br i1 %4, label %true, label %false

true:                                             ; preds = %end223
  br label %end279

false:                                            ; preds = %end223
  %5 = icmp ne i64 %SENSOR2.fca.0.load, 0
  br i1 %5, label %true281, label %end279

end279:                                           ; preds = %false, %true281, %true
  %color_l.0 = phi <3 x double> [ <double 5.000000e-01, double 0.000000e+00, double 0.000000e+00>, %true ], [ <double 5.000000e-01, double 3.000000e-01, double 0.000000e+00>, %true281 ], [ %cast273, %false ]
  %return287 = call i64* @"array@[I:IIII"(i64 %return196, i64 %return199, i64 %return202, i64 %return205)
  %return290 = call i64 @"len@I[I"(i64* %return287)
  br label %cond291

true281:                                          ; preds = %false
  br label %end279

cond291:                                          ; preds = %body292, %end279
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end279 ], [ %output305, %body292 ]
  %return295 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return290)
  %6 = icmp ne i64 %return295, 0
  br i1 %6, label %body292, label %end296

body292:                                          ; preds = %cond291
  %return300 = call i64 @"getcomp@I[II"(i64* %return287, i64 %__impl_foreach_index_1.0)
  %return303 = call i64 @"setpointattrib@IISIVS"(i64 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @8, i64 0, i64 0), i64 %return300, <3 x double> %color_l.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i64 0, i64 0))
  %output305 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond291

end296:                                           ; preds = %cond291
  %return311 = call i64* @"array@[I:IIIII"(i64 %return196, i64 %return199, i64 %return202, i64 %return205, i64 %return196)
  %return312 = call i64 @"addprim@IIS[I"(i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @13, i64 0, i64 0), i64* %return311)
  %return315 = call i64 @"setprimattrib@IISI4S"(i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i64 0, i64 0), i64 %return312, <16 x double> %return43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i64 0, i64 0))
  %return317 = call <16 x double> @"invert@44"(<16 x double> %return26)
  %output319 = call <16 x double> @"mul@44"(<16 x double> %return317, <16 x double> %return31)
  %return321 = call <16 x double> @"invert@44"(<16 x double> %return136)
  %output322 = call <16 x double> @"mul@44"(<16 x double> %output319, <16 x double> %return321)
  %output324 = call <16 x double> @"mul@44"(<16 x double> %output322, <16 x double> %return43)
  call void @"packedtransform@II4"(i64 0, i64 0, <16 x double> %output324)
  ret void
}

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind
declare <16 x double> @"maketransform@4IIVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"maketransform@4IIVVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"neg@VV"(<3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double>* @"array@[V:VVVV"(<3 x double>, <3 x double>, <3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"getcomp@V[VI"(<3 x double>*, i64) #1

; Function Attrs: nounwind
declare <16 x double> @"mul@44"(<16 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare <3 x double>* @"append@[VV"(<3 x double>*, <3 x double>) #2

; Function Attrs: nounwind readnone
declare <16 x double> @"invert@44"(<16 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare { <3 x double>, <3 x double>* } @"setcomp@V[VVI"(<3 x double>*, <3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"div@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind
declare <16 x double> @"ident@4"() #2

; Function Attrs: nounwind
declare <16 x double> @"mul@4F"(<16 x double>, double) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIIIIII"(i64, i64, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[I"(i64*) #1

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #1

; Function Attrs: nounwind
declare i64 @"setpointattrib@IISIVS"(i64, i8*, i64, <3 x double>, i8*) #2

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIIII"(i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare i64 @"addprim@IIS[I"(i64, i8*, i64*) #2

; Function Attrs: nounwind
declare i64 @"setprimattrib@IISI4S"(i64, i8*, i64, <16 x double>, i8*) #2

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64* @"array@[I:IIII"(i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare void @"packedtransform@II4"(i64, i64, <16 x double>) #2

; Function Attrs: nounwind
define void @TFFAsensor() #2 {
__llvm_entry:
  call void @_TFFAsensor()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAsensor()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"19.0.720"}
!2 = !{!"64"}

;_code_end
