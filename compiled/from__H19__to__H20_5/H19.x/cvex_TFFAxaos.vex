;_name	TFFAxaos
; ModuleID = 'TFFAxaos'
source_filename = "TFFAxaos"

@0 = private constant [10 x i8] c"flamefunc\00"
@1 = private constant [3 x i8] c"VA\00"
@2 = private constant [0 x double] zeroinitializer
@3 = private constant [3 x i8] c"IW\00"
@4 = private constant [0 x i8*] zeroinitializer
@5 = private constant [5 x i8] c"sIDX\00"
@6 = private constant [107 x i8] c"\0AAll iterators are inactive or their Weight set to: 0(Zero)\0AOne iterator's Weight internally set to: 1e-08\00"
@7 = private constant [85 x i8] c"\0AZERO ITERATORS\0APlease, create at least one iterator or Load an IN flame file first.\00"
@8 = private constant [1 x i8] zeroinitializer
@9 = private constant [6 x i8] c"xaos_\00"
@10 = private constant [2 x i8] c":\00"
@11 = private constant [5 x i8] c"XAOS\00"
@12 = private constant [12 x i8] c"\0AIterator: \00"
@13 = private constant [46 x i8] c" -> without a valid \22 xaos: \22 command string.\00"
@14 = private constant [2 x i8] c".\00"
@15 = private constant [2 x i8] c"-\00"
@16 = private constant [40 x i8] c"\0ANegative xaos values inside iterator: \00"
@17 = private constant [62 x i8] c".\0AThis iterator will be reset to a default xaos value of 1's.\00"
@18 = private constant [41 x i8] c"\0ANon digit xaos values inside iterator: \00"
@19 = private constant [2 x i8] c"1\00"
@20 = private constant [3 x i8] c"xm\00"
@XS = external global i64
@IW = external global double*
@XST = external global double*
@21 = private constant [3 x i8] c"XS\00"
@22 = private constant [4 x i8] c"XST\00"

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #0

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #0

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #0

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #0

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #0

; Function Attrs: nounwind readnone
declare double @"log@FF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"and@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #0

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #0

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #0

; Function Attrs: nounwind
declare double @"abs@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #0

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #0

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #0

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #0

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #0

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #1

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #1

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #0

; Function Attrs: alwaysinline nounwind
define private void @"XAOS_transpose_s@[S[SI"(i8*** %XAOS, i8*** %T, i64* %size) #2 {
__llvm_entry:
  br label %cond

cond:                                             ; preds = %end8, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output24, %end8 ]
  %size2 = load i64, i64* %size
  %return = call i64 @"lt@III"(i64 %i.0, i64 %size2)
  %0 = icmp ne i64 %return, 0
  br i1 %0, label %body, label %end

body:                                             ; preds = %cond
  br label %cond3

end:                                              ; preds = %cond
  ret void

cond3:                                            ; preds = %body4, %body
  %j.0 = phi i64 [ 0, %body ], [ %output21, %body4 ]
  %size6 = load i64, i64* %size
  %return7 = call i64 @"lt@III"(i64 %j.0, i64 %size6)
  %1 = icmp ne i64 %return7, 0
  br i1 %1, label %body4, label %end8

body4:                                            ; preds = %cond3
  %output = mul i64 %j.0, %size6
  %output13 = add i64 %output, %i.0
  %T14 = load i8**, i8*** %T
  %XAOS15 = load i8**, i8*** %XAOS
  %return17 = call i8* @"getcomp@S[SI"(i8** %XAOS15, i64 %output13)
  %output18 = call i8** @"append@[SS"(i8** %T14, i8* %return17)
  store i8** %output18, i8*** %T
  %output21 = add i64 %j.0, 1
  br label %cond3

end8:                                             ; preds = %cond3
  %output24 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #1

; Function Attrs: alwaysinline nounwind
define private void @"_TFFAxaos@I[F[F"(i64* %_bound_XS, double** %_bound_IW, double** %_bound_XST) #2 {
__llvm_entry:
  %xaos_tos_t = alloca i8**
  %0 = alloca i8**
  %1 = alloca i64
  %return = call i64 @"chi@IS"(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i64 0, i64 0))
  %return1 = call i64* @"detail@[IIS"(i64 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0))
  %return2 = call double* @"detail@[FIS"(i64 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0))
  %return3 = call i8** @"detail@[SIS"(i64 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i64 0, i64 0))
  %return5 = call i64 @"len@I[F"(double* %return2)
  %return6 = call i64 @"eq@III"(i64 %return5, i64 1)
  %return8 = call double @"getcomp@F[FI"(double* %return2, i64 0)
  %return9 = fcmp oeq double %return8, 1.000000e-08
  %return10 = zext i1 %return9 to i64
  %return11 = call i64 @"and@III"(i64 %return6, i64 %return10)
  %2 = icmp ne i64 %return11, 0
  br i1 %2, label %true, label %end

true:                                             ; preds = %__llvm_entry
  %3 = icmp ne i64 %return, 0
  br i1 %3, label %true13, label %false

end:                                              ; preds = %true13, %false, %__llvm_entry
  %return16 = call i64 @"len@I[S"(i8** %return3)
  store i8** getelementptr inbounds ([0 x i8*], [0 x i8*]* @4, i64 0, i64 0), i8*** %xaos_tos_t, !vex-initializer-store !3
  br label %cond

true13:                                           ; preds = %true
  call void @"warning@S"(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @6, i64 0, i64 0))
  br label %end

false:                                            ; preds = %true
  call void @"warning@S"(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @7, i64 0, i64 0))
  br label %end

cond:                                             ; preds = %end222, %end
  %x_chk.0 = phi i64 [ 0, %end ], [ %x_chk.1, %end222 ]
  %XAOS_TO.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %end ], [ %XAOS_TO.1, %end222 ]
  %xaos_tos.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @4, i64 0, i64 0), %end ], [ %output191, %end222 ]
  %i.0 = phi i64 [ 0, %end ], [ %output251, %end222 ]
  %return19 = call i64 @"lt@III"(i64 %i.0, i64 %return16)
  %4 = icmp ne i64 %return19, 0
  br i1 %4, label %body, label %end20

body:                                             ; preds = %cond
  %return23 = call i8* @"getcomp@S[SI"(i8** %return3, i64 %i.0)
  %return24 = call i8* @"concat@SSS"(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @9, i64 0, i64 0), i8* %return23)
  %return25 = call i8* @"chs@SS"(i8* %return24)
  %return27 = call i8** @"split@[SSS"(i8* %return25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i64 0, i64 0))
  %return29 = call i64 @"len@I[S"(i8** %return27)
  br label %cond30

end20:                                            ; preds = %cond
  %return252 = call i64 @"chi@IS"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @20, i64 0, i64 0))
  %return255 = call i64 @"and@III"(i64 %return252, i64 %x_chk.0)
  %5 = icmp ne i64 %return255, 0
  br i1 %5, label %true256, label %end257

cond30:                                           ; preds = %body31, %body
  %varxaos_strip.0 = phi i8** [ getelementptr inbounds ([0 x i8*], [0 x i8*]* @4, i64 0, i64 0), %body ], [ %output, %body31 ]
  %__impl_foreach_index.0 = phi i64 [ 0, %body ], [ %output44, %body31 ]
  %return34 = call i64 @"lt@III"(i64 %__impl_foreach_index.0, i64 %return29)
  %6 = icmp ne i64 %return34, 0
  br i1 %6, label %body31, label %end35

body31:                                           ; preds = %cond30
  %return39 = call i8* @"getcomp@S[SI"(i8** %return27, i64 %__impl_foreach_index.0)
  %return42 = call i8* @"strip@SS"(i8* %return39)
  %output = call i8** @"append@[SS"(i8** %varxaos_strip.0, i8* %return42)
  %output44 = add i64 %__impl_foreach_index.0, 1
  br label %cond30

end35:                                            ; preds = %cond30
  %return46 = call i8* @"getcomp@S[SI"(i8** %varxaos_strip.0, i64 0)
  %return47 = call i8* @"toupper@SS"(i8* %return46)
  %return48 = call i64 @"eq@ISS"(i8* %return47, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @11, i64 0, i64 0))
  %7 = icmp ne i64 %return48, 0
  %. = select i1 %7, i64 1, i64 0
  %return53 = call i64 @"not@II"(i64 %.)
  %return55 = call i64 @"and@III"(i64 %return53, i64 %return)
  %8 = icmp ne i64 %return55, 0
  br i1 %8, label %true56, label %end57

true56:                                           ; preds = %end35
  %return61 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i64 0, i64 0), i8* %return23, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @13, i64 0, i64 0))
  call void @"warning@S"(i8* %return61)
  br label %end57

end57:                                            ; preds = %true56, %end35
  %return63 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return64 = call i64 @"len@I[S"(i8** %return63)
  br label %cond65

cond65:                                           ; preds = %end90, %end57
  %__impl_foreach_index_1.0 = phi i64 [ 0, %end57 ], [ %output113, %end90 ]
  %return69 = call i64 @"lt@III"(i64 %__impl_foreach_index_1.0, i64 %return64)
  %9 = icmp ne i64 %return69, 0
  br i1 %9, label %body66, label %end70

body66:                                           ; preds = %cond65
  %return73 = call i8** @"slice@[S[SIIIIII"(i8** %varxaos_strip.0, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return75 = call i8* @"getcomp@S[SI"(i8** %return73, i64 %__impl_foreach_index_1.0)
  %return77 = call i8** @"split@[SSS"(i8* %return75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i64 0, i64 0))
  %return78 = call i8* @"join@S[SS"(i8** %return77, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @8, i64 0, i64 0))
  %return81 = call i8* @"getcomp@SSI"(i8* %return78, i64 0)
  %return82 = call i64 @"eq@ISS"(i8* %return81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i64 0, i64 0))
  %return83 = call i64 @"and@III"(i64 1, i64 %return82)
  %return85 = call i8* @"slice@SSIIIIII"(i8* %return78, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0)
  %return86 = call i64 @"isdigit@IS"(i8* %return85)
  %return87 = call i64 @"and@III"(i64 %return83, i64 %return86)
  %10 = icmp ne i64 %return87, 0
  br i1 %10, label %true88, label %false89

end70:                                            ; preds = %true106, %true92, %cond65
  %isDigit.0 = phi i64 [ 0, %true92 ], [ 0, %true106 ], [ 1, %cond65 ]
  %return116 = call i64 @"and@III"(i64 %., i64 %isDigit.0)
  %11 = icmp ne i64 %return116, 0
  br i1 %11, label %true117, label %false118

true88:                                           ; preds = %body66
  br i1 %7, label %true92, label %end90

false89:                                          ; preds = %body66
  %return100 = call i64 @"isdigit@IS"(i8* %return78)
  %return101 = call i64 @"not@II"(i64 %return100)
  %return102 = call i64 @"and@III"(i64 1, i64 %return101)
  %12 = icmp ne i64 %return102, 0
  %or.cond = and i1 %12, %7
  br i1 %or.cond, label %true106, label %end90

end90:                                            ; preds = %false89, %true88
  %output113 = add i64 %__impl_foreach_index_1.0, 1
  br label %cond65

true92:                                           ; preds = %true88
  %return97 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @16, i64 0, i64 0), i8* %return23, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @17, i64 0, i64 0))
  call void @"warning@S"(i8* %return97)
  br label %end70

true106:                                          ; preds = %false89
  %return111 = call i8* @"concat@SSS:S"(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @18, i64 0, i64 0), i8* %return23, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @17, i64 0, i64 0))
  call void @"warning@S"(i8* %return111)
  br label %end70

true117:                                          ; preds = %end70
  %return121 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.0, i64 0)
  %output123 = extractvalue { i8*, i8** } %return121, 1
  %return125 = call i64 @"len@I[S"(i8** %output123)
  br label %cond126

false118:                                         ; preds = %end70
  %output151 = call double* @"resize@[FIF"(double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), i64 %return, double 1.000000e+00)
  %output153 = call i8** @"resize@[SI"(i8** %varxaos_strip.0, i64 0)
  %output156 = call i8** @"resize@[SIS"(i8** %output153, i64 %return, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i64 0, i64 0))
  br label %end119

end119:                                           ; preds = %false118, %end131
  %xaos.0 = phi double* [ %output145, %end131 ], [ %output151, %false118 ]
  %varxaos_strip.1 = phi i8** [ %output148, %end131 ], [ %output156, %false118 ]
  br label %cond157

cond126:                                          ; preds = %body127, %true117
  %xaos.1 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %true117 ], [ %output140, %body127 ]
  %__impl_foreach_index_2.0 = phi i64 [ 0, %true117 ], [ %output142, %body127 ]
  %return130 = call i64 @"lt@III"(i64 %__impl_foreach_index_2.0, i64 %return125)
  %13 = icmp ne i64 %return130, 0
  br i1 %13, label %body127, label %end131

body127:                                          ; preds = %cond126
  %return135 = call i8* @"getcomp@S[SI"(i8** %output123, i64 %__impl_foreach_index_2.0)
  %return138 = call double @"atof@FS"(i8* %return135)
  %return139 = call double @"max@FFF"(double %return138, double 0.000000e+00)
  %output140 = call double* @"append@[FF"(double* %xaos.1, double %return139)
  %output142 = add i64 %__impl_foreach_index_2.0, 1
  br label %cond126

end131:                                           ; preds = %cond126
  %output145 = call double* @"resize@[FIF"(double* %xaos.1, i64 %return, double 1.000000e+00)
  %output148 = call i8** @"resize@[SIS"(i8** %output123, i64 %return, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i64 0, i64 0))
  br label %end119

cond157:                                          ; preds = %end169, %end119
  %xaos.2 = phi double* [ %xaos.0, %end119 ], [ %xaos.3, %end169 ]
  %varxaos_strip.2 = phi i8** [ %varxaos_strip.1, %end119 ], [ %varxaos_strip.3, %end169 ]
  %trace.0 = phi i64 [ 0, %end119 ], [ %trace.1, %end169 ]
  %j.0 = phi i64 [ 0, %end119 ], [ %output188, %end169 ]
  %return161 = call i64 @"lt@III"(i64 %j.0, i64 %return)
  %14 = icmp ne i64 %return161, 0
  br i1 %14, label %body158, label %end162

body158:                                          ; preds = %cond157
  %return166 = call i64 @"getcomp@I[II"(i64* %return1, i64 %j.0)
  %return167 = call i64 @"not@II"(i64 %return166)
  %15 = icmp ne i64 %return167, 0
  br i1 %15, label %true168, label %end169

end162:                                           ; preds = %cond157
  %output191 = call i8** @"append@[S[S"(i8** %xaos_tos.0, i8** %varxaos_strip.2)
  br label %cond192

true168:                                          ; preds = %body158
  %output173 = sub i64 %j.0, %trace.0
  %return174 = call { double, double* } @"pop@F[FI"(double* %xaos.2, i64 %output173)
  %output176 = extractvalue { double, double* } %return174, 1
  %return181 = call { i8*, i8** } @"pop@S[SI"(i8** %varxaos_strip.2, i64 %output173)
  %output183 = extractvalue { i8*, i8** } %return181, 1
  %output186 = add i64 %trace.0, 1
  br label %end169

end169:                                           ; preds = %true168, %body158
  %xaos.3 = phi double* [ %output176, %true168 ], [ %xaos.2, %body158 ]
  %varxaos_strip.3 = phi i8** [ %output183, %true168 ], [ %varxaos_strip.2, %body158 ]
  %trace.1 = phi i64 [ %output186, %true168 ], [ %trace.0, %body158 ]
  %output188 = add i64 %j.0, 1
  br label %cond157

cond192:                                          ; preds = %body193, %end162
  %IW_xaos.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %end162 ], [ %output211, %body193 ]
  %k.0 = phi i64 [ 0, %end162 ], [ %output213, %body193 ]
  %return196 = call i64 @"lt@III"(i64 %k.0, i64 %return16)
  %16 = icmp ne i64 %return196, 0
  br i1 %16, label %body193, label %end197

body193:                                          ; preds = %cond192
  %return202 = call double @"getcomp@F[FI"(double* %return2, i64 %i.0)
  %return205 = call double @"getcomp@F[FI"(double* %return2, i64 %k.0)
  %output206 = fmul double %return202, %return205
  %return209 = call double @"getcomp@F[FI"(double* %xaos.2, i64 %k.0)
  %output210 = fmul double %output206, %return209
  %output211 = call double* @"append@[FF"(double* %IW_xaos.0, double %output210)
  %output213 = add i64 %k.0, 1
  br label %cond192

end197:                                           ; preds = %cond192
  %return215 = call double @"min@F[F"(double* %xaos.2)
  %return217 = call double @"max@F[F"(double* %xaos.2)
  %return218 = fcmp oeq double %return215, %return217
  br i1 %return218, label %true220, label %false221

true220:                                          ; preds = %end197
  %return224 = call double @"min@F[F"(double* %xaos.2)
  %return225 = fcmp oeq double %return224, 1.000000e+00
  br i1 %return225, label %true227, label %false228

false221:                                         ; preds = %end197
  %return244 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output245 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return244)
  %return247 = call i64 @"not@II"(i64 %x_chk.0)
  %17 = icmp ne i64 %return247, 0
  br i1 %17, label %true248, label %end222

end222:                                           ; preds = %false221, %true248, %false228, %true240, %true227
  %x_chk.1 = phi i64 [ %x_chk.0, %true227 ], [ 1, %true240 ], [ %x_chk.0, %false228 ], [ 1, %true248 ], [ %x_chk.0, %false221 ]
  %XAOS_TO.1 = phi double* [ %output233, %true227 ], [ %output237, %true240 ], [ %output237, %false228 ], [ %output245, %true248 ], [ %output245, %false221 ]
  %output251 = add i64 %i.0, 1
  br label %cond

true227:                                          ; preds = %true220
  %return232 = call double* @"create_cdf@[F[F"(double* %return2)
  %output233 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return232)
  br label %end222

false228:                                         ; preds = %true220
  %return236 = call double* @"create_cdf@[F[F"(double* %IW_xaos.0)
  %output237 = call double* @"append@[F[F"(double* %XAOS_TO.0, double* %return236)
  %return239 = call i64 @"not@II"(i64 %x_chk.0)
  %18 = icmp ne i64 %return239, 0
  br i1 %18, label %true240, label %end222

true240:                                          ; preds = %false228
  br label %end222

true248:                                          ; preds = %false221
  br label %end222

true256:                                          ; preds = %end20
  store i8** %xaos_tos.0, i8*** %0
  store i64 %return16, i64* %1
  call void @"XAOS_transpose_s@[S[SI"(i8*** %0, i8*** %xaos_tos_t, i64* %1)
  %output261 = call double* @"resize@[FI"(double* %XAOS_TO.0, i64 0)
  br label %cond263

end257:                                           ; preds = %cond263, %end20
  %XAOS_TO.2 = phi double* [ %XAOS_TO.3, %cond263 ], [ %XAOS_TO.0, %end20 ]
  %return330 = call double* @"create_cdf@[F[F"(double* %return2)
  store double* %return330, double** %_bound_IW
  %19 = icmp ne i64 %x_chk.0, 0
  br i1 %19, label %true332, label %end333

cond263:                                          ; preds = %end306, %true256
  %XAOS_TO.3 = phi double* [ %output261, %true256 ], [ %output326, %end306 ]
  %i262.0 = phi i64 [ 0, %true256 ], [ %output328, %end306 ]
  %return267 = call i64 @"lt@III"(i64 %i262.0, i64 %return16)
  %20 = icmp ne i64 %return267, 0
  br i1 %20, label %body264, label %end257

body264:                                          ; preds = %cond263
  %output272 = mul i64 %i262.0, %return16
  %xaos_tos_t273 = load i8**, i8*** %xaos_tos_t
  %output277 = add i64 %output272, %return16
  %return278 = call i8** @"slice@[S[SIIIIII"(i8** %xaos_tos_t273, i64 1, i64 %output272, i64 1, i64 %output277, i64 0, i64 0)
  %return281 = call i64 @"len@I[S"(i8** %return278)
  br label %cond282

cond282:                                          ; preds = %body283, %body264
  %xaos_froms.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %body264 ], [ %output296, %body283 ]
  %__impl_foreach_index_3.0 = phi i64 [ 0, %body264 ], [ %output298, %body283 ]
  %return286 = call i64 @"lt@III"(i64 %__impl_foreach_index_3.0, i64 %return281)
  %21 = icmp ne i64 %return286, 0
  br i1 %21, label %body283, label %end287

body283:                                          ; preds = %cond282
  %return291 = call i8* @"getcomp@S[SI"(i8** %return278, i64 %__impl_foreach_index_3.0)
  %return294 = call double @"atof@FS"(i8* %return291)
  %return295 = call double @"max@FFF"(double %return294, double 0.000000e+00)
  %output296 = call double* @"append@[FF"(double* %xaos_froms.0, double %return295)
  %output298 = add i64 %__impl_foreach_index_3.0, 1
  br label %cond282

end287:                                           ; preds = %cond282
  br label %cond301

cond301:                                          ; preds = %body302, %end287
  %IW_xaos299.0 = phi double* [ getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), %end287 ], [ %output320, %body302 ]
  %k300.0 = phi i64 [ 0, %end287 ], [ %output322, %body302 ]
  %return305 = call i64 @"lt@III"(i64 %k300.0, i64 %return16)
  %22 = icmp ne i64 %return305, 0
  br i1 %22, label %body302, label %end306

body302:                                          ; preds = %cond301
  %return311 = call double @"getcomp@F[FI"(double* %return2, i64 %i262.0)
  %return314 = call double @"getcomp@F[FI"(double* %return2, i64 %k300.0)
  %output315 = fmul double %return311, %return314
  %return318 = call double @"getcomp@F[FI"(double* %xaos_froms.0, i64 %k300.0)
  %output319 = fmul double %output315, %return318
  %output320 = call double* @"append@[FF"(double* %IW_xaos299.0, double %output319)
  %output322 = add i64 %k300.0, 1
  br label %cond301

end306:                                           ; preds = %cond301
  %return325 = call double* @"create_cdf@[F[F"(double* %IW_xaos299.0)
  %output326 = call double* @"append@[F[F"(double* %XAOS_TO.3, double* %return325)
  %output328 = add i64 %i262.0, 1
  br label %cond263

true332:                                          ; preds = %end257
  store i64 1, i64* %_bound_XS
  store double* %XAOS_TO.2, double** %_bound_XST
  br label %end333

end333:                                           ; preds = %true332, %end257
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @"chi@IS"(i8*) #0

; Function Attrs: nounwind
declare i64* @"detail@[IIS"(i64, i8*) #1

; Function Attrs: nounwind
declare double* @"detail@[FIS"(i64, i8*) #1

; Function Attrs: nounwind
declare i8** @"detail@[SIS"(i64, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[F"(double*) #0

; Function Attrs: nounwind readnone
declare i64 @"eq@III"(i64, i64) #0

; Function Attrs: nounwind readnone
declare double @"getcomp@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare void @"warning@S"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"len@I[S"(i8**) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"chs@SS"(i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"split@[SSS"(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @"strip@SS"(i8*) #1

; Function Attrs: nounwind
declare i8* @"toupper@SS"(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @"eq@ISS"(i8*, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"concat@SSS:S"(i8*, i8*, i8*) #0

; Function Attrs: nounwind
declare i8** @"slice@[S[SIIIIII"(i8**, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"join@S[SS"(i8**, i8*) #0

; Function Attrs: nounwind readnone
declare i8* @"getcomp@SSI"(i8*, i64) #0

; Function Attrs: nounwind readnone
declare i8* @"slice@SSIIIIII"(i8*, i64, i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind
declare i64 @"isdigit@IS"(i8*) #1

; Function Attrs: nounwind readnone
declare { i8*, i8** } @"pop@S[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare double @"atof@FS"(i8*) #0

; Function Attrs: nounwind readnone
declare double @"max@FFF"(double, double) #0

; Function Attrs: nounwind
declare double* @"append@[FF"(double*, double) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FIF"(double*, i64, double) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SIS"(i8**, i64, i8*) #0

; Function Attrs: nounwind readnone
declare i8** @"resize@[SI"(i8**, i64) #0

; Function Attrs: nounwind readnone
declare i64 @"getcomp@I[II"(i64*, i64) #0

; Function Attrs: nounwind readnone
declare { double, double* } @"pop@F[FI"(double*, i64) #0

; Function Attrs: nounwind
declare i8** @"append@[S[S"(i8**, i8**) #1

; Function Attrs: nounwind
declare double @"min@F[F"(double*) #1

; Function Attrs: nounwind
declare double @"max@F[F"(double*) #1

; Function Attrs: nounwind readnone
declare double* @"create_cdf@[F[F"(double*) #0

; Function Attrs: nounwind
declare double* @"append@[F[F"(double*, double*) #1

; Function Attrs: nounwind readnone
declare double* @"resize@[FI"(double*, i64) #0

; Function Attrs: nounwind
define void @TFFAxaos(i64 %XS, double* %IW, double* %XST) #1 {
__llvm_entry:
  %"<IW>" = alloca double*
  %"<XST>" = alloca double*
  %"<XS>" = alloca i64
  store i64 %XS, i64* %"<XS>"
  store double* %IW, double** %"<IW>"
  store double* %XST, double** %"<XST>"
  call void @"_TFFAxaos@I[F[F"(i64* %"<XS>", double** %"<IW>", double** %"<XST>")
  %evalue = load i64, i64* %"<XS>"
  %gvalue = call i64 @"_export@ISI"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @21, i64 0, i64 0), i64 %evalue) #3
  %evalue1 = load double*, double** %"<IW>"
  %gvalue2 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i64 0, i64 0), double* %evalue1) #3
  %evalue3 = load double*, double** %"<XST>"
  %gvalue4 = call double* @"_export@[FS[F"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @22, i64 0, i64 0), double* %evalue3) #3
  store i64 %gvalue, i64* @XS
  store double* %gvalue2, double** @IW
  store double* %gvalue4, double** @XST
  ret void
}

declare i64 @"_export@ISI"(i8*, i64)

declare double* @"_export@[FS[F"(i8*, double*)

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAxaos(i64 0, double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0), double* getelementptr inbounds ([0 x double], [0 x double]* @2, i64 0, i64 0))
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { alwaysinline nounwind }
attributes #3 = { nounwind readonly }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.5.487"}
!2 = !{!"64"}
!3 = !{!""}

;_code_end
