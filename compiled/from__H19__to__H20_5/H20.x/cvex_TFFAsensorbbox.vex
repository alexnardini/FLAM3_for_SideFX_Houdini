;_name	TFFAsensorbbox
; ModuleID = 'TFFAsensorbbox'
source_filename = "TFFAsensorbbox"

%sensor_info = type { i64, double, <2 x double> }

@0 = private constant [19 x i8] c"flam3h_sensor_zoom\00"
@1 = private constant [18 x i8] c"flam3h_sensor_res\00"

; Function Attrs: alwaysinline nounwind
define private double @"res_weight@FFFF"(double* %x, double* %y, double* %w) #0 {
__llvm_entry:
  %x1 = load double, double* %x
  %y2 = load double, double* %y
  %w3 = load double, double* %w
  %output4 = fmul double %y2, %w3
  %output5 = fadd double %x1, %output4
  %output7 = fmul double 1.080000e+03, %w3
  %output8 = fadd double 1.920000e+03, %output7
  %output9 = call double @"div@FF"(double %output5, double %output8)
  ret double %output9
}

; Function Attrs: nounwind readnone
declare double @"div@FF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FUI"(<2 x double>, i64) #1

; Function Attrs: nounwind readnone
declare double @"atan2@FFF"(double, double) #1

; Function Attrs: nounwind readnone
declare double @"sqrt@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"neg@FF"(double) #1

; Function Attrs: nounwind
declare double @"clamp@FFFF"(double, double, double) #2

; Function Attrs: nounwind readnone
declare double @"tan@FF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"neg@II"(i64) #1

; Function Attrs: nounwind readnone
declare double @"floor@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"sin@FF"(double) #1

; Function Attrs: nounwind readnone
declare double @"cos@FF"(double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"setcomp@VFI"(<3 x double>, double, i64) #1

; Function Attrs: nounwind readnone
declare double @"getcomp@FVI"(<3 x double>, i64) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"setcomp@UFI"(<2 x double>, double, i64) #1

; Function Attrs: nounwind
declare double @"abs@FF"(double) #2

; Function Attrs: nounwind
declare double @"nrandom@F:S"(i8*) #2

; Function Attrs: nounwind readnone
declare <2 x double> @"set@UFF"(double, double) #1

; Function Attrs: nounwind readnone
declare i64 @"isfinite@IF"(double) #1

; Function Attrs: nounwind readnone
declare i64 @"not@II"(i64) #1

; Function Attrs: nounwind readnone
declare i64 @"or@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @"isnan@IF"(double) #1

; Function Attrs: nounwind
declare double @"length@FU"(<2 x double>) #2

; Function Attrs: nounwind
declare <4 x double> @"set@2UU"(<2 x double>, <2 x double>) #2

; Function Attrs: nounwind readnone
declare <4 x double> @"rotate@2F"(<4 x double>, double) #1

; Function Attrs: nounwind readnone
declare i64 @"lt@III"(i64, i64) #1

; Function Attrs: nounwind readnone
declare i8* @"getcomp@S[SI"(i8**, i64) #1

; Function Attrs: nounwind
declare i8** @"append@[SS"(i8**, i8*) #2

; Function Attrs: alwaysinline nounwind
define private void @"sensor_info_DATA@Z11sensor_infoM3N4modeIN4zoomFN3resU"(%sensor_info* %this) #0 {
__llvm_entry:
  %return = call double @"chf@FS"(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @0, i64 0, i64 0))
  %tmp = load %sensor_info, %sensor_info* %this
  %0 = insertvalue %sensor_info %tmp, double %return, 1
  %return1 = call <2 x double> @"chu@US"(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i64 0, i64 0))
  %1 = insertvalue %sensor_info %0, <2 x double> %return1, 2
  store %sensor_info %1, %sensor_info* %this
  ret void
}

; Function Attrs: nounwind readnone
declare double @"chf@FS"(i8*) #1

; Function Attrs: nounwind readnone
declare <2 x double> @"chu@US"(i8*) #1

; Function Attrs: alwaysinline nounwind
define private %sensor_info @"sensor_info@Z11sensor_infoM3N4modeIN4zoomFN3resUIFU"(i64* %mode, double* %zoom, <2 x double>* %res) #0 {
__llvm_entry:
  %mode1 = load i64, i64* %mode
  %0 = insertvalue %sensor_info undef, i64 %mode1, 0
  %zoom2 = load double, double* %zoom
  %1 = insertvalue %sensor_info %0, double %zoom2, 1
  %res4 = load <2 x double>, <2 x double>* %res
  %2 = insertvalue %sensor_info %1, <2 x double> %res4, 2
  ret %sensor_info %2
}

; Function Attrs: alwaysinline nounwind
define private %sensor_info @"sensor_info@Z11sensor_infoM3N4modeIN4zoomFN3resU"() #0 {
__llvm_entry:
  %0 = alloca double
  %1 = alloca <2 x double>
  %2 = alloca i64
  store i64 0, i64* %2
  store double 0.000000e+00, double* %0
  store <2 x double> zeroinitializer, <2 x double>* %1
  %sensor_info = call %sensor_info @"sensor_info@Z11sensor_infoM3N4modeIN4zoomFN3resUIFU"(i64* %2, double* %0, <2 x double>* %1)
  ret %sensor_info %sensor_info
}

; Function Attrs: alwaysinline nounwind
define private void @_TFFAsensorbbox() #0 {
__llvm_entry:
  %INFO = alloca %sensor_info
  %0 = alloca double
  %1 = alloca double
  %2 = alloca double
  %INFO1 = call %sensor_info @"sensor_info@Z11sensor_infoM3N4modeIN4zoomFN3resU"()
  %INFO1.fca.0.extract = extractvalue %sensor_info %INFO1, 0
  %INFO1.fca.0.gep = getelementptr inbounds %sensor_info, %sensor_info* %INFO, i32 0, i32 0
  store i64 %INFO1.fca.0.extract, i64* %INFO1.fca.0.gep
  %INFO1.fca.1.extract = extractvalue %sensor_info %INFO1, 1
  %INFO1.fca.1.gep = getelementptr inbounds %sensor_info, %sensor_info* %INFO, i32 0, i32 1
  store double %INFO1.fca.1.extract, double* %INFO1.fca.1.gep
  %INFO1.fca.2.extract = extractvalue %sensor_info %INFO1, 2
  %INFO1.fca.2.gep = getelementptr inbounds %sensor_info, %sensor_info* %INFO, i32 0, i32 2
  store <2 x double> %INFO1.fca.2.extract, <2 x double>* %INFO1.fca.2.gep
  call void @"sensor_info_DATA@Z11sensor_infoM3N4modeIN4zoomFN3resU"(%sensor_info* %INFO)
  %INFO2.fca.0.load = load i64, i64* %INFO1.fca.0.gep
  %INFO2.fca.0.insert = insertvalue %sensor_info undef, i64 %INFO2.fca.0.load, 0
  %INFO2.fca.1.load = load double, double* %INFO1.fca.1.gep
  %INFO2.fca.1.insert = insertvalue %sensor_info %INFO2.fca.0.insert, double %INFO2.fca.1.load, 1
  %INFO2.fca.2.load = load <2 x double>, <2 x double>* %INFO1.fca.2.gep
  %return = call double @"getcomp@FUI"(<2 x double> %INFO2.fca.2.load, i64 0)
  %return6 = call double @"getcomp@FUI"(<2 x double> %INFO2.fca.2.load, i64 1)
  br label %cond

cond:                                             ; preds = %end11, %__llvm_entry
  %i.0 = phi i64 [ 0, %__llvm_entry ], [ %output56, %end11 ]
  %return8 = call i64 @"lt@III"(i64 %i.0, i64 2)
  %3 = icmp ne i64 %return8, 0
  br i1 %3, label %body, label %end

body:                                             ; preds = %cond
  %return10 = call i64 @"not@II"(i64 %i.0)
  %4 = icmp ne i64 %return10, 0
  br i1 %4, label %true, label %false

end:                                              ; preds = %cond
  ret void

true:                                             ; preds = %body
  %output = call double @"div@FF"(double %return, double 2.000000e+00)
  %output14 = call double @"div@FF"(double %return6, double 2.000000e+00)
  %return15 = call double @"neg@FF"(double %output14)
  %return16 = call <3 x double> @"set@VFFF"(double %output, double %return15, double 0.000000e+00)
  br label %end11

false:                                            ; preds = %body
  %output18 = call double @"div@FF"(double %return, double 2.000000e+00)
  %return19 = call double @"neg@FF"(double %output18)
  %output21 = call double @"div@FF"(double %return6, double 2.000000e+00)
  %return22 = call <3 x double> @"set@VFFF"(double %return19, double %output21, double 0.000000e+00)
  br label %end11

end11:                                            ; preds = %false, %true
  %pos_info.0 = phi <3 x double> [ %return16, %true ], [ %return22, %false ]
  %myp_offset.0 = phi <3 x double> [ <double 0.000000e+00, double -8.000000e-01, double 1.000000e+00>, %true ], [ <double 0.000000e+00, double 3.500000e-01, double 1.000000e-01>, %false ]
  %sw.0 = phi double [ 6.000000e+01, %true ], [ 5.000000e+02, %false ]
  %cast = call <3 x double> @"set@VI"(i64 0)
  %output25 = call <3 x double> @"add@VV"(<3 x double> %cast, <3 x double> %myp_offset.0)
  store double %return, double* %0
  store double %return6, double* %1
  store double 5.000000e-01, double* %2
  %res_weight = call double @"res_weight@FFFF"(double* %0, double* %1, double* %2)
  %output30 = call double @"div@FF"(double 1.000000e+00, double %INFO2.fca.1.load)
  %output33 = fmul double %output30, %sw.0
  %cast37 = call <3 x double> @"set@VF"(double %output30)
  %return38 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %cast, <3 x double> %cast37)
  %output43 = fmul double %output33, %res_weight
  %cast44 = call <3 x double> @"set@VF"(double %output43)
  %return45 = call <16 x double> @"maketransform@4IIVVV"(i64 0, i64 0, <3 x double> %cast, <3 x double> %cast, <3 x double> %cast44)
  %output48 = call <3 x double> @"mul@V4"(<3 x double> %output25, <16 x double> %return45)
  %output51 = call <3 x double> @"mul@V4"(<3 x double> %pos_info.0, <16 x double> %return38)
  %output52 = call <3 x double> @"add@VV"(<3 x double> %output48, <3 x double> %output51)
  %return54 = call i64 @"addpoint@IIV"(i64 0, <3 x double> %output52)
  %output56 = add i64 %i.0, 1
  br label %cond
}

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VFFF"(double, double, double) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VI"(i64) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"add@VV"(<3 x double>, <3 x double>) #1

; Function Attrs: nounwind readnone
declare <3 x double> @"set@VF"(double) #1

; Function Attrs: nounwind
declare <16 x double> @"maketransform@4IIVVV"(i64, i64, <3 x double>, <3 x double>, <3 x double>) #2

; Function Attrs: nounwind
declare <3 x double> @"mul@V4"(<3 x double>, <16 x double>) #2

; Function Attrs: nounwind
declare i64 @"addpoint@IIV"(i64, <3 x double>) #2

; Function Attrs: nounwind
define void @TFFAsensorbbox() #2 {
__llvm_entry:
  call void @_TFFAsensorbbox()
  ret void
}

define void @__shader_default_arguments() {
__llvm_entry:
  call void @TFFAsensorbbox()
  ret void
}

attributes #0 = { alwaysinline nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!context = !{!0}
!version = !{!1}
!precision = !{!2}

!0 = !{!"cvex"}
!1 = !{!"20.0.625"}
!2 = !{!"64"}

;_code_end
