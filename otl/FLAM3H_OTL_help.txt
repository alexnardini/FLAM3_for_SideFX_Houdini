#icon: opdef:.?iconBlackSVG.svg
#type: node
#context: sop
#namespace: FLAM3
#internal: FLAM3H
#version: 1.0.0

"""The Fractal Flame Algorithm: FLAM3 ( vcc compiler: SideFX Houdini v19.0.622 )"""

[Scott Draves|Wp:Scott_Draves]
[The Fractal Flame Algorithm|Wp:Fractal_Flame]
[Electric Sheep|Wp:Electric_Sheep]
[IFS|Wp:Iterated_function_system]
[Fractal Art|Wp:Fractal_art]
[Apophysis|Wp:Apophysis_(software)]

_*Implementation of the original "The Fractal Flame Algorithm": [FLAM3|https://github.com/scottdraves/flam3]*_

_*Github repository I used a lot as reference: "Fractorium" from Matt Feemster: [FRACTORIUM|https://bitbucket.org/mfeemster/fractorium/src/master/]*_


_*[FLAM3 for Houdini - github|https://github.com/alexnardini/FLAM3_for_SideFX_Houdini]*_

_*[FLAM3 for Houdini - website|https://www.alexnardini.net/flame-home/]*_

_*[FLAM3 for Houdini - instagram|https://www.instagram.com/alexnardini/]*_

    
[Image:opdef:.?FLAM3H_DOC_intro_banner.jpg]
_A huge special thanks and lots of gratitude toward my family who kept up with me for so long while I was inside the fractal Flame bubble!_

@parameters

NOTE:
    FLAM3 for Houdini set all *`@pscale`* to a value of *`0.001`* for convenience.
    Use the upstream geometry node point size multiplier or a wrangle to adjust it as needed.
    When importing FLAM3 into Stage/Solaris remember that *`@pscale`* will become *`@widths`*.

:box:
    #display: inverted teal

    *GLOBAL*

density:
    #id: GLOBAL
    Number of points to use. For high qualty fractals start from 20M up to 500M and more depending the type of Fractal Flame you are ending up with. As a general rule, the more the better.
    * Must find the sweet spot between quality and processing time.
    
iterations:
    #id: GLOBAL
    Number of iterations to use.
    - You dnt need many iterations to get some good Fractal Flames going, between 10 and 24 is usually more than you need while keeping execution speed acceptable.
    - If you increase an iterator weight, use xaos to build containers or use some kind of variations you will require higher number to resolve and show you the proper result.
    
    Almost all of the fractal flame showcased inside FLAM3 for Houdini website/instagram account
    use a maximun of 64 iterations with a few exceptions reaching 96 and in rare cases 128/256.

    
    
~~~
:box:
    #display: inverted teal

    *SYS:* _System options._

    
FF:
    #id: SYS
    Enable Final Flame variation's transform.
        
TAG:
    #id: SYS
    Enable vieport TAG infos.
    * This shoud always be On as it is useful to review the Flame fractal being worked on. The iterator weight is displayed also per each iterator.
         
TAG size:
    #id: SYS
    Set different viewport TAG sizes.
    
                
RIP:
    #id: SYS
    Remove Invalid Points. *INF*, *NAN*, *Zero Opacity* and *out of bounds* points.
    * It can happen that some points shoot to infinity after being transformed by the algorithm.
    Set this ON when rendering ( especially for a sequence ) to fix black/failed frames if you encounter any.
    
loaddef:
    #id: SYS
    [Largeicon:opdef:.?iconDefPresetSVG.svg]
    
    Load/reset to default Sierpinsky Triangle preset.
    
IN Reload:
    #id: SYS
    [Largeicon:opdef:.?iconWhiteSVG.svg]
    
    Click to reload the selected IN preset if any.
    This has been added to quickly updated a preset you are loading inside the IN Tab while editing it inside Fractorium for example, 
    always saving the Flame over the same flame file you are loading in. 
    Just quickly click this icon to update it in Houdini without the hustle to go inside the IN Tab, click the F reload icon and back to where you were.



~~~
:box:
    #display: inverted teal

    *FLAME:* _Flame variations/iterators._

iterators:
    #id: FLAME
    Number of iterators to use.
    * This is equivalent to the number of triangle handles you have inside popular fractal flame editors out there.
    
~~~

note:
    #id: FLAME
    A name for this iterator.
    
    NOTE:
        The text you'll enter here, will be saved with the flame file and will show up
        as the iterator's name inside Apophysis and Fractorium as well.
    
copy/paste:
    #id: FLAME
    [Largeicon:opdef:.?iconBlackStarSVG.svg]
    
    ((LMB)) to mark this iterator for being copied. 
    
    - ((CTRL)) + ((LMB)) to PASTE the copied values into another iterator. It will copy everything, parametric variation's parameters included but not XAOS.
    - ((SHIFT)) + ((LMB)) will unmark this iterator for being copied.
    
    It will work also between different FLAM3 nodes.
    
    Once you copy an iterator you can have access to the arrow icon menu next to the *F* icon.
    From this menu you will be able to paste specific sections from the copied iterator, xaos incuded.


:box:
    #display: rounded white

    *iterator:#*
    
A:
    #id: FLAME
    Enable/Disable this iterator.
    
    TIP:
        If an iterator is disabled, it wont be included when saving the flame out into a Flame file.
        In case you still want to include the inactive iterator into the file, set its Weight to Zero instead.
    
W:
    #id: FLAME
    The iterator weight. Define the probability this iterator is choosen during the chaos game.
    The higher an iterator weight is compared to the others and the more iterations you may need to properly resolve the Fractal Flame's shapes you are working on..
    
xaos:
    #id: FLAME
    
    NOTE:
        *When using XAOS, you are allowed to use up to 20 iterators max.*
        Using more than 20 iterators will disable the algorithm.
        
        This is a workaround to make XAOS work due to a Houdini bug: *Bug ID# 124486*, *SideFX Support Ticket SESI #128304*
    
    [Image:opdef:.?xaosSVG.svg]
    _The above image shows 5 iterators with one variation each and how they are connected to each others through an hipotetical xaos setting._
        

    
    The default mode is *xaos TO*. You can change it to use *xaos FROM* mode instead in the preferences tab.
    
    _*xaos TO* and *xaos FROM* are at their core each other reflection. This mean they are the same data but one is the transpose of the other._
    
    _A matrix transpose is a matrix flipped along its diagonal. Think of it as looking at the same matrix from 2 opposite point of views._
    
    *Looking from an iterator point of view*:
    - When in *xaos_TO mode*, you will think like: *to* wich iterator am I allowed to send points I just executed?
    - When in *xaos_FROM mode*, you will think like: *from* wich iterator am I allowed to receive points before I execute them myself?
    - _Note that the same concept apply also for the iterator itself, this mean the question will be: can I execute a point after I already executed it myself? ( like the iterator with the Curl variation in the above image. )_
    
    *How to set xaos in FLAM3 for Houdini:*
    - To set XAOS for a flame with 4 iterators, use the *xaos* keyword followed by each iterator weights values separated by a colon: *xaos:1:2:3:4* ( *xaos* keyword can be uppercase too if you prefer. )
    - If no set or when using a short descriptive note, FLAM3 will assume all XAOS values are 1.0, the equivalent of: *xaos:1:1:1:1*
    - If you set only iterator 1 and iterator 2, FLAM3 will always fill in the rest with a value of 1.0. *xaos:0:0* will be interpreted as *xaos:0:0:1:1*
    - When turning iterators OFF and ON, FLAM3 will internally remove and reformat XAOS values to account for missing iterator so you wont need to remove values from the command string, *unless you delete an iterator in witch case you will require to modify the "XAOS:" string*.
    
    TIP:
        #display: orange
    
        XAOS is OFF by default and FLAM3 will activate it automatically
        only when needed. (ex: when one of its weights is set to a value different than the others, ex: *xaos:3:3:3:2.9* ).
        
    NOTE:
        When saving out Flame files, XAOS FROM mode will internally be converted into XAOS TO on save and reloaded as XAOS TO.
    
:box:
    #display: rounded white

    *F#: shader*

location:
    #id: FLAME
    The color location in the ramp *{0:1}*.
    
speed:
    #id: FLAME
    Speed of color blending between iterations. Values above ZERO attract the selected color while values below ZERO will repel it.
    
opacity:
    #id: FLAME
    The opacity of the current transform. Opacity 0 means it will be entirely transparent, and opacity 1, entirely opaque. It can be used also to fine tune your fractal, making parts of it more or less prominent in addition to the iterator's weight.
    
:box:
    #display: rounded white

    *F#: variation*
     
pre_blur:
    #id: FLAME
    *Enable pre_blur*. Pre_blur variation in this implementaion is hard coded inside the chaos game to be as fast as it can possibly be.
    It will always be the FIRST pre variation the algorithm will run.
    
    TIP:
        When authoring your flame in Fractorium or Apophysis, if you are planning to load them inside FLAM3 for Houdini
        *always use pre_blur instead of pre_gaussian_blur variation*. They are eesentially the same variation
        with the difference that in FLAM3 for Houdini pre_blur will be mapped and executed directly.
    
pre:
    #id: FLAME
    Enable PRE Variations for the selected iterator.
    
var:
    #id: FLAME
    List of variations to choose from.
    While PRE and POST variations act as an assignment, variations are cumulative.
        
    - Variation's name that end with an asterisk(*) are dependent while if they end with 3 dots(...) are parametric. When a parametric variation is selected, its parameters will populate the *VARS* Tab.
    - Each iterators allow up to 8 variations ( pre-blur var, 2 PRE vars, 4 VARS plus 1 POST var) to be used.
    
    NOTE:
        When using parametric variations, their parameters in the VAR Tab will be shared between all of them. This mean if you use 4 Mobius and 1 post Mobius, they will all share the same *`re:abcd`* and *`im:abcd`* parameters.
    
    TIP:
        #display: orange
    
        A good way to try out the variations, is to laydown a fresh FLAM3 node
        and while using the default Siepinsky triangle activate the Final Flame transform (*FF*)
        and change variations there to see the result. ( remember to play a bit with the AFFINE coefficents to check the results )    

post:
    #id: FLAME
    Enable POST Variation for the selected iterator.
    For speed purpose only one parametric is allowed at the moment.
        
w:
    #id: FLAME
    The weight of the selected variation. ZERO will be inactive, 1 will be 100%.
    Can be set higher than 1 and negative too.
    * If more than one variation is active, remember that as a general rule it is suggested ( not mandatory ) to have the sum of all weights equal to 1.
    
    TIP:
        #display: orange
        
        It is better to set a variation weight to ZERO instead of keeping it at a very low values if their contribution isnt noticable to reduce the cost of the computation. At ZERO the variation will be completely ignored.
    
post:
    #id: FLAME
    Enable post affine.

:box:
    #display: rounded white

    *F#: affine*
    
        
post:
    #id: FLAME
    Enable post affine.
    
pre affine:
    #id: FLAME
    Affine coefficients for the current iterator ( xform ).

    Each iterator( xform ) has an affine transform that is always applied on every iteration.
    This is known as the pre affine becasue it is applied before the variations.
    
    
    - With *X*._`xy`_ and *Y*._`xy`_ you will apply rotation and scale/shear while with *O*._`xy`_ you will apply translation/offset.
    - They compose a 2x3 matrix ( *X*._`xy`_, *Y*._`xy`_, *O*._`xy`_ ).
    - The rotation parameter will take the values of *X*._`xy`_, *Y*._`xy`_, *O*._`xy`_ and rotate them ( *O*._`xy`_ being the pivot).
    
    There are two ways you can use the affine:
    - One is using *X*._`xy`_, *Y*._`xy`_, *O*._`xy`_ for everything ( translation, rotation and scale/shear ) 
    - The other is to use the rotation parameter and use *X*._`x`_ and *Y*._`y`_ for scale, *X*._`y`_ and *Y*._`x`_ for share and *O*._`xy`_ for translation.
    
    NOTE:
        The resulting affine coefficients after the rotation parameter is applied are not updated in the UI but passed directly internally to the algorithm.
        
      
post affine:
    #id: FLAME
    Post affine coefficients for the current variations. Those are applied after the variations.
    * See above affine description for more informations.

VARS Tab:
    #id: FLAME
    If a parametric variation is selected, its parameters will populate this Tab.
    
    

    
~~~
:box:
    #display: inverted teal

    *FF:* _Final Flame transform._
    
    NOTE:
        This finalxform ( FF ) do not posses any color's parameters in this implementation for speed purpose.
        
        When saving a flame out from Fractorium/Apophysis with a finalxform remember to set the Final xform color to:
        - Color -> 0.0
        - Color Speed -> 0.0 ( _this is the most important_ )
        - Direct Color -> 1.0
        
        This way you wont mix in a color to the flame that FLAM3 for Houdini wont be able to match.

note:
    #id: FF
    A name for this FF iterator.
    
    NOTE:
        The text you'll enter here, will be saved with the flame file and will show up
        as the finalxform iterator's name inside Apophysis and Fractorium as well.
    
copy/paste:
    #id: FF
    [Largeicon:opdef:.?iconBlackStarSVG.svg]
    
    ((LMB)) to mark this FF for being copied. 
    
    - ((CTRL)) + ((LMB)) on another FLAM3 node to PASTE the copied FF values. It will copy everything, parametric variation's parameters included.
    - ((SHIFT)) + ((LMB)) will unmark the FF for being copied.
    
    It will only work between different FLAM3 nodes.
    
    Once you copy the FF, on another FLAM3 node you can have access to the arrow icon menu next to the *F* icon.
    From this menu you will be able to paste specific sections from the marked FF.

    
:box:
    #display: rounded white

    *Final Flame transform*
    
FF Pre variation:
    #id: FF
    PRE variation to be used. This is applyed before the variations. It is the very first transformation when used.
    * PRE variation act the same way as the Final Flame variations does. It take the combined result of everything you do inside FLAME Tab and transform it using a selected variation.
    * When using parametric variations, its parameters will populate the *PP VARS* Tab.
    
    
FF variations:
    #id: FF
    List of variations to choose from. It take the combined result of everything you do inside FLAME Tab, FF PRE variation, and transform it using those variations.
    While PRE and POST variations act as an assignment, variations are cumulative.
        
    * Variation's name that end with an asterisk(*) are dependent while if they end with 3 dots(...) are parametric. When a parametric variation is selected, its parameters will populate the *VARS* Tab.
    * Final Flame allow up to 3 variations. When using parametric variations, their parameters in the VAR Tab will be shared between all of them. This mean if you use 3 Mobius, they will all share the same *`re:abcd`* and *`im:abcd`* parameters.
    
FF Post variations:
    #id: FF
    POST variations to be used. This is applyed after the variations. It is the very last transformation.
    * POST variation act the same way as the Final Flame variations does. It take the combined result of everything you do inside FLAME Tab plus everything you do inside FF Tab and transform it one more time using a selected variation.
    * When using parametric variations, its parameters will populate the *PP VARS* Tab.

    
w:
    #id: FF
    The weight of the selected variation. ZERO will be inactive, 1 will be 100%.
    Can be set higher than 1 and negative too.
    
    TIP:
        #display: orange
        Its better to set a variation weight to ZERO instead of keeping it at a very low values if their contribution isnt noticable to reduce the cost of the computation. At ZERO the variation will be completely ignored.
    
:box:
    #display: rounded white

    *FF: affine*
        
post:
    #id: FF
    Enable post affine.
    
pre affine:
    #id: FF
    Affine coefficients for the current FF iterator ( FF - finalxform ).

    Each iterator( xform ) has an affine transform that is always applied on every iteration.
    This is known as the pre affine becasue it is applied before the variations.
    
    
    - With *X*._`xy`_ and *Y*._`xy`_ you will apply rotation and scale/shear while with *O*._`xy`_ you will apply translation/offset.
    - They compose a 2x3 matrix ( *X*._`xy`_, *Y*._`xy`_, *O*._`xy`_ ).
    - The rotation parameter will take the values of *X*._`xy`_, *Y*._`xy`_, *O*._`xy`_ and rotate them ( *O*._`xy`_ being the pivot).
    
    There are two ways you can use the affine:
    - One is using *X*._`xy`_, *Y*._`xy`_, *O*._`xy`_ for everything ( translation, rotation and scale/shear ) 
    - The other is to use the rotation parameter and use *X*._`x`_ and *Y*._`y`_ for scale, *X*._`y`_ and *Y*._`x`_ for share and *O*._`xy`_ for translation.
    
    NOTE:
        The resulting affine coefficients after the rotation parameter is applied are not updated in the UI but passed directly internally to the algorithm.
        
post affine:
    #id: FF
    Post affine coefficients for the current variations. Those are applied after the variations.
    * See above affine description for more informations.
        
VARS Tab:
    #id: FF
    If a parametric variation is selected, its parameters will populate this Tab.
    
PP VARS Tab:
    #id: FF
    If a FF_PRE or FF_POST parametric variation is selected, its parameters will populate this Tab.
    

    
    
~~~
:box:
    #display: inverted teal

    *CP:* _Flame fractal color palette._
    
HSV:
    #id: PALETTE
    Hue/Saturation/Value of the palette's colors.
    
palette:
    #id: PALETTE
    the actual color palette.
    
Palette name ( preset ):
    #id: PALETTE
    Write a name to give to the selected Palette when saving it out.
    If no name is provided, an automated name composed of today's date and current time will be used instead.
    
Force reload preset:
    #id: PALETTE
    [Largeicon:opdef:.?iconBlackSVG.svg]
    
    Click this icon to force reload the currently selected palette preset.
    
JSON file:
    #id: PALETTE
    Load an already created json palette lib file or select the name of a new one to create.
    
    TIP:
        Once you are happy with a palette library you built, you can rename the file to start with: "*F3H_LOCK*"
        to prevent any further modifications to it. for example if you have a lib file call: "*my_rainbows_colors.json*"
        you can rename it to: "*F3H_LOCK_my_rainbows_colors.json*" to keep it safe.
        
        _Not as elegant as using chmod in python but it's simple, effective and it has a visual msg ( the filename itself )._
        
        _And the advantage is also of acting as locked only within FLAM3 for Houdini_
        _so that if you'd like to manually edit and change some preset names yoursef, you can._
    
Save Palette:
    #id: PALETTE
    [Largeicon:opdef:.?iconWhiteStarSVG.svg]
    
    ((LMB)) to save the current Palette into the selected OUT file.
    
    - If the selected file do not exist, it will be created.
    - If the selected file exist and already contain some Palette in it, it will append the current one.
    - ((CTRL)) + ((LMB)) to erase the content of the file and overwrite it with only the current Palette.
    - ((SHIFT)) + ((LMB)) will open the file explorer to the file location.

    _If the selected file is not a valid Palette JSON file type, nothing will happen._
    
    TIP:
        *Once you click save*:
        
        - If you selected a location and a filename without extension, it will automatically add the _*.json*_ extension to it.
        - If you do not provide a file name at all, it will generate one for you based out of today's date and current time assuming you have a valid location selected.
        - If nothing is selected (ex: JSON file empty or invalid ), nothing will happen.
        
    NOTE:
        - When saving out a palette file, it will try to downsample the usual 256 color count standard.
        - However, when saving out flames files, it will always sample the palette as a 256 colors palette standard.
    
LIB contents ( presets ):
    #id: PALETTE
    When you load a json palette file,
    Use this menu to display all the palette included in the loaded file and select one to load.
    

    
~~~
:box:
    #display: inverted teal

    *MB:* _Flame fractal moton blur._

on:
    #id: MB
    Enable motion blur.
    
    NOTE:
        When saving Flames out using the OUT tab, motion blur settings are not saved with it
        but will use whatever Motion Blur settings are present in the host application you will load the saved flame file in.
    
    TIP:
        #display: orange
        
        If you animate any of the available parameters using expresions,
        remember to always use *`@Time`* and not *`$F`* so the tool will be able to interpolate through time properly.

fps:
    #id: MB
    desired Frames per second.
    
samples:
    #id: MB
    Motion blur samples.
    
shutter offset:
    #id: MB
    Shutter time.
    
viz mb:
    #id: MB
    Visualize Motion Blur using color. ( Set viewport background to black for better viewing )
    
    NOTE:
        Remember to turn this OFF when rendering so to not overimpose a darker color.
        

            
~~~
:box:
    #display: inverted teal

    *IN: Load *.flame file created with Apophysis, Fractorium and other.

IN file ( *.flame type ):
    #id: IN
    Load *.flame files authored with Apophysis, Fractorium and other flam3 compatile aplications.
    
    Only restrictions are:
    
    - The flames contained in the file must use the same variations included inside FLAM3 for Houdini. 
    - A maximum of 4 VARS plus PRE_BLUR plus 2 PRE and 1 POST variations for each iterator are allowed. 
    ( for a total of 8 vars per iterator ). 
    - For FF ( FinalXForm ) you have 1 PRE, 2 VARS plus 2 POST available.
    
Reload:
    #id: IN
    [Largeicon:opdef:.?iconWhiteSVG.svg]
    
    ((LMB)) to reload the selected preset.
    This is useful when you are working with for example Fractorium
    while importing the same flame file also in FLAM3 for houdini.
    - You can edit the flame in Fractorium, save it and click this to reload and see the changes in Houdini.
    
Presets:
    #id: IN
    Every *.flame file can contain multiple flames.
    This presets will populate with as many entries as the number of flames included in the file you are loading.
    Each entry will show the name of each flame.
    
Iterations on Load (int):
    #id: IN
    Set a number of iterations to use every time you load a flame from a *.flame file.
    This will override the internally default value of 64 iterations.
    
    TIP:
        When choosing a preset name for your fractal flame, you can bake into it the iteration number you want it to use once you load it back into FLAM3 for Houdini.
        For example if you name a flame preset: "*My_Awesome_GrandJulia*" it will be loaded with a default 64 iterations.
        But if you append the iteration number after a double colons to the preset name like so: "*My_Awesome_GrandJulia::16*" it will override all settings
        and load it using 16 as iteration numbers.
        
        So make some tests before you save it out and pick the optimal iteration number to bake into its preset name.
        
        Optionally, you can manually edit the generated XML/Flame file and modify the *flame-> "name"* key yourself after the fact if you desire so.
    
Use iterations on Load:
    #id: IN
    When loading *.flame files, FLAM3 for Houdini will load them in
    and automatically set the iterations number to 64, witch seem a fair amount to resolve most of them fairly well.
    However, sometime you just want to be quick and you can override the iterations set on load using this value.
    
Use Fractorium Color Speed ( coloring ):
    #id: IN
    Use the XML/Flame file "color_speed" key values instead of the standard "symmetry" value.
    In some cases you get different coloring, just try it out if you dnt get the colors you expect.
    
    *It's OFF by default as it should not be used most of the time.*
    
infos:
    #id: IN
    Display information about the Flame preset loaded.
    
Render infos:
    #id: IN
    Display informations about the render properties of the loaded Flame preset.
    Those properties are specific of the renderer of the application the loaded Flame has been created/saved from.
    Some of the properties are specific to Fractorium application, witch has been my reference for this.
    
Copy/Paste render properties:
    #id: IN
    [Largeicon:opdef:.?iconBlackStarSVG.svg]
    
    Clicking this icon will copy those render properties and paste them inside the OUT tab render properties.
    This way you can be sure your Flame will match the visual quality of the flame you just loaded once you save it out and load it back in Fractorium for example.
        
        
~~~
:box:
    #display: inverted teal

    *OUT:* _Save *.flame file type to be loaded back inside Apophysis, Fractorium and others._
    
    NOTE:
        FLAM3 for Houdini allow you to save out your flames in the standard *.flame file format 
        so that you can load them back inside any other applications like Fractorium, Apophysis and others.
        
        The original flame file format impose you some rules you must obey.
        
        The most important to remember is not to use multiple instances of the same variation in any of the available sections ( PRE, VAR, POST ).
        
        For example you can not use 2 Mobius variations inside the PRE section of an iterator, neither inside the VAR section.
        You can however use 1 Mobius inside the PRE vars, 1 Mobius inside the VAR and 1 Mobius inside the POST.
        
        FLAM3 for Houdini, by design will allow you to be more flexible with your flame construction choises and allow
        you to bend this rule enabling the use of the same variation multiple time within the same section ( _Chaotica style_ ), but you wont be able to save out
        the result in the standard flame file format. *Save the hip file instead in those cases*.
    
OUT file ( *.flame type ):
    #id: OUT
    Select a file name to save your flame into.
    If the selected file do not exist, it will be created.
    
    TIP:
        Once you are happy with a FLAM3 library you built, you can rename the file to start with: "*F3H_LOCK*"
        to prevent any further modifications to it. for example if you have a lib file call: "*my_grandJulia.flame*"
        you can rename it to: "*F3H_LOCK_my_grandJulia.flame*" to keep it safe.
        
        _Not as elegant as using chmod in python but it's simple, effective and it has a visual msg ( the filename itself )._
        
        _And the advantage is also of acting as locked only within FLAM3 for Houdini_
        _so that if you'd like to manually edit and change some preset names yoursef, you can._
    
Save Flame:
    #id: OUT
    [Largeicon:opdef:.?iconWhiteStarSVG.svg]
    
    ((LMB)) to save the current flame into the selected OUT file.
    
    - If the selected file do not exist, it will be created.
    - If the selected file exist and already contain some Flames in it, it will append the current one.
    - ((CTRL)) + ((LMB)) to erase the content of the file and overwrite it with only the current Flame.
    - ((SHIFT)) + ((LMB)) will open the file explorer to the file location.
    
    _If the selected file is not a valid Flame file type, nothing will happen._
    
    
    TIP:
        *Once you click save*:
        
        - If you selected a location and a filename without extension, it will automatically add the _*.flame*_ extension to it.
        - If you do not provide a file name at all, it will generate one for you based out of today's date and current time assuming you have a valid location selected.
        - If nothing is selected (ex: OUT file empty or invalid ), nothing will happen.
        
    NOTE:
        When saving Flames out, remember you are not allowed to use the same variation more than once in any of the availabe var's sections. 
        While this is doable within the tool, it is not compatible with FLAM3 file format as it require that a variation is used only once per type ( PRE, VAR, POST )
        or you wont be able to save out the same result.
        Save the hip file instead.
        
        This is true also for applications like Apophysis and Fractorium as they obey the same rule.
        
OUT file contents ( info ):
    #id: OUT
    This menu is only for information purpose.
    It will show the Flames contained in the selected output file if any are presents.
    Once you append a new Flame in it, this menu will update too.
    It will always be set to the last Flame's name you saved.
    
Flame name ( preset ):
    #id: OUT
    Write a name to give to the selected flame when saving it out.
    If no name is provided, an automated name composed of today's date and current time will be used instead.
    
    TIP:
        When choosing a preset name for your fractal flame, you can bake into it the iteration number you want it to use once you load it back into FLAM3 for Houdini.
        For example if you name a flame preset: "*My_Awesome_GrandJulia*" it will be loaded with a default 64 iterations.
        But if you append the iteration number after a double colons to the preset name like so: "*My_Awesome_GrandJulia::16*" it will override all settings
        and load it using 16 as iteration numbers.
        
        So make some tests before you save it out and pick the optimal iteration number to bake into its preset name.
        
        Optionally, you can manually edit the generated XML/Flame file and modify the *flame-> "name"* key yourself after the fact if you desire so.
    
Use palette HSV (cc):
    #id: OUT
    If checked, the Flame's palette will be saved out using the HSV ramp so to carry out any color correction the user may have done if he like so.

    
OUT render properties:
    #id: OUT
    Those properties are specific of the renderer of the application you will load the saved Flame into.
    Some of the properties are specific to Fractorium application, witch has been my reference for this.
    
Edit render properties:
    #id: OUT
    Allow the editing of the render properties for the host application you will load the saved flame file into.
    Fractorium being the suggested one followed by Apophysis 7x.
    
Reset render properties:
    #id: OUT
    [Largeicon:opdef:.?iconBlackSVG.svg]
    
    Click this icon to reset all OUT render properties.
    
Resolution:
    #id: OUT
    The image resolution.
    
Center:
    #id: OUT
    Where the flame is centered, think of this as the look at camera point.
    
Rotate:
    #id: OUT
    The camera rotation.
    
Scale:
    #id: OUT
    The camera zoom.
    
Quality:
    #id: OUT
    The render quality. Think of this as how many points are used inside Fractorium to render the final image. The more the more cleaner the final image.
    
Brightness:
    #id: OUT
    The flame render setting: brightness.
    
Gamma:
    #id: OUT
    The flame render setting: gamma.
    
Highlight power:
    #id: OUT
    The flame render setting: highlight power.
    
Logscale K2:
    #id: OUT
    The flame render setting: Logscale K2.
    
Vibrancy:
    #id: OUT
    The flame render setting: vibrancy.
        
    
~~~
:box:
    #display: inverted teal

    *PREFS:* _Tool's preferences._

display prefs:
    #id: prefs
    Display preferences.
    
:box:
    #display: round white
    
    *general*
    
flam3 compatibility (f3c):
    #id: prefs
    The behavior of the *cos, cosh, cot, coth, csc, csch, sec, sech, sin, sinh, tan* and *tanh* variations are different in flam3/Apophysis versus Chaotica.
    * *Checked*: use the Apophysis behavior.
    * *Unchecked*: use the Chaotica behavior.
    
    TIP:
        In Fractorium you can go to "Options" to find the exact same checkbox.
    
:box:
    #display: rounded white

    *cvex precision*
    
precision modes:
    #id: prefs
    Switch between the default Single Precision ( 32bit ) or Double Precision (64bit).
    
    NOTE:
        64bit Double Precision will be much much slower, in the order of *6x slower*.
        Always use 32bit unless you notice truly major artifacts.
    
        
:box:
    #display: rounded white

    *xaos*
    
xaos modes:
    #id: prefs
    Select to use xaos in either *xaos TO* or *xaos FROM* mode.
    
    - Switching between xaos modes will convert and re-set the xaos: string values inside each iterator so that you can see how the new weights changed to accomodate the new mode.
    
    NOTE:
        When saving out Flame files, XAOS FROM mode will internally be converted into XAOS TO on save and reloaded as XAOS TO.
    
:box:
    #display: rounded white

    *camera*
            
handle:
    #id: prefs
    Display viewport camera handle to help frame/center your fractal Flame.
    On the left you will have the FLAM3 node name and on the right the selected camera name.
    
    :box:
        #display: inverted red
    
        *TURN THIS OFF WHEN RENDERING.*
    
camera cull:
    #id: prefs
    Enable culling based on camera view.
    
cam:
    #id: prefs
    Pick a camera to use for either the handle or the culling.
    
amount:
    #id: prefs
    Culling amount.
    
dark:
    #id: prefs
    Set viewports color scheme to dark if not already.
    It will remember the color scheme of all the viewports and revert back to it if unchecked.
    If a viewport is already using a dark color scheme, checking this option will do nothing.
    
type:
    #id: prefs
    Set viewports particle display mode to either Points or Pixels.
    
size:
    #id: prefs
    When viewport particle display is set to Points, this will control their size in the viewport.
        
== Variations infos ==

_Dependant variation's affine coefficients:_

*_WAVES_*: `O[0] X[1]   Y[1] O[1]`

*_POPCORN_*: `O[0]  O[1]`

*_RINGS_*: `O[0]`

*_FAN_*: `O[0]`

_A list of all variations included with FLAM3 v1.0.0 for SideFX Houdini:_

- _Note that all the followings, are also available as PRE_ _and/or POST_ _variations._

*
arch, 
auger, 
bent, 
bent2, 
bipolar, 
blade, 
blob, 
blur, 
boarders, 
bubble, 
butterfly, 
bwraps, 
cell, 
conic, 
cos, 
cosh, 
cosine, 
cot, 
coth, 
cpow, 
crop, 
cross, 
csc, 
csch, 
curl, 
curve, 
cylinder, 
diamond, 
disc, 
disc2, 
edisc, 
elliptic, 
escher, 
ex, 
exp, 
exponential, 
eyefish, 
fan, 
fan2, 
fisheye, 
flower, 
flux, 
foci, 
gaussian_blur, 
glynnia, 
handkerchief, 
heart, 
hemisphere, 
horseshoe, 
hyperbolic, 
julia, 
juliaN, 
juliascope, 
lazysusan, 
linear, 
log, 
loonie, 
mobius, 
modulus, 
ngon, 
noise, 
oscope, 
parabola, 
pdj, 
perspective, 
pie, 
point_symmetry, 
polar, 
polar2, 
polynomial, 
popcorn, 
popcorn2, 
power, 
pre blur, 
radialblur, 
rays, 
rectangles, 
rings, 
rings2, 
scry, 
sec, 
secant2, 
sech, 
separation, 
sin, 
sinh, 
sinusoidal, 
spherical, 
spiral, 
split, 
splits, 
square, 
stripes, 
supershape, 
swirl, 
tan, 
tangent, 
tanh, 
twintrian, 
unpolar, 
waves, 
waves2, 
wedge, 
wedgejulia, 
wedgesph, 
whorl
*
